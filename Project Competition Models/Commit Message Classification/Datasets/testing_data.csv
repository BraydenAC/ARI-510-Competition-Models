id,Commit Hash,Subject,Message,Old Contents,New Contents
2100,56e2d4e35ce6d71616ce1e614f4862059d1be8dc,fix: test,"fix: test
","FROM richarvey/nginx-php-fpm:php7

EXPOSE 80
",
2,7d1c256bace9d91ef27d799414de72bdf0d0dbcf,Update gitlab-workhorse to 8.14.0,"Update gitlab-workhorse to 8.14.0

Signed-off-by: solidnerd <387783e228a6a981e052f1b545e5a6a45a21cc6e@mietz.io>
","FROM ubuntu:bionic-20190807

ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=12.4.0

ENV GITLAB_VERSION=${VERSION} \
    RUBY_VERSION=2.6 \
    GOLANG_VERSION=1.12.9 \
    GITLAB_SHELL_VERSION=10.2.0 \
    GITLAB_WORKHORSE_VERSION=8.10.0 \
    GITLAB_PAGES_VERSION=1.9.0 \
    GITALY_SERVER_VERSION=1.65.1 \
    GITLAB_USER=""git"" \
    GITLAB_HOME=""/home/git"" \
    GITLAB_LOG_DIR=""/var/log/gitlab"" \
    GITLAB_CACHE_DIR=""/etc/docker-gitlab"" \
    RAILS_ENV=production \
    NODE_ENV=production

ENV GITLAB_INSTALL_DIR=""${GITLAB_HOME}/gitlab"" \
    GITLAB_SHELL_INSTALL_DIR=""${GITLAB_HOME}/gitlab-shell"" \
    GITLAB_GITALY_INSTALL_DIR=""${GITLAB_HOME}/gitaly"" \
    GITLAB_DATA_DIR=""${GITLAB_HOME}/data"" \
    GITLAB_BUILD_DIR=""${GITLAB_CACHE_DIR}/build"" \
    GITLAB_RUNTIME_DIR=""${GITLAB_CACHE_DIR}/runtime""

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
      wget ca-certificates apt-transport-https gnupg2
RUN set -ex && \
 apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E1DD270288B4E6030699E45FA1715D88E1DF1F24 \
 && echo ""deb http://ppa.launchpad.net/git-core/ppa/ubuntu bionic main"" >> /etc/apt/sources.list \
 && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 80F70E11F0F0D5F10CB20E62F5DA5F09C3173AA6 \
 && echo ""deb http://ppa.launchpad.net/brightbox/ruby-ng/ubuntu bionic main"" >> /etc/apt/sources.list \
 && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 8B3981E7A6852F782CC4951600A6F0A3C300EE8C \
 && echo ""deb http://ppa.launchpad.net/nginx/stable/ubuntu bionic main"" >> /etc/apt/sources.list \
 && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 && echo 'deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main' > /etc/apt/sources.list.d/pgdg.list \
 && wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \
 && echo 'deb https://deb.nodesource.com/node_12.x bionic main' > /etc/apt/sources.list.d/nodesource.list \
 && wget --quiet -O - https://dl.yarnpkg.com/debian/pubkey.gpg  | apt-key add - \
 && echo 'deb https://dl.yarnpkg.com/debian/ stable main' > /etc/apt/sources.list.d/yarn.list \
 && set -ex \
 && apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
      sudo supervisor logrotate locales curl \
      nginx openssh-server postgresql-client-10 postgresql-contrib-10 redis-tools \
      git-core ruby${RUBY_VERSION} python3 python3-docutils nodejs yarn gettext-base graphicsmagick \
      libpq5 zlib1g libyaml-0-2 libssl1.0.0 \
      libgdbm5 libreadline7 libncurses5 libffi6 \
      libxml2 libxslt1.1 libcurl4 libicu60 libre2-dev tzdata unzip libimage-exiftool-perl \
 && update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \
 && locale-gen en_US.UTF-8 \
 && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales \
 && gem install --no-document bundler -v 1.17.3 \
 && rm -rf /var/lib/apt/lists/*

COPY assets/build/ ${GITLAB_BUILD_DIR}/
RUN bash ${GITLAB_BUILD_DIR}/install.sh

COPY assets/runtime/ ${GITLAB_RUNTIME_DIR}/
COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

LABEL \
    maintainer=""sameer@damagehead.com"" \
    org.label-schema.schema-version=""1.0"" \
    org.label-schema.build-date=${BUILD_DATE} \
    org.label-schema.name=gitlab \
    org.label-schema.vendor=damagehead \
    org.label-schema.url=""https://github.com/sameersbn/docker-gitlab"" \
    org.label-schema.vcs-url=""https://github.com/sameersbn/docker-gitlab.git"" \
    org.label-schema.vcs-ref=${VCS_REF} \
    com.damagehead.gitlab.license=MIT

EXPOSE 22/tcp 80/tcp 443/tcp

VOLUME [""${GITLAB_DATA_DIR}"", ""${GITLAB_LOG_DIR}""]
WORKDIR ${GITLAB_INSTALL_DIR}
ENTRYPOINT [""/sbin/entrypoint.sh""]
CMD [""app:start""]
","FROM ubuntu:bionic-20190807

ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=12.4.0

ENV GITLAB_VERSION=${VERSION} \
    RUBY_VERSION=2.6 \
    GOLANG_VERSION=1.12.9 \
    GITLAB_SHELL_VERSION=10.2.0 \
    GITLAB_WORKHORSE_VERSION=8.14.0 \
    GITLAB_PAGES_VERSION=1.9.0 \
    GITALY_SERVER_VERSION=1.65.1 \
    GITLAB_USER=""git"" \
    GITLAB_HOME=""/home/git"" \
    GITLAB_LOG_DIR=""/var/log/gitlab"" \
    GITLAB_CACHE_DIR=""/etc/docker-gitlab"" \
    RAILS_ENV=production \
    NODE_ENV=production

ENV GITLAB_INSTALL_DIR=""${GITLAB_HOME}/gitlab"" \
    GITLAB_SHELL_INSTALL_DIR=""${GITLAB_HOME}/gitlab-shell"" \
    GITLAB_GITALY_INSTALL_DIR=""${GITLAB_HOME}/gitaly"" \
    GITLAB_DATA_DIR=""${GITLAB_HOME}/data"" \
    GITLAB_BUILD_DIR=""${GITLAB_CACHE_DIR}/build"" \
    GITLAB_RUNTIME_DIR=""${GITLAB_CACHE_DIR}/runtime""

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
      wget ca-certificates apt-transport-https gnupg2
RUN set -ex && \
 apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E1DD270288B4E6030699E45FA1715D88E1DF1F24 \
 && echo ""deb http://ppa.launchpad.net/git-core/ppa/ubuntu bionic main"" >> /etc/apt/sources.list \
 && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 80F70E11F0F0D5F10CB20E62F5DA5F09C3173AA6 \
 && echo ""deb http://ppa.launchpad.net/brightbox/ruby-ng/ubuntu bionic main"" >> /etc/apt/sources.list \
 && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 8B3981E7A6852F782CC4951600A6F0A3C300EE8C \
 && echo ""deb http://ppa.launchpad.net/nginx/stable/ubuntu bionic main"" >> /etc/apt/sources.list \
 && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 && echo 'deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main' > /etc/apt/sources.list.d/pgdg.list \
 && wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \
 && echo 'deb https://deb.nodesource.com/node_12.x bionic main' > /etc/apt/sources.list.d/nodesource.list \
 && wget --quiet -O - https://dl.yarnpkg.com/debian/pubkey.gpg  | apt-key add - \
 && echo 'deb https://dl.yarnpkg.com/debian/ stable main' > /etc/apt/sources.list.d/yarn.list \
 && set -ex \
 && apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
      sudo supervisor logrotate locales curl \
      nginx openssh-server postgresql-client-10 postgresql-contrib-10 redis-tools \
      git-core ruby${RUBY_VERSION} python3 python3-docutils nodejs yarn gettext-base graphicsmagick \
      libpq5 zlib1g libyaml-0-2 libssl1.0.0 \
      libgdbm5 libreadline7 libncurses5 libffi6 \
      libxml2 libxslt1.1 libcurl4 libicu60 libre2-dev tzdata unzip libimage-exiftool-perl \
 && update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \
 && locale-gen en_US.UTF-8 \
 && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales \
 && gem install --no-document bundler -v 1.17.3 \
 && rm -rf /var/lib/apt/lists/*

COPY assets/build/ ${GITLAB_BUILD_DIR}/
RUN bash ${GITLAB_BUILD_DIR}/install.sh

COPY assets/runtime/ ${GITLAB_RUNTIME_DIR}/
COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

LABEL \
    maintainer=""sameer@damagehead.com"" \
    org.label-schema.schema-version=""1.0"" \
    org.label-schema.build-date=${BUILD_DATE} \
    org.label-schema.name=gitlab \
    org.label-schema.vendor=damagehead \
    org.label-schema.url=""https://github.com/sameersbn/docker-gitlab"" \
    org.label-schema.vcs-url=""https://github.com/sameersbn/docker-gitlab.git"" \
    org.label-schema.vcs-ref=${VCS_REF} \
    com.damagehead.gitlab.license=MIT

EXPOSE 22/tcp 80/tcp 443/tcp

VOLUME [""${GITLAB_DATA_DIR}"", ""${GITLAB_LOG_DIR}""]
WORKDIR ${GITLAB_INSTALL_DIR}
ENTRYPOINT [""/sbin/entrypoint.sh""]
CMD [""app:start""]
"
292,534b9839516ba325565ce14130cf4eab5bcda5d3,update node version to 4.4.4,"update node version to 4.4.4

","FROM evild/alpine-base:2.0.0
MAINTAINER Dominique HAAS <contact@dominique-haas.fr>

ARG NODE_VERSION=4.4.3
ENV GPG_KEYS \
  9554F04D7259F04124DE6B476D5A82AC7E37093B \
  94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
  0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
  FD3A5288F042B6850C66B31F09FE44734EB7990E \
  71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
  DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
  B9AE9905FFD7803F25714661B63B535A4C206CA9 \
  C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8


RUN \
    build_pkgs=""git curl make gcc g++ python linux-headers libgcc libstdc++ binutils-gold xz gnupg"" \
    && apk --no-cache add ${build_pkgs}  \
    && for key in $GPG_KEYS; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
    done \
    && curl -SLO https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.xz\
    && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && grep "" node-v$NODE_VERSION.tar.xz\$"" SHASUMS256.txt | sha256sum -c - \
    && tar -xJf ""node-v$NODE_VERSION.tar.xz"" \
    && cd /node-v${NODE_VERSION} \
    && ./configure --prefix=/usr --without-snapshot --fully-static \
    && make -j $(getconf _NPROCESSORS_ONLN) \
    && make install \
    && apk del ${build_pkgs} \
    && rm -rf /etc/ssl /node-v${NODE_VERSION} /usr/include \
    /usr/share/man /tmp/* /var/cache/apk/* /root/.npm /root/.node-gyp \
    /usr/lib/node_modules/npm/man /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html
","FROM evild/alpine-base:2.0.0
MAINTAINER Dominique HAAS <contact@dominique-haas.fr>

ARG NODE_VERSION=4.4.4
ENV GPG_KEYS \
  9554F04D7259F04124DE6B476D5A82AC7E37093B \
  94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
  0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
  FD3A5288F042B6850C66B31F09FE44734EB7990E \
  71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
  DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
  B9AE9905FFD7803F25714661B63B535A4C206CA9 \
  C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8


RUN \
    build_pkgs=""git curl make gcc g++ python linux-headers libgcc libstdc++ binutils-gold xz gnupg"" \
    && apk --no-cache add ${build_pkgs}  \
    && for key in $GPG_KEYS; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
    done \
    && curl -SLO https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.xz\
    && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && grep "" node-v$NODE_VERSION.tar.xz\$"" SHASUMS256.txt | sha256sum -c - \
    && tar -xJf ""node-v$NODE_VERSION.tar.xz"" \
    && cd /node-v${NODE_VERSION} \
    && ./configure --prefix=/usr --without-snapshot --fully-static \
    && make -j $(getconf _NPROCESSORS_ONLN) \
    && make install \
    && apk del ${build_pkgs} \
    && rm -rf /etc/ssl /node-v${NODE_VERSION} /usr/include \
    /usr/share/man /tmp/* /var/cache/apk/* /root/.npm /root/.node-gyp \
    /usr/lib/node_modules/npm/man /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html
"
65,83b1a834e559688d2b3a848c813e94fef3a28581,Bump to 5.6.2,"Bump to 5.6.2
","# NAME: fahchen/elasticsearch-analysis-ik

FROM elasticsearch:5.6.1-alpine

MAINTAINER Phil Chen '06fahchen@gmail.com'

ENV VERSION=5.6.1

ADD https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v${VERSION}/elasticsearch-analysis-ik-$VERSION.zip /tmp/
RUN /usr/share/elasticsearch/bin/elasticsearch-plugin install file:///tmp/elasticsearch-analysis-ik-$VERSION.zip

RUN rm -rf /tm/*
","# NAME: fahchen/elasticsearch-analysis-ik

FROM elasticsearch:5.6.2-alpine

MAINTAINER Phil Chen '06fahchen@gmail.com'

ENV VERSION=5.6.2

ADD https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v${VERSION}/elasticsearch-analysis-ik-$VERSION.zip /tmp/
RUN /usr/share/elasticsearch/bin/elasticsearch-plugin install file:///tmp/elasticsearch-analysis-ik-$VERSION.zip

RUN rm -rf /tm/*
"
2122,19e027b090d3541b0933184b70062adfbdd14d73,Fixed dockerfile,"Fixed dockerfile
","FROM python:3-alpine

ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PIP_NO_CACHE_DIR=off

WORKDIR /usr/src/crackmapexec

RUN apk update && \
    apk add --no-cache build-base libffi-dev libxml2-dev libxslt-dev openssl-dev

COPY requirements.txt .

RUN pip3 install --no-cache-dir -r requirements.txt

COPY . .

RUN python setup.py install

ENTRYPOINT [ ""cme"" ]
",
325,094a7ac10ab577869a2081f30e300fdaa775469e,fix: Dockerfile构建失败,"fix: Dockerfile构建失败
","FROM nimmis/java:oracle-8-jdk

MAINTAINER wendal ""wendal1985@gmail.com""

ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
RUN mkdir -p ""$CATALINA_HOME""
ENV TOMCAT_MAJOR 8
ENV TOMCAT_VERSION 8.0.33
ENV TOMCAT_TGZ_URL https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
ENV DEBIAN_FRONTEND noninteractive

RUN cd $CATALINA_HOME \
&&wget -O tomcat.tar.gz $TOMCAT_TGZ_URL \
&& tar -xvf tomcat.tar.gz --strip-components=1 \
&& cd $CATALINA_HOME \
&& rm bin/*.bat \
&& rm tomcat.tar.gz* && rm -fr /usr/local/tomcat/webapps/ROOT \
&& rm -fr /usr/local/tomcat/webapps/docs /usr/local/tomcat/webapps/host-manager /usr/local/tomcat/webapps/manager /usr/local/tomcat/webapps/examples


ENV MAVEN_HOME /usr/share/maven
ENV MAVEN_TGZ_URL https://www.apache.org/dist/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz

RUN mkdir /tmp2 && cd /tmp2 \
  && curl -sSL $MAVEN_TGZ_URL | tar xzf - -C /usr/share \
  && mv /usr/share/apache-maven-3.3.3 /usr/share/maven \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn \
  && curl -sSL https://github.com/wendal/nutz-book-project/archive/master.tar.gz | tar xzf - -C /tmp2 \
  && cd /tmp2 && ls -l  && cd nutz-book-project-master \
  && mvn clean package \
  && mkdir -p /usr/local/tomcat/webapps/ROOT \
  && cp -r target/nutzbook-2.9.0/* /usr/local/tomcat/webapps/ROOT/ \
  && find /usr/local/tomcat/webapps/ROOT/ \
  && cd / \
  && rm -fr /tmp2 usr/share/maven /usr/bin/mvn ~/.m2

WORKDIR $CATALINA_HOME

EXPOSE 8080
#EXPOSE 81
#EXPOSE 15555
COPY docker-entrypoint.py /entrypoint.py
CMD [""python"", ""/entrypoint.py""]
ENV LANG C.UTF-8
ENV TZ ""Asia/Shanghai""
ENV ""ehcache.disk.store.dir"" ""/data""
VOLUME /data

","FROM nimmis/java:oracle-8-jdk

MAINTAINER wendal ""wendal1985@gmail.com""

ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
RUN mkdir -p ""$CATALINA_HOME""
ENV TOMCAT_MAJOR 8
ENV TOMCAT_VERSION 8.5.5
ENV TOMCAT_TGZ_URL https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
ENV DEBIAN_FRONTEND noninteractive

RUN cd $CATALINA_HOME \
&&wget -O tomcat.tar.gz $TOMCAT_TGZ_URL \
&& tar -xvf tomcat.tar.gz --strip-components=1 \
&& cd $CATALINA_HOME \
&& rm bin/*.bat \
&& rm tomcat.tar.gz* && rm -fr /usr/local/tomcat/webapps/ROOT \
&& rm -fr /usr/local/tomcat/webapps/docs /usr/local/tomcat/webapps/host-manager /usr/local/tomcat/webapps/manager /usr/local/tomcat/webapps/examples


ENV MAVEN_HOME /usr/share/maven
ENV MAVEN_TGZ_URL https://www.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz

RUN mkdir /tmp2 && cd /tmp2 \
  && curl -sSL $MAVEN_TGZ_URL | tar xzf - -C /usr/share \
  && mv /usr/share/apache-maven-3.3.9 /usr/share/maven \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn \
  && curl -sSL https://github.com/wendal/nutz-book-project/archive/master.tar.gz | tar xzf - -C /tmp2 \
  && cd /tmp2 && ls -l  && cd nutz-book-project-master \
  && mvn clean package \
  && mkdir -p /usr/local/tomcat/webapps/ROOT \
  && cp -r target/nutzbook-2.9.1/* /usr/local/tomcat/webapps/ROOT/ \
  && find /usr/local/tomcat/webapps/ROOT/ \
  && cd / \
  && rm -fr /tmp2 usr/share/maven /usr/bin/mvn ~/.m2

WORKDIR $CATALINA_HOME

EXPOSE 8080
COPY docker-entrypoint.py /entrypoint.py
CMD [""python"", ""/entrypoint.py""]
ENV LANG C.UTF-8
ENV TZ ""Asia/Shanghai""
ENV ""ehcache.disk.store.dir"" ""/data""
VOLUME /data

"
2278,fd88b59065c3ecab2bbf2bf877f9009db0ea6a19,Add certificate to trusted CA,"Add certificate to trusted CA
","FROM jboss/base-jdk:8

ARG CA=""""

ENV KEYCLOAK_VERSION 3.0.0.Final
# Enables signals getting passed from startup script to JVM
# ensuring clean shutdown when container is stopped.
ENV LAUNCH_JBOSS_IN_BACKGROUND 1

USER root

RUN yum install -y epel-release && yum install -y jq xmlstarlet && yum clean all

ADD add-trusted-certificate.sh /opt/jboss

RUN ./add-trusted-certificate.sh

USER jboss

RUN cd /opt/jboss/ && curl -sL https://downloads.jboss.org/keycloak/$KEYCLOAK_VERSION/keycloak-$KEYCLOAK_VERSION.tar.gz | tar zx && mv /opt/jboss/keycloak-$KEYCLOAK_VERSION /opt/jboss/keycloak

ADD docker-entrypoint.sh /opt/jboss/

ADD setLogLevel.xsl /opt/jboss/keycloak/
RUN java -jar /usr/share/java/saxon.jar -s:/opt/jboss/keycloak/standalone/configuration/standalone.xml -xsl:/opt/jboss/keycloak/setLogLevel.xsl -o:/opt/jboss/keycloak/standalone/configuration/standalone.xml
RUN xmlstarlet ed --inplace \
        -N x=""urn:jboss:domain:undertow:3.0"" \
        -a ""//x:http-listener"" \
        -t attr \
        -n 'proxy-address-forwarding' \
        -v 'true' \
        /opt/jboss/keycloak/standalone/configuration/standalone.xml

USER root

RUN chown -R jboss.0 /opt/jboss && chmod -R 770 /opt/jboss

USER jboss

ENV JBOSS_HOME /opt/jboss/keycloak

EXPOSE 8080

ENTRYPOINT [ ""/opt/jboss/docker-entrypoint.sh"" ]

CMD [""-b"", ""0.0.0.0""]
",
2218,a8a644fd27fa89f00bf893d46d5741f795c0229f,fix: vulnerabilities,"fix: vulnerabilities
","FROM debian:buster

ENV NODE_VERSION 12

RUN set -x && \
  apt-get update && \
  apt-get install -y \
    ca-certificates \
    curl \
    git \
    python3-pip \
  && \
  : ""to fix vulnerabilities, update packages : 2020-08-17"" && \
  : apt-get install -y --no-install-recommends \
    libsystemd0 \
    libudev1 \
  && \
  : ""install awscli"" && \
  pip3 install awscli && \
  : ""install node"" && \
  curl -sL https://deb.nodesource.com/setup_$NODE_VERSION.x | bash - && \
  apt-get install -y nodejs && \
  npm install -g npm && \
  rm -rf /root/.npm && \
  : ""cleanup apt caches"" && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
  : ""add working user"" && \
  useradd -m getto && \
  : ""prepare app directory"" && \
  mkdir -p /opt/app && \
  chown getto:getto /opt/app && \
  : ""environment prepared""

COPY package*.json /opt/app/

WORKDIR /opt/app
USER getto

RUN set -x && \
  : ""install node modules"" && \
  npm clean-install && \
  : ""project prepared""

CMD [""/bin/bash""]
",
320,5aa45f7eee86b78e2a65d83c8c0343105f5ab37b,Bump Dockerfile to 9.1.0-498-8eb4171c,"Bump Dockerfile to 9.1.0-498-8eb4171c
",,
96,b850d64b715eb45f6103e85919a44e3bb593b963,Bumped source to 20201016-adbd723,"Bumped source to 20201016-adbd723
","FROM docker.pkg.github.com/dock0/service/service:20201016-83b6087
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20201016-adbd723
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
52,9d870d414835b1ed8e00287b95d7b0e68257716a,Bumped source to 20210112-27ccc9a,"Bumped source to 20210112-27ccc9a
","FROM docker.pkg.github.com/dock0/arch/arch:20210112-eb14af4
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210112-27ccc9a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
181,52d3daed122d1c3af086ebf6adfca7e6ecfe98ba,Update base container,"Update base container
","FROM ubuntu:14.04

RUN echo ""deb http://pagekite.net/pk/deb/ pagekite main"" > /etc/apt/sources.list.d/pagekite_net_pk_deb.list
RUN apt-key adv --recv-keys --keyserver keys.gnupg.net AED248B1C7B2CAC3

RUN apt-get update -y
RUN apt-get install -y pagekite

RUN rm /etc/pagekite.d/20_frontends.rc

# pagekite.net service
CMD pagekite --clean \
            --defaults \
            --service_on=https:blimp.$CLOUDFLEET_DOMAIN:nginx:443:$CLOUDFLEET_SECRET \
            --service_on=http:blimp.$CLOUDFLEET_DOMAIN:nginx:80:$CLOUDFLEET_SECRET

# our pagekite server
# CMD pagekite --clean \
#             --frontend=$CLOUDFLEET_HOST \
#             --service_on=http,https:blimp.$CLOUDFLEET_DOMAIN:nginx:443:$CLOUDFLEET_SECRET
","FROM ubuntu

RUN echo ""deb http://pagekite.net/pk/deb/ pagekite main"" > /etc/apt/sources.list.d/pagekite_net_pk_deb.list
RUN apt-key adv --recv-keys --keyserver keys.gnupg.net AED248B1C7B2CAC3

RUN apt-get update -y
RUN apt-get install -y pagekite

RUN rm /etc/pagekite.d/20_frontends.rc

# pagekite.net service
CMD pagekite --clean \
            --defaults \
            --service_on=https:blimp.$CLOUDFLEET_DOMAIN:nginx:443:$CLOUDFLEET_SECRET \
            --service_on=http:blimp.$CLOUDFLEET_DOMAIN:nginx:80:$CLOUDFLEET_SECRET

# our pagekite server
# CMD pagekite --clean \
#             --frontend=$CLOUDFLEET_HOST \
#             --service_on=http,https:blimp.$CLOUDFLEET_DOMAIN:nginx:443:$CLOUDFLEET_SECRET
"
219,d058f004c84bd4a234d466dfe3a07af0b5e508e7,bump versions,bump versions,"# A disposable development environment for java, python, and c++

FROM ubuntu:latest
MAINTAINER benjamin.gemmill@gmail.com

RUN locale-gen en_US.UTF-8

RUN apt-get update && apt-get install -y \
      gksu \
      curl \
      vim gedit \
      git ssh rsync \
      default-jdk \
      python  python-dev  python-setuptools \
      python3 python3-dev python3-setuptools \
      cmake g++ g++-multilib
      #&& rm -rf /var/lib/apt/lists/*
      
# Java IDE
RUN curl -L https://download.jetbrains.com/idea/ideaIC-2016.2.tar.gz | tar xz && mv idea* /opt/idea

# Python IDE
RUN curl -L https://download.jetbrains.com/python/pycharm-community-2016.2.tar.gz | tar xz && mv pycharm* /opt/pycharm

# C++ IDE
RUN curl -L https://download.jetbrains.com/cpp/CLion-2016.2.tar.gz | tar xz && mv clion* /opt/clion

ENV JAVA_HOME /usr/lib/jvm/default-java # to find the jdk
ENV QT_X11_NO_MITSHM 1 # for qt to work over a shared x socket with the docker host

#gosu
RUN wget -O /usr/local/bin/gosu \
  ""https://github.com/tianon/gosu/releases/download/1.9/gosu-$(dpkg --print-architecture | awk -F- '{ print $NF }')"" \
  && chmod a+x /usr/local/bin/gosu

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT [""/usr/local/bin/entrypoint.sh""]

# Start up the IDEs like this once you're in.
#/opt/idea/bin/idea.sh > /dev/null 2>&1
#/opt/pycharm/bin/pycharm.sh > /dev/null 2>&1
#/opt/clion/bin/clion.sh > /dev/null 2>&1
CMD bash
","# A disposable development environment for java, python, and c++

FROM ubuntu:latest
MAINTAINER benjamin.gemmill@gmail.com

RUN locale-gen en_US.UTF-8

RUN apt-get update && apt-get install -y \
      gksu \
      curl \
      vim gedit \
      git ssh rsync \
      default-jdk \
      python  python-dev  python-setuptools \
      python3 python3-dev python3-setuptools \
      cmake g++ g++-multilib
      #&& rm -rf /var/lib/apt/lists/*
      
# Java IDE
RUN curl -L https://download.jetbrains.com/idea/ideaIC-2016.2.3.tar.gz | tar xz && mv idea* /opt/idea

# Python IDE
RUN curl -L https://download.jetbrains.com/python/pycharm-community-2016.2.3.tar.gz | tar xz && mv pycharm* /opt/pycharm

# C++ IDE
RUN curl -L https://download.jetbrains.com/cpp/CLion-2016.2.2.tar.gz | tar xz && mv clion* /opt/clion

ENV JAVA_HOME /usr/lib/jvm/default-java # to find the jdk
ENV QT_X11_NO_MITSHM 1 # for qt to work over a shared x socket with the docker host

#gosu
RUN wget -O /usr/local/bin/gosu \
  ""https://github.com/tianon/gosu/releases/download/1.9/gosu-$(dpkg --print-architecture | awk -F- '{ print $NF }')"" \
  && chmod a+x /usr/local/bin/gosu

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT [""/usr/local/bin/entrypoint.sh""]

# Start up the IDEs like this once you're in.
#/opt/idea/bin/idea.sh > /dev/null 2>&1
#/opt/pycharm/bin/pycharm.sh > /dev/null 2>&1
#/opt/clion/bin/clion.sh > /dev/null 2>&1
CMD bash
"
2300,4df79eb6b96d6ccd6eba97767cbb6703bc86f1d6,Bumped source to 20210709-21e262d,"Bumped source to 20210709-21e262d
","FROM docker.pkg.github.com/dock0/arch/arch:20210709-6b59728
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2308,6382324c72d2c4982024d46de6b17154bc81da38,Bumped source to 20210821-e9eb8aa,"Bumped source to 20210821-e9eb8aa
","FROM docker.pkg.github.com/dock0/arch/arch:20210821-3342bda
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
34,19a70b7376d229b83f37e6dff0247c7ce0c2e209,another stab at a fix for #11,"another stab at a fix for #11
","FROM debian:stable

RUN apt-get update && apt-get install -y --no-install-recommends procps openjdk-7-jre-headless tar curl && apt-get autoremove -y && apt-get clean

ENV FABRIC8_DISTRO_VERSION 1.2.0.Beta2
ENV JAVA_HOME /usr/lib/jvm/java-1.7.0-openjdk-amd64

RUN useradd -m fabric8

ADD startup.sh /home/fabric8/startup.sh

RUN cd /home/fabric8 && \
    curl --silent https://repo1.maven.org/maven2/io/fabric8/fabric8-karaf/$FABRIC8_DISTRO_VERSION/fabric8-karaf-$FABRIC8_DISTRO_VERSION.tar.gz | tar xz && \
    mv fabric8-karaf-$FABRIC8_DISTRO_VERSION fabric8-karaf && \
    chown -R fabric8:fabric8 fabric8-karaf

# TODO temporary fix for docker issue until 1.2.0.Beta3
ADD jetty.xml /home/fabric8/fabric8-karaf/fabric/import/fabric/profiles/default.profile/jetty.xml

WORKDIR /home/fabric8/fabric8-karaf/etc

# lets remove the karaf.name by default so we can default it from env vars
RUN sed -i '/karaf.name=root/d' system.properties 
RUN sed -i '/runtime.id=/d' system.properties 

RUN echo bind.address=0.0.0.0 >> system.properties
RUN echo fabric.environment=docker >> system.properties
RUN echo zookeeper.password.encode=true >> system.properties

# lets remove the karaf.delay.console=true to disable the progress bar
RUN sed -i 's/karaf.delay.console=true/karaf.delay.console=false/' config.properties 

# lets enable logging to standard out
RUN sed -i 's/log4j.rootLogger=INFO, out, osgi:*/log4j.rootLogger=INFO, stdout, osgi:*/' org.ops4j.pax.logging.cfg

WORKDIR /home/fabric8/fabric8-karaf

RUN chown -R fabric8:fabric8 /home/fabric8 /home/fabric8/fabric8-karaf /home/fabric8/startup.sh

USER fabric8

# default values of environment variables supplied by default for child containers created by fabric8
# which have sensible defaults for folks creating new fabrics but can be overloaded when using docker run

#ENV DOCKER_HOST http://172.17.42.1:4243
ENV DOCKER_HOST http://192.168.59.103:2375
ENV FABRIC8_RUNTIME_ID root
ENV FABRIC8_KARAF_NAME root
ENV FABRIC8_BINDADDRESS 0.0.0.0
ENV FABRIC8_PROFILES docker
ENV FABRIC8_HTTP_PORT 8181
ENV FABRIC8_HTTP_PROXY_PORT 8181
ENV FABRIC8_GLOBAL_RESOLVER localip

EXPOSE 1099 2181 8101 8181 9300 9301 44444 61616

CMD /home/fabric8/startup.sh
","FROM debian:stable

RUN apt-get update && apt-get install -y --no-install-recommends procps openjdk-7-jre-headless tar curl && apt-get autoremove -y && apt-get clean

ENV FABRIC8_DISTRO_VERSION 1.2.0.Beta2
ENV JAVA_HOME /usr/lib/jvm/java-1.7.0-openjdk-amd64

RUN useradd -m fabric8

ADD startup.sh /home/fabric8/startup.sh

RUN cd /home/fabric8 && \
    curl --silent https://repo1.maven.org/maven2/io/fabric8/fabric8-karaf/$FABRIC8_DISTRO_VERSION/fabric8-karaf-$FABRIC8_DISTRO_VERSION.tar.gz | tar xz && \
    mv fabric8-karaf-$FABRIC8_DISTRO_VERSION fabric8-karaf && \
    chown -R fabric8:fabric8 fabric8-karaf

# TODO temporary fix for docker issue until 1.2.0.Beta3
ADD jetty.xml /home/fabric8/fabric8-karaf/fabric/import/fabric/profiles/default.profile/jetty.xml

WORKDIR /home/fabric8/fabric8-karaf/etc

# lets remove the karaf.name by default so we can default it from env vars
RUN sed -i '/karaf.name=root/d' system.properties 
RUN sed -i '/runtime.id=/d' system.properties 

RUN echo bind.address=0.0.0.0 >> system.properties
RUN echo fabric.environment=docker >> system.properties
RUN echo zookeeper.password.encode=true >> system.properties

# lets remove the karaf.delay.console=true to disable the progress bar
RUN sed -i 's/karaf.delay.console=true/karaf.delay.console=false/' config.properties 

# lets enable logging to standard out
RUN sed -i 's/log4j.rootLogger=INFO, out, osgi:*/log4j.rootLogger=INFO, stdout, osgi:*/' org.ops4j.pax.logging.cfg

WORKDIR /home/fabric8/fabric8-karaf

RUN mkdir instances
RUN mkdir processes
RUN chown -R fabric8:fabric8 /home/fabric8 /home/fabric8/fabric8-karaf /home/fabric8/startup.sh /home/fabric8/fabric8-karaf/*

USER fabric8

# default values of environment variables supplied by default for child containers created by fabric8
# which have sensible defaults for folks creating new fabrics but can be overloaded when using docker run

#ENV DOCKER_HOST http://172.17.42.1:4243
ENV DOCKER_HOST http://192.168.59.103:2375
ENV FABRIC8_RUNTIME_ID root
ENV FABRIC8_KARAF_NAME root
ENV FABRIC8_BINDADDRESS 0.0.0.0
ENV FABRIC8_PROFILES docker
ENV FABRIC8_HTTP_PORT 8181
ENV FABRIC8_HTTP_PROXY_PORT 8181
ENV FABRIC8_GLOBAL_RESOLVER localip

EXPOSE 1099 2181 8101 8181 9300 9301 44444 61616

CMD /home/fabric8/startup.sh
"
120,44a7c6ec750d8dd0d3b7804ce8b778cd89218883,Bumped source to 20210117-4662c76,"Bumped source to 20210117-4662c76
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210117-2e961c0
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210117-4662c76
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
2215,e2e72cc3ef159fb460cfb782a672f2382d89f915,fix docker build for the armebv7r-none-eabi target,"fix docker build for the armebv7r-none-eabi target
","FROM ubuntu:16.04

RUN apt-get update && apt-get install -y --no-install-recommends \
  g++ \
  make \
  file \
  curl \
  ca-certificates \
  python2.7 \
  git \
  cmake \
  sudo \
  xz-utils \
  zlib1g-dev \
  g++-arm-linux-gnueabi \
  g++-arm-linux-gnueabihf \
  g++-aarch64-linux-gnu \
  gcc-sparc64-linux-gnu \
  libc6-dev-sparc64-cross \
  bzip2 \
  patch \
  libssl-dev \
  pkg-config \
  gcc-arm-none-eabi \
  libnewlib-arm-none-eabi

WORKDIR /build

COPY dist-various-1/build-rumprun.sh /build
RUN ./build-rumprun.sh

COPY dist-various-1/install-x86_64-redox.sh /build
RUN ./install-x86_64-redox.sh

COPY dist-various-1/install-mips-musl.sh /build
RUN ./install-mips-musl.sh

COPY dist-various-1/install-mipsel-musl.sh /build
RUN ./install-mipsel-musl.sh

# Suppress some warnings in the openwrt toolchains we downloaded
ENV STAGING_DIR=/tmp

COPY scripts/musl.sh /build
RUN env \
    CC=arm-linux-gnueabi-gcc CFLAGS=""-march=armv5te -marm -mfloat-abi=soft"" \
    CXX=arm-linux-gnueabi-g++ CXXFLAGS=""-march=armv5te -marm -mfloat-abi=soft"" \
    bash musl.sh armv5te && \
    env \
    CC=arm-linux-gnueabi-gcc CFLAGS=""-march=armv6 -marm"" \
    CXX=arm-linux-gnueabi-g++ CXXFLAGS=""-march=armv6 -marm"" \
    bash musl.sh arm && \
    env \
    CC=arm-linux-gnueabihf-gcc CFLAGS=""-march=armv6 -marm"" \
    CXX=arm-linux-gnueabihf-g++ CXXFLAGS=""-march=armv6 -marm"" \
    bash musl.sh armhf && \
    env \
    CC=arm-linux-gnueabihf-gcc CFLAGS=""-march=armv7-a"" \
    CXX=arm-linux-gnueabihf-g++ CXXFLAGS=""-march=armv7-a"" \
    bash musl.sh armv7 && \
    env \
    CC=aarch64-linux-gnu-gcc \
    CXX=aarch64-linux-gnu-g++ \
    bash musl.sh aarch64 && \
    env \
    CC=mips-openwrt-linux-gcc \
    CXX=mips-openwrt-linux-g++ \
    bash musl.sh mips && \
    env \
    CC=mipsel-openwrt-linux-gcc \
    CXX=mipsel-openwrt-linux-g++ \
    bash musl.sh mipsel && \
    rm -rf /build/*

# FIXME(mozilla/sccache#235) this shouldn't be necessary but is currently
# necessary to disambiguate the mips compiler with the mipsel compiler. We want
# to give these two wrapper scripts (currently identical ones) different hashes
# to ensure that sccache understands that they're different compilers.
RUN \
  echo ""# a"" >> /usr/local/mips-linux-musl/bin/mips-openwrt-linux-musl-wrapper.sh && \
  echo ""# b"" >> /usr/local/mipsel-linux-musl/bin/mipsel-openwrt-linux-musl-wrapper.sh

ENV RUN_MAKE_TARGETS=thumbv6m-none-eabi
ENV RUN_MAKE_TARGETS=$RUN_MAKE_TARGETS,thumbv7m-none-eabi
ENV RUN_MAKE_TARGETS=$RUN_MAKE_TARGETS,thumbv7em-none-eabi
ENV RUN_MAKE_TARGETS=$RUN_MAKE_TARGETS,thumbv7em-none-eabihf

ENV TARGETS=asmjs-unknown-emscripten
ENV TARGETS=$TARGETS,wasm32-unknown-emscripten
ENV TARGETS=$TARGETS,x86_64-rumprun-netbsd
ENV TARGETS=$TARGETS,mips-unknown-linux-musl
ENV TARGETS=$TARGETS,mipsel-unknown-linux-musl
ENV TARGETS=$TARGETS,arm-unknown-linux-musleabi
ENV TARGETS=$TARGETS,arm-unknown-linux-musleabihf
ENV TARGETS=$TARGETS,armv5te-unknown-linux-gnueabi
ENV TARGETS=$TARGETS,armv5te-unknown-linux-musleabi
ENV TARGETS=$TARGETS,armv7-unknown-linux-musleabihf
ENV TARGETS=$TARGETS,aarch64-unknown-linux-musl
ENV TARGETS=$TARGETS,sparc64-unknown-linux-gnu
ENV TARGETS=$TARGETS,x86_64-unknown-redox
ENV TARGETS=$TARGETS,thumbv6m-none-eabi
ENV TARGETS=$TARGETS,thumbv7m-none-eabi
ENV TARGETS=$TARGETS,thumbv7em-none-eabi
ENV TARGETS=$TARGETS,thumbv7em-none-eabihf
ENV TARGETS=$TARGETS,riscv32imac-unknown-none-elf
ENV TARGETS=$TARGETS,armebv7r-none-eabi
ENV TARGETS=$TARGETS,armebv7r-none-eabihf
ENV TARGETS=$TARGETS,armv7r-none-eabi
ENV TARGETS=$TARGETS,armv7r-none-eabihf

ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \
    CC_mips_unknown_linux_musl=mips-openwrt-linux-gcc \
    CC_sparc64_unknown_linux_gnu=sparc64-linux-gnu-gcc \
    CC_x86_64_unknown_redox=x86_64-unknown-redox-gcc

ENV RUST_CONFIGURE_ARGS \
      --musl-root-armv5te=/musl-armv5te \
      --musl-root-arm=/musl-arm \
      --musl-root-armhf=/musl-armhf \
      --musl-root-armv7=/musl-armv7 \
      --musl-root-aarch64=/musl-aarch64 \
      --musl-root-mips=/musl-mips \
      --musl-root-mipsel=/musl-mipsel \
      --enable-emscripten \
      --disable-docs

ENV SCRIPT \
      python2.7 ../x.py test --target $RUN_MAKE_TARGETS src/test/run-make && \
      python2.7 ../x.py dist --target $TARGETS

# sccache
COPY scripts/sccache.sh /scripts/
RUN sh /scripts/sccache.sh
",
2104,32e73ee6f20e4bed41ea2b38cfd4b05d5731abb1,[IMP] Improve docker image for debug,"[IMP] Improve docker image for debug
","# This is a test docker image to be run with the docker-compose file provided
FROM ubuntu:bionic
LABEL Name=dnfc-test Version=0.0.1

RUN apt-get update
RUN apt-get install -y software-properties-common
RUN apt-get update

RUN apt-get install wget cmake gcc gdbserver libgtest-dev \
                    build-essential python-dev autotools-dev libicu-dev \
                    build-essential libbz2-dev libboost-all-dev -y
RUN apt-get clean autoclean
RUN apt-get autoremove -y
RUN rm -rf /var/lib/apt/lists/*

# get 1.69 boost (latest)
RUN wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz
RUN tar xvzf boost_1_69_0.tar.gz
WORKDIR /boost_1_69_0
RUN ./bootstrap.sh --prefix=/usr/
RUN ./b2 install

# compile and install latest gtest
WORKDIR /usr/src/gtest
RUN cmake CMakeLists.txt
RUN make 
RUN cp *.a /usr/lib

RUN useradd -ms /bin/bash develop
RUN echo ""develop   ALL=(ALL:ALL) ALL"" >> /etc/sudoers

# for gdbserver
EXPOSE 2000

USER develop
VOLUME /home/develop/dnfc
WORKDIR /home/develop/dnfc
",
2290,1dcd24891f21cf6cec87606e9a31f84b5e1a1979,using version 1.1.0-beta3,"using version 1.1.0-beta3
",,
2279,e084bdc55c49d8a43f8f0610057e63b048f04f69,containers: Detect fedora version when building cockpit/ws,"containers: Detect fedora version when building cockpit/ws

Closes #5099
Reviewed-by: Stef Walter <8a7fbf0f15d3ad982af54ef28f5c117d2494b76c@redhat.com>
","FROM fedora:24
MAINTAINER ""Stef Walter"" <stefw@redhat.com>

RUN dnf -y update
RUN dnf install sed

ARG RELEASE
ARG VERSION

# If there are rpm files in the current directory we'll install those,
# otherwise use cockpit-preview repo. The Dockerfile is a hack around
# Dockerfile lack of support for branches
ADD rpms/*.rpm /tmp/

# Again see above ... we do our branching in shell script
RUN cd /tmp && ( ls *.rpm > /dev/null 2> /dev/null && dnf -y install cockpit-ws*.rpm || dnf -y install sed https://kojipkgs.fedoraproject.org/packages/cockpit/$VERSION/$RELEASE.fc23/x86_64/cockpit-ws-$VERSION-$RELEASE.fc24.x86_64.rpm ) && dnf clean all

# And the stuff that starts the container
RUN mkdir -p /container && ln -s /host/proc/1 /container/target-namespace
ADD atomic-install /container/atomic-install
ADD atomic-uninstall /container/atomic-uninstall
ADD atomic-run /container/atomic-run
RUN chmod -v +x /container/atomic-install
RUN chmod -v +x /container/atomic-uninstall
RUN chmod -v +x /container/atomic-run

# Make the container think it's the host OS version
RUN rm -f /etc/os-release /usr/lib/os-release && ln -sv /host/etc/os-release /etc/os-release && ln -sv /host/usr/lib/os-release /usr/lib/os-release

LABEL INSTALL /usr/bin/docker run -ti --rm --privileged -v /:/host IMAGE /container/atomic-install
LABEL UNINSTALL /usr/bin/docker run -ti --rm --privileged -v /:/host IMAGE /container/atomic-uninstall
LABEL RUN /usr/bin/docker run -d --privileged --pid=host -v /:/host IMAGE /container/atomic-run --local-ssh

# Look ma, no EXPOSE

CMD [""/container/atomic-run""]
",
270,194e47876d01b1a272031aa8ab116ba4fd55d5ce,Bumped source to 20221108-d5692cb,"Bumped source to 20221108-d5692cb
","FROM ghcr.io/dock0/arch:20221108-0b78414
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20221108-d5692cb
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2151,c67344e439be19bf0b2eaceca99461eeba972767,Bumped source to 20200603-41fdc9f,"Bumped source to 20200603-41fdc9f
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200603-ba596f2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
2078,e522c7b1dc1d66ccb46ed56ba605a88333ebeb3d,Bumped source to 20210415-6e2d806,"Bumped source to 20210415-6e2d806
","FROM docker.pkg.github.com/dock0/arch/arch:20210415-cb3fb5b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
63,eae72d6b6bffc39d4d5cd9a498d11d73d4c79158,Bumped source to 20200505-fd84876,"Bumped source to 20200505-fd84876
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200505-6ef93f4
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200505-fd84876
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
130,be36e798393a4e84b15974e446c04aca99727b81,ENH: update dockerfile maintainer,"ENH: update dockerfile maintainer
","FROM centos:5
MAINTAINER http://github.com/fedorov

RUN yum update -y && \
  yum groupinstall -y ""Development Tools"" && \
  yum install -y curl \
   curl-devel \
   coreutils \
   gcc \
   gcc-c++ \
   gettext \
   openssl-devel \
   perl \
   wget \
   zlib-devel

WORKDIR /etc/yum.repos.d
RUN wget http://people.centos.org/tru/devtools-2/devtools-2.repo
RUN yum install -y devtoolset-2-gcc \
  devtoolset-2-binutils \
  devtoolset-2-gcc-gfortran \
  devtoolset-2-gcc-c++
ENV CC /opt/rh/devtoolset-2/root/usr/bin/gcc
ENV CXX /opt/rh/devtoolset-2/root/usr/bin/g++
ENV FC /opt/rh/devtoolset-2/root/usr/bin/gfortran

# Build and install git from source.
#WORKDIR /usr/src
#ENV GIT_VERSION 2.11.0
#RUN wget https://github.com/git/git/archive/v${GIT_VERSION}.tar.gz -O git-${GIT_VERSION}.tar.gz && \
#  tar xvzf git-${GIT_VERSION}.tar.gz && \
#  cd git-${GIT_VERSION} && \
#  make prefix=/usr all && \
#  make prefix=/usr install && \
#  cd .. && rm -rf git-${GIT_VERSION}*

# Build and install git from source.
WORKDIR /usr/src
ENV GIT_VERSION 2.5.0
RUN wget --no-check-certificate https://www.kernel.org/pub/software/scm/git/git-${GIT_VERSION}.tar.gz && \
  tar xvzf git-${GIT_VERSION}.tar.gz && \
  cd git-${GIT_VERSION} && \
  ./configure --prefix=/usr && \
  make && \
  make install && \
  cd .. && rm -rf git-${GIT_VERSION}*

# Build and install CMake from source.
WORKDIR /usr/src
RUN git clone git://cmake.org/cmake.git CMake && \
  cd CMake && \
  git checkout v3.7.2 && \
  mkdir /usr/src/CMake-build && \
  cd /usr/src/CMake-build && \
  /usr/src/CMake/bootstrap \
    --parallel=$(grep -c processor /proc/cpuinfo) \
    --prefix=/usr && \
  make -j$(grep -c processor /proc/cpuinfo) && \
  ./bin/cmake \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DCMAKE_USE_OPENSSL:BOOL=ON . && \
  make install && \
  cd .. && rm -rf CMake*

# Build and install Python from source.
WORKDIR /usr/src
ENV PYTHON_VERSION 2.7.10
RUN wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz && \
  tar xvzf Python-${PYTHON_VERSION}.tgz && \
  cd Python-${PYTHON_VERSION} && \
  ./configure && \
  make -j$(grep -c processor /proc/cpuinfo) && \
  make install && \
  cd .. && rm -rf Python-${PYTHON_VERSION}*

# Build and install ninja from source.
WORKDIR /usr/src
RUN git clone https://github.com/martine/ninja.git && \
  cd ninja && \
  git checkout v1.6.0 && \
  ./configure.py --bootstrap && \
  mv ninja /usr/bin/ && \
  cd .. && rm -rf ninja

# Build and install dcmqi
WORKDIR /usr/src
RUN git clone https://github.com/QIICR/dcmqi.git && \
  mkdir dcmqi-superbuild && \
  cd dcmqi-superbuild && \
  cmake -DCMAKE_INSTALL_PREFIX=/usr ../dcmqi && \
  make -j$(grep -c processor /proc/cpuinfo)

WORKDIR /usr/src
ENTRYPOINT [""/bin/bash"",""/usr/src/dcmqi/docker_entry.sh""]
","FROM centos:5
MAINTAINER http://github.com/QIICR

RUN yum update -y && \
  yum groupinstall -y ""Development Tools"" && \
  yum install -y curl \
   curl-devel \
   coreutils \
   gcc \
   gcc-c++ \
   gettext \
   openssl-devel \
   perl \
   wget \
   zlib-devel

WORKDIR /etc/yum.repos.d
RUN wget http://people.centos.org/tru/devtools-2/devtools-2.repo
RUN yum install -y devtoolset-2-gcc \
  devtoolset-2-binutils \
  devtoolset-2-gcc-gfortran \
  devtoolset-2-gcc-c++
ENV CC /opt/rh/devtoolset-2/root/usr/bin/gcc
ENV CXX /opt/rh/devtoolset-2/root/usr/bin/g++
ENV FC /opt/rh/devtoolset-2/root/usr/bin/gfortran

# Build and install git from source.
#WORKDIR /usr/src
#ENV GIT_VERSION 2.11.0
#RUN wget https://github.com/git/git/archive/v${GIT_VERSION}.tar.gz -O git-${GIT_VERSION}.tar.gz && \
#  tar xvzf git-${GIT_VERSION}.tar.gz && \
#  cd git-${GIT_VERSION} && \
#  make prefix=/usr all && \
#  make prefix=/usr install && \
#  cd .. && rm -rf git-${GIT_VERSION}*

# Build and install git from source.
WORKDIR /usr/src
ENV GIT_VERSION 2.5.0
RUN wget --no-check-certificate https://www.kernel.org/pub/software/scm/git/git-${GIT_VERSION}.tar.gz && \
  tar xvzf git-${GIT_VERSION}.tar.gz && \
  cd git-${GIT_VERSION} && \
  ./configure --prefix=/usr && \
  make && \
  make install && \
  cd .. && rm -rf git-${GIT_VERSION}*

# Build and install CMake from source.
WORKDIR /usr/src
RUN git clone git://cmake.org/cmake.git CMake && \
  cd CMake && \
  git checkout v3.7.2 && \
  mkdir /usr/src/CMake-build && \
  cd /usr/src/CMake-build && \
  /usr/src/CMake/bootstrap \
    --parallel=$(grep -c processor /proc/cpuinfo) \
    --prefix=/usr && \
  make -j$(grep -c processor /proc/cpuinfo) && \
  ./bin/cmake \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DCMAKE_USE_OPENSSL:BOOL=ON . && \
  make install && \
  cd .. && rm -rf CMake*

# Build and install Python from source.
WORKDIR /usr/src
ENV PYTHON_VERSION 2.7.10
RUN wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz && \
  tar xvzf Python-${PYTHON_VERSION}.tgz && \
  cd Python-${PYTHON_VERSION} && \
  ./configure && \
  make -j$(grep -c processor /proc/cpuinfo) && \
  make install && \
  cd .. && rm -rf Python-${PYTHON_VERSION}*

# Build and install ninja from source.
WORKDIR /usr/src
RUN git clone https://github.com/martine/ninja.git && \
  cd ninja && \
  git checkout v1.6.0 && \
  ./configure.py --bootstrap && \
  mv ninja /usr/bin/ && \
  cd .. && rm -rf ninja

# Build and install dcmqi
WORKDIR /usr/src
RUN git clone https://github.com/QIICR/dcmqi.git && \
  mkdir dcmqi-superbuild && \
  cd dcmqi-superbuild && \
  cmake -DCMAKE_INSTALL_PREFIX=/usr ../dcmqi && \
  make -j$(grep -c processor /proc/cpuinfo)

WORKDIR /usr/src
ENTRYPOINT [""/bin/bash"",""/usr/src/dcmqi/docker_entry.sh""]
"
2066,a138424ca386f7d2ac6abcba3010681b5e4bbd59,Update Dockerfile,"Update Dockerfile
","FROM debian

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get -qy update && apt-get -qy --fix-missing install \
    build-essential git pkg-config xvfb libgc-dev libatomic-ops-dev \
    libqt4-dev libqtwebkit-dev libqscintilla2-dev \
    libboost-system-dev libboost-filesystem-dev libboost-iostreams-dev \
    python-pip gdb

RUN mkdir /build

RUN /bin/bash -c ""pip install \
    ejson \
    clime \
    git+git://github.com/thiago-silva/pymeta.git""

WORKDIR /build

RUN echo '{""repositories"":                             \
  {""central"": ""http://libraries.memetalk.org/""},       \
 ""override_to_local"": {                                \
   ""central:memescript"": ""/build/central/memescript"",  \
   ""central:stdlib"": ""/build/central/stdlib""           \
}}' >> /root/.meme.config

# Runs tests under xvfb to allow Qt to connect to a display
CMD xvfb-run --server-args=""-screen 0 1024x768x24"" make test
",
2289,04995552be40b58765aeef9e27ec9c40f545e403,Fix docker container tag,"Fix docker container tag
","FROM php:7.4.7-fpm-alpine3.10
MAINTAINER Mate Kocsis <kocsismate@woohoolabs.com>

RUN docker-php-ext-install opcache

ADD ./ /code

WORKDIR /code

EXPOSE 9000

CMD php-fpm
",
2168,95cd93d3d4fafa33e7f521552bbb5d9a5ad116d7,add php intl module,"add php intl module
","FROM phusion/baseimage:0.9.13
MAINTAINER Sebastien FAUVART <sebastien.fauvart@gmail.com>

# ------------------------------------------------------------------------------
# Install base
RUN apt-get update
RUN apt-get install -y git apache2 apache2-utils
RUN apt-get install -y php5 libapache2-mod-php5 php5-mysql php5-cli php-pear php5-curl php5-mcrypt php5-gd

# install composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Enable PHP5 Modules
RUN php5enmod mcrypt
RUN a2enmod rewrite

RUN mkdir /etc/service/apache2
ADD apache2.sh /etc/service/apache2/run
RUN chmod +x /etc/service/apache2/run

EXPOSE 80

WORKDIR /app
CMD [""/sbin/my_init""]
",
165,fe209ee5e6e828f589341e5ded2b0d7d7894bbcf,Add dependencies for composer install,"Add dependencies for composer install
","FROM meanbee/magento:5.6-cli

MAINTAINER Tom Robertshaw <tom.robertshaw@meanbee.com>

RUN apt-get update && apt-get install -y mysql-client

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/ --filename=composer

# Download composer, magedbm, magerun and mageconfigsync
RUN curl https://getcomposer.org/composer.phar -o /composer.phar & \
    curl https://s3-eu-west-1.amazonaws.com/magedbm-releases/magedbm.phar -o /magedbm.phar & \
    curl http://files.magerun.net/n98-magerun-latest.phar -o /n98-magerun.phar & \
    curl -L https://github.com/punkstar/mageconfigsync/releases/download/0.4.0/mageconfigsync-0.4.0.phar -o /mageconfigsync.phar & \
    curl https://raw.githubusercontent.com/colinmollenhour/modman/master/modman -o /modman & \
    wait

RUN chmod +x /composer.phar
RUN chmod +x /magedbm.phar
RUN chmod +x /n98-magerun.phar
RUN chmod +x /mageconfigsync.phar
RUN chmod +x /modman

# Copy wrappers commands
COPY composer /usr/local/bin/
COPY magerun /usr/local/bin/
COPY magedbm /usr/local/bin/
COPY mageconfigsync /usr/local/bin/
COPY modman /usr/local/bin/

RUN chmod +x /usr/local/bin/composer
RUN chmod +x /usr/local/bin/magerun
RUN chmod +x /usr/local/bin/magedbm
RUN chmod +x /usr/local/bin/mageconfigsync
RUN chmod +x /usr/local/bin/modman

## Frontend Tools
RUN curl --silent --location https://deb.nodesource.com/setup_0.12 | bash -
RUN apt-get install --yes nodejs

RUN npm install -g grunt-cli
RUN npm install -g gulp
","FROM meanbee/magento:5.6-cli

MAINTAINER Tom Robertshaw <tom.robertshaw@meanbee.com>

RUN apt-get update && apt-get install -y mysql-client git

RUN docker-php-ext-install zip

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/ --filename=composer

# Download composer, magedbm, magerun and mageconfigsync
RUN curl https://getcomposer.org/composer.phar -o /composer.phar & \
    curl https://s3-eu-west-1.amazonaws.com/magedbm-releases/magedbm.phar -o /magedbm.phar & \
    curl http://files.magerun.net/n98-magerun-latest.phar -o /n98-magerun.phar & \
    curl -L https://github.com/punkstar/mageconfigsync/releases/download/0.4.0/mageconfigsync-0.4.0.phar -o /mageconfigsync.phar & \
    curl https://raw.githubusercontent.com/colinmollenhour/modman/master/modman -o /modman & \
    wait

RUN chmod +x /composer.phar
RUN chmod +x /magedbm.phar
RUN chmod +x /n98-magerun.phar
RUN chmod +x /mageconfigsync.phar
RUN chmod +x /modman

# Copy wrappers commands
COPY composer /usr/local/bin/
COPY magerun /usr/local/bin/
COPY magedbm /usr/local/bin/
COPY mageconfigsync /usr/local/bin/
COPY modman /usr/local/bin/

RUN chmod +x /usr/local/bin/composer
RUN chmod +x /usr/local/bin/magerun
RUN chmod +x /usr/local/bin/magedbm
RUN chmod +x /usr/local/bin/mageconfigsync
RUN chmod +x /usr/local/bin/modman

## Frontend Tools
RUN curl --silent --location https://deb.nodesource.com/setup_0.12 | bash -
RUN apt-get install --yes nodejs

RUN npm install -g grunt-cli
RUN npm install -g gulp
"
185,e01f65014bdef6a7be9d2c6c70b63143ad023071,Bumped source to 20200224-10bfe35,"Bumped source to 20200224-10bfe35
","FROM docker.pkg.github.com/dock0/arch/arch:20200224-1626b85
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200224-10bfe35
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
275,f6ad5bb876b969d91a77aa20ac95bcb0d770449a,[rest] Add libnotify to image,"[rest] Add libnotify to image
","FROM revok/base:latest
MAINTAINER ""Arun Neelicattu"" <arun.neelicattu@gmail.com>

ENV REST_PORT=8443

ADD assets/supervisord.conf /etc/supervisord.conf
ADD assets/revok.conf ${REVOK_CONF}/revok.conf
ADD assets/revok-rest-start ${REVOK_HOME}/bin/revok-rest-start

EXPOSE ${REST_PORT}

CMD [""/usr/bin/supervisord"", ""-n""]
","FROM revok/base:latest
MAINTAINER ""Arun Neelicattu"" <arun.neelicattu@gmail.com>

USER root
RUN yum -y install libnotify
USER ${REVOK_USER}

ENV REST_PORT=8443

ADD assets/supervisord.conf /etc/supervisord.conf
ADD assets/revok.conf ${REVOK_CONF}/revok.conf
ADD assets/revok-rest-start ${REVOK_HOME}/bin/revok-rest-start

EXPOSE ${REST_PORT}

CMD [""/usr/bin/supervisord"", ""-n""]
"
233,59522abf6d7f591629988b7183f00211e1442bc4,Bumped source to 20210626-ca28a6c,"Bumped source to 20210626-ca28a6c
","FROM docker.pkg.github.com/dock0/arch/arch:20210626-35023c6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210626-ca28a6c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
95,3153f072de1b5f61e4c060d9cadcff677a4d09af,Bumped source to 20211006-0e051a8,"Bumped source to 20211006-0e051a8
","FROM docker.pkg.github.com/dock0/arch/arch:20211006-bc9fffe
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20211006-0e051a8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
362,614de5e10cac7a8699cdb4d945e77ecce16af4e0,fix package name,"fix package name
","FROM ubuntu:16.04

# Install apt package dependencies
RUN apt-get clean all && apt-get update && \
    apt-get -y install wget curl python make g++ git cron pip && \
    apt-get clean all

RUN pip install jupyter pymongo requests pandas

# Install Meteor
RUN curl https://install.meteor.com/ | sh

#Create and use meteor user
RUN groupadd meteor && adduser --ingroup meteor --home /home/meteor meteor
RUN mkdir /app
RUN chown -R meteor:meteor /app
USER meteor

#Add in the repo
RUN git clone --depth 1 https://github.com/ecohealthalliance/ibis.git /app
WORKDIR /app

RUN meteor npm install
RUN meteor build /home/meteor/build --directory

USER root

WORKDIR /home/meteor/build/bundle/programs/server
RUN meteor npm install

WORKDIR /

ENV ROOT_URL http://ibis.eha.io
ENV PORT 80


RUN echo ""0 */3 * * * (cd /app && source /.env && jupyter nbconvert --execute --ExecutePreprocessor.kernel_name=python --ExecutePreprocessor.timeout=None --allow-errors .scripts/rank_events.ipynb --output ../public/rank_events.html) >> cron.log"" | crontab -

# Start application
CMD ['sh', '-c', 'env > /.env && cron && meteor node /home/meteor/build/bundle/main.js']
","FROM ubuntu:16.04

# Install apt package dependencies
RUN apt-get clean all && apt-get update && \
    apt-get -y install wget curl python make g++ git cron python-pip && \
    apt-get clean all

RUN pip install jupyter pymongo requests pandas

# Install Meteor
RUN curl https://install.meteor.com/ | sh

#Create and use meteor user
RUN groupadd meteor && adduser --ingroup meteor --home /home/meteor meteor
RUN mkdir /app
RUN chown -R meteor:meteor /app
USER meteor

#Add in the repo
RUN git clone --depth 1 https://github.com/ecohealthalliance/ibis.git /app
WORKDIR /app

RUN meteor npm install
RUN meteor build /home/meteor/build --directory

USER root

WORKDIR /home/meteor/build/bundle/programs/server
RUN meteor npm install

WORKDIR /

ENV ROOT_URL http://ibis.eha.io
ENV PORT 80


RUN echo ""0 */3 * * * (cd /app && source /.env && jupyter nbconvert --execute --ExecutePreprocessor.kernel_name=python --ExecutePreprocessor.timeout=None --allow-errors .scripts/rank_events.ipynb --output ../public/rank_events.html) >> cron.log"" | crontab -

# Start application
CMD ['sh', '-c', 'env > /.env && cron && meteor node /home/meteor/build/bundle/main.js']
"
272,801d519165ef64bf5424ac395abfc838fa25ba9d,docker: Fix the comments about settings.json copy,"docker: Fix the comments about settings.json copy

The ""conditional copy trick"" was removed in #3644, but I failed to
update the corresponding comment.
","# Etherpad Lite Dockerfile
#
# https://github.com/ether/etherpad-docker
#
# Author: muxator
#
# Version 0.1

FROM node:10-buster-slim
LABEL maintainer=""Etherpad team, https://github.com/ether/etherpad-lite""

# git hash of the version to be built.
# If not given, build the latest development version.
ARG ETHERPAD_VERSION=develop

# plugins to install while building the container. By default no plugins are
# installed.
# If given a value, it has to be a space-separated, quoted list of plugin names.
#
# EXAMPLE:
#   ETHERPAD_PLUGINS=""ep_codepad ep_author_neat""
ARG ETHERPAD_PLUGINS=

# Set the following to production to avoid installing devDeps
# this can be done with build args (and is mandatory to build ARM version)
ENV NODE_ENV=development

# grab the ETHERPAD_VERSION tarball from github (no need to clone the whole
# repository)
RUN echo ""Getting version: ${ETHERPAD_VERSION}"" && \
curl \
--location \
--fail \
--silent \
--show-error \
--output /opt/etherpad-lite.tar.gz \
https://github.com/ether/etherpad-lite/archive/""${ETHERPAD_VERSION}"".tar.gz && \
mkdir /opt/etherpad-lite && \
tar xf /opt/etherpad-lite.tar.gz \
--directory /opt/etherpad-lite \
--strip-components=1 && \
rm /opt/etherpad-lite.tar.gz

WORKDIR /opt/etherpad-lite

# install node dependencies for Etherpad
RUN bin/installDeps.sh && \
rm -rf ~/.npm/_cacache

# Install the plugins, if ETHERPAD_PLUGINS is not empty.
#
# Bash trick: in the for loop ${ETHERPAD_PLUGINS} is NOT quoted, in order to be
# able to split at spaces.
RUN for PLUGIN_NAME in ${ETHERPAD_PLUGINS}; do npm install ""${PLUGIN_NAME}""; done

# Copy the custom configuration file, if present. The configuration file has to
# be manually put inside the same directory containing the Dockerfile (we cannot
# directly point to ""../settings.json"" for Docker's security restrictions).
#
# For the conditional COPY trick, see:
#   https://stackoverflow.com/questions/31528384/conditional-copy-add-in-dockerfile#46801962
COPY ./settings.json /opt/etherpad-lite/

# Follow the principle of least privilege: run as unprivileged user.
#
# Running as non-root enables running this image in platforms like OpenShift
# that do not allow images running as root.
RUN \
    echo 'etherpad:x:65534:65534:etherpad:/:' > /etc/passwd && \
    echo 'etherpad:x:65534:' > /etc/group && \
    chown -R etherpad:etherpad ./

USER etherpad

EXPOSE 9001
CMD [""node"", ""node_modules/ep_etherpad-lite/node/server.js""]
","# Etherpad Lite Dockerfile
#
# https://github.com/ether/etherpad-docker
#
# Author: muxator
#
# Version 0.1

FROM node:10-buster-slim
LABEL maintainer=""Etherpad team, https://github.com/ether/etherpad-lite""

# git hash of the version to be built.
# If not given, build the latest development version.
ARG ETHERPAD_VERSION=develop

# plugins to install while building the container. By default no plugins are
# installed.
# If given a value, it has to be a space-separated, quoted list of plugin names.
#
# EXAMPLE:
#   ETHERPAD_PLUGINS=""ep_codepad ep_author_neat""
ARG ETHERPAD_PLUGINS=

# Set the following to production to avoid installing devDeps
# this can be done with build args (and is mandatory to build ARM version)
ENV NODE_ENV=development

# grab the ETHERPAD_VERSION tarball from github (no need to clone the whole
# repository)
RUN echo ""Getting version: ${ETHERPAD_VERSION}"" && \
curl \
--location \
--fail \
--silent \
--show-error \
--output /opt/etherpad-lite.tar.gz \
https://github.com/ether/etherpad-lite/archive/""${ETHERPAD_VERSION}"".tar.gz && \
mkdir /opt/etherpad-lite && \
tar xf /opt/etherpad-lite.tar.gz \
--directory /opt/etherpad-lite \
--strip-components=1 && \
rm /opt/etherpad-lite.tar.gz

WORKDIR /opt/etherpad-lite

# install node dependencies for Etherpad
RUN bin/installDeps.sh && \
rm -rf ~/.npm/_cacache

# Install the plugins, if ETHERPAD_PLUGINS is not empty.
#
# Bash trick: in the for loop ${ETHERPAD_PLUGINS} is NOT quoted, in order to be
# able to split at spaces.
RUN for PLUGIN_NAME in ${ETHERPAD_PLUGINS}; do npm install ""${PLUGIN_NAME}""; done

# Copy the configuration file.
COPY ./settings.json /opt/etherpad-lite/

# Follow the principle of least privilege: run as unprivileged user.
#
# Running as non-root enables running this image in platforms like OpenShift
# that do not allow images running as root.
RUN \
    echo 'etherpad:x:65534:65534:etherpad:/:' > /etc/passwd && \
    echo 'etherpad:x:65534:' > /etc/group && \
    chown -R etherpad:etherpad ./

USER etherpad

EXPOSE 9001
CMD [""node"", ""node_modules/ep_etherpad-lite/node/server.js""]
"
315,3f47fc8dc5adec40f53d75d55a2834366d0be904,Bumped source to 20200222-a03d1a4,"Bumped source to 20200222-a03d1a4
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200222-c6ba264
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200222-a03d1a4
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
118,243d77dc6c7f05aaa9f4e114140eb698437f8bb3,add workdir,"add workdir
","FROM openjdk:8u102-jre

MAINTAINER ty.auvil@gmail.com

ENV DUMB_VERSION=1.1.3 \
    DEBIAN_FRONTEND=noninteractive

ADD https://github.com/Yelp/dumb-init/releases/download/v${DUMB_VERSION}/dumb-init_${DUMB_VERSION}_amd64 /bin/dumb-init

COPY docker-entrypoint.sh /bin/docker-entrypoint.sh

RUN echo ""deb http://www.ubnt.com/downloads/unifi/debian unifi5 ubiquiti"" > \
    /etc/apt/sources.list.d/20ubiquiti.list && \
    echo ""deb http://downloads-distro.mongodb.org/repo/debian-sysvinit dist 10gen"" > \
    /etc/apt/sources.list.d/21mongodb.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv C0A52C50 && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10 && \
    apt-get -q update && \
    apt-get install -qy --force-yes --no-install-recommends unifi && \
    apt-get -q clean && \
    rm -rf /var/lib/apt/lists/* && \
    ln -s /var/lib/unifi /usr/lib/unifi/data && \
    chmod +x /bin/docker-entrypoint.sh /bin/dumb-init

EXPOSE 8080/tcp 8081/tcp 8443/tcp 8843/tcp 8880/tcp 3478/udp

USER nobody

ENTRYPOINT [""/bin/docker-entrypoint.sh""]

CMD [""/usr/bin/java"", ""-Xmx256M"", ""-jar"", ""/usr/lib/unifi/lib/ace.jar"", ""start""]
","FROM openjdk:8u102-jre

MAINTAINER ty.auvil@gmail.com

ENV DUMB_VERSION=1.1.3 \
    DEBIAN_FRONTEND=noninteractive

ADD https://github.com/Yelp/dumb-init/releases/download/v${DUMB_VERSION}/dumb-init_${DUMB_VERSION}_amd64 /bin/dumb-init

COPY docker-entrypoint.sh /bin/docker-entrypoint.sh

RUN echo ""deb http://www.ubnt.com/downloads/unifi/debian unifi5 ubiquiti"" > \
    /etc/apt/sources.list.d/20ubiquiti.list && \
    echo ""deb http://downloads-distro.mongodb.org/repo/debian-sysvinit dist 10gen"" > \
    /etc/apt/sources.list.d/21mongodb.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv C0A52C50 && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10 && \
    apt-get -q update && \
    apt-get install -qy --force-yes --no-install-recommends unifi && \
    apt-get -q clean && \
    rm -rf /var/lib/apt/lists/* && \
    ln -s /var/lib/unifi /usr/lib/unifi/data && \
    chmod +x /bin/docker-entrypoint.sh /bin/dumb-init

EXPOSE 8080/tcp 8081/tcp 8443/tcp 8843/tcp 8880/tcp 3478/udp

USER nobody

WORKDIR /var/lib/unifi

ENTRYPOINT [""/bin/docker-entrypoint.sh""]

CMD [""/usr/bin/java"", ""-Xmx256M"", ""-jar"", ""/usr/lib/unifi/lib/ace.jar"", ""start""]
"
138,582d66a168779c72cc6549eb2a547d50b1e68a6f,Bump alpine,"Bump alpine

Bumps alpine from 3.10.1 to 3.10.2.

Signed-off-by: dependabot-preview[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@dependabot.com>","FROM alpine:3.10.1

RUN apk --no-cache add curl
","FROM alpine:3.10.2

RUN apk --no-cache add curl
"
2242,87d908d8230fa4c4baadd1e1ba1e9b901ab4d01e,Bumped source to 20200614-2d8b1c7,"Bumped source to 20200614-2d8b1c7
","FROM docker.pkg.github.com/dock0/arch/arch:20200614-1b5c24e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
319,6f935cd68222d3b687076fec4c7848acf883bc17,Update Dockerfile,Update Dockerfile,"# Cassandra
#
# VERSION               1.0

FROM centos:centos6

# Add source repositories
ADD src/epel7.repo /etc/yum.repos.d/epel7.repo
ADD src/datastax.repo /etc/yum.repos.d/datastax.repo

# Install Java, Install packages (sshd + supervisord + monitoring tools + cassandra)
RUN yum install -y wget tar openssh-server openssh-clients supervisor dsc21 sysstat sudo which openssl hostname && \
yum clean all && \
wget --progress=dot:giga -O /tmp/jdk.rpm --no-cookies --no-check-certificate --header ""Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"" ""http://download.oracle.com/otn-pub/java/jdk/8u20-b26/jdk-8u20-linux-x64.rpm"" && \
rpm -ivh /tmp/jdk.rpm && rm /tmp/jdk.rpm && \
alternatives --install /usr/bin/java java /usr/java/default/bin/java 20000

# Configure SSH server
# Create OpsCenter account
RUN mkdir -p /var/run/sshd && chmod -rx /var/run/sshd && \
ssh-keygen -t rsa -N '' -f /etc/ssh/ssh_host_rsa_key && \
sed -ri 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config && \
sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config && \
sed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config && \
useradd -m -G users,root -p $(openssl passwd -1 ""opscenter"") opscenter && \
echo ""%root ALL=(ALL) NOPASSWD: ALL"" >> /etc/sudoers

# Configure supervisord
ADD src/supervisord.conf /etc/supervisord.conf
RUN mkdir -p /var/log/supervisor

# Deploy startup script
ADD src/start.sh /usr/local/bin/start

# Necessary since cassandra is trying to override the system limitations
# See https://groups.google.com/forum/#!msg/docker-dev/8TM_jLGpRKU/dewIQhcs7oAJ
RUN rm -f /etc/security/limits.d/cassandra.conf

# Work around a nasty Cassandra packaging error
RUN sed -i s/jamm-0.2.6.jar/jamm-0.2.8.jar/ /usr/share/cassandra/cassandra.in.sh

EXPOSE 7199 7000 7001 9160 9042
EXPOSE 22 8012 61621
USER root
CMD start
","# Cassandra
#
# VERSION               1.0

FROM centos:centos6

# Add source repositories
ADD src/epel6.repo /etc/yum.repos.d/epel6.repo
ADD src/datastax.repo /etc/yum.repos.d/datastax.repo

# Install Java, Install packages (sshd + supervisord + monitoring tools + cassandra)
RUN yum install -y wget tar openssh-server openssh-clients supervisor dsc21 sysstat sudo which openssl hostname && \
yum clean all && \
wget --progress=dot:giga -O /tmp/jdk.rpm --no-cookies --no-check-certificate --header ""Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"" ""http://download.oracle.com/otn-pub/java/jdk/8u20-b26/jdk-8u20-linux-x64.rpm"" && \
rpm -ivh /tmp/jdk.rpm && rm /tmp/jdk.rpm && \
alternatives --install /usr/bin/java java /usr/java/default/bin/java 20000

# Configure SSH server
# Create OpsCenter account
RUN mkdir -p /var/run/sshd && chmod -rx /var/run/sshd && \
ssh-keygen -t rsa -N '' -f /etc/ssh/ssh_host_rsa_key && \
sed -ri 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config && \
sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config && \
sed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config && \
useradd -m -G users,root -p $(openssl passwd -1 ""opscenter"") opscenter && \
echo ""%root ALL=(ALL) NOPASSWD: ALL"" >> /etc/sudoers

# Configure supervisord
ADD src/supervisord.conf /etc/supervisord.conf
RUN mkdir -p /var/log/supervisor

# Deploy startup script
ADD src/start.sh /usr/local/bin/start

# Necessary since cassandra is trying to override the system limitations
# See https://groups.google.com/forum/#!msg/docker-dev/8TM_jLGpRKU/dewIQhcs7oAJ
RUN rm -f /etc/security/limits.d/cassandra.conf

# Work around a nasty Cassandra packaging error
RUN sed -i s/jamm-0.2.6.jar/jamm-0.2.8.jar/ /usr/share/cassandra/cassandra.in.sh

EXPOSE 7199 7000 7001 9160 9042
EXPOSE 22 8012 61621
USER root
CMD start
"
2152,0121275b03224994c07329a6f3adcdb9ddbb8806,Bumped source to 20200608-bb670e4,"Bumped source to 20200608-bb670e4
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200608-81325e1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
201,24f795269baedfcee4a280af07aad47983a57406,Bumped source to 20210402-b63f4d5,"Bumped source to 20210402-b63f4d5
","FROM docker.pkg.github.com/dock0/service/service:20210402-6ae4a5f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20210402-b63f4d5
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2177,8e37d9da22216998d2d92c2218b2c6e2998e5cb6,add Supervisord,"add Supervisord
","#
# Redmine 3.2
#

FROM centos:6.7

MAINTAINER Jozuko ""jozuko.dev@gmail.com""

# ENV http_proxy=http://<ip address>:8080 \
#     https_proxy=http://<ip address>:8080 \
#     no_proxy=/var/run/docker.sock,localhost



#######################################  os  ########################################

ENV DEF_USER=jozuko

# install base module
RUN yum -y update
RUN yum -y install openssh openssh-server openssh-clients git sudo tar which wget unzip sudo

# setup root
RUN echo ""root:rootpw"" | chpasswd

# setup user
RUN useradd $DEF_USER; \
    echo ""$DEF_USER:$DEF_USER"" | chpasswd

# setup sudoers
RUN sed -i -e ""s/Defaults *requiretty/# Defaults requiretty/"" /etc/sudoers; \
    echo ""$DEF_USER ALL=(ALL) ALL"" >> /etc/sudoers.d/$DEF_USER; \
    chmod 440 /etc/sudoers.d/$DEF_USER

# setup TimeZone
RUN mv /etc/localtime /etc/localtime.org; \
    cp /usr/share/zoneinfo/Japan /etc/localtime; \
    sed -i ""s/^ZONE/#ZONE/g"" /etc/sysconfig/clock; \
    sed -i ""s/^UTC/#UTC/g"" /etc/sysconfig/clock; \
    echo ""ZONE=\""Asia/Tokyo\"""" >> /etc/sysconfig/clock; \
    echo ""UTC=\""False\"""" >> /etc/sysconfig/clock



#######################################  ssh  ########################################

# setup sshd
RUN ssh-keygen -q -N """" -t dsa -f /etc/ssh/ssh_host_dsa_key; \
    ssh-keygen -q -N """" -t rsa -f /etc/ssh/ssh_host_rsa_key; \
    sed -i ""s/#UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g"" /etc/ssh/sshd_config; \
    sed -i ""s/UsePAM.*/UsePAM no/g"" /etc/ssh/sshd_config; \
    sed -i ""s/#UseDNS yes/UseDNS no/g"" /etc/ssh/sshd_config

# expose for sshd
EXPOSE 22



####################################### EPEL #######################################

RUN yum -y install epel-release; \
    sed -i ""s/enabled=1/enabled=0/g"" /etc/yum.repos.d/epel.repo; \
    yum -y --enablerepo=epel install libmcrypt-devel



#######################################  pre-install  ########################################

RUN yum -y groupinstall ""Development Tools""; \
    yum -y --nogpgcheck install mysql \
                                mysql-server \
                                mysql-devel \
                                ImageMagick \
                                ImageMagick-devel \
                                ipa-pgothic-fonts \
                                httpd \
                                httpd-devel \
                                apr-devel \
                                openssl-devel \
                                curl-devel \
                                zlib-devel \
                                mod_auth_mysql \
                                mod_dav_svn \
                                mod_wsgi  \
                                mod_perl \
                                perl-Apache-DBI \
                                perl-Digest-SHA \
                                libical \
                                python-docutils \
                                rpmdevtools \
                                readline-devel \
                                ncurses-devel \
                                gdbm-devel \
                                tcl-devel \
                                db4-devel \
                                libyaml-devel \
                                glibc-devel \
                                libxml2-devel \
                                libxslt-devel \
                                sqlite-devel \
                                libffi-devel
RUN chkconfig --add mysqld; \
    chkconfig mysqld on; \
    service mysqld start



#######################################  ruby  ########################################

RUN cd /usr/local/src; \
    curl -O https://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.3.tar.gz; \
    tar xvf ruby-2.2.3.tar.gz; \
    cd ruby-2.2.3; \
    ./configure --disable-install-doc; \
    make; \
    make install


# install bundler, rake, rake-compiler
RUN gem install -f bundler --no-rdoc --no-ri; \
    gem install -f rake --no-rdoc --no-ri; \
    gem install -f rake-compiler --no-rdoc --no-ri


# install passenger
RUN gem install rubygems-update; \
    update_rubygems; \
    gem install passenger --no-rdoc --no-ri; \
    passenger-install-apache2-module --auto



########################################  mysql  ########################################

# create database
RUN mkdir -p /usr/local/src/scripts/; \
    echo ""CREATE DATABASE redmine DEFAULT CHARACTER SET utf8;""                              > /usr/local/src/scripts/createdb.sql; \
    echo ""GRANT ALL PRIVILEGES ON redmine.* TO redmine@localhost IDENTIFIED BY 'redmine';"" >> /usr/local/src/scripts/createdb.sql


RUN /etc/init.d/mysqld start; \
    mysql < /usr/local/src/scripts/createdb.sql



########################################  redmine  ########################################

# install redmine
ENV INSTALL_DIR=/opt/redmine
RUN mkdir -p ${INSTALL_DIR}; \
    cd /usr/local/src/; \
    svn co http://svn.redmine.org/redmine/branches/3.2-stable ${INSTALL_DIR}


# database setting
#COPY scripts/database.yml ${INSTALL_DIR}/config/
RUN mkdir -p /usr/local/src/scripts/; \
    echo ""production:""           > ${INSTALL_DIR}/config/database.yml; \
    echo ""  adapter: mysql2""    >> ${INSTALL_DIR}/config/database.yml; \
    echo ""  database: redmine""  >> ${INSTALL_DIR}/config/database.yml; \
    echo ""  host: localhost""    >> ${INSTALL_DIR}/config/database.yml; \
    echo ""  username: redmine""  >> ${INSTALL_DIR}/config/database.yml; \
    echo ""  password: redmine""  >> ${INSTALL_DIR}/config/database.yml; \
    echo ""  encoding: utf8""     >> ${INSTALL_DIR}/config/database.yml


# install gem packages
RUN cd ${INSTALL_DIR}; \
    gem install nokogiri -- --use-system-libraries=true --with-xml2-include=/usr/include/libxml2/; \
    bundle install --path vendor/bundler --without development test postgresql sqlite

# create secret token
RUN /etc/init.d/mysqld start; \
    cd ${INSTALL_DIR}; \
    bundle exec rake generate_secret_token; \
    RAILS_ENV=production bundle exec rake db:migrate; \
    RAILS_ENV=production REDMINE_LANG=ja bundle exec rake redmine:load_default_data


########################################  redmine-plugins  ########################################

# create work directory
RUN mkdir -p cd /usr/local/src/redmine-plugins


# redmine_xls_export（チケットをExcelにエクスポートするプラグイン）
RUN cd /usr/local/src; \
    git clone https://github.com/two-pack/redmine_xls_export.git redmine-plugins/redmine_xls_export; \
    cd redmine-plugins/redmine_xls_export; \
    git checkout 0.2.1.t9; \
    cd /usr/local/src; \
    cp -fra redmine-plugins/redmine_xls_export ${INSTALL_DIR}/plugins/


# redmine_plugin_views_revisions(redmine_xls_exportに必要なplugin)
RUN cd /usr/local/src; \
    wget -P redmine-plugins http://www.redmine.org/attachments/download/7705/redmine_plugin_views_revisions_v001.zip; \
    yes | unzip -q redmine-plugins/redmine_plugin_views_revisions_v001.zip; \
    mv redmine_plugin_views_revisions ${INSTALL_DIR}/plugins/redmine_plugin_views_revisions; \
    rm -f redmine-plugins/redmine_plugin_views_revisions_v001.zip


# redmine_code_review（コードレビュープラグイン）
RUN cd /usr/local/src; \
    wget -P redmine-plugins https://bitbucket.org/haru_iida/redmine_code_review/downloads/redmine_code_review-0.7.0.zip; \
    yes | unzip -q redmine-plugins/redmine_code_review-0.7.0.zip; \
    mv redmine_code_review ${INSTALL_DIR}/plugins/redmine_code_review; \
    rm -f redmine-plugins/redmine_code_review-0.7.0.zip


# advanced_roadmap(ロードマップを表示するプラグイン)
RUN cd /usr/local/src; \
    wget --no-check-certificate -P redmine-plugins https://redmine.ociotec.com/attachments/download/332/advanced_roadmap%20v0.9.0.tar.gz; \
    tar zxf ""redmine-plugins/advanced_roadmap v0.9.0.tar.gz""; \
    mv ""advanced_roadmap v0.9.0"" ${INSTALL_DIR}/plugins/advanced_roadmap; \
    rm -f ""redmine-plugins/advanced_roadmap v0.9.0.tar.gz""


# scm-creator（redmine上でリポジトリを作成するプラグイン）
RUN cd /usr/local/src; \
    svn export -r 142 http://subversion.andriylesyuk.com/scm-creator redmine_scm; \
    mv redmine_scm ${INSTALL_DIR}/plugins/redmine_scm


# redmine_drafts(作成中のチケットを保存)
RUN git clone https://github.com/jbbarth/redmine_drafts.git ${INSTALL_DIR}/plugins/redmine_drafts


# clipboard_image_paste(チケットにイメージをコピペできる)
RUN git clone https://github.com/peclik/clipboard_image_paste.git ${INSTALL_DIR}/plugins/clipboard_image_paste

# redmine_banner(Redmineのサイト上部に管理者からのメッセージを表示できる)
RUN git clone https://github.com/akiko-pusu/redmine_banner.git ${INSTALL_DIR}/plugins/redmine_banner


# update database
RUN /etc/init.d/mysqld start; \
    cd ${INSTALL_DIR}; \
    gem install nokogiri -- --use-system-libraries=true --with-xml2-include=/usr/include/libxml2/; \
    sed -i -e ""s/gem \""nokogiri\""/#gem \""nokogiri\""/g"" Gemfile; \
    bundle install --path vendor/bundler --without development test postgresql sqlite; \
    RAILS_ENV=production bundle exec rake redmine:plugins; \
    RAILS_ENV=production bundle exec rake redmine:plugins:migrate; \
    RAILS_ENV=production bundle exec rake generate_secret_token; \
    RAILS_ENV=production bundle exec rake db:migrate; \
    RAILS_ENV=production bundle exec rake tmp:cache:clear; \
    RAILS_ENV=production bundle exec rake tmp:sessions:clear; \
    RAILS_ENV=production bundle exec rake redmine:plugins:process_version_change



########################################  [setting]svn  ########################################

RUN mkdir -p /etc/opt/redmine/; \
    echo ""#グループの設定""                       > /etc/opt/redmine/svnauthz; \
    echo ""[groups]""                             >> /etc/opt/redmine/svnauthz; \
    echo ""#developer=harry,sarry""               >> /etc/opt/redmine/svnauthz; \
    echo ""#observer=john,greg""                  >> /etc/opt/redmine/svnauthz; \
    echo """"                                     >> /etc/opt/redmine/svnauthz; \
    echo ""# 全てのプロジェクトに対する共通設定"" >> /etc/opt/redmine/svnauthz; \
    echo ""[/]""                                  >> /etc/opt/redmine/svnauthz; \
    echo ""admin = rw""                           >> /etc/opt/redmine/svnauthz; \
    echo ""* = rw""                               >> /etc/opt/redmine/svnauthz; \
    echo ""guest = r""                            >> /etc/opt/redmine/svnauthz; \
    echo """"                                     >> /etc/opt/redmine/svnauthz; \
    echo ""# サンプルプロジェクトに対する設定""   >> /etc/opt/redmine/svnauthz; \
    echo ""[SampleProject:/]""                    >> /etc/opt/redmine/svnauthz; \
    echo ""guest = rw""                           >> /etc/opt/redmine/svnauthz; \
    echo ""#@developer = rw""                     >> /etc/opt/redmine/svnauthz; \
    echo ""#@observer= r""                        >> /etc/opt/redmine/svnauthz; \
    echo """"                                     >> /etc/opt/redmine/svnauthz; \
    echo ""# 特定のパスの設定""                   >> /etc/opt/redmine/svnauthz; \
    echo ""#[SampleProject:/tags]""               >> /etc/opt/redmine/svnauthz; \
    echo ""#* = r""                               >> /etc/opt/redmine/svnauthz; \
    echo ""#admin = rw""                          >> /etc/opt/redmine/svnauthz



########################################  scm設定  ########################################


RUN mkdir -p $INSTALL_DIR/bin; \
    mkdir -p /var/opt/redmine/git /var/opt/redmine/svn /var/opt/redmine/maven


# scm-creator : create ${INSTALL_DIR}/config/scm.yml
RUN echo 'production:'                                         > ${INSTALL_DIR}/config/scm.yml; \
    echo '   auto_create: true'                               >> ${INSTALL_DIR}/config/scm.yml; \
    echo '   deny_delete: true'                               >> ${INSTALL_DIR}/config/scm.yml; \
    echo '   allow_add_local: true'                           >> ${INSTALL_DIR}/config/scm.yml; \
    echo '   post_create: ${INSTALL_DIR}/bin/scm-post-create' >> ${INSTALL_DIR}/config/scm.yml; \
    echo '   svn:'                                            >> ${INSTALL_DIR}/config/scm.yml; \
    echo '     path: /var/opt/redmine/svn'                    >> ${INSTALL_DIR}/config/scm.yml; \
    echo '     svnadmin: /usr/bin/svnadmin'                   >> ${INSTALL_DIR}/config/scm.yml; \
    echo '     url: repos/svn'                                >> ${INSTALL_DIR}/config/scm.yml; \
    echo '   git:'                                            >> ${INSTALL_DIR}/config/scm.yml; \
    echo '     path: /var/opt/redmine/git'                    >> ${INSTALL_DIR}/config/scm.yml; \
    echo '     git: /usr/bin/git'                             >> ${INSTALL_DIR}/config/scm.yml; \
    echo '     options: --bare '                              >> ${INSTALL_DIR}/config/scm.yml; \
    echo '     url: repos/git'                                >> ${INSTALL_DIR}/config/scm.yml


# scm-creator : create ${INSTALL_DIR}/bin/scm-post-create
RUN echo '#!/bin/sh'                                                            > ${INSTALL_DIR}/bin/scm-post-create; \
    echo ''                                                                    >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo 'case ""$2"" in'                                                        >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo ''                                                                    >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '  git)'                                                              >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    git --git-dir=$1 update-server-info'                             >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    echo ""'                                                          >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '#!/bin/sh'                                                           >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '${INSTALL_DIR}/bin/sync-scm'                                         >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '"" > $1/hooks/post-receive'                                           >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    chmod u+x $1/hooks/post-receive'                                 >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    mv $1/hooks/update.sample $1/hooks/update'                       >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    mv $1/hooks/post-update.sample $1/hooks/post-update'             >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    echo $1 | sed ""s/.*\///"" > $1/description'                       >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    git --git-dir=$1 config --bool hooks.allowunannotated true'      >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    git --git-dir=$1 config --bool receive.denyNonFastforwards true' >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    git --git-dir=$1 config --bool receive.denyDeletes true'         >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    git --git-dir=$1 config --bool core.quotepath false'             >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '  ;;'                                                                >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo ''                                                                    >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '  svn)'                                                              >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    echo ""#!/bin/sh'                                                 >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '${INSTALL_DIR}/bin/sync-scm $1'                                      >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '"" > $1/hooks/post-commit'                                            >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '    chmod u+x $1/hooks/post-commit'                                  >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo '  ;;'                                                                >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo ''                                                                    >> ${INSTALL_DIR}/bin/scm-post-create; \
    echo 'esac'                                                                >> ${INSTALL_DIR}/bin/scm-post-create


# scm-creator : create ${INSTALL_DIR}/bin/sync-scm
RUN echo '#!/bin/sh'                                                                                                                > ${INSTALL_DIR}/bin/sync-scm; \
    echo 'if [ ""$1"" != """" ]'                                                                                                       >> ${INSTALL_DIR}/bin/sync-scm; \
    echo 'then'                                                                                                                    >> ${INSTALL_DIR}/bin/sync-scm; \
    echo '    wget -q -O /dev/null http://localhost/sys/fetch_changesets?id=`echo $1 | sed ""s/\/.*\/\([^\.]*\)\(\..*\)\?/\1/""`'    >> ${INSTALL_DIR}/bin/sync-scm; \
    echo 'else'                                                                                                                    >> ${INSTALL_DIR}/bin/sync-scm; \
    echo '    wget -q -O /dev/null http://localhost/sys/fetch_changesets?id=`echo $PWD | sed ""s/\/.*\/\([^\.]*\)\(\..*\)\?/\1/""`'  >> ${INSTALL_DIR}/bin/sync-scm; \
    echo 'fi'                                                                                                                      >> ${INSTALL_DIR}/bin/sync-scm


# scm-creator : create ${INSTALL_DIR}/hooks/git/post-receive
RUN mkdir -p ${INSTALL_DIR}/hooks/git; \
    echo '#!/bin/sh'                    > ${INSTALL_DIR}/hooks/git/post-receive; \
    echo ''                            >> ${INSTALL_DIR}/hooks/git/post-receive; \
    echo '${INSTALL_DIR}/bin/sync-scm' >> ${INSTALL_DIR}/hooks/git/post-receive


# scm-creator : create ${INSTALL_DIR}/hooks/svn/post-commit
RUN mkdir -p ${INSTALL_DIR}/hooks/svn; \
    echo '#!/bin/sh'                          > ${INSTALL_DIR}/hooks/svn/post-commit; \
    echo ''                                  >> ${INSTALL_DIR}/hooks/svn/post-commit; \
    echo '/opt/redmine/bin/alm-sync-scm $@'  >> ${INSTALL_DIR}/hooks/svn/post-commit



########################################  [setting]apache  ########################################

ENV APACHE_USER=apache
RUN chown -R $APACHE_USER:$APACHE_USER $INSTALL_DIR; \
    chown -R $APACHE_USER:$APACHE_USER /var/opt/redmine



##########################################  jenkins  ########################################

# install jenkins
RUN wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo; \
    rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key; \
    yum install -y java-1.8.0-openjdk; \
    yum install -y jenkins


# mod_auth_mysql-3.0.0-11.el6_0.1.src.rpm for redmine
RUN rpm -vi --force http://vault.centos.org/6.7/os/Source/SPackages/mod_auth_mysql-3.0.0-11.el6_0.1.src.rpm; \
    cd /root/rpmbuild/SOURCES; \
    wget http://www.redmine.org/attachments/download/6443/mod_auth_mysql-3.0.0-redmine.patch; \
    sed -i -e ""s/Release: 11%{?dist}.1/Release: 11%{?dist}.1.redmine/g"" /root/rpmbuild/SPECS/mod_auth_mysql.spec; \
    sed -i -e ""s/Patch10: mod_auth_mysql-3\.0\.0-CVE-2008-2384\.patch/Patch10: mod_auth_mysql-3\.0\.0-CVE-2008-2384\.patch\nPatch20: mod_auth_mysql-3\.0\.0-redmine\.patch/g"" /root/rpmbuild/SPECS/mod_auth_mysql.spec; \
    sed -i -e ""s/%patch10 -p1 -b \.cve2384/%patch10 -p1 -b \.cve2384\n%patch20 -p1/g"" /root/rpmbuild/SPECS/mod_auth_mysql.spec; \
    rpmbuild -bb /root/rpmbuild/SPECS/mod_auth_mysql.spec; \
    rpm -vi --force /root/rpmbuild/RPMS/x86_64/mod_auth_mysql-3.0.0-11.el6.1.redmine.x86_64.rpm


# create httpd-conf
RUN echo '<Location /jenkins>'                                        > /etc/httpd/conf.d/jenkins.conf; \
    echo '  Order allow,deny'                                        >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  Allow from all'                                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo ''                                                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  BrowserMatch ""MSIE"" AuthDigestEnableQueryStringHack=On'  >> /etc/httpd/conf.d/jenkins.conf; \
    echo ''                                                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  ProxyPass        http://127.0.0.1:8080/jenkins'          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  ProxyPassReverse http://127.0.0.1:8080/jenkins'          >> /etc/httpd/conf.d/jenkins.conf; \
    echo ''                                                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  RewriteEngine On'                                        >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  RewriteCond %{LA-U:REMOTE_USER} (.+)'                    >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  RewriteRule . - [E=RU:%1,NS]'                            >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  RequestHeader set X-Forwarded-User %{RU}e'               >> /etc/httpd/conf.d/jenkins.conf; \
    echo ''                                                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLNoPasswd      Off'                              >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMYSQLEnable        On'                               >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLHost          localhost'                        >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLDB            redmine'                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLUser          redmine'                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLPassword      redmine'                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLUserTable     users'                            >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLNameField     login'                            >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLPasswordField hashed_password'                  >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLPwEncryption  sha1-rm'                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLSaltField     salt'                             >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthMySQLGroupField    groups'                           >> /etc/httpd/conf.d/jenkins.conf; \
    echo ''                                                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthName ""Redmine User""'                                 >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  AuthType Basic'                                          >> /etc/httpd/conf.d/jenkins.conf; \
    echo '  require  valid-user'                                     >> /etc/httpd/conf.d/jenkins.conf; \
    echo '</Location>'                                               >> /etc/httpd/conf.d/jenkins.conf


# edit sysconfig
RUN sed -i 's/JENKINS_ARGS=""""/JENKINS_ARGS=""--prefix=\/jenkins""/' /etc/sysconfig/jenkins


# get jenkins plugin-list
RUN mkdir -p /var/lib/jenkins/plugins; \
    chown jenkins.jenkins /var/lib/jenkins/plugins; \
    service jenkins start; \
    sleep 30; \
    wget -O $INSTALL_DIR/bin/jenkins-cli.jar http://localhost:8080/jenkins/jnlpJars/jenkins-cli.jar; \
    curl -L http://updates.jenkins-ci.org/update-center.json | sed '1d;$d' | curl -X POST -H 'Accept: application/json' -d @- http://localhost:8080/updateCenter/byId/default/postBack; \
    java -jar $INSTALL_DIR/bin/jenkins-cli.jar -s http://localhost:8080/jenkins/ install-plugin reverse-proxy-auth-plugin; \
    java -jar $INSTALL_DIR/bin/jenkins-cli.jar -s http://localhost:8080/jenkins/ install-plugin git; \
    java -jar $INSTALL_DIR/bin/jenkins-cli.jar -s http://localhost:8080/jenkins/ install-plugin redmine; \
    java -jar $INSTALL_DIR/bin/jenkins-cli.jar -s http://localhost:8080/jenkins/ install-plugin dashboard-view; \
    mkdir -p /var/lib/jenkins; \
    echo '<?xml version=""1.0"" encoding=""UTF-8""?>'                                                                                           > /var/lib/jenkins/config.xml; \
    echo '<hudson>'                                                                                                                        >> /var/lib/jenkins/config.xml; \
    echo '  <disabledAdministrativeMonitors>'                                                                                              >> /var/lib/jenkins/config.xml; \
    echo '    <string>hudson.diagnosis.ReverseProxySetupMonitor</string>'                                                                  >> /var/lib/jenkins/config.xml; \
    echo '  </disabledAdministrativeMonitors>'                                                                                             >> /var/lib/jenkins/config.xml; \
    echo '  <version>1.0</version>'                                                                                                        >> /var/lib/jenkins/config.xml; \
    echo '  <numExecutors>2</numExecutors>'                                                                                                >> /var/lib/jenkins/config.xml; \
    echo '  <mode>NORMAL</mode>'                                                                                                           >> /var/lib/jenkins/config.xml; \
    echo '  <useSecurity>true</useSecurity>'                                                                                               >> /var/lib/jenkins/config.xml; \
    echo '  <authorizationStrategy class=""hudson.security.AuthorizationStrategy$Unsecured""/>'                                              >> /var/lib/jenkins/config.xml; \
    echo '  <!-- <securityRealm class=""org.jenkinsci.plugins.reverse_proxy_auth.ReverseProxySecurityRealm"" plugin=""reverse-proxy-auth-plugin"">' >> /var/lib/jenkins/config.xml; \
    echo '    <proxyTemplate/>'                                                                                                            >> /var/lib/jenkins/config.xml; \
    echo '    <authContext/>'                                                                                                              >> /var/lib/jenkins/config.xml; \
    echo '    <inhibitInferRootDN>false</inhibitInferRootDN>'                                                                              >> /var/lib/jenkins/config.xml; \
    echo '    <userSearchBase></userSearchBase>'                                                                                           >> /var/lib/jenkins/config.xml; \
    echo '    <userSearch>uid={0}</userSearch>'                                                                                            >> /var/lib/jenkins/config.xml; \
    echo '    <authorities/>'                                                                                                              >> /var/lib/jenkins/config.xml; \
    echo '    <forwardedUser>X-Forwarded-User</forwardedUser>'                                                                             >> /var/lib/jenkins/config.xml; \
    echo '    <headerGroups>X-Forwarded-Groups</headerGroups>'                                                                             >> /var/lib/jenkins/config.xml; \
    echo '    <headerGroupsDelimiter>|</headerGroupsDelimiter>'                                                                            >> /var/lib/jenkins/config.xml; \
    echo '  </securityRealm> -->'                                                                                                              >> /var/lib/jenkins/config.xml; \
    echo '  <projectNamingStrategy class=""jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy""/>'                             >> /var/lib/jenkins/config.xml; \
    echo '  <workspaceDir>${ITEM_ROOTDIR}/workspace</workspaceDir>'                                                                        >> /var/lib/jenkins/config.xml; \
    echo '  <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>'                                                                                 >> /var/lib/jenkins/config.xml; \
    echo '  <markupFormatter class=""hudson.markup.RawHtmlMarkupFormatter"">'                                                                >> /var/lib/jenkins/config.xml; \
    echo '    <disableSyntaxHighlighting>false</disableSyntaxHighlighting>'                                                                >> /var/lib/jenkins/config.xml; \
    echo '  </markupFormatter>'                                                                                                            >> /var/lib/jenkins/config.xml; \
    echo '  <jdks/>'                                                                                                                       >> /var/lib/jenkins/config.xml; \
    echo '  <viewsTabBar class=""hudson.views.DefaultViewsTabBar""/>'                                                                        >> /var/lib/jenkins/config.xml; \
    echo '  <myViewsTabBar class=""hudson.views.DefaultMyViewsTabBar""/>'                                                                    >> /var/lib/jenkins/config.xml; \
    echo '  <clouds/>'                                                                                                                     >> /var/lib/jenkins/config.xml; \
    echo '  <slaves/>'                                                                                                                     >> /var/lib/jenkins/config.xml; \
    echo '  <scmCheckoutRetryCount>0</scmCheckoutRetryCount>'                                                                              >> /var/lib/jenkins/config.xml; \
    echo '  <views>'                                                                                                                       >> /var/lib/jenkins/config.xml; \
    echo '    <hudson.model.AllView>'                                                                                                      >> /var/lib/jenkins/config.xml; \
    echo '      <owner class=""hudson"" reference=""../../..""/>'                                                                              >> /var/lib/jenkins/config.xml; \
    echo '      <name>すべて</name>'                                                                                                       >> /var/lib/jenkins/config.xml; \
    echo '      <filterExecutors>false</filterExecutors>'                                                                                  >> /var/lib/jenkins/config.xml; \
    echo '      <filterQueue>false</filterQueue>'                                                                                          >> /var/lib/jenkins/config.xml; \
    echo '      <properties class=""hudson.model.View$PropertyList""/>'                                                                      >> /var/lib/jenkins/config.xml; \
    echo '    </hudson.model.AllView>'                                                                                                     >> /var/lib/jenkins/config.xml; \
    echo '  </views>'                                                                                                                      >> /var/lib/jenkins/config.xml; \
    echo '  <primaryView>すべて</primaryView>'                                                                                             >> /var/lib/jenkins/config.xml; \
    echo '  <slaveAgentPort>0</slaveAgentPort>'                                                                                            >> /var/lib/jenkins/config.xml; \
    echo '  <label></label>'                                                                                                               >> /var/lib/jenkins/config.xml; \
    echo '  <nodeProperties/>'                                                                                                             >> /var/lib/jenkins/config.xml; \
    echo '  <globalNodeProperties/>'                                                                                                       >> /var/lib/jenkins/config.xml; \
    echo '</hudson>'                                                                                                                       >> /var/lib/jenkins/config.xml; \
    java -jar $INSTALL_DIR/bin/jenkins-cli.jar -s http://localhost:8080/jenkins/ restart



########################################  after-setting  ########################################

# svn auth
RUN mkdir -p /etc/httpd/Apache/Authn; \
    cp ${INSTALL_DIR}/extra/svn/Redmine.pm /etc/httpd/Apache/Authn/

# edit /etc/httpd/conf.d/redmine.conf
RUN echo 'LoadModule passenger_module /usr/local/lib/ruby/gems/2.2.0/gems/passenger-5.0.25/buildout/apache2/mod_passenger.so'   > /etc/httpd/conf.d/redmine.conf; \
    echo 'PassengerRoot /usr/local/lib/ruby/gems/2.2.0/gems/passenger-5.",
331,57fb1aceabff7a4c65311658f7bcad02825224e8,Bump version,"Bump version
","FROM debian:jessie

MAINTAINER Tim Robinson <tim@panubo.com>

ENV DEBIAN_FRONTEND noninteractive

ENV SENSU_VERSION 0.26.5
ENV SENSU_PKG_VERSION 2

# Some dependencies
RUN apt-get update && \
  apt-get -y install curl sudo bc python-jinja2 lvm2 btrfs-tools && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# Setup sensu package repo & Install Sensu
RUN curl http://repositories.sensuapp.org/apt/pubkey.gpg | apt-key add - && \
  echo ""deb     http://repositories.sensuapp.org/apt sensu main"" | tee /etc/apt/sources.list.d/sensu.list && \
  apt-get update && \
  apt-get install sensu=${SENSU_VERSION}-${SENSU_PKG_VERSION} && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
  echo ""EMBEDDED_RUBY=true"" > /etc/default/sensu

RUN curl -L https://github.com/voltgrid/voltgrid-pie/archive/v1.tar.gz | tar -C /usr/local/bin --strip-components 1 -zxf - voltgrid-pie-1/voltgrid.py

# Install some plugins/checks
RUN apt-get update && \
  apt-get install -y build-essential && \
  /opt/sensu/embedded/bin/gem install \
  sensu-plugins-disk-checks \
  sensu-plugins-memory-checks \
  sensu-plugins-load-checks \
  sensu-plugins-kubernetes \
  sensu-plugins-ssl \
  sensu-plugins-aws \
  sensu-plugins-http \
  --no-rdoc --no-ri && \
  apt-get remove -y build-essential && apt-get -y autoremove && apt-get clean && rm -rf /var/lib/apt/lists/*

ENV PATH=/opt/sensu/embedded/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin TMPDIR=/var/tmp HOME=/opt/sensu
ENV LOGLEVEL=info SENSU_CLIENT_SUBSCRIPTIONS=test

# Add custom checks and scripts
ADD register-result /register-result
ADD check-lvmthin.rb /opt/sensu/embedded/bin/check-lvmthin.rb
ADD check-btrfs.rb /opt/sensu/embedded/bin/check-btrfs.rb

# Add config files
ADD voltgrid.conf /usr/local/etc/voltgrid.conf
ADD config.json /etc/sensu/config.json
ADD client.json /etc/sensu/conf.d/client.json
ADD sudoers /etc/sudoers.d/sensu

ADD entry.sh /
ENTRYPOINT [""/entry.sh"", ""/usr/local/bin/voltgrid.py""]
CMD [""/opt/sensu/bin/sensu-client"", ""-c"", ""/etc/sensu/config.json"", ""-d"", ""/etc/sensu/conf.d"", ""-e"", ""/etc/sensu/extensions"", ""-L"", ""warn""]

ENV BUILD_VERSION 0.26.5-4
","FROM debian:jessie

MAINTAINER Tim Robinson <tim@panubo.com>

ENV DEBIAN_FRONTEND noninteractive

ENV SENSU_VERSION 0.26.5
ENV SENSU_PKG_VERSION 2

# Some dependencies
RUN apt-get update && \
  apt-get -y install curl sudo bc python-jinja2 lvm2 btrfs-tools && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# Setup sensu package repo & Install Sensu
RUN curl http://repositories.sensuapp.org/apt/pubkey.gpg | apt-key add - && \
  echo ""deb     http://repositories.sensuapp.org/apt sensu main"" | tee /etc/apt/sources.list.d/sensu.list && \
  apt-get update && \
  apt-get install sensu=${SENSU_VERSION}-${SENSU_PKG_VERSION} && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
  echo ""EMBEDDED_RUBY=true"" > /etc/default/sensu

RUN curl -L https://github.com/voltgrid/voltgrid-pie/archive/v1.tar.gz | tar -C /usr/local/bin --strip-components 1 -zxf - voltgrid-pie-1/voltgrid.py

# Install some plugins/checks
RUN apt-get update && \
  apt-get install -y build-essential && \
  /opt/sensu/embedded/bin/gem install \
  sensu-plugins-disk-checks \
  sensu-plugins-memory-checks \
  sensu-plugins-load-checks \
  sensu-plugins-kubernetes \
  sensu-plugins-ssl \
  sensu-plugins-aws \
  sensu-plugins-http \
  --no-rdoc --no-ri && \
  apt-get remove -y build-essential && apt-get -y autoremove && apt-get clean && rm -rf /var/lib/apt/lists/*

ENV PATH=/opt/sensu/embedded/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin TMPDIR=/var/tmp HOME=/opt/sensu
ENV LOGLEVEL=info SENSU_CLIENT_SUBSCRIPTIONS=test

# Add custom checks and scripts
ADD register-result /register-result
ADD check-lvmthin.rb /opt/sensu/embedded/bin/check-lvmthin.rb
ADD check-btrfs.rb /opt/sensu/embedded/bin/check-btrfs.rb

# Add config files
ADD voltgrid.conf /usr/local/etc/voltgrid.conf
ADD config.json /etc/sensu/config.json
ADD client.json /etc/sensu/conf.d/client.json
ADD sudoers /etc/sudoers.d/sensu

ADD entry.sh /
ENTRYPOINT [""/entry.sh"", ""/usr/local/bin/voltgrid.py""]
CMD [""/opt/sensu/bin/sensu-client"", ""-c"", ""/etc/sensu/config.json"", ""-d"", ""/etc/sensu/conf.d"", ""-e"", ""/etc/sensu/extensions"", ""-L"", ""warn""]

ENV BUILD_VERSION 0.26.5-5
"
290,864d2de66db68ed9f54bc02cf5f5baca50b68573,Update to Nextcloud 19,"Update to Nextcloud 19
","FROM nextcloud:18-apache

COPY entrypoint.sh /

RUN deluser www-data
RUN useradd -u 1000 -ms /bin/bash www-data
RUN usermod -a -G www-data www-data
RUN mkdir /var/www/deploy
","FROM nextcloud:19-apache

COPY entrypoint.sh /

RUN deluser www-data
RUN useradd -u 1000 -ms /bin/bash www-data
RUN usermod -a -G www-data www-data
RUN mkdir /var/www/deploy
"
2109,a7ce882d2b837b8cc5afc7487db511e1cdbbc2d4,Run update-alternatives as root.,"Run update-alternatives as root.
","FROM buildpack-deps:bionic-scm

ENV APP_DIR /srv/app

# Set up common env variables
ENV TZ=America/Los_Angeles
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8
ENV DEBIAN_FRONTEND=noninteractive

RUN adduser --disabled-password --gecos ""Default Jupyter user"" jovyan
RUN install -d -o jovyan -g jovyan ${APP_DIR}

RUN apt-get update --yes
RUN apt-get install --yes \
            libdpkg-perl \
            python3.6 \
            python3.6-venv \
            python3.6-dev \
            python3-venv \
            tar \
            vim \
            nodejs \
            gcc \
            locales

RUN echo ""en_US.UTF-8 UTF-8"" > /etc/locale.gen && \
    locale-gen

# for nbconvert
RUN apt-get install --yes \
            pandoc \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-generic-recommended

ENV PATH ${APP_DIR}/venv/bin:$PATH

# Set this to be on container storage, rather than under $HOME
ENV IPYTHONDIR ${APP_DIR}/venv/etc/ipython

WORKDIR /home/jovyan

USER jovyan
RUN python3.6 -m venv ${APP_DIR}/venv

COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt

RUN pip install --no-cache-dir jupyterhub==0.9.2

# Install nbzip
RUN jupyter serverextension enable  --sys-prefix --py nbzip && \
    jupyter nbextension     install --sys-prefix --py nbzip && \
    jupyter nbextension     enable  --sys-prefix --py nbzip

ADD ipython_config.py ${IPYTHONDIR}/ipython_config.py

# prevent bibtex from interupting nbconvert
RUN update-alternatives --install /usr/bin/bibtex bibtex /bin/true 200

EXPOSE 8888
",
405,b8df58c6108bbd3fbace22be3ebc17ef56d3c925,Bumped source to 20200712-639848e,"Bumped source to 20200712-639848e
","FROM docker.pkg.github.com/dock0/arch/arch:20200712-82c8d7f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200712-639848e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
182,30846deb06c13748a4a16641840979e5b7c1b48a,update dependencies,"update dependencies
","FROM httpd:2.4.12

RUN apt-get update && apt-get install -y \
  git-core \
  liburi-perl \
  libwww-perl 


RUN mkdir -p /var/log/httpd/api.metagenomics/ && \
  cd / && \
  git clone -b api https://github.com/MG-RAST/MG-RAST.git && \
  cd /MG-RAST && \
  make


#RUN apt-get install -y PIPELINE_DEPENDENCIES HERE <------------------

RUN cd / && git clone https://github.com/MG-RAST/pipeline.git

RUN mkdir -p /sites/1/ && \
  cd /sites/1/ && \
  ln -s /MG-RAST/

# Configuration in mounted directory
RUN cd /MG-RAST/conf && ln -s /api-server/Conf.pm




# Execute:
# /usr/local/apache2/bin/httpd -DFOREGROUND -f /MG-RAST/conf/httpd.conf","FROM httpd:2.4.12

# MG-RAST dependencies
RUN apt-get update && apt-get install -y \
  git-core \
  libpq-dev
  perl-modules \
  liburi-perl \
  libwww-perl \
  libjson-perl \
  libdbi-perl \
  libdbd-mysql-perl \
  libdbd-pg-perl \
  libdigest-md5-perl \
  libfile-slurp-perl \
  libhtml-strip-perl \
  liblist-moreutils-perl \
  libcache-memcached-perl \
  libhtml-template-perl \
  libdigest-md5-perl \
  libdigest-md5-file-perl \
  libdatetime-perl \
  liblist-allutils-perl \
  libposix-strptime-perl


RUN mkdir -p /var/log/httpd/api.metagenomics/ && \
  cd / && \
  git clone -b api https://github.com/MG-RAST/MG-RAST.git && \
  cd /MG-RAST && \
  make

# pipeline dependencies
RUN apt-get install -y \
  python-dev \
  python-pip \
  libtemplate-perl

RUN pip install gspread xlrd openpyxl lepl

RUN cd / && git clone https://github.com/MG-RAST/pipeline.git
RUN cp /pipeline/lib/StreamingUpload.pm /MG-RAST/site/lib/StreamingUpload.pm

RUN mkdir -p /sites/1/ && \
  cd /sites/1/ && \
  ln -s /MG-RAST/

# Configuration in mounted directory
RUN cd /MG-RAST/conf && ln -s /api-server/Conf.pm
RUN cd /pipeline/conf && ln -s /api-server/PipelineAWE_Conf.pm


# Execute:
# /usr/local/apache2/bin/httpd -DFOREGROUND -f /MG-RAST/conf/httpd.conf"
2188,c2d72b924c078909a859d56fd4cec5f84685e76e,update and cleanup imageservice Dockerfile,"update and cleanup imageservice Dockerfile
","FROM tomcat:8-alpine

# service deployment section
RUN mkdir -p /data \
/data/images \
/data/images/config \
  /data/images/elasticsearch \
  /data/images/store \
  /data/images/incoming \
  /data/images/bin/imgcnv

VOLUME /data/images/store /data/images/elasticsearch

COPY images.war $CATALINA_HOME/webapps/

ENV \
BUILD_DEPS=""gettext"" \
RUNTIME_DEPS=""libintl""

RUN \
    apk add --update $RUNTIME_DEPS && \
    apk add --virtual build_deps $BUILD_DEPS &&  \
    cp /usr/bin/envsubst /usr/local/bin/envsubst && \
    apk del build_deps

RUN apk add --update tini
ENTRYPOINT [""tini"", ""--""]
CMD [""catalina.sh"", ""run""]
",
260,cd200b5dcb7d0696746978bf766b2c1af115bc10,Updated to pull from master rather than latest,"Updated to pull from master rather than latest
","FROM hpess/base:latest
MAINTAINER Karl Stoney <karl.stoney@hp.com>

# Install chef-client
RUN curl -s -L https://www.opscode.com/chef/install.sh | bash && \
    rm -rf /opt/chef/embedded/apps/chef/spec && \
    rm -rf /opt/chef/embedded/apps/chef/kitchen-tests && \
    rm -rf /opt/chef/embedded/apps/chef/distro
    

# Setup the directories that are required
RUN mkdir -p /etc/chef && \
    mkdir -p /chef/cookbooks && \
    mkdir -p /chef/roles && \
    mkdir -p /chef/environments && \
    mkdir -p /chef/data_bags

COPY client.rb /etc/chef/client.rb

# Add our preboot scripts
COPY preboot/* /preboot/ 
","FROM hpess/base:master
MAINTAINER Karl Stoney <karl.stoney@hp.com>

# Install chef-client
RUN curl -s -L https://www.opscode.com/chef/install.sh | bash && \
    rm -rf /opt/chef/embedded/apps/chef/spec && \
    rm -rf /opt/chef/embedded/apps/chef/kitchen-tests && \
    rm -rf /opt/chef/embedded/apps/chef/distro
    

# Setup the directories that are required
RUN mkdir -p /etc/chef && \
    mkdir -p /chef/cookbooks && \
    mkdir -p /chef/roles && \
    mkdir -p /chef/environments && \
    mkdir -p /chef/data_bags

COPY client.rb /etc/chef/client.rb

# Add our preboot scripts
COPY preboot/* /preboot/ 
"
295,dfa7ea57d1ce5e14bf39a6a9d741114c973e104a,Updated stream-publisher Dockerfile,"Updated stream-publisher Dockerfile
","FROM ubuntu

ENV http_proxy http://proxy.ifmo.ru:3128
ENV https_proxy http://proxy.ifmo.ru:3128
ENV DEBIAN_FRONTEND noninteractive

WORKDIR /root

RUN apt-get update
RUN apt-get install -y wget binutils java-common unzip

RUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections

RUN wget https://db.tt/dFU3BqFP -O /root/oracle-java8-installer_8u5-1~webupd8~3_all.deb
RUN dpkg -i oracle-java8-installer_8u5-1~webupd8~3_all.deb

RUN apt-get update
RUN apt-get install -y maven git

RUN rm /usr/share/maven/conf/settings.xml
ADD settings.xml /usr/share/maven/conf/settings.xml
ADD https://raw.githubusercontent.com/ailabitmo/DAAFSE/master/electricmeters.owl /root/DAAFSE/srteam-publisher/electricmeters.ttl

RUN git clone https://github.com/ailabitmo/DAAFSE.git
RUN cd DAAFSE/stream-publisher/ && mvn clean install -DskipTests=true

RUN wget https://dl.dropboxusercontent.com/u/1497018/daafse/server.log.zip -O /root/DAAFSE/stream-publisher/server.log.zip
RUN cd /root/DAAFSE/stream-publisher/ && unzip server.log.zip -d .

RUN ls -al /root && ls -al /root/DAAFSE && ls -al /root/DAAFSE/stream-publisher/
","FROM ubuntu

ENV http_proxy http://proxy.ifmo.ru:3128
ENV https_proxy http://proxy.ifmo.ru:3128
ENV DEBIAN_FRONTEND noninteractive

WORKDIR /root

RUN apt-get update
RUN apt-get install -y wget binutils java-common unzip

RUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections

RUN wget https://db.tt/dFU3BqFP -O /root/oracle-java8-installer_8u5-1~webupd8~3_all.deb
RUN dpkg -i oracle-java8-installer_8u5-1~webupd8~3_all.deb

RUN apt-get update
RUN apt-get install -y maven git

RUN rm /usr/share/maven/conf/settings.xml
ADD settings.xml /usr/share/maven/conf/settings.xml
RUN wget https://raw.githubusercontent.com/ailabitmo/DAAFSE/master/electricmeters.owl -O /root/DAAFSE/srteam-publisher/electricmeters.ttl

RUN git clone https://github.com/ailabitmo/DAAFSE.git
RUN cd DAAFSE/stream-publisher/ && mvn clean install -DskipTests=true

RUN wget https://dl.dropboxusercontent.com/u/1497018/daafse/server.log.zip -O /root/DAAFSE/stream-publisher/server.log.zip
RUN cd /root/DAAFSE/stream-publisher/ && unzip server.log.zip -d .

RUN ls -al /root && ls -al /root/DAAFSE && ls -al /root/DAAFSE/stream-publisher/
"
305,048a70102aacea3fadfaf08164a04efa7752fe3d,Add phantomjs for clojurescript projects.,"Add phantomjs for clojurescript projects.
","FROM lynxtp/openjdk-jdk:8
MAINTAINER ""Tom Vaughan <tvaughan@lynxtp.com>""

RUN curl -sL -o /usr/local/bin/lein https://raw.githubusercontent.com/technomancy/leiningen/2.6.1/bin/lein \
    && chmod a+x /usr/local/bin/lein

ENV LEIN_HOME /srv/lein
ENV LEIN_ROOT 1

ENV LEIN_REPL_HOST 0.0.0.0
ENV LEIN_REPL_PORT 5309

EXPOSE $LEIN_REPL_PORT

CMD [""lein""]
","FROM lynxtp/openjdk-jdk:8
MAINTAINER ""Tom Vaughan <tvaughan@lynxtp.com>""

ENV PATH /opt/phantomjs/bin:$PATH

RUN curl -sL -o /tmp/phantomjs.tar.bz2 https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2     \
    && mkdir -p /opt/phantomjs                                                                                                  \
    && tar --strip-components=1 -C /opt/phantomjs -xf /tmp/phantomjs.tar.bz2                                                    \
    && rm -f /tmp/phantomjs.tar.bz2

RUN curl -sL -o /usr/local/bin/lein https://raw.githubusercontent.com/technomancy/leiningen/2.6.1/bin/lein \
    && chmod a+x /usr/local/bin/lein

ENV LEIN_HOME /srv/lein
ENV LEIN_ROOT 1

ENV LEIN_REPL_HOST 0.0.0.0
ENV LEIN_REPL_PORT 5309

EXPOSE $LEIN_REPL_PORT

CMD [""lein""]
"
2217,41b71e1c6e5a0edfa9f31e43f6e78c4c67a851bc,Updated Atlassian Bamboo master branch to latest version 6.6.3,"Updated Atlassian Bamboo master branch to latest version 6.6.3
","FROM openjdk:8-alpine

# Setup useful environment variables
ENV BAMBOO_HOME     /var/atlassian/bamboo
ENV BAMBOO_INSTALL  /opt/atlassian/bamboo
ENV BAMBOO_VERSION  6.6.2

# Install Atlassian Bamboo and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk add --no-cache curl xmlstarlet git openssh bash ttf-dejavu libc6-compat \
    && mkdir -p               ""${BAMBOO_HOME}/lib"" \
    && chmod -R 700           ""${BAMBOO_HOME}"" \
    && chown -R daemon:daemon ""${BAMBOO_HOME}"" \
    && mkdir -p               ""${BAMBOO_INSTALL}"" \
    && curl -Ls               ""https://www.atlassian.com/software/bamboo/downloads/binary/atlassian-bamboo-${BAMBOO_VERSION}.tar.gz"" | tar -zx --directory  ""${BAMBOO_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.40.tar.gz"" | tar -xz --directory ""${BAMBOO_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar"" \
    && chmod -R 700           ""${BAMBOO_INSTALL}"" \
    && chown -R daemon:daemon ""${BAMBOO_INSTALL}"" \
    && sed --in-place         's/^# umask 0027$/umask 0027/g' ""${BAMBOO_INSTALL}/bin/setenv.sh"" \
    && xmlstarlet             ed --inplace \
        --delete              ""Server/Service/Engine/Host/@xmlValidation"" \
        --delete              ""Server/Service/Engine/Host/@xmlNamespaceAware"" \
                              ""${BAMBOO_INSTALL}/conf/server.xml"" \
    && touch -d ""@0""          ""${BAMBOO_INSTALL}/conf/server.xml""


# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP and SSH ports.
EXPOSE 8085 54663

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/bamboo"",""/opt/atlassian/bamboo/logs""]

# Set the default working directory as the Bamboo home directory.
WORKDIR /var/atlassian/bamboo

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian Bamboo as a foreground process by default.
CMD [""/opt/atlassian/bamboo/bin/start-bamboo.sh"", ""-fg""]
",
2165,393d73ac7d53ac7dc278d5c67d519f2c2123d7bf,upgrade piwik to 2.15.0,"upgrade piwik to 2.15.0
","#
# Dockerfile for piwik
#

FROM php:5.6-apache
MAINTAINER kev <noreply@datageek.info>

RUN apt-get update \
    && apt-get install -y git \
                          libfreetype6 \
                          libfreetype6-dev \
                          libjpeg62-turbo \
                          libjpeg-dev \
                          libpng12-0 \
                          libpng12-dev \
                          libzip2 \
                          libzip-dev \
    && docker-php-ext-configure gd --with-freetype-dir=/usr \
                                   --with-jpeg-dir=/usr \
                                   --with-png-dir=/usr \
    && docker-php-ext-install gd \
                              mbstring \
                              mysqli \
                              zip \
    && apt-get purge --auto-remove -y libfreetype6-dev \
                                      libjpeg-dev \
                                      libpng12-dev \
                                      libzip-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /var/www/html

ENV PIWIK_VER 2.14.3
ENV PIWIK_MD5 1a613d36723ca5ccd52a9a9121d09a83
ENV PIWIK_URL https://github.com/piwik/piwik/archive/$PIWIK_VER.tar.gz
ENV PIWIK_FILE piwik.tar.gz

RUN curl -sSL ${PIWIK_URL} -o ${PIWIK_FILE} \
    && echo ""${PIWIK_MD5} ${PIWIK_FILE}"" | md5sum -c \
    && tar xzf ${PIWIK_FILE} --strip 1 \
    && rm ${PIWIK_FILE} \
    && curl -sS https://getcomposer.org/installer | php \
    && php composer.phar install \
    && echo ""always_populate_raw_post_data=-1"" >> /usr/local/etc/php/php.ini \
    && chown -R www-data:www-data .

",
184,4e7ee079fe8783bb8b1ff0f98c7196af4336e598,Bumped source to 20220812-c7700b0,"Bumped source to 20220812-c7700b0
","FROM ghcr.io/dock0/arch:20220812-24486a6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220812-c7700b0
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
411,da0397d58065c7b13e649cfacf5933a5f3cd6fa4,Add stackage to IHaskell build,"Add stackage to IHaskell build

Sets up the IHaskell build to use a fixed snapshot of package
versions, verified as working (currently being used in the IHaskell
master branch).

Switch to lts-2.22

This is the last snapshot built for GHC-7.8.4
","# Docker demo image, as used on try.jupyter.org and tmpnb.org

FROM jupyter/minimal-notebook:4.0

MAINTAINER Jupyter Project <jupyter@googlegroups.com>

# Install system libraries first as root
USER root

# Julia dependencies
RUN apt-get update &&  \
    apt-get install -y julia libnettle4 && \
    apt-get clean

# R dependencies that conda can't provide (X, fonts, compilers)
RUN apt-get update && \
    apt-get install -y libxrender1 fonts-dejavu gfortran gcc && \
    apt-get clean

# The Glorious Glasgow Haskell Compiler
RUN apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common && \
    add-apt-repository -y ppa:hvr/ghc && \
    sed -i s/jessie/trusty/g /etc/apt/sources.list.d/hvr-ghc-jessie.list && \
    apt-get update && \
    apt-get install -y cabal-install-1.22 ghc-7.8.4 happy-1.19.4 alex-3.1.3 && \
    apt-get clean

# IHaskell dependencies
RUN apt-get install -y --no-install-recommends zlib1g-dev libzmq3-dev libtinfo-dev libcairo2-dev libpango1.0-dev && apt-get clean

# Ruby dependencies
RUN apt-get install -y --no-install-recommends ruby ruby-dev libtool autoconf automake gnuplot-nox libsqlite3-dev libatlas-base-dev libgsl0-dev libmagick++-dev imagemagick && \
    ln -s /usr/bin/libtoolize /usr/bin/libtool && \
    apt-get clean
RUN gem install --no-rdoc --no-ri sciruby-full

# Spark dependencies
ENV APACHE_SPARK_VERSION 1.4.1
RUN apt-get update && \
    apt-get install -y --no-install-recommends openjdk-7-jre-headless && \
    apt-get clean
RUN wget -qO - http://d3kbcqa49mib13.cloudfront.net/spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz | tar -xz -C /usr/local/ && \
    cd /usr/local && \
    ln -s spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6 spark

# Scala Spark kernel (build and cleanup)
RUN cd /tmp && \
    echo deb http://dl.bintray.com/sbt/debian / > /etc/apt/sources.list.d/sbt.list && \
    apt-get update && \
    git clone https://github.com/ibm-et/spark-kernel.git && \
    apt-get install -yq --force-yes --no-install-recommends sbt && \
    cd spark-kernel && \
    sbt compile -Xms1024M \
        -Xmx2048M \
        -Xss1M \
        -XX:+CMSClassUnloadingEnabled \
        -XX:MaxPermSize=1024M && \
    sbt pack && \
    mv kernel/target/pack /opt/sparkkernel && \
    chmod +x /opt/sparkkernel && \
    rm -rf ~/.ivy2 && \
    rm -rf ~/.sbt && \
    rm -rf /tmp/spark-kernel && \
    apt-get remove -y sbt && \
    apt-get clean

# Now switch to jovyan for all conda and other package manager installs
USER jovyan

ENV PATH /home/jovyan/.cabal/bin:/opt/cabal/1.22/bin:/opt/ghc/7.8.4/bin:/opt/happy/1.19.4/bin:/opt/alex/3.1.3/bin:$PATH
ENV SPARK_HOME /usr/local/spark
ENV PYTHONPATH $SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.8.2.1-src.zip

# Python packages
RUN conda install --yes numpy pandas scikit-learn scikit-image matplotlib scipy seaborn sympy cython patsy statsmodels cloudpickle dill numba bokeh && conda clean -yt

# Now for a python2 environment
RUN conda create -p $CONDA_DIR/envs/python2 python=2.7 ipykernel numpy pandas scikit-learn scikit-image matplotlib scipy seaborn sympy cython patsy statsmodels cloudpickle dill numba bokeh && conda clean -yt
RUN $CONDA_DIR/envs/python2/bin/python \
    $CONDA_DIR/envs/python2/bin/ipython \
    kernelspec install-self --user

# IRuby
RUN iruby register

# R packages
RUN conda config --add channels r
RUN conda install --yes r-irkernel r-plyr r-devtools r-rcurl r-dplyr r-ggplot2 r-caret rpy2 r-tidyr r-shiny r-rmarkdown r-forecast r-stringr r-rsqlite r-reshape2 r-nycflights13 r-randomforest && conda clean -yt

# IJulia and Julia packages
RUN julia -e 'Pkg.add(""IJulia"")'
RUN julia -e 'Pkg.add(""Gadfly"")' && julia -e 'Pkg.add(""RDatasets"")'

# IHaskell + IHaskell-Widgets + Dependencies for examples
RUN cabal update && \
    cabal install cpphs && \
    cabal install gtk2hs-buildtools && \
    cabal install ihaskell-0.8.0.0 --reorder-goals && \
    cabal install singletons-1.1.2.1 ihaskell-widgets-0.2.0.0 HTTP Chart Chart-cairo && \
    ihaskell install && \
    rm -fr $(echo ~/.cabal/bin/* | grep -iv ihaskell) ~/.cabal/packages ~/.cabal/share/doc ~/.cabal/setup-exe-cache ~/.cabal/logs

# Extra Kernels
RUN pip install --user --no-cache-dir bash_kernel && \
    python -m bash_kernel.install

# Clone featured notebooks before adding local content to avoid recloning
# everytime something changes locally
RUN mkdir -p /home/jovyan/work/communities && \
    mkdir -p /home/jovyan/work/featured
RUN git clone --depth 1 https://github.com/jvns/pandas-cookbook.git /home/jovyan/work/featured/pandas-cookbook/
RUN git clone --depth 1 https://github.com/gibiansky/IHaskell.git /home/jovyan/work/IHaskell/ && \
    mv /home/jovyan/work/IHaskell/ihaskell-display/ihaskell-widgets/Examples /home/jovyan/work/featured/ihaskell-widgets && \
    rm -r /home/jovyan/work/IHaskell

# Add local content, starting with notebooks and datasets which are the largest
# so that later, smaller file changes do not cause a complete recopy during 
# build
COPY notebooks/ /home/jovyan/work/
COPY datasets/ /home/jovyan/work/datasets/

# Add Scala kernel spec
RUN mkdir -p /opt/conda/share/jupyter/kernels/scala
COPY resources/kernel.json /opt/conda/share/jupyter/kernels/scala/

# Switch back to root for permission fixes, conversions, and trust. Make sure
# trust is done as jovyan so that the signing secret winds up in the jovyan
# profile, not root's
USER root

# Convert notebooks to the current format and trust them
RUN find /home/jovyan/work -name '*.ipynb' -exec ipython nbconvert --to notebook {} --output {} \; && \
    chown -R jovyan:users /home/jovyan && \
    sudo -u jovyan env ""PATH=$PATH"" find /home/jovyan/work -name '*.ipynb' -exec ipython trust {} \;

# Finally, add the site specific tmpnb.org / try.jupyter.org configuration.
# These should probably be split off into a separate docker image so that others
# can reuse the very expensive build of all the above with their own site 
# customization.

# Expose our custom setup to the installed ipython (for mounting by nginx)
COPY resources/custom.js /opt/conda/lib/python3.4/site-packages/notebook/static/custom/

# Add the templates
COPY resources/templates/ /srv/templates/
RUN chmod a+rX /srv/templates

# Append tmpnb specific options to the base config
COPY resources/jupyter_notebook_config.partial.py /tmp/
RUN cat /tmp/jupyter_notebook_config.partial.py >> /home/jovyan/.jupyter/jupyter_notebook_config.py && \
    rm /tmp/jupyter_notebook_config.partial.py
","# Docker demo image, as used on try.jupyter.org and tmpnb.org

FROM jupyter/minimal-notebook:4.0

MAINTAINER Jupyter Project <jupyter@googlegroups.com>

# Install system libraries first as root
USER root

# Julia dependencies
RUN apt-get update &&  \
    apt-get install -y julia libnettle4 && \
    apt-get clean

# R dependencies that conda can't provide (X, fonts, compilers)
RUN apt-get update && \
    apt-get install -y libxrender1 fonts-dejavu gfortran gcc && \
    apt-get clean

# The Glorious Glasgow Haskell Compiler
RUN apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common && \
    add-apt-repository -y ppa:hvr/ghc && \
    sed -i s/jessie/trusty/g /etc/apt/sources.list.d/hvr-ghc-jessie.list && \
    apt-get update && \
    apt-get install -y cabal-install-1.22 ghc-7.8.4 happy-1.19.4 alex-3.1.3 && \
    apt-get clean

# IHaskell dependencies
RUN apt-get install -y --no-install-recommends zlib1g-dev libzmq3-dev libtinfo-dev libcairo2-dev libpango1.0-dev && apt-get clean

# Ruby dependencies
RUN apt-get install -y --no-install-recommends ruby ruby-dev libtool autoconf automake gnuplot-nox libsqlite3-dev libatlas-base-dev libgsl0-dev libmagick++-dev imagemagick && \
    ln -s /usr/bin/libtoolize /usr/bin/libtool && \
    apt-get clean
RUN gem install --no-rdoc --no-ri sciruby-full

# Spark dependencies
ENV APACHE_SPARK_VERSION 1.4.1
RUN apt-get update && \
    apt-get install -y --no-install-recommends openjdk-7-jre-headless && \
    apt-get clean
RUN wget -qO - http://d3kbcqa49mib13.cloudfront.net/spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz | tar -xz -C /usr/local/ && \
    cd /usr/local && \
    ln -s spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6 spark

# Scala Spark kernel (build and cleanup)
RUN cd /tmp && \
    echo deb http://dl.bintray.com/sbt/debian / > /etc/apt/sources.list.d/sbt.list && \
    apt-get update && \
    git clone https://github.com/ibm-et/spark-kernel.git && \
    apt-get install -yq --force-yes --no-install-recommends sbt && \
    cd spark-kernel && \
    sbt compile -Xms1024M \
        -Xmx2048M \
        -Xss1M \
        -XX:+CMSClassUnloadingEnabled \
        -XX:MaxPermSize=1024M && \
    sbt pack && \
    mv kernel/target/pack /opt/sparkkernel && \
    chmod +x /opt/sparkkernel && \
    rm -rf ~/.ivy2 && \
    rm -rf ~/.sbt && \
    rm -rf /tmp/spark-kernel && \
    apt-get remove -y sbt && \
    apt-get clean

# Now switch to jovyan for all conda and other package manager installs
USER jovyan

ENV PATH /home/jovyan/.cabal/bin:/opt/cabal/1.22/bin:/opt/ghc/7.8.4/bin:/opt/happy/1.19.4/bin:/opt/alex/3.1.3/bin:$PATH
ENV SPARK_HOME /usr/local/spark
ENV PYTHONPATH $SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.8.2.1-src.zip

# Python packages
RUN conda install --yes numpy pandas scikit-learn scikit-image matplotlib scipy seaborn sympy cython patsy statsmodels cloudpickle dill numba bokeh && conda clean -yt

# Now for a python2 environment
RUN conda create -p $CONDA_DIR/envs/python2 python=2.7 ipykernel numpy pandas scikit-learn scikit-image matplotlib scipy seaborn sympy cython patsy statsmodels cloudpickle dill numba bokeh && conda clean -yt
RUN $CONDA_DIR/envs/python2/bin/python \
    $CONDA_DIR/envs/python2/bin/ipython \
    kernelspec install-self --user

# IRuby
RUN iruby register

# R packages
RUN conda config --add channels r
RUN conda install --yes r-irkernel r-plyr r-devtools r-rcurl r-dplyr r-ggplot2 r-caret rpy2 r-tidyr r-shiny r-rmarkdown r-forecast r-stringr r-rsqlite r-reshape2 r-nycflights13 r-randomforest && conda clean -yt

# IJulia and Julia packages
RUN julia -e 'Pkg.add(""IJulia"")'
RUN julia -e 'Pkg.add(""Gadfly"")' && julia -e 'Pkg.add(""RDatasets"")'

# IHaskell + IHaskell-Widgets + Dependencies for examples
RUN cabal update && \
    curl 'https://www.stackage.org/lts-2.22/cabal.config?global=true' >> ~/.cabal/config && \
    cabal install cpphs && \
    cabal install gtk2hs-buildtools && \
    cabal install ihaskell-0.8.0.0 --reorder-goals && \
    cabal install ihaskell-widgets-0.2.0.0 HTTP Chart Chart-cairo && \
    ihaskell install && \
    rm -fr $(echo ~/.cabal/bin/* | grep -iv ihaskell) ~/.cabal/packages ~/.cabal/share/doc ~/.cabal/setup-exe-cache ~/.cabal/logs

# Extra Kernels
RUN pip install --user --no-cache-dir bash_kernel && \
    python -m bash_kernel.install

# Clone featured notebooks before adding local content to avoid recloning
# everytime something changes locally
RUN mkdir -p /home/jovyan/work/communities && \
    mkdir -p /home/jovyan/work/featured
RUN git clone --depth 1 https://github.com/jvns/pandas-cookbook.git /home/jovyan/work/featured/pandas-cookbook/
RUN git clone --depth 1 https://github.com/gibiansky/IHaskell.git /home/jovyan/work/IHaskell/ && \
    mv /home/jovyan/work/IHaskell/ihaskell-display/ihaskell-widgets/Examples /home/jovyan/work/featured/ihaskell-widgets && \
    rm -r /home/jovyan/work/IHaskell

# Add local content, starting with notebooks and datasets which are the largest
# so that later, smaller file changes do not cause a complete recopy during 
# build
COPY notebooks/ /home/jovyan/work/
COPY datasets/ /home/jovyan/work/datasets/

# Add Scala kernel spec
RUN mkdir -p /opt/conda/share/jupyter/kernels/scala
COPY resources/kernel.json /opt/conda/share/jupyter/kernels/scala/

# Switch back to root for permission fixes, conversions, and trust. Make sure
# trust is done as jovyan so that the signing secret winds up in the jovyan
# profile, not root's
USER root

# Convert notebooks to the current format and trust them
RUN find /home/jovyan/work -name '*.ipynb' -exec ipython nbconvert --to notebook {} --output {} \; && \
    chown -R jovyan:users /home/jovyan && \
    sudo -u jovyan env ""PATH=$PATH"" find /home/jovyan/work -name '*.ipynb' -exec ipython trust {} \;

# Finally, add the site specific tmpnb.org / try.jupyter.org configuration.
# These should probably be split off into a separate docker image so that others
# can reuse the very expensive build of all the above with their own site 
# customization.

# Expose our custom setup to the installed ipython (for mounting by nginx)
COPY resources/custom.js /opt/conda/lib/python3.4/site-packages/notebook/static/custom/

# Add the templates
COPY resources/templates/ /srv/templates/
RUN chmod a+rX /srv/templates

# Append tmpnb specific options to the base config
COPY resources/jupyter_notebook_config.partial.py /tmp/
RUN cat /tmp/jupyter_notebook_config.partial.py >> /home/jovyan/.jupyter/jupyter_notebook_config.py && \
    rm /tmp/jupyter_notebook_config.partial.py
"
231,3bb96be0196d83594d31266f9021379d29aeb385,update docker reference to woff tools,"update docker reference to woff tools

test plan:
- rebuild a docker container based on the canvas Dockerfile from scratch
- it should work

Change-Id: I096d33a73a5d2679a4e6d3c64ba2264d8274ed1d
Reviewed-on: https://gerrit.instructure.com/94024
Reviewed-by: Benjamin Christian Nelson <4a283f6b032925e40a485c88ede5597d7d65a090@instructure.com>
Reviewed-by: Alex Ortiz-Rosado <0d962001085a39e5d1cf1e3401131c0acb3ce8a1@instructure.com>
QA-Review: Benjamin Christian Nelson <4a283f6b032925e40a485c88ede5597d7d65a090@instructure.com>
Tested-by: Jenkins
Product-Review: Simon Williams <088e16a1019277b15d58faf0541e11910eb756f6@instructure.com>
","FROM instructure/ruby-passenger:2.1

USER root
RUN curl -sL https://deb.nodesource.com/setup_6.x | bash -
RUN  apt-get update -qq \
  && apt-get install -qqy \
       nodejs \
       postgresql-client \
       libxmlsec1-dev \
       unzip \
       fontforge \
       python-lxml \
  && npm install -g gulp \
  && rm -rf /var/lib/apt/lists/*

# We will need sfnt2woff in order to build fonts
WORKDIR /root
RUN if [ -e /var/lib/gems/$RUBY_MAJOR.0/gems/bundler-* ]; then BUNDLER_INSTALL=""-i /var/lib/gems/$RUBY_MAJOR.0""; fi \
  && curl -O http://people.mozilla.org/~jkew/woff/woff-code-latest.zip \
  && unzip woff-code-latest.zip \
  && make \
  && cp sfnt2woff /usr/local/bin \
  && gem uninstall --all --ignore-dependencies --force $BUNDLER_INSTALL bundler \
  && gem install bundler --no-document -v 1.12.5 \
  && find $GEM_HOME ! -user docker | xargs chown docker:docker

USER docker

RUN mkdir -p /home/docker/.gem/ruby/$RUBY_MAJOR.0
WORKDIR /usr/src/app

ENV RAILS_ENV development
ENV NGINX_MAX_UPLOAD_SIZE 10g
","FROM instructure/ruby-passenger:2.1

USER root
RUN curl -sL https://deb.nodesource.com/setup_6.x | bash -
RUN  apt-get update -qq \
  && apt-get install -qqy \
       nodejs \
       postgresql-client \
       libxmlsec1-dev \
       unzip \
       fontforge \
       python-lxml \
  && npm install -g gulp \
  && rm -rf /var/lib/apt/lists/*

# We will need sfnt2woff in order to build fonts
WORKDIR /root
RUN if [ -e /var/lib/gems/$RUBY_MAJOR.0/gems/bundler-* ]; then BUNDLER_INSTALL=""-i /var/lib/gems/$RUBY_MAJOR.0""; fi \
  && curl -O https://people-mozilla.org/~jkew/woff/woff-code-latest.zip \
  && unzip woff-code-latest.zip \
  && make \
  && cp sfnt2woff /usr/local/bin \
  && gem uninstall --all --ignore-dependencies --force $BUNDLER_INSTALL bundler \
  && gem install bundler --no-document -v 1.12.5 \
  && find $GEM_HOME ! -user docker | xargs chown docker:docker

USER docker

RUN mkdir -p /home/docker/.gem/ruby/$RUBY_MAJOR.0
WORKDIR /usr/src/app

ENV RAILS_ENV development
ENV NGINX_MAX_UPLOAD_SIZE 10g
"
2324,3d8fdc741e62717a94b9d3b4866433cf449baf94,Bumped source to 20200425-c6a30d1,"Bumped source to 20200425-c6a30d1
","FROM docker.pkg.github.com/dock0/service/service:20200425-04b8c1f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
2079,64b1bb1dbbc7c85c43ebfee7b2ee93d6b820dbfb,Update kubekins base image version (#1176),"Update kubekins base image version (#1176)

","# Copyright 2019 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM gcr.io/k8s-testimages/kubekins-e2e:v20190103-edc7696cc-master
LABEL maintainer ""Adriano Cunha <adrcunha@google.com>""

# Install extras on top of base image

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update
RUN gcloud components update

# Docker
RUN gcloud components install docker-credential-gcr
RUN docker-credential-gcr configure-docker

# Extra tools through apt-get
RUN apt-get install -y uuid-runtime  # for uuidgen
RUN apt-get install -y rubygems  # for mdl

# Install go at 1.12 same as how it's installed in kubekins-e2e image, reference code here:
# https://github.com/kubernetes/test-infra/blob/1e9b5dc3de4b268aab57c9c48120aa3dcf096bc6/images/kubekins-e2e/Dockerfile#L64
ENV GO_TARBALL ""go1.12.linux-amd64.tar.gz""
RUN rm -rf /usr/local/go && \
    wget -q ""https://storage.googleapis.com/golang/${GO_TARBALL}"" && \
    tar xzf ""${GO_TARBALL}"" -C /usr/local && \
    rm ""${GO_TARBALL}""

# Extra tools through go get
RUN go get -u github.com/google/ko/cmd/ko
RUN go get -u github.com/golang/dep/cmd/dep
RUN go get -u github.com/jstemmer/go-junit-report
RUN go get -u github.com/raviqqe/liche

# Extract bazel version
RUN bazel version > /bazel_version
RUN bazel shutdown

# Extract ko version
RUN git ls-remote https://github.com/google/ko HEAD | cut -f1 > /ko_version

# Extra tools through gem
RUN gem install mixlib-config -v 2.2.4  # required because ruby is 2.1
RUN gem install mdl

# Temporarily add test-infra to the image to build custom tools
ADD . /go/src/github.com/knative/test-infra

# Build custom tools in the container
RUN make -C /go/src/github.com/knative/test-infra/tools/githubhelper
RUN cp /go/src/github.com/knative/test-infra/tools/githubhelper/githubhelper .

# Use a local dep-collector that's a wrapper for building the tool
# on-the-fly.
# TODO(adrcunha): Remove once https://github.com/knative/test-infra/pull/1019 is in all repos.
RUN cp /go/src/github.com/knative/test-infra/images/prow-tests/dep-collector /usr/bin/dep-collector

# Remove test-infra from the container
RUN rm -fr /go/src/github.com/knative/test-infra
",
170,eb2fb818f1e0f012ff7a87fa742420636cf31ab4,Admin Router: Add rsync to the devkit container,"Admin Router: Add rsync to the devkit container
","FROM ubuntu:16.04

# Let's try to limit the number of layers to minimum:
ENV OPENRESTY_VERSION=1.9.15.1 \
    OPENRESTY_DOWNLOAD_SHASUM=491a84d70ed10b79abb9d1a7496ee57a9244350b \
    OPENRESTY_DIR=/usr/local/src/openresty \
    OPENRESTY_COMPILE_SCRIPT=/usr/local/src/build-resty.sh \
    OPENRESTY_COMPILE_OPTS="""" \
    VENV_DIR=/usr/local/venv \
    AR_BIN_DIR=/usr/local/adminrouter/ \
    VEGETA_DOWNLOAD_SHA256=2f0a69d0ae6f0bf268b7f655bd37c0104d5568d5b2bc45bbb2c405266f74e33d \
    VEGETA_DOWNLOAD_URL=https://github.com/tsenart/vegeta/releases/download/v6.1.1/vegeta-v6.1.1-linux-amd64.tar.gz \
    IAM_PUBKEY_FILE_PATH=/usr/local/iam.jwt-key.pub \
    IAM_PRIVKEY_FILE_PATH=/usr/local/iam.jwt-key.priv \
    IAM_SHARED_SECRET_FILE_PATH=/usr/local/iam.jwt-key.shared-secret

# These depend on other ENV vars, so we need a separate ENV block:
ENV OPENRESTY_DOWNLOAD_URL=https://openresty.org/download/openresty-$OPENRESTY_VERSION.tar.gz \
    AUTH_ERROR_PAGE_DIR_PATH=${AR_BIN_DIR}/nginx/conf/errorpages

WORKDIR /usr/local/src/

# Some remarks when it comes to apt-get update:
# * `apt-get update` and `apt-get install` are unreliable. Because of that there
#   is some basic retrying logic
# * we put it on top of every apt-get install, because docker layer cache will
#   not re-run it when updating image with `make update-devkit` if it is a
#   separate `RUN` line. This leads to `404 Not Found errors.

#### Stuff useful while debugging docker container, not strictly needed for
#### building:
RUN set -ex \
    && bash -x -c 'for i in {1..5}; do apt-get update && break || sleep 2; done' \
    && apt-get install -y --no-install-recommends \
        apt-file \
        dnsutils \
        git \
        iproute2 \
        less \
        psmisc \
        strace \
        tcpdump \
        telnet \
        tree \
        vim

# AR related:
RUN set -ex \
    && bash -x -c 'for i in {1..5}; do apt-get update && break || sleep 2; done' \
    && apt-get install -y --no-install-recommends \
        dnsmasq \
        gcc \
        libdigest-sha-perl \
        libffi-dev \
        libffi6 \
        libpcre++-dev \
        libssl-dev \
        make \
        python3 \
        python3-dev \
        python3-pip \
        python3-virtualenv \
        gettext-base

# Upgrading pip/setuptools and making the upgrade actually apply in the
# following filesystem layers works more reliable when using a virtualenv for
# creating the Python environment, especially on overlayfs.
# Refs:
#   https://github.com/docker/docker/issues/12327#issuecomment-188921470
#   https://github.com/docker/docker/issues/12327#issuecomment-187158265
RUN python3 -m pip install --upgrade virtualenv
RUN set -ex \
    && virtualenv --no-site-packages $VENV_DIR \
    && ${VENV_DIR}/bin/pip install --upgrade setuptools pip

ENV PATH ${VENV_DIR}/bin:$PATH

COPY ./requirements-tests.txt .
RUN pip install -r requirements-tests.txt

# Download Vegeta tool for benchmarking
RUN curl -fsSL ""$VEGETA_DOWNLOAD_URL"" -o vegeta.tar.gz \
    && echo ""$VEGETA_DOWNLOAD_SHA256  vegeta.tar.gz"" | sha256sum -c - \
        && tar -C /usr/local/bin -xzf vegeta.tar.gz \
        && rm vegeta.tar.gz

# Prepare Openresty. Compilation is done in Makefile itself so that
# this container can be reused during DC/OS build.
RUN set -ex \
    && curl -fsSL ""$OPENRESTY_DOWNLOAD_URL"" -o openresty.tar.gz \
    && echo ""$OPENRESTY_DOWNLOAD_SHASUM  openresty.tar.gz"" | shasum -c - \
    && mkdir -pv $OPENRESTY_DIR \
    && tar --strip-components=1 -C $OPENRESTY_DIR -xzf openresty.tar.gz \
    && rm openresty.tar.gz

COPY build-resty.sh $OPENRESTY_COMPILE_SCRIPT

# Some files that mimic DC/OS environment:
COPY iam.jwt-key.pub \
     iam.jwt-key.priv \
     iam.jwt-key.shared-secret \
        /usr/local/
# The contents of adminrouter-listen* files differ from the ones that are
# shipped with DC/OS - the IP addresses Nginx binds to are limited to only
# 127.0.0.1 instead of *. The reason for it is that some endpoints also need to
# listen on TCP port 80 and this causes conflicts.
COPY adminrouter-redirect-http-https.conf \
     adminrouter-upstreams.conf \
     adminrouter-listen-master.conf \
     adminrouter-listen-agent.conf \
        /opt/mesosphere/etc/
COPY ca.crt /run/dcos/pki/CA/certs/
COPY adminrouter.crt /run/dcos/pki/tls/certs/
COPY adminrouter.key /run/dcos/pki/tls/private/


# dnsmasq stuff:
COPY ./dnsmasq.conf /etc/dnsmasq.conf
# In case if Docker someday decides to solve:
# https://github.com/docker/docker/issues/1297
# and container's /etc/resolv.conf becomes visible and not bind-mounted.
RUN echo ""nameserver 127.0.0.1"" > /etc/resolv.conf
RUN echo ""nameserver 8.8.8.8\nnameserver 8.8.4.4\n"" > /etc/resolv.conf.dnsmasq
COPY ./hosts.dnsmasq /etc/hosts.dnsmasq

# Workers run as the dcos_adminrouter group.
RUN groupadd --system dcos_adminrouter

WORKDIR $AR_BIN_DIR/nginx/conf/

CMD [""/bin/bash""]
","FROM ubuntu:16.04

# Let's try to limit the number of layers to minimum:
ENV OPENRESTY_VERSION=1.9.15.1 \
    OPENRESTY_DOWNLOAD_SHASUM=491a84d70ed10b79abb9d1a7496ee57a9244350b \
    OPENRESTY_DIR=/usr/local/src/openresty \
    OPENRESTY_COMPILE_SCRIPT=/usr/local/src/build-resty.sh \
    OPENRESTY_COMPILE_OPTS="""" \
    VENV_DIR=/usr/local/venv \
    AR_BIN_DIR=/usr/local/adminrouter/ \
    VEGETA_DOWNLOAD_SHA256=2f0a69d0ae6f0bf268b7f655bd37c0104d5568d5b2bc45bbb2c405266f74e33d \
    VEGETA_DOWNLOAD_URL=https://github.com/tsenart/vegeta/releases/download/v6.1.1/vegeta-v6.1.1-linux-amd64.tar.gz \
    IAM_PUBKEY_FILE_PATH=/usr/local/iam.jwt-key.pub \
    IAM_PRIVKEY_FILE_PATH=/usr/local/iam.jwt-key.priv \
    IAM_SHARED_SECRET_FILE_PATH=/usr/local/iam.jwt-key.shared-secret

# These depend on other ENV vars, so we need a separate ENV block:
ENV OPENRESTY_DOWNLOAD_URL=https://openresty.org/download/openresty-$OPENRESTY_VERSION.tar.gz \
    AUTH_ERROR_PAGE_DIR_PATH=${AR_BIN_DIR}/nginx/conf/errorpages

WORKDIR /usr/local/src/

# Some remarks when it comes to apt-get update:
# * `apt-get update` and `apt-get install` are unreliable. Because of that there
#   is some basic retrying logic
# * we put it on top of every apt-get install, because docker layer cache will
#   not re-run it when updating image with `make update-devkit` if it is a
#   separate `RUN` line. This leads to `404 Not Found errors.

#### Stuff useful while debugging docker container, not strictly needed for
#### building:
RUN set -ex \
    && bash -x -c 'for i in {1..5}; do apt-get update && break || sleep 2; done' \
    && apt-get install -y --no-install-recommends \
        apt-file \
        dnsutils \
        git \
        iproute2 \
        less \
        psmisc \
        strace \
        tcpdump \
        telnet \
        tree \
        vim

# AR related:
RUN set -ex \
    && bash -x -c 'for i in {1..5}; do apt-get update && break || sleep 2; done' \
    && apt-get install -y --no-install-recommends \
        dnsmasq \
        gcc \
        gettext-base \
        libdigest-sha-perl \
        libffi-dev \
        libffi6 \
        libpcre++-dev \
        libssl-dev \
        make \
        python3 \
        python3-dev \
        python3-pip \
        python3-virtualenv \
        rsync

# Upgrading pip/setuptools and making the upgrade actually apply in the
# following filesystem layers works more reliable when using a virtualenv for
# creating the Python environment, especially on overlayfs.
# Refs:
#   https://github.com/docker/docker/issues/12327#issuecomment-188921470
#   https://github.com/docker/docker/issues/12327#issuecomment-187158265
RUN python3 -m pip install --upgrade virtualenv
RUN set -ex \
    && virtualenv --no-site-packages $VENV_DIR \
    && ${VENV_DIR}/bin/pip install --upgrade setuptools pip

ENV PATH ${VENV_DIR}/bin:$PATH

COPY ./requirements-tests.txt .
RUN pip install -r requirements-tests.txt

# Download Vegeta tool for benchmarking
RUN curl -fsSL ""$VEGETA_DOWNLOAD_URL"" -o vegeta.tar.gz \
    && echo ""$VEGETA_DOWNLOAD_SHA256  vegeta.tar.gz"" | sha256sum -c - \
        && tar -C /usr/local/bin -xzf vegeta.tar.gz \
        && rm vegeta.tar.gz

# Prepare Openresty. Compilation is done in Makefile itself so that
# this container can be reused during DC/OS build.
RUN set -ex \
    && curl -fsSL ""$OPENRESTY_DOWNLOAD_URL"" -o openresty.tar.gz \
    && echo ""$OPENRESTY_DOWNLOAD_SHASUM  openresty.tar.gz"" | shasum -c - \
    && mkdir -pv $OPENRESTY_DIR \
    && tar --strip-components=1 -C $OPENRESTY_DIR -xzf openresty.tar.gz \
    && rm openresty.tar.gz

COPY build-resty.sh $OPENRESTY_COMPILE_SCRIPT

# Some files that mimic DC/OS environment:
COPY iam.jwt-key.pub \
     iam.jwt-key.priv \
     iam.jwt-key.shared-secret \
        /usr/local/
# The contents of adminrouter-listen* files differ from the ones that are
# shipped with DC/OS - the IP addresses Nginx binds to are limited to only
# 127.0.0.1 instead of *. The reason for it is that some endpoints also need to
# listen on TCP port 80 and this causes conflicts.
COPY adminrouter-redirect-http-https.conf \
     adminrouter-upstreams.conf \
     adminrouter-listen-master.conf \
     adminrouter-listen-agent.conf \
        /opt/mesosphere/etc/
COPY ca.crt /run/dcos/pki/CA/certs/
COPY adminrouter.crt /run/dcos/pki/tls/certs/
COPY adminrouter.key /run/dcos/pki/tls/private/


# dnsmasq stuff:
COPY ./dnsmasq.conf /etc/dnsmasq.conf
# In case if Docker someday decides to solve:
# https://github.com/docker/docker/issues/1297
# and container's /etc/resolv.conf becomes visible and not bind-mounted.
RUN echo ""nameserver 127.0.0.1"" > /etc/resolv.conf
RUN echo ""nameserver 8.8.8.8\nnameserver 8.8.4.4\n"" > /etc/resolv.conf.dnsmasq
COPY ./hosts.dnsmasq /etc/hosts.dnsmasq

# Workers run as the dcos_adminrouter group.
RUN groupadd --system dcos_adminrouter

WORKDIR $AR_BIN_DIR/nginx/conf/

CMD [""/bin/bash""]
"
356,1185c5c56684489e2ea0c3fecf46b0c8b11e6abe,Bumped source to 20210719-e65119b,"Bumped source to 20210719-e65119b
","FROM docker.pkg.github.com/dock0/service/service:20210719-37d8b2f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20210719-e65119b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2222,e12e367b58f1dbeb9f71ff43c144b13dd08851f5,Bumped source to 20201203-8d5d9a9,"Bumped source to 20201203-8d5d9a9
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201203-ec77873
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
2095,eb44a1cb1ce9869add90ae4c8206a6d58cbd6ba7,chore(deps): update golang docker tag to v1.15.0,"chore(deps): update golang docker tag to v1.15.0
","FROM golang:1.14.7

ENV PROTOC_VERSION=3.12.3

RUN apt-get update && apt-get install unzip

RUN curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip && \
    unzip -o protoc-${PROTOC_VERSION}-linux-x86_64.zip -d /usr/local bin/protoc && \
    unzip -o protoc-${PROTOC_VERSION}-linux-x86_64.zip -d /usr/local include/* && \
    rm -rf protoc-${PROTOC_VERSION}-linux-x86_64.zip

RUN go get -u google.golang.org/protobuf/cmd/protoc-gen-go && \
    go get github.com/chrusty/protoc-gen-jsonschema/cmd/protoc-gen-jsonschema

RUN mkdir /workdir
WORKDIR /workdir

COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]
",
119,7f9c56ab05baea3b56ad842974f4999fb06b9e10,Keep using an old version of https://github.com/openshift/origin/pull/9181,"Keep using an old version of https://github.com/openshift/origin/pull/9181

I don’t know how to checkout a specific untagged commit (
9ff4bf43548c758b6767b639b335681285fece48 ) from the original repo, so
I have forked the project and fetched that commit from a cached Docker
image.

We should instead update the containers/image client for the new API ASAP,
and then the github.com/mtrmac/origin repo should be removed.
","FROM fedora

RUN dnf -y update && dnf install -y make git golang golang-github-cpuguy83-go-md2man \
# gpgme bindings deps
libassuan-devel gpgme-devel \
gnupg \
# registry v1 deps
xz-devel \
python-devel \
python-pip \
swig \
redhat-rpm-config \
openssl-devel \
patch

# Install three versions of the registry. The first is an older version that
# only supports schema1 manifests. The second is a newer version that supports
# both. This allows integration-cli tests to cover push/pull with both schema1
# and schema2 manifests. Install registry v1 also.
ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
RUN set -x \
&& export GOPATH=""$(mktemp -d)"" \
&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
&& rm -rf ""$GOPATH"" \
&& export DRV1=""$(mktemp -d)"" \
&& git clone https://github.com/docker/docker-registry.git ""$DRV1"" \
# no need for setuptools since we have a version conflict with fedora
&& sed -i.bak s/setuptools==5.8//g ""$DRV1/requirements/main.txt"" \
&& sed -i.bak s/setuptools==5.8//g ""$DRV1/depends/docker-registry-core/requirements/main.txt"" \
&& pip install ""$DRV1/depends/docker-registry-core"" \
&& pip install file://""$DRV1#egg=docker-registry[bugsnag,newrelic,cors]"" \
&& patch $(python -c 'import boto; import os; print os.path.dirname(boto.__file__)')/connection.py \
< ""$DRV1/contrib/boto_header_patch.diff"" \
&& dnf -y update && dnf install -y m2crypto

RUN set -x \
&& yum install -y which git tar wget hostname util-linux bsdtar socat ethtool device-mapper iptables tree findutils nmap-ncat e2fsprogs xfsprogs lsof docker iproute \
&& export GOPATH=$(mktemp -d) \
# && git clone git://github.com/openshift/origin ""$GOPATH/src/github.com/openshift/origin"" \
&& git clone -b image-signatures-rest git://github.com/miminar/origin ""$GOPATH/src/github.com/openshift/origin"" \
&& (cd ""$GOPATH/src/github.com/openshift/origin"" && make clean build && make all WHAT=cmd/dockerregistry) \
&& cp -a ""$GOPATH/src/github.com/openshift/origin/_output/local/bin/linux""/*/* /usr/local/bin \
&& cp ""$GOPATH/src/github.com/openshift/origin/images/dockerregistry/config.yml"" /atomic-registry-config.yml \
&& mkdir /registry

ENV GOPATH /usr/share/gocode:/go
ENV PATH $GOPATH/bin:/usr/share/gocode/bin:$PATH
RUN go get github.com/golang/lint/golint
WORKDIR /go/src/github.com/projectatomic/skopeo
COPY . /go/src/github.com/projectatomic/skopeo

#ENTRYPOINT [""hack/dind""]
","FROM fedora

RUN dnf -y update && dnf install -y make git golang golang-github-cpuguy83-go-md2man \
# gpgme bindings deps
libassuan-devel gpgme-devel \
gnupg \
# registry v1 deps
xz-devel \
python-devel \
python-pip \
swig \
redhat-rpm-config \
openssl-devel \
patch

# Install three versions of the registry. The first is an older version that
# only supports schema1 manifests. The second is a newer version that supports
# both. This allows integration-cli tests to cover push/pull with both schema1
# and schema2 manifests. Install registry v1 also.
ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
RUN set -x \
&& export GOPATH=""$(mktemp -d)"" \
&& git clone https://github.com/docker/distribution.git ""$GOPATH/src/github.com/docker/distribution"" \
&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT"") \
&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \
&& (cd ""$GOPATH/src/github.com/docker/distribution"" && git checkout -q ""$REGISTRY_COMMIT_SCHEMA1"") \
&& GOPATH=""$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"" \
go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \
&& rm -rf ""$GOPATH"" \
&& export DRV1=""$(mktemp -d)"" \
&& git clone https://github.com/docker/docker-registry.git ""$DRV1"" \
# no need for setuptools since we have a version conflict with fedora
&& sed -i.bak s/setuptools==5.8//g ""$DRV1/requirements/main.txt"" \
&& sed -i.bak s/setuptools==5.8//g ""$DRV1/depends/docker-registry-core/requirements/main.txt"" \
&& pip install ""$DRV1/depends/docker-registry-core"" \
&& pip install file://""$DRV1#egg=docker-registry[bugsnag,newrelic,cors]"" \
&& patch $(python -c 'import boto; import os; print os.path.dirname(boto.__file__)')/connection.py \
< ""$DRV1/contrib/boto_header_patch.diff"" \
&& dnf -y update && dnf install -y m2crypto

RUN set -x \
&& yum install -y which git tar wget hostname util-linux bsdtar socat ethtool device-mapper iptables tree findutils nmap-ncat e2fsprogs xfsprogs lsof docker iproute \
&& export GOPATH=$(mktemp -d) \
# && git clone git://github.com/openshift/origin ""$GOPATH/src/github.com/openshift/origin"" \
# && git clone -b image-signatures-rest git://github.com/miminar/origin ""$GOPATH/src/github.com/openshift/origin"" \
&& git clone -b image-signatures-rest-backup git://github.com/mtrmac/origin ""$GOPATH/src/github.com/openshift/origin"" \
&& (cd ""$GOPATH/src/github.com/openshift/origin"" && make clean build && make all WHAT=cmd/dockerregistry) \
&& cp -a ""$GOPATH/src/github.com/openshift/origin/_output/local/bin/linux""/*/* /usr/local/bin \
&& cp ""$GOPATH/src/github.com/openshift/origin/images/dockerregistry/config.yml"" /atomic-registry-config.yml \
&& mkdir /registry

ENV GOPATH /usr/share/gocode:/go
ENV PATH $GOPATH/bin:/usr/share/gocode/bin:$PATH
RUN go get github.com/golang/lint/golint
WORKDIR /go/src/github.com/projectatomic/skopeo
COPY . /go/src/github.com/projectatomic/skopeo

#ENTRYPOINT [""hack/dind""]
"
153,610f886e7ec66fb985346c41332c3b848a765573,don't upgrade conda,"don't upgrade conda
","ARG BASE_TAG=5.3.0

# TODO(rosbo): Use the py36-2 version to have the same base image.
FROM gcr.io/kaggle-images/python-tensorflow-whl:1.13.1-py36 as tensorflow_whl
FROM continuumio/anaconda3:${BASE_TAG}

ADD clean-layer.sh  /tmp/clean-layer.sh
ADD patches/nbconvert-extensions.tpl /opt/kaggle/nbconvert-extensions.tpl

# This is necessary for apt to access HTTPS sources
RUN apt-get update && \
    apt-get install apt-transport-https && \
    /tmp/clean-layer.sh

    # Use a fixed apt-get repo to stop intermittent failures due to flaky httpredir connections,
    # as described by Lionel Chan at http://stackoverflow.com/a/37426929/5881346
RUN sed -i ""s/httpredir.debian.org/debian.uchicago.edu/"" /etc/apt/sources.list && \
    apt-get update && apt-get install -y build-essential unzip cmake && \
    # Work to upgrade to Python 3.7 can be found on this branch: https://github.com/Kaggle/docker-python/blob/upgrade-py37/Dockerfile
    conda update -y conda && conda install -y python=3.6.6 && \
    pip install --upgrade pip && \
    /tmp/clean-layer.sh

# The anaconda base image includes outdated versions of these packages. Update them to include the latest version.
RUN pip install seaborn python-dateutil dask && \
    pip install pyyaml joblib pytagcloud husl geopy ml_metrics mne pyshp && \
    pip install spacy && python -m spacy download en && python -m spacy download en_core_web_lg && \
    # The apt-get version of imagemagick is out of date and has compatibility issues, so we build from source
    apt-get -y install dbus fontconfig fontconfig-config fonts-dejavu-core fonts-droid-fallback ghostscript gsfonts hicolor-icon-theme \
    libavahi-client3 libavahi-common-data libavahi-common3 libcairo2 libcap-ng0 libcroco3 \
    libcups2 libcupsfilters1 libcupsimage2 libdatrie1 libdbus-1-3 libdjvulibre-text libdjvulibre21 libfftw3-double3 libfontconfig1 \
    libfreetype6 libgdk-pixbuf2.0-0 libgdk-pixbuf2.0-common libgomp1 libgraphite2-3 libgs9 libgs9-common libharfbuzz0b libijs-0.35 \
    libilmbase12 libjbig0 libjbig2dec0 libjpeg62-turbo liblcms2-2 liblqr-1-0 libltdl7 libmagickcore-6.q16-3 \
    libmagickcore-6.q16-3-extra libmagickwand-6.q16-3 libnetpbm10 libopenexr22 libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 \
    libpaper-utils libpaper1 libpixman-1-0 libpng16-16 librsvg2-2 librsvg2-common libthai-data libthai0 libtiff5 libwmf0.2-7 \
    libxcb-render0 libxcb-shm0 netpbm poppler-data p7zip-full && \
    cd /usr/local/src && \
    # imagemagick.org is down.
    # TODO(rosbo): Is is still being used or is the libmagick* above are sufficient for the packages (if any) that depends on it?
    # wget --no-verbose https://imagemagick.org/download/ImageMagick.tar.gz && \
    # tar xzf ImageMagick.tar.gz && cd `ls -d ImageMagick-*` && pwd && ls -al && ./configure && \
    # make -j $(nproc) && make install && \
    /tmp/clean-layer.sh

# Install tensorflow from a pre-built wheel
COPY --from=tensorflow_whl /tmp/tensorflow_cpu/*.whl /tmp/tensorflow_cpu/
RUN pip install /tmp/tensorflow_cpu/tensorflow*.whl && \
    rm -rf /tmp/tensorflow_cpu && \
    /tmp/clean-layer.sh

RUN apt-get install -y libfreetype6-dev && \
    apt-get install -y libglib2.0-0 libxext6 libsm6 libxrender1 libfontconfig1 --fix-missing && \
    pip install gensim && \
    pip install textblob && \
    pip install wordcloud && \
    conda install -y -c conda-forge python-igraph && \
    pip install xgboost && \
    pip install lightgbm && \
    pip install git+git://github.com/Lasagne/Lasagne.git && \
    pip install keras && \
    pip install keras-rl && \
    #keras-rcnn
    pip install git+https://github.com/broadinstitute/keras-rcnn && \
    # version 3.7.1 adds a dependency on entrypoints > 3. This causes a reinstall but fails because
    # it is a distutils package and can't be uninstalled. Once the anaconda image in updated, this
    # pin should be removed.
    pip install flake8==3.6.0 && \
    #neon
    cd /usr/local/src && \
    git clone --depth 1 https://github.com/NervanaSystems/neon.git && \
    cd neon && pip install . && \
    #nolearn
    cd /usr/local/src && mkdir nolearn && cd nolearn && \
    git clone --depth 1 https://github.com/dnouri/nolearn.git && cd nolearn && \
    echo ""x"" > README.rst && echo ""x"" > CHANGES.rst && \
    python setup.py install && \
    # Dev branch of Theano
    pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps && \
    # put theano compiledir inside /tmp (it needs to be in writable dir)
    printf ""[global]\nbase_compiledir = /tmp/.theano\n"" > /.theanorc && \
    cd /usr/local/src &&  git clone --depth 1 https://github.com/pybrain/pybrain && \
    cd pybrain && python setup.py install && \
    # Base ATLAS
    apt-get install -y libatlas-base-dev && \
    cd /usr/local/src && git clone --depth 1 https://github.com/ztane/python-Levenshtein && \
    cd python-Levenshtein && python setup.py install && \
    pip install hep_ml && \
    # chainer
    pip install chainer && \
    # NLTK Project datasets
    mkdir -p /usr/share/nltk_data && \
    # NLTK Downloader no longer continues smoothly after an error, so we explicitly list
    # the corpuses that work
    # ""yes | ..."" answers yes to the retry prompt in case of an error. See b/133762095.
    yes | python -m nltk.downloader -d /usr/share/nltk_data abc alpino averaged_perceptron_tagger \
    basque_grammars biocreative_ppi bllip_wsj_no_aux \
    book_grammars brown brown_tei cess_cat cess_esp chat80 city_database cmudict \
    comtrans conll2000 conll2002 conll2007 crubadan dependency_treebank \
    europarl_raw floresta gazetteers genesis gutenberg \
    ieer inaugural indian jeita kimmo knbc large_grammars lin_thesaurus mac_morpho machado \
    masc_tagged maxent_ne_chunker maxent_treebank_pos_tagger moses_sample movie_reviews \
    mte_teip5 names nps_chat omw opinion_lexicon paradigms \
    pil pl196x porter_test ppattach problem_reports product_reviews_1 product_reviews_2 propbank \
    pros_cons ptb punkt qc reuters rslp rte sample_grammars semcor senseval sentence_polarity \
    sentiwordnet shakespeare sinica_treebank smultron snowball_data spanish_grammars \
    state_union stopwords subjectivity swadesh switchboard tagsets timit toolbox treebank \
    twitter_samples udhr2 udhr unicode_samples universal_tagset universal_treebanks_v20 \
    vader_lexicon verbnet webtext word2vec_sample wordnet wordnet_ic words ycoe && \
    # Stop-words
    pip install stop-words && \
    pip install --upgrade scikit-image && \
    /tmp/clean-layer.sh

# Make sure the dynamic linker finds the right libstdc++
ENV LD_LIBRARY_PATH=/opt/conda/lib

RUN apt-get -y install zlib1g-dev liblcms2-dev libwebp-dev libgeos-dev && \
    pip install matplotlib && \
    pip install pyshp && \
    pip install pyproj && \
    conda install basemap && \
    # sasl is apparently an ibis dependency
    apt-get -y install libsasl2-dev && \
    # ...as is psycopg2
    apt-get install -y libpq-dev && \
    pip install ibis-framework && \
    # Cartopy plus dependencies
    yes | conda install proj4 && \
    pip install packaging && \
    pip install shapely && \
    pip install cartopy && \
    # MXNet
    pip install mxnet && \
    pip install --upgrade numpy && \
    pip install gluonnlp && \
    pip install gluoncv && \
    # h2o (requires java)
    # requires java
    apt-get install -y default-jdk && \
    cd /usr/local/src && mkdir h2o && cd h2o && \
    wget --no-verbose http://h2o-release.s3.amazonaws.com/h2o/latest_stable -O latest && \
    wget --no-verbose --no-check-certificate -i latest -O h2o.zip && rm latest && \
    unzip h2o.zip && rm h2o.zip && cp h2o-*/h2o.jar . && \
    pip install `find . -name ""*whl""` && \
    # Keras setup
    # Keras likes to add a config file in a custom directory when it's
    # first imported. This doesn't work with our read-only filesystem, so we
    # have it done now
    python -c ""from keras.models import Sequential""  && \
    # Switch to TF backend
    sed -i 's/theano/tensorflow/' /root/.keras/keras.json  && \
    # Re-run it to flush any more disk writes
    python -c ""from keras.models import Sequential; from keras import backend; print(backend._BACKEND)"" && \
    # Keras reverts to /tmp from ~ when it detects a read-only file system
    mkdir -p /tmp/.keras && cp /root/.keras/keras.json /tmp/.keras && \
    /tmp/clean-layer.sh

# b/128333086: Set PROJ_LIB to points to the proj4 cartographic library.
ENV PROJ_LIB=/opt/conda/share/proj

# scikit-learn dependencies
RUN pip install scipy && \
    pip install scikit-learn && \
    # HDF5 support
    pip install h5py && \
    pip install biopython && \
    # PUDB, for local debugging convenience
    pip install pudb && \
    pip install imbalanced-learn && \
    # Convex Optimization library
    # Latest version fails to install, see https://github.com/cvxopt/cvxopt/issues/77
    #    and https://github.com/cvxopt/cvxopt/issues/80
    # pip install cvxopt && \
    # Profiling and other utilities
    pip install line_profiler && \
    pip install orderedmultidict && \
    pip install smhasher && \
    pip install bokeh && \
    # b/134599839: latest version requires llvmlite >= 0.39.0. Base image comes with 0.38.0.
    # It fails to reinstall it because it is a distutil package. Remove pin once base image include newer verson of llvmlite.
    pip install numba==0.38.0 && \
    pip install datashader && \
    # Boruta (python implementation)
    pip install Boruta && \
    cd /usr/local/src && git clone git://github.com/nicolashennetier/pyeconometrics.git && \
    cd pyeconometrics && python setup.py install && \
    apt-get install -y graphviz && pip install graphviz && \
    # Pandoc is a dependency of deap
    apt-get install -y pandoc && \
    pip install git+git://github.com/scikit-learn-contrib/py-earth.git@issue191 && \
    pip install essentia && \
    # PyTorch
    export CXXFLAGS=""-std=c++11"" && \
    export CFLAGS=""-std=c99"" && \
    conda install -y pytorch-cpu=1.0.1 torchvision-cpu=0.2.2 -c pytorch && \
    # PyTorch Audio
    apt-get install -y sox libsox-dev libsox-fmt-all && \
    pip install cffi && \
    pip install git+git://github.com/pytorch/audio.git && \
    /tmp/clean-layer.sh

# vtk with dependencies
RUN apt-get install -y libgl1-mesa-glx && \
    pip install vtk && \
    # xvfbwrapper with dependencies
    apt-get install -y xvfb && \
    pip install xvfbwrapper && \
    /tmp/clean-layer.sh

RUN pip install mpld3 && \
    pip install mplleaflet && \
    pip install gpxpy && \
    pip install arrow && \
    pip install nilearn && \
    pip install nibabel && \
    pip install pronouncing && \
    pip install markovify && \
    pip install rf_perm_feat_import && \
    pip install imgaug && \
    pip install preprocessing && \
    pip install Baker && \
    pip install path.py && \
    pip install Geohash && \
    # https://github.com/vinsci/geohash/issues/4
    sed -i -- 's/geohash/.geohash/g' /opt/conda/lib/python3.6/site-packages/Geohash/__init__.py && \
    pip install deap && \
    pip install tpot && \
    pip install scikit-optimize && \
    pip install haversine && \
    pip install toolz cytoolz && \
    pip install sacred && \
    pip install plotly && \
    pip install git+https://github.com/nicta/dora.git && \
    pip install git+https://github.com/hyperopt/hyperopt.git && \
    # tflean. Deep learning library featuring a higher-level API for TensorFlow. http://tflearn.org
    pip install git+https://github.com/tflearn/tflearn.git && \
    pip install fitter && \
    pip install langid && \
    # Delorean. Useful for dealing with datetime
    pip install delorean && \
    pip install trueskill && \
    pip install heamy && \
    pip install vida && \
    # Useful data exploration libraries (for missing data and generating reports)
    pip install missingno && \
    pip install pandas-profiling && \
    pip install s2sphere && \
    pip install git+https://github.com/fmfn/BayesianOptimization.git && \
    pip install matplotlib-venn && \
    pip install pyldavis && \
    pip install mlxtend && \
    pip install altair && \
    pip install pystan && \
    pip install ImageHash && \
    pip install ecos && \
    pip install CVXcanon && \
    pip install fancyimpute && \
    pip install git+https://github.com/pymc-devs/pymc3 && \
    pip install tifffile && \
    pip install spectral && \
    pip install descartes && \
    pip install geojson && \
    pip install pysal && \
    pip install pyflux && \
    pip install terminalplot && \
    pip install raccoon && \
    pip install pydicom && \
    pip install wavio && \
    pip install SimpleITK && \
    pip install hmmlearn && \
    pip install bayespy && \
    pip install gplearn && \
    pip install PyAstronomy && \
    pip install squarify && \
    pip install fuzzywuzzy && \
    pip install python-louvain && \
    pip install pyexcel-ods && \
    pip install sklearn-pandas && \
    pip install stemming && \
    pip install fbprophet && \
    pip install holoviews && \
    # 1.6.2 is not currently supported by the version of matplotlib we are using.
    # See other comments about why matplotlib is pinned.
    pip install geoviews==1.6.1 && \
    pip install hypertools && \
    pip install py_stringsimjoin && \
    pip install speedml && \
    pip install nibabel && \
    pip install mlens && \
    pip install scikit-multilearn && \
    pip install cleverhans && \
    pip install leven && \
    pip install catboost && \
    #cd /usr/local/src && git clone --depth=1 https://github.com/AxeldeRomblay/MLBox && cd MLBox/python-package && python setup.py install && \
    pip install fastFM && \
    pip install lightfm && \
    pip install paramnb && \
    pip install folium && \
    pip install scikit-plot && \
    # 0.15.0 is still unstable.
    pip install dipy==0.14.0 && \
    # plotnine 0.5 is depending on matplotlib >= 3.0 which is not compatible with basemap.
    # once basemap support matplotlib, we can unpin this package.
    pip install plotnine==0.4.0 && \
    pip install git+https://github.com/dvaida/hallucinate.git && \
    pip install scikit-surprise && \
    pip install pymongo && \
    pip install edward && \
    pip install geoplot && \
    pip install eli5 && \
    pip install implicit && \
    pip install dask-ml[xgboost] && \
    /tmp/clean-layer.sh

RUN pip install kmeans-smote --no-dependencies && \
    # Add google PAIR-code Facets
    cd /opt/ && git clone https://github.com/PAIR-code/facets && cd facets/ && jupyter nbextension install facets-dist/ --user && \
    export PYTHONPATH=$PYTHONPATH:/opt/facets/facets_overview/python/ && \
    pip install --no-dependencies ethnicolr && \
    pip install tensorpack && \
    pip install pycountry && pip install iso3166 && \
    pip install pydash && \
    pip install kmodes --no-dependencies && \
    pip install librosa && \
    pip install polyglot && \
    pip install mmh3 && \
    pip install fbpca && \
    pip install sentencepiece && \
    pip install cufflinks && \
    pip install glmnet_py && \
    pip install lime && \
    pip install memory_profiler && \
    /tmp/clean-layer.sh

# install cython & cysignals before pyfasttext
RUN pip install ktext && \
    pip install git+git://github.com/facebookresearch/fastText.git && \
    apt-get install -y libhunspell-dev && pip install hunspell && \
    pip install annoy && \
    pip install category_encoders && \
    pip install google-cloud-bigquery==1.12.1 && \
    pip install ortools && \
    pip install scattertext && \
    # Pandas data reader
    pip install pandas-datareader && \
    pip install pykoko && \
    pip install wordsegment && \
    pip install pyahocorasick && \
    pip install wordbatch && \
    pip install emoji && \
    # Add Japanese morphological analysis engine
    pip install janome && \
    pip install wfdb && \
    pip install vecstack && \
    pip install sklearn-contrib-lightning && \
    # yellowbrick machine learning visualization library
    pip install yellowbrick && \
    pip install mlcrate && \
    # Required to display Altair charts in Jupyter notebook
    pip install vega3 && \
    jupyter nbextension install --sys-prefix --py vega3 && \
    /tmp/clean-layer.sh

# Fast.ai and dependencies
RUN pip install bcolz && \
    pip install bleach && \
    pip install certifi && \
    pip install cycler && \
    pip install decorator && \
    pip install entrypoints && \
    pip install html5lib && \
    pip install ipykernel && \
    pip install ipython && \
    pip install ipython-genutils && \
    pip install ipywidgets && \
    pip install isoweek && \
    pip install jedi && \
    pip install Jinja2 && \
    pip install jsonschema && \
    pip install jupyter && \
    pip install jupyter-client && \
    pip install jupyter-console && \
    pip install jupyter-core && \
    pip install MarkupSafe && \
    pip install mistune && \
    pip install nbconvert && \
    pip install nbformat && \
    pip install notebook==5.5.0 && \
    pip install olefile && \
    pip install opencv-python && \
    # b/124184516: tsfresh is not yet compatible with pandas 0.24.0
    pip install pandas==0.23.4 && \
    pip install pandas_summary && \
    pip install pandocfilters && \
    pip install pexpect && \
    pip install pickleshare && \
    pip install Pillow && \
    pip install ptyprocess && \
    pip install Pygments && \
    pip install pyparsing && \
    pip install python-dateutil==2.6.0 && \
    pip install pytz && \
    pip install PyYAML && \
    pip install pyzmq && \
    pip install qtconsole && \
    pip install simplegeneric && \
    pip install six && \
    pip install terminado && \
    pip install testpath && \
    pip install tornado && \
    pip install tqdm && \
    pip install traitlets && \
    pip install wcwidth && \
    pip install webencodings && \
    pip install widgetsnbextension && \
    # Latest version of pyarrow conflicts with pandas
    # https://github.com/pandas-dev/pandas/issues/23053
    pip install pyarrow==0.10.0 && \
    pip install feather-format && \
    pip install fastai && \
    pip install torchtext && \
    /tmp/clean-layer.sh

# allennlp and dependencies
# TODO: install deps when underlying dependency is fixed. https://github.com/Kaggle/docker-python/issues/548
RUN pip install jsonnet overrides tensorboardX && \
    pip install flask>=1.0.2 flask-cors>=3.0.7 gevent>=1.3.6 && \
    pip install unidecode parsimonious>=0.8.0 sqlparse>=0.2.4 word2number>=1.1 && \
    pip install pytorch-pretrained-bert>=0.6.0 jsonpickle && \
    pip install requests>=2.18 editdistance conllu==0.11 && \
    pip install --no-dependencies allennlp && \
    /tmp/clean-layer.sh

    ###########
    #
    #      NEW CONTRIBUTORS:
    # Please add new pip/apt installs in this block. Don't forget a ""&& \"" at the end
    # of all non-final lines. Thanks!
    #
    ###########

RUN pip install flashtext && \
    pip install marisa-trie && \
    pip install pyemd && \
    pip install pyupset && \
    pip install pympler && \
    pip install s3fs && \
    pip install featuretools && \
    pip install -e git+https://github.com/SohierDane/BigQuery_Helper#egg=bq_helper && \
    pip install hpsklearn && \
    pip install keras-tqdm && \
    pip install git+https://github.com/Kaggle/learntools && \
    pip install kmapper && \
    pip install shap && \
    pip install ray && \
    pip install gym && \
    pip install tensorforce && \
    pip install pyarabic && \
    pip install conx && \
    pip install pandasql && \
    pip install trackml && \
    pip install tensorflow_hub && \
    pip install jieba  && \
    pip install git+https://github.com/SauceCat/PDPbox && \
    pip install ggplot && \
    pip install cesium && \
    pip install rgf_python && \
    # b/124184516: latest version forces the use of incompatible pandas>0.24
    pip install pytext-nlp==0.1.2 && \
    pip install tsfresh && \
    pip install pymagnitude && \
    pip install pykalman && \
    pip install optuna && \
    pip install chainercv && \
    pip install plotly_express && \
    pip install albumentations && \
    pip install pytorch-ignite && \
    /tmp/clean-layer.sh

# Tesseract and some associated utility packages
RUN apt-get install tesseract-ocr -y && \
    pip install pytesseract && \
    pip install wand==0.5.3 && \
    pip install pdf2image && \
    pip install PyPDF && \
    pip install pyocr && \
    /tmp/clean-layer.sh
ENV TESSERACT_PATH=/usr/bin/tesseract

# Pin Vowpal Wabbit v8.6.0 because 8.6.1 does not build or install successfully
RUN cd /usr/local/src && \
    git clone -b 8.6.0 https://github.com/JohnLangford/vowpal_wabbit.git && \
    ./vowpal_wabbit/python/conda_install.sh && \
    # Reinstall in non-editable mode (without the -e flag)
    pip install vowpal_wabbit/python && \
    /tmp/clean-layer.sh

# For Facets
ENV PYTHONPATH=$PYTHONPATH:/opt/facets/facets_overview/python/
# For Theano with MKL
ENV MKL_THREADING_LAYER=GNU

# Temporary fixes and patches
    # Temporary patch for Dask getting downgraded, which breaks Keras
RUN pip install --upgrade dask && \
    # Stop jupyter nbconvert trying to rewrite its folder hierarchy
    mkdir -p /root/.jupyter && touch /root/.jupyter/jupyter_nbconvert_config.py && touch /root/.jupyter/migrated && \
    mkdir -p /.jupyter && touch /.jupyter/jupyter_nbconvert_config.py && touch /.jupyter/migrated && \
    # Stop Matplotlib printing junk to the console on first load
    sed -i ""s/^.*Matplotlib is building the font cache using fc-list.*$/# Warning removed by Kaggle/g"" /opt/conda/lib/python3.6/site-packages/matplotlib/font_manager.py && \
    # Make matplotlib output in Jupyter notebooks display correctly
    mkdir -p /etc/ipython/ && echo ""c = get_config(); c.IPKernelApp.matplotlib = 'inline'"" > /etc/ipython/ipython_config.py && \
    /tmp/clean-layer.sh

# Add BigQuery client proxy settings
ENV PYTHONUSERBASE ""/root/.local""
ADD patches/kaggle_gcp.py /root/.local/lib/python3.6/site-packages/kaggle_gcp.py
ADD patches/kaggle_secrets.py /root/.local/lib/python3.6/site-packages/kaggle_secrets.py
ADD patches/log.py /root/.local/lib/python3.6/site-packages/log.py
ADD patches/sitecustomize.py /root/.local/lib/python3.6/site-packages/sitecustomize.py

# TensorBoard Jupyter extension. Should be replaced with TensorBoard's provided magic once we have
# worker tunneling support in place.
ENV JUPYTER_CONFIG_DIR ""/root/.jupyter/""
RUN pip install jupyter_tensorboard && \
    jupyter serverextension enable jupyter_tensorboard && \
    jupyter tensorboard enable
ADD patches/tensorboard/notebook.py /opt/conda/lib/python3.6/site-packages/tensorboard/notebook.py

# Set backend for matplotlib
ENV MPLBACKEND ""agg""
","ARG BASE_TAG=5.3.0

# TODO(rosbo): Use the py36-2 version to have the same base image.
FROM gcr.io/kaggle-images/python-tensorflow-whl:1.13.1-py36 as tensorflow_whl
FROM continuumio/anaconda3:${BASE_TAG}

ADD clean-layer.sh  /tmp/clean-layer.sh
ADD patches/nbconvert-extensions.tpl /opt/kaggle/nbconvert-extensions.tpl

# This is necessary for apt to access HTTPS sources
RUN apt-get update && \
    apt-get install apt-transport-https && \
    /tmp/clean-layer.sh

    # Use a fixed apt-get repo to stop intermittent failures due to flaky httpredir connections,
    # as described by Lionel Chan at http://stackoverflow.com/a/37426929/5881346
RUN sed -i ""s/httpredir.debian.org/debian.uchicago.edu/"" /etc/apt/sources.list && \
    apt-get update && apt-get install -y build-essential unzip cmake && \
    # Work to upgrade to Python 3.7 can be found on this branch: https://github.com/Kaggle/docker-python/blob/upgrade-py37/Dockerfile
    conda install -y python=3.6.6 && \
    pip install --upgrade pip && \
    /tmp/clean-layer.sh

# The anaconda base image includes outdated versions of these packages. Update them to include the latest version.
RUN pip install seaborn python-dateutil dask && \
    pip install pyyaml joblib pytagcloud husl geopy ml_metrics mne pyshp && \
    pip install spacy && python -m spacy download en && python -m spacy download en_core_web_lg && \
    # The apt-get version of imagemagick is out of date and has compatibility issues, so we build from source
    apt-get -y install dbus fontconfig fontconfig-config fonts-dejavu-core fonts-droid-fallback ghostscript gsfonts hicolor-icon-theme \
    libavahi-client3 libavahi-common-data libavahi-common3 libcairo2 libcap-ng0 libcroco3 \
    libcups2 libcupsfilters1 libcupsimage2 libdatrie1 libdbus-1-3 libdjvulibre-text libdjvulibre21 libfftw3-double3 libfontconfig1 \
    libfreetype6 libgdk-pixbuf2.0-0 libgdk-pixbuf2.0-common libgomp1 libgraphite2-3 libgs9 libgs9-common libharfbuzz0b libijs-0.35 \
    libilmbase12 libjbig0 libjbig2dec0 libjpeg62-turbo liblcms2-2 liblqr-1-0 libltdl7 libmagickcore-6.q16-3 \
    libmagickcore-6.q16-3-extra libmagickwand-6.q16-3 libnetpbm10 libopenexr22 libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 \
    libpaper-utils libpaper1 libpixman-1-0 libpng16-16 librsvg2-2 librsvg2-common libthai-data libthai0 libtiff5 libwmf0.2-7 \
    libxcb-render0 libxcb-shm0 netpbm poppler-data p7zip-full && \
    cd /usr/local/src && \
    # imagemagick.org is down.
    # TODO(rosbo): Is is still being used or is the libmagick* above are sufficient for the packages (if any) that depends on it?
    # wget --no-verbose https://imagemagick.org/download/ImageMagick.tar.gz && \
    # tar xzf ImageMagick.tar.gz && cd `ls -d ImageMagick-*` && pwd && ls -al && ./configure && \
    # make -j $(nproc) && make install && \
    /tmp/clean-layer.sh

# Install tensorflow from a pre-built wheel
COPY --from=tensorflow_whl /tmp/tensorflow_cpu/*.whl /tmp/tensorflow_cpu/
RUN pip install /tmp/tensorflow_cpu/tensorflow*.whl && \
    rm -rf /tmp/tensorflow_cpu && \
    /tmp/clean-layer.sh

RUN apt-get install -y libfreetype6-dev && \
    apt-get install -y libglib2.0-0 libxext6 libsm6 libxrender1 libfontconfig1 --fix-missing && \
    pip install gensim && \
    pip install textblob && \
    pip install wordcloud && \
    conda install -y -c conda-forge python-igraph && \
    pip install xgboost && \
    pip install lightgbm && \
    pip install git+git://github.com/Lasagne/Lasagne.git && \
    pip install keras && \
    pip install keras-rl && \
    #keras-rcnn
    pip install git+https://github.com/broadinstitute/keras-rcnn && \
    # version 3.7.1 adds a dependency on entrypoints > 3. This causes a reinstall but fails because
    # it is a distutils package and can't be uninstalled. Once the anaconda image in updated, this
    # pin should be removed.
    pip install flake8==3.6.0 && \
    #neon
    cd /usr/local/src && \
    git clone --depth 1 https://github.com/NervanaSystems/neon.git && \
    cd neon && pip install . && \
    #nolearn
    cd /usr/local/src && mkdir nolearn && cd nolearn && \
    git clone --depth 1 https://github.com/dnouri/nolearn.git && cd nolearn && \
    echo ""x"" > README.rst && echo ""x"" > CHANGES.rst && \
    python setup.py install && \
    # Dev branch of Theano
    pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps && \
    # put theano compiledir inside /tmp (it needs to be in writable dir)
    printf ""[global]\nbase_compiledir = /tmp/.theano\n"" > /.theanorc && \
    cd /usr/local/src &&  git clone --depth 1 https://github.com/pybrain/pybrain && \
    cd pybrain && python setup.py install && \
    # Base ATLAS
    apt-get install -y libatlas-base-dev && \
    cd /usr/local/src && git clone --depth 1 https://github.com/ztane/python-Levenshtein && \
    cd python-Levenshtein && python setup.py install && \
    pip install hep_ml && \
    # chainer
    pip install chainer && \
    # NLTK Project datasets
    mkdir -p /usr/share/nltk_data && \
    # NLTK Downloader no longer continues smoothly after an error, so we explicitly list
    # the corpuses that work
    # ""yes | ..."" answers yes to the retry prompt in case of an error. See b/133762095.
    yes | python -m nltk.downloader -d /usr/share/nltk_data abc alpino averaged_perceptron_tagger \
    basque_grammars biocreative_ppi bllip_wsj_no_aux \
    book_grammars brown brown_tei cess_cat cess_esp chat80 city_database cmudict \
    comtrans conll2000 conll2002 conll2007 crubadan dependency_treebank \
    europarl_raw floresta gazetteers genesis gutenberg \
    ieer inaugural indian jeita kimmo knbc large_grammars lin_thesaurus mac_morpho machado \
    masc_tagged maxent_ne_chunker maxent_treebank_pos_tagger moses_sample movie_reviews \
    mte_teip5 names nps_chat omw opinion_lexicon paradigms \
    pil pl196x porter_test ppattach problem_reports product_reviews_1 product_reviews_2 propbank \
    pros_cons ptb punkt qc reuters rslp rte sample_grammars semcor senseval sentence_polarity \
    sentiwordnet shakespeare sinica_treebank smultron snowball_data spanish_grammars \
    state_union stopwords subjectivity swadesh switchboard tagsets timit toolbox treebank \
    twitter_samples udhr2 udhr unicode_samples universal_tagset universal_treebanks_v20 \
    vader_lexicon verbnet webtext word2vec_sample wordnet wordnet_ic words ycoe && \
    # Stop-words
    pip install stop-words && \
    pip install --upgrade scikit-image && \
    /tmp/clean-layer.sh

# Make sure the dynamic linker finds the right libstdc++
ENV LD_LIBRARY_PATH=/opt/conda/lib

RUN apt-get -y install zlib1g-dev liblcms2-dev libwebp-dev libgeos-dev && \
    pip install matplotlib && \
    pip install pyshp && \
    pip install pyproj && \
    conda install basemap && \
    # sasl is apparently an ibis dependency
    apt-get -y install libsasl2-dev && \
    # ...as is psycopg2
    apt-get install -y libpq-dev && \
    pip install ibis-framework && \
    # Cartopy plus dependencies
    yes | conda install proj4 && \
    pip install packaging && \
    pip install shapely && \
    pip install cartopy && \
    # MXNet
    pip install mxnet && \
    pip install --upgrade numpy && \
    pip install gluonnlp && \
    pip install gluoncv && \
    # h2o (requires java)
    # requires java
    apt-get install -y default-jdk && \
    cd /usr/local/src && mkdir h2o && cd h2o && \
    wget --no-verbose http://h2o-release.s3.amazonaws.com/h2o/latest_stable -O latest && \
    wget --no-verbose --no-check-certificate -i latest -O h2o.zip && rm latest && \
    unzip h2o.zip && rm h2o.zip && cp h2o-*/h2o.jar . && \
    pip install `find . -name ""*whl""` && \
    # Keras setup
    # Keras likes to add a config file in a custom directory when it's
    # first imported. This doesn't work with our read-only filesystem, so we
    # have it done now
    python -c ""from keras.models import Sequential""  && \
    # Switch to TF backend
    sed -i 's/theano/tensorflow/' /root/.keras/keras.json  && \
    # Re-run it to flush any more disk writes
    python -c ""from keras.models import Sequential; from keras import backend; print(backend._BACKEND)"" && \
    # Keras reverts to /tmp from ~ when it detects a read-only file system
    mkdir -p /tmp/.keras && cp /root/.keras/keras.json /tmp/.keras && \
    /tmp/clean-layer.sh

# b/128333086: Set PROJ_LIB to points to the proj4 cartographic library.
ENV PROJ_LIB=/opt/conda/share/proj

# scikit-learn dependencies
RUN pip install scipy && \
    pip install scikit-learn && \
    # HDF5 support
    pip install h5py && \
    pip install biopython && \
    # PUDB, for local debugging convenience
    pip install pudb && \
    pip install imbalanced-learn && \
    # Convex Optimization library
    # Latest version fails to install, see https://github.com/cvxopt/cvxopt/issues/77
    #    and https://github.com/cvxopt/cvxopt/issues/80
    # pip install cvxopt && \
    # Profiling and other utilities
    pip install line_profiler && \
    pip install orderedmultidict && \
    pip install smhasher && \
    pip install bokeh && \
    # b/134599839: latest version requires llvmlite >= 0.39.0. Base image comes with 0.38.0.
    # It fails to reinstall it because it is a distutil package. Remove pin once base image include newer verson of llvmlite.
    pip install numba==0.38.0 && \
    pip install datashader && \
    # Boruta (python implementation)
    pip install Boruta && \
    cd /usr/local/src && git clone git://github.com/nicolashennetier/pyeconometrics.git && \
    cd pyeconometrics && python setup.py install && \
    apt-get install -y graphviz && pip install graphviz && \
    # Pandoc is a dependency of deap
    apt-get install -y pandoc && \
    pip install git+git://github.com/scikit-learn-contrib/py-earth.git@issue191 && \
    pip install essentia && \
    # PyTorch
    export CXXFLAGS=""-std=c++11"" && \
    export CFLAGS=""-std=c99"" && \
    conda install -y pytorch-cpu=1.0.1 torchvision-cpu=0.2.2 -c pytorch && \
    # PyTorch Audio
    apt-get install -y sox libsox-dev libsox-fmt-all && \
    pip install cffi && \
    pip install git+git://github.com/pytorch/audio.git && \
    /tmp/clean-layer.sh

# vtk with dependencies
RUN apt-get install -y libgl1-mesa-glx && \
    pip install vtk && \
    # xvfbwrapper with dependencies
    apt-get install -y xvfb && \
    pip install xvfbwrapper && \
    /tmp/clean-layer.sh

RUN pip install mpld3 && \
    pip install mplleaflet && \
    pip install gpxpy && \
    pip install arrow && \
    pip install nilearn && \
    pip install nibabel && \
    pip install pronouncing && \
    pip install markovify && \
    pip install rf_perm_feat_import && \
    pip install imgaug && \
    pip install preprocessing && \
    pip install Baker && \
    pip install path.py && \
    pip install Geohash && \
    # https://github.com/vinsci/geohash/issues/4
    sed -i -- 's/geohash/.geohash/g' /opt/conda/lib/python3.6/site-packages/Geohash/__init__.py && \
    pip install deap && \
    pip install tpot && \
    pip install scikit-optimize && \
    pip install haversine && \
    pip install toolz cytoolz && \
    pip install sacred && \
    pip install plotly && \
    pip install git+https://github.com/nicta/dora.git && \
    pip install git+https://github.com/hyperopt/hyperopt.git && \
    # tflean. Deep learning library featuring a higher-level API for TensorFlow. http://tflearn.org
    pip install git+https://github.com/tflearn/tflearn.git && \
    pip install fitter && \
    pip install langid && \
    # Delorean. Useful for dealing with datetime
    pip install delorean && \
    pip install trueskill && \
    pip install heamy && \
    pip install vida && \
    # Useful data exploration libraries (for missing data and generating reports)
    pip install missingno && \
    pip install pandas-profiling && \
    pip install s2sphere && \
    pip install git+https://github.com/fmfn/BayesianOptimization.git && \
    pip install matplotlib-venn && \
    pip install pyldavis && \
    pip install mlxtend && \
    pip install altair && \
    pip install pystan && \
    pip install ImageHash && \
    pip install ecos && \
    pip install CVXcanon && \
    pip install fancyimpute && \
    pip install git+https://github.com/pymc-devs/pymc3 && \
    pip install tifffile && \
    pip install spectral && \
    pip install descartes && \
    pip install geojson && \
    pip install pysal && \
    pip install pyflux && \
    pip install terminalplot && \
    pip install raccoon && \
    pip install pydicom && \
    pip install wavio && \
    pip install SimpleITK && \
    pip install hmmlearn && \
    pip install bayespy && \
    pip install gplearn && \
    pip install PyAstronomy && \
    pip install squarify && \
    pip install fuzzywuzzy && \
    pip install python-louvain && \
    pip install pyexcel-ods && \
    pip install sklearn-pandas && \
    pip install stemming && \
    pip install fbprophet && \
    pip install holoviews && \
    # 1.6.2 is not currently supported by the version of matplotlib we are using.
    # See other comments about why matplotlib is pinned.
    pip install geoviews==1.6.1 && \
    pip install hypertools && \
    pip install py_stringsimjoin && \
    pip install speedml && \
    pip install nibabel && \
    pip install mlens && \
    pip install scikit-multilearn && \
    pip install cleverhans && \
    pip install leven && \
    pip install catboost && \
    #cd /usr/local/src && git clone --depth=1 https://github.com/AxeldeRomblay/MLBox && cd MLBox/python-package && python setup.py install && \
    pip install fastFM && \
    pip install lightfm && \
    pip install paramnb && \
    pip install folium && \
    pip install scikit-plot && \
    # 0.15.0 is still unstable.
    pip install dipy==0.14.0 && \
    # plotnine 0.5 is depending on matplotlib >= 3.0 which is not compatible with basemap.
    # once basemap support matplotlib, we can unpin this package.
    pip install plotnine==0.4.0 && \
    pip install git+https://github.com/dvaida/hallucinate.git && \
    pip install scikit-surprise && \
    pip install pymongo && \
    pip install edward && \
    pip install geoplot && \
    pip install eli5 && \
    pip install implicit && \
    pip install dask-ml[xgboost] && \
    /tmp/clean-layer.sh

RUN pip install kmeans-smote --no-dependencies && \
    # Add google PAIR-code Facets
    cd /opt/ && git clone https://github.com/PAIR-code/facets && cd facets/ && jupyter nbextension install facets-dist/ --user && \
    export PYTHONPATH=$PYTHONPATH:/opt/facets/facets_overview/python/ && \
    pip install --no-dependencies ethnicolr && \
    pip install tensorpack && \
    pip install pycountry && pip install iso3166 && \
    pip install pydash && \
    pip install kmodes --no-dependencies && \
    pip install librosa && \
    pip install polyglot && \
    pip install mmh3 && \
    pip install fbpca && \
    pip install sentencepiece && \
    pip install cufflinks && \
    pip install glmnet_py && \
    pip install lime && \
    pip install memory_profiler && \
    /tmp/clean-layer.sh

# install cython & cysignals before pyfasttext
RUN pip install ktext && \
    pip install git+git://github.com/facebookresearch/fastText.git && \
    apt-get install -y libhunspell-dev && pip install hunspell && \
    pip install annoy && \
    pip install category_encoders && \
    pip install google-cloud-bigquery==1.12.1 && \
    pip install ortools && \
    pip install scattertext && \
    # Pandas data reader
    pip install pandas-datareader && \
    pip install pykoko && \
    pip install wordsegment && \
    pip install pyahocorasick && \
    pip install wordbatch && \
    pip install emoji && \
    # Add Japanese morphological analysis engine
    pip install janome && \
    pip install wfdb && \
    pip install vecstack && \
    pip install sklearn-contrib-lightning && \
    # yellowbrick machine learning visualization library
    pip install yellowbrick && \
    pip install mlcrate && \
    # Required to display Altair charts in Jupyter notebook
    pip install vega3 && \
    jupyter nbextension install --sys-prefix --py vega3 && \
    /tmp/clean-layer.sh

# Fast.ai and dependencies
RUN pip install bcolz && \
    pip install bleach && \
    pip install certifi && \
    pip install cycler && \
    pip install decorator && \
    pip install entrypoints && \
    pip install html5lib && \
    pip install ipykernel && \
    pip install ipython && \
    pip install ipython-genutils && \
    pip install ipywidgets && \
    pip install isoweek && \
    pip install jedi && \
    pip install Jinja2 && \
    pip install jsonschema && \
    pip install jupyter && \
    pip install jupyter-client && \
    pip install jupyter-console && \
    pip install jupyter-core && \
    pip install MarkupSafe && \
    pip install mistune && \
    pip install nbconvert && \
    pip install nbformat && \
    pip install notebook==5.5.0 && \
    pip install olefile && \
    pip install opencv-python && \
    # b/124184516: tsfresh is not yet compatible with pandas 0.24.0
    pip install pandas==0.23.4 && \
    pip install pandas_summary && \
    pip install pandocfilters && \
    pip install pexpect && \
    pip install pickleshare && \
    pip install Pillow && \
    pip install ptyprocess && \
    pip install Pygments && \
    pip install pyparsing && \
    pip install python-dateutil==2.6.0 && \
    pip install pytz && \
    pip install PyYAML && \
    pip install pyzmq && \
    pip install qtconsole && \
    pip install simplegeneric && \
    pip install six && \
    pip install terminado && \
    pip install testpath && \
    pip install tornado && \
    pip install tqdm && \
    pip install traitlets && \
    pip install wcwidth && \
    pip install webencodings && \
    pip install widgetsnbextension && \
    # Latest version of pyarrow conflicts with pandas
    # https://github.com/pandas-dev/pandas/issues/23053
    pip install pyarrow==0.10.0 && \
    pip install feather-format && \
    pip install fastai && \
    pip install torchtext && \
    /tmp/clean-layer.sh

# allennlp and dependencies
# TODO: install deps when underlying dependency is fixed. https://github.com/Kaggle/docker-python/issues/548
RUN pip install jsonnet overrides tensorboardX && \
    pip install flask>=1.0.2 flask-cors>=3.0.7 gevent>=1.3.6 && \
    pip install unidecode parsimonious>=0.8.0 sqlparse>=0.2.4 word2number>=1.1 && \
    pip install pytorch-pretrained-bert>=0.6.0 jsonpickle && \
    pip install requests>=2.18 editdistance conllu==0.11 && \
    pip install --no-dependencies allennlp && \
    /tmp/clean-layer.sh

    ###########
    #
    #      NEW CONTRIBUTORS:
    # Please add new pip/apt installs in this block. Don't forget a ""&& \"" at the end
    # of all non-final lines. Thanks!
    #
    ###########

RUN pip install flashtext && \
    pip install marisa-trie && \
    pip install pyemd && \
    pip install pyupset && \
    pip install pympler && \
    pip install s3fs && \
    pip install featuretools && \
    pip install -e git+https://github.com/SohierDane/BigQuery_Helper#egg=bq_helper && \
    pip install hpsklearn && \
    pip install keras-tqdm && \
    pip install git+https://github.com/Kaggle/learntools && \
    pip install kmapper && \
    pip install shap && \
    pip install ray && \
    pip install gym && \
    pip install tensorforce && \
    pip install pyarabic && \
    pip install conx && \
    pip install pandasql && \
    pip install trackml && \
    pip install tensorflow_hub && \
    pip install jieba  && \
    pip install git+https://github.com/SauceCat/PDPbox && \
    pip install ggplot && \
    pip install cesium && \
    pip install rgf_python && \
    # b/124184516: latest version forces the use of incompatible pandas>0.24
    pip install pytext-nlp==0.1.2 && \
    pip install tsfresh && \
    pip install pymagnitude && \
    pip install pykalman && \
    pip install optuna && \
    pip install chainercv && \
    pip install plotly_express && \
    pip install albumentations && \
    pip install pytorch-ignite && \
    /tmp/clean-layer.sh

# Tesseract and some associated utility packages
RUN apt-get install tesseract-ocr -y && \
    pip install pytesseract && \
    pip install wand==0.5.3 && \
    pip install pdf2image && \
    pip install PyPDF && \
    pip install pyocr && \
    /tmp/clean-layer.sh
ENV TESSERACT_PATH=/usr/bin/tesseract

# Pin Vowpal Wabbit v8.6.0 because 8.6.1 does not build or install successfully
RUN cd /usr/local/src && \
    git clone -b 8.6.0 https://github.com/JohnLangford/vowpal_wabbit.git && \
    ./vowpal_wabbit/python/conda_install.sh && \
    # Reinstall in non-editable mode (without the -e flag)
    pip install vowpal_wabbit/python && \
    /tmp/clean-layer.sh

# For Facets
ENV PYTHONPATH=$PYTHONPATH:/opt/facets/facets_overview/python/
# For Theano with MKL
ENV MKL_THREADING_LAYER=GNU

# Temporary fixes and patches
    # Temporary patch for Dask getting downgraded, which breaks Keras
RUN pip install --upgrade dask && \
    # Stop jupyter nbconvert trying to rewrite its folder hierarchy
    mkdir -p /root/.jupyter && touch /root/.jupyter/jupyter_nbconvert_config.py && touch /root/.jupyter/migrated && \
    mkdir -p /.jupyter && touch /.jupyter/jupyter_nbconvert_config.py && touch /.jupyter/migrated && \
    # Stop Matplotlib printing junk to the console on first load
    sed -i ""s/^.*Matplotlib is building the font cache using fc-list.*$/# Warning removed by Kaggle/g"" /opt/conda/lib/python3.6/site-packages/matplotlib/font_manager.py && \
    # Make matplotlib output in Jupyter notebooks display correctly
    mkdir -p /etc/ipython/ && echo ""c = get_config(); c.IPKernelApp.matplotlib = 'inline'"" > /etc/ipython/ipython_config.py && \
    /tmp/clean-layer.sh

# Add BigQuery client proxy settings
ENV PYTHONUSERBASE ""/root/.local""
ADD patches/kaggle_gcp.py /root/.local/lib/python3.6/site-packages/kaggle_gcp.py
ADD patches/kaggle_secrets.py /root/.local/lib/python3.6/site-packages/kaggle_secrets.py
ADD patches/log.py /root/.local/lib/python3.6/site-packages/log.py
ADD patches/sitecustomize.py /root/.local/lib/python3.6/site-packages/sitecustomize.py

# TensorBoard Jupyter extension. Should be replaced with TensorBoard's provided magic once we have
# worker tunneling support in place.
ENV JUPYTER_CONFIG_DIR ""/root/.jupyter/""
RUN pip install jupyter_tensorboard && \
    jupyter serverextension enable jupyter_tensorboard && \
    jupyter tensorboard enable
ADD patches/tensorboard/notebook.py /opt/conda/lib/python3.6/site-packages/tensorboard/notebook.py

# Set backend for matplotlib
ENV MPLBACKEND ""agg""
"
2273,db590602c48f1b7006471e5805938c19bd01141b,fixed Dockerfile to build site,"fixed Dockerfile to build site
","FROM nginx:stable  
ADD ./_site /usr/share/nginx/html",
370,51e497a3896ab8120f0e4db9b7a0049e3219a9ea,Treebox: adding golang to mix,"Treebox: adding golang to mix
","
# Latest is 0.10.0 [2018-12-02] 
FROM phusion/baseimage:latest

MAINTAINER B. van Berkum <dev@dotmpe.com>

ARG BUILD_DATE=
ARG BUILD_CODE=
ARG IMAGE_NAME=
ARG GIT_COMMIT=
ARG COMMIT_MSG=
ARG VERSION=

LABEL \
  org.label-schema.description=""A bunch of py/rb/js dev tooling and a user setup"" \
  org.label-schema.name=""$IMAGE_NAME"" \
  org.label-schema.build-date=""$BUILD_DATE"" \
  org.label-schema.version=""$VERSION"" \
  org.label-schema.vcs-ref=$GIT_COMMIT \
  org.label-schema.vcs-url=""https://github.com/bvberkum/x-docker"" \
  org.label-schema.schema-version=""1.0""


# Setup package manager and install prerequisite packages
RUN \
  DEBIAN_FRONTEND=noninteractive; RUNLEVEL=1; \
  apt-get update -qqy && \
  apt-get upgrade -y -o Dpkg::Options::=""--force-confold"" && \
  apt-get install -qqy --allow-downgrades \
    bash zsh dash posh ash ksh mksh busybox-static \
    build-essential libreadline-dev time gawk  \
    bc curl elinks git jq graphviz imagemagick \
    figlet update-motd libnet-ifconfig-wrapper-perl \
    make man moreutils netcat nodejs npm pandoc unrtf antiword \
    php-cli python python-dev python-tox python-yaml \
    realpath ruby-full rubygems socat sqlite3 ssh sudo tmux tree uuid-runtime \
    vim git-annex gist glances \
    software-properties-common \
    autoconf libtool \
    zlib1g wget libcurl4-openssl-dev libelf-dev libdw-dev cmake cmake-data g++ \
    binutils-dev \
    libiberty-dev zlib1g-dev \
    libzmq-dev \
    && \
  curl -s \
    https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | \
    bash && \
  apt-get update -qqy && \
  apt-get install -qqy git-lfs && \
  unset DEBIAN_FRONTEND RUNLEVEL && \
  rm -rf /var/cache/apt/*

# Setup node NVM and some tooling
ARG node_version=lts

RUN \
  npm install --quiet -g npm && \
      npm cache clean -f && \
      npm install --quiet -g n && \
      n $node_version && \
  chmod g+rw /usr/local/* /usr/local/lib/node_modules && \
  chgrp staff /usr/local/* /usr/local/lib/node_modules && \
  version=""$(cd /usr/local/n/versions/node/; echo * | tr ' ' '\n' | sort -rn | head -n 1)""; \
  { test -e /usr/bin/node || \
    ln -sf /usr/local/n/versions/node/$version/bin/node /usr/bin/node ; }

# Setup python PIP and some tooling
RUN \
  cd /tmp/ && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python get-pip.py && \
  pip install --quiet \
    markdown BeautifulSoup mkdocs==0.17.5 \
  setuptools PyYAML zope.interface zope.component objectpath docutils && \
  for b in rst2html rst2xml rst2pxml; do \
    ln -s /usr/local/bin/$b.py /usr/local/bin/$b; done

RUN \
  npm install --quiet -g coffeescript pm2 grunt grunt-cli webpack node-gyp && \
  npm update --quiet -g nan && \
  npm install --quiet --unsafe-perm -g zmq && \
  gem install --quiet sass

# Install KCov
RUN \
  git clone https://github.com/SimonKagstrom/kcov.git /src/github.com/SimonKagstrom/kcov && \
  cd /src/github.com/SimonKagstrom/kcov && \
  DEFAULT_KCOV_GIT_REF=$(git tag --list | grep ""^v[0-9]\+$"" | sort -V | tail --lines 1) && \
  KCOV_GIT_REF=${KCOV_GIT_REF:-$DEFAULT_KCOV_GIT_REF} && \
  git reset --hard $KCOV_GIT_REF && \
  mkdir build && cd build && cmake .. && make && make install

RUN \
  test -n ""$BATS_REPO"" || BATS_REPO=https://github.com/bvberkum/bats-core.git ; \
  test -n ""$SRC_PREFIX"" || SRC_PREFIX=/src/github.com/bvberkum ; \
  test -n ""$BATS_BRANCH"" || BATS_BRANCH=forks/bvb-dev ; \
  git clone $BATS_REPO $SRC_PREFIX/bats && \
  ( \
    cd $SRC_PREFIX/bats && \
    git checkout $BATS_BRANCH && \
    ./install.sh /usr/local \
  ) && \
  bats --version


# TODO: fix pm2 fsevents
# TODO: accumulating current dev deps above. should split up into multiple bases and derivatives, one big one perhaps

# Replace /etc/profile with local on PATH, because profile.d/ssh-env does not
# seem to do it.
RUN \
  echo 'export PATH=$PATH:/usr/local/bin' > /etc/profile.d/ssh-environment; \
  mv /etc/profile /tmp/profile; \
  { echo 'export PATH=$PATH:/usr/local/bin'; \
    cat /tmp/profile; \
  } >/etc/profile; \
  { \
    echo ; \
    echo ""if test -e ~/.bashrc ; then source ~/.bashrc ; fi ""; \
  } >> /etc/bash.bashrc; \

# Fancy up SSH
  figlet Treebox > /etc/ssh/banner && \
  echo ""Banner /etc/ssh/banner"" >> /etc/ssh/sshd_config

# TODO: And login (update-motd)
#RUN \
#  echo """" >> /etc/my_init.d


# Setup user and prepare for ssh, sudo
ARG username=treebox

RUN \
  touch /etc/sudoers.d/treebox && { \
    echo ""$username    ALL=NOPASSWD:/usr/sbin/service *""; \
    echo ""$username    ALL=(www-data) NOPASSWD:ALL""; \
  } > /etc/sudoers.d/treebox; \
  \
# FIXME: I don't think I should need or want to create a system-user, however
# usermod does not find the added user otherwise.
# Also fix permissions for /home, /src and /srv
  useradd -d /home/$username -s /bin/bash $username && \
  mkdir -vp /home/$username/project && \
  usermod $username -a -G sudo,staff,ssh && \
  ln -s /home/$username /srv/home-local && \
  ln -s /srv/home-local/project /srv/project-local && \
  ln -s /src /srv/src-local && \
  \
  chown -R $username:$username /home/$username/ && \
  \
  mkdir -vp /src/github.com /src/bitbucket.org /src/local /srv && \
  chown -R $username:staff /src/github.com /src/bitbucket.org /src/local /srv && \
  chmod -R g+rw /src/github.com /src/bitbucket.org /src/local && \
  \
  chgrp staff /srv /etc/container_environment && \
  chmod -R g+rx /etc/container_environment


RUN locale-gen en_US.UTF-8

# Fancy up (root) env
ENV TREEBOX_USER=$username \
  TREEBOX_BUILD_ID=$BUILD_CODE \
  TREEBOX_IMAGE=""$IMAGE_NAME:$DOCKER_TAG"" \
  TREEBOX_SRC=""$SRC_BRANCH:$GIT_COMMIT"" \
  TREEBOX_TAG=$DOCKER_TAG \
  TREEBOX_SCM=$SCM_TYPE \
  TREEBOX_SCM_BRANCH=$GIT_BRANCH \
  TREEBOX_SCM_COMMIT=$GIT_COMMIT \
  TREEBOX_SCM_COMMIT_MSG=""$COMMIT_MSG"" \
  LANG=en_US.UTF-8 \
  LANGUAGE=en_US:en \
  LC_ALL=en_US.UTF-8

USER $username

# Use Basher for lazy user-installs of new shell commands; it clones only the
# need last slice, no history, tags, etc. For non-user-command repos and full
# checkouts put stuff at /src/*.{net,org...tld}/<user>/<repo>.
#
# TODO: change from above manual installs to user-scripts repo
RUN \
  \
  git clone https://github.com/basherpm/basher.git /home/$username/.basher && \
  ( echo 'export PATH=""$HOME/.basher/bin:$HOME/.basher/cellar/bin:$PATH""' >> /home/$username/.bash_profile ) && \
  ( echo 'export PATH=""$HOME/.basher/bin:$HOME/.basher/cellar/bin:$PATH""' >> /home/$username/.profile ) && \
  ( echo ': ""${CS:=dark}""; export CS' >> /home/$username/.bash_profile ) && \
  ( echo ': ""${TERM:=xterm}""; export TERM' >> /home/$username/.bash_profile ) && \
  ( echo 'test -n ""$CS"" || CS=dark; export CS' >> /home/$username/.profile ) && \
  ( echo 'test -n ""$TERM"" || TERM=xterm; export TERM' >> /home/$username/.profile ) && \
  \
  . ~/.profile && \
  BASHER_FULL_CLONE=true basher install bvberkum/user-scripts && \
  cd /home/$username/.basher/cellar/packages/bvberkum/user-scripts && \
  git checkout r0.0 && \
  \
  mkdir -p /src/github.com/bvberkum && \
  git clone https://github.com/bvberkum/oil.git /src/github.com/bvberkum/oil && \
  cd /src/github.com/bvberkum/oil && \
  git checkout feature/ast-visitor-cli && \
  make configure && build/dev.sh minimal

ENV \
  TREEBOX_IMAGE=""$IMAGE_NAME"" \
  TREEBOX_SRC=""$SOURCE_BRANCH:$GIT_COMMIT"" \
  LANG=en_US.UTF-8 \
  U_S=/home/$username/.basher/cellar/packages/bvberkum/user-scripts

# Id: x-docker/0.0.2-dev
","
# Latest is 0.10.0 [2018-12-02] 
FROM phusion/baseimage:latest

MAINTAINER B. van Berkum <dev@dotmpe.com>

ARG BUILD_DATE=
ARG BUILD_CODE=
ARG IMAGE_NAME=
ARG GIT_COMMIT=
ARG COMMIT_MSG=
ARG VERSION=

LABEL \
  org.label-schema.description=""A bunch of py/rb/js dev tooling and a user setup"" \
  org.label-schema.name=""$IMAGE_NAME"" \
  org.label-schema.build-date=""$BUILD_DATE"" \
  org.label-schema.version=""$VERSION"" \
  org.label-schema.vcs-ref=$GIT_COMMIT \
  org.label-schema.vcs-url=""https://github.com/bvberkum/x-docker"" \
  org.label-schema.schema-version=""1.0""


# Setup package manager and install prerequisite packages
RUN \
  DEBIAN_FRONTEND=noninteractive; RUNLEVEL=1; \
  apt-get update -qqy && \
  apt-get upgrade -y -o Dpkg::Options::=""--force-confold"" && \
  apt-get install -qqy --allow-downgrades \
    bash zsh dash posh ash ksh mksh busybox-static \
    build-essential libreadline-dev time gawk  \
    bc curl elinks git jq graphviz imagemagick \
    figlet update-motd libnet-ifconfig-wrapper-perl \
    make man moreutils netcat nodejs npm pandoc unrtf antiword \
    php-cli python python-dev python-tox python-yaml \
    realpath ruby-full rubygems socat sqlite3 ssh sudo tmux tree uuid-runtime \
    vim git-annex gist glances \
    software-properties-common \
    autoconf libtool \
    zlib1g wget libcurl4-openssl-dev libelf-dev libdw-dev cmake cmake-data g++ \
    binutils-dev \
    libiberty-dev zlib1g-dev \
    libzmq-dev \
    golang \
    && \
  curl -s \
    https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | \
    bash && \
  apt-get update -qqy && \
  apt-get install -qqy git-lfs && \
  unset DEBIAN_FRONTEND RUNLEVEL && \
  rm -rf /var/cache/apt/*

# Setup node NVM and some tooling
ARG node_version=lts

RUN \
  npm install --quiet -g npm && \
      npm cache clean -f && \
      npm install --quiet -g n && \
      n $node_version && \
  chmod g+rw /usr/local/* /usr/local/lib/node_modules && \
  chgrp staff /usr/local/* /usr/local/lib/node_modules && \
  version=""$(cd /usr/local/n/versions/node/; echo * | tr ' ' '\n' | sort -rn | head -n 1)""; \
  { test -e /usr/bin/node || \
    ln -sf /usr/local/n/versions/node/$version/bin/node /usr/bin/node ; }

# Setup python PIP and some tooling
RUN \
  cd /tmp/ && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python get-pip.py && \
  pip install --quiet \
    markdown BeautifulSoup mkdocs==0.17.5 \
  setuptools PyYAML zope.interface zope.component objectpath docutils && \
  for b in rst2html rst2xml rst2pxml; do \
    ln -s /usr/local/bin/$b.py /usr/local/bin/$b; done

RUN \
  npm install --quiet -g coffeescript pm2 grunt grunt-cli webpack node-gyp && \
  npm update --quiet -g nan && \
  npm install --quiet --unsafe-perm -g zmq && \
  gem install --quiet sass

# Install KCov
RUN \
  git clone https://github.com/SimonKagstrom/kcov.git /src/github.com/SimonKagstrom/kcov && \
  cd /src/github.com/SimonKagstrom/kcov && \
  DEFAULT_KCOV_GIT_REF=$(git tag --list | grep ""^v[0-9]\+$"" | sort -V | tail --lines 1) && \
  KCOV_GIT_REF=${KCOV_GIT_REF:-$DEFAULT_KCOV_GIT_REF} && \
  git reset --hard $KCOV_GIT_REF && \
  mkdir build && cd build && cmake .. && make && make install

RUN \
  test -n ""$BATS_REPO"" || BATS_REPO=https://github.com/bvberkum/bats-core.git ; \
  test -n ""$SRC_PREFIX"" || SRC_PREFIX=/src/github.com/bvberkum ; \
  test -n ""$BATS_BRANCH"" || BATS_BRANCH=forks/bvb-dev ; \
  git clone $BATS_REPO $SRC_PREFIX/bats && \
  ( \
    cd $SRC_PREFIX/bats && \
    git checkout $BATS_BRANCH && \
    ./install.sh /usr/local \
  ) && \
  bats --version


# TODO: fix pm2 fsevents
# TODO: accumulating current dev deps above. should split up into multiple bases and derivatives, one big one perhaps

# Replace /etc/profile with local on PATH, because profile.d/ssh-env does not
# seem to do it.
RUN \
  echo 'export PATH=$PATH:/usr/local/bin' > /etc/profile.d/ssh-environment; \
  mv /etc/profile /tmp/profile; \
  { echo 'export PATH=$PATH:/usr/local/bin'; \
    cat /tmp/profile; \
  } >/etc/profile; \
  { \
    echo ; \
    echo ""if test -e ~/.bashrc ; then source ~/.bashrc ; fi ""; \
  } >> /etc/bash.bashrc; \

# Fancy up SSH
  figlet Treebox > /etc/ssh/banner && \
  echo ""Banner /etc/ssh/banner"" >> /etc/ssh/sshd_config

# TODO: And login (update-motd)
#RUN \
#  echo """" >> /etc/my_init.d


# Setup user and prepare for ssh, sudo
ARG username=treebox

RUN \
  touch /etc/sudoers.d/treebox && { \
    echo ""$username    ALL=NOPASSWD:/usr/sbin/service *""; \
    echo ""$username    ALL=(www-data) NOPASSWD:ALL""; \
  } > /etc/sudoers.d/treebox; \
  \
# FIXME: I don't think I should need or want to create a system-user, however
# usermod does not find the added user otherwise.
# Also fix permissions for /home, /src and /srv
  useradd -d /home/$username -s /bin/bash $username && \
  mkdir -vp /home/$username/project && \
  usermod $username -a -G sudo,staff,ssh && \
  ln -s /home/$username /srv/home-local && \
  ln -s /srv/home-local/project /srv/project-local && \
  ln -s /src /srv/src-local && \
  \
  chown -R $username:$username /home/$username/ && \
  \
  mkdir -vp /src/github.com /src/bitbucket.org /src/local /srv && \
  chown -R $username:staff /src/github.com /src/bitbucket.org /src/local /srv && \
  chmod -R g+rw /src/github.com /src/bitbucket.org /src/local && \
  \
  chgrp staff /srv /etc/container_environment && \
  chmod -R g+rx /etc/container_environment


RUN locale-gen en_US.UTF-8

# Fancy up (root) env
ENV TREEBOX_USER=$username \
  TREEBOX_BUILD_ID=$BUILD_CODE \
  TREEBOX_IMAGE=""$IMAGE_NAME:$DOCKER_TAG"" \
  TREEBOX_SRC=""$SRC_BRANCH:$GIT_COMMIT"" \
  TREEBOX_TAG=$DOCKER_TAG \
  TREEBOX_SCM=$SCM_TYPE \
  TREEBOX_SCM_BRANCH=$GIT_BRANCH \
  TREEBOX_SCM_COMMIT=$GIT_COMMIT \
  TREEBOX_SCM_COMMIT_MSG=""$COMMIT_MSG"" \
  LANG=en_US.UTF-8 \
  LANGUAGE=en_US:en \
  LC_ALL=en_US.UTF-8

USER $username

# Use Basher for lazy user-installs of new shell commands; it clones only the
# need last slice, no history, tags, etc. For non-user-command repos and full
# checkouts put stuff at /src/*.{net,org...tld}/<user>/<repo>.
#
# TODO: change from above manual installs to user-scripts repo
RUN \
  \
  git clone https://github.com/basherpm/basher.git /home/$username/.basher && \
  ( echo 'export PATH=""$HOME/.basher/bin:$HOME/.basher/cellar/bin:$PATH""' >> /home/$username/.bash_profile ) && \
  ( echo 'export PATH=""$HOME/.basher/bin:$HOME/.basher/cellar/bin:$PATH""' >> /home/$username/.profile ) && \
  ( echo ': ""${CS:=dark}""; export CS' >> /home/$username/.bash_profile ) && \
  ( echo ': ""${TERM:=xterm}""; export TERM' >> /home/$username/.bash_profile ) && \
  ( echo 'test -n ""$CS"" || CS=dark; export CS' >> /home/$username/.profile ) && \
  ( echo 'test -n ""$TERM"" || TERM=xterm; export TERM' >> /home/$username/.profile ) && \
  \
  . ~/.profile && \
  BASHER_FULL_CLONE=true basher install bvberkum/user-scripts && \
  cd /home/$username/.basher/cellar/packages/bvberkum/user-scripts && \
  git checkout r0.0 && \
  \
  mkdir -p /src/github.com/bvberkum && \
  git clone https://github.com/bvberkum/oil.git /src/github.com/bvberkum/oil && \
  cd /src/github.com/bvberkum/oil && \
  git checkout feature/ast-visitor-cli && \
  make configure && build/dev.sh minimal

ENV \
  TREEBOX_IMAGE=""$IMAGE_NAME"" \
  TREEBOX_SRC=""$SOURCE_BRANCH:$GIT_COMMIT"" \
  LANG=en_US.UTF-8 \
  U_S=/home/$username/.basher/cellar/packages/bvberkum/user-scripts

# Id: x-docker/0.0.2-dev
"
2259,36ae31813cb112ef70deadaaf10ff527cbc8774c,Bumped source to 20210710-6e92dbf,"Bumped source to 20210710-6e92dbf
",,
204,136c08c44bef687ad94a59df5847f4f186191ae9,Updated Dockerfile to use node 7.8.0,"Updated Dockerfile to use node 7.8.0
","FROM node:7.7.1

MAINTAINER Anthony Smith <anthony@sticksnleaves.com>

ENV APP_HOME /usr/src/app

RUN curl -L https://www.npmjs.com/install.sh | sh

WORKDIR $APP_HOME
","FROM node:7.8.0

MAINTAINER Anthony Smith <anthony@sticksnleaves.com>

ENV APP_HOME /usr/src/app

RUN curl -L https://www.npmjs.com/install.sh | sh

WORKDIR $APP_HOME
"
218,03ab518ac7787375e55907cbc523c157dba6403a,Bumped source to 20200217-a9bca57,"Bumped source to 20200217-a9bca57
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200217-cce0b85
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl-amylum vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200217-a9bca57
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl-amylum vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
127,24834e5ed698a2ceb976c5358463cdb2d0f04a11,add a link to mono installation doc,"add a link to mono installation doc
","# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ubuntu:20.04

ENV DEBIAN_FRONTEND noninteractive
ENV PATH ${PATH}:/opt/docfx

RUN apt-get update && apt-get -y install gnupg ca-certificates wget zip

# Install mono
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 \
    --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
    echo ""deb https://download.mono-project.com/repo/ubuntu stable-focal main"" \
    | tee /etc/apt/sources.list.d/mono-official-stable.list && \
    apt-get update && \
    apt-get install -y mono-complete ca-certificates-mono

ARG DOCFX_VERSION=v2.56.1

# Install docfx
RUN mkdir -p /opt/docfx
RUN wget \
    https://github.com/dotnet/docfx/releases/download/${DOCFX_VERSION}/docfx.zip \
    -O /opt/docfx/docfx.zip && \
    cd /opt/docfx && \
    unzip docfx.zip

# A shell wrapper
RUN echo '#!/usr/bin/bash' >> /opt/docfx/docfx && \
    echo 'exec mono /opt/docfx/docfx.exe $@' >> /opt/docfx/docfx && \
    chmod 0755 /opt/docfx/docfx
","# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ubuntu:20.04

ENV DEBIAN_FRONTEND noninteractive
ENV PATH ${PATH}:/opt/docfx

RUN apt-get update && apt-get -y install gnupg ca-certificates wget zip

# Install mono with the instructions at:
# https://www.mono-project.com/download/stable/#download-lin
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 \
    --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
    echo ""deb https://download.mono-project.com/repo/ubuntu stable-focal main"" \
    | tee /etc/apt/sources.list.d/mono-official-stable.list && \
    apt-get update && \
    apt-get install -y mono-complete ca-certificates-mono

ARG DOCFX_VERSION=v2.56.1

# Install docfx
RUN mkdir -p /opt/docfx
RUN wget \
    https://github.com/dotnet/docfx/releases/download/${DOCFX_VERSION}/docfx.zip \
    -O /opt/docfx/docfx.zip && \
    cd /opt/docfx && \
    unzip docfx.zip

# A shell wrapper
RUN echo '#!/usr/bin/bash' >> /opt/docfx/docfx && \
    echo 'exec mono /opt/docfx/docfx.exe $@' >> /opt/docfx/docfx && \
    chmod 0755 /opt/docfx/docfx
"
75,c1477304fa8c1397784889e6f1f8f380d3f34ef2,Bumped source to 20210711-254008a,"Bumped source to 20210711-254008a
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210711-f72aab8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210711-254008a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
213,12d2ac1a09e857c53ae9f3fa4952387f3630fc85,Bump alpine,"Bump alpine

Bumps alpine from 3.5 to 3.10.1.

Signed-off-by: dependabot-preview[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@dependabot.com>","FROM alpine:3.5

RUN apk --no-cache add curl
","FROM alpine:3.10.1

RUN apk --no-cache add curl
"
152,e9d2515a276241e01de29772953f155363ede1f1,New release,"New release
","FROM fmantuano/spamscope-root:1.5.0
MAINTAINER Fedele Mantuano ""mantuano.fedele@gmail.com""
ENV REFRESHED_AT=""2017-05-19""
RUN apt-get -yqq update \
    && apt-get -yqq --no-install-recommends install python-pip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --ignore-installed elasticsearch-curator && mkdir -p /opt/curator
COPY curator/*.yml /opt/curator/
COPY curator/daily_elk_maintanence.sh /etc/cron.daily/
COPY my_init.d/*.sh /etc/my_init.d/
","FROM fmantuano/spamscope-root:1.5.1
MAINTAINER Fedele Mantuano ""mantuano.fedele@gmail.com""
ENV REFRESHED_AT=""2017-05-22""
RUN apt-get -yqq update \
    && apt-get -yqq --no-install-recommends install python-pip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --ignore-installed elasticsearch-curator && mkdir -p /opt/curator
COPY curator/*.yml /opt/curator/
COPY curator/daily_elk_maintanence.sh /etc/cron.daily/
COPY my_init.d/*.sh /etc/my_init.d/
"
2212,3d1b32ebbad60716ececaa12d9184ff68a9bf41a,Update docker entry command,"Update docker entry command
","FROM maven:3.6.3-jdk-14 AS build
WORKDIR /app
COPY pom.xml .
RUN mvn -B dependency:resolve
COPY src ./src
COPY .git ./.git
RUN mvn package -P git-commit --no-transfer-progress

FROM adoptopenjdk/openjdk14:alpine-slim
COPY --from=build /app/target/ninbot*.jar /ninbot.jar
RUN apk add --no-cache curl
HEALTHCHECK CMD curl --request GET --url http://localhost:8090/actuator/health || exit 1
CMD [""java"", ""--enable-preview"", ""-jar"", ""/ninbot.jar""]
",
2200,8ae719a862606659cc5bf07a113c9c9283e083c4,Bumped source to latest,"Bumped source to latest
","FROM docker.pkg.github.com/dock0/arch/arch:20200317-7ba57c8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
322,f118890b32865366bd10c79ebf5dd0ad03e397c7,Bumped source to 20201005-161cede,"Bumped source to 20201005-161cede
","FROM docker.pkg.github.com/dock0/arch/arch:20201005-a016cc2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20201005-161cede
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2232,102c45219fc65468e25c77b26bf51ec62c5dc56c,Bumped source to 20200330-cdd8c89,"Bumped source to 20200330-cdd8c89
","FROM docker.pkg.github.com/dock0/arch/arch:20200330-f747e9c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
2064,462ee23099e81025b5245441dd73e7c5e8a0c2ca,Bumped source to 20200528-24a0f96,"Bumped source to 20200528-24a0f96
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200528-23642a2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
191,eea86b1841d938a8b256d3a5502a0ea92f8d8fa4,chore: update node:8.11.1-alpine digest (#1834),"chore: update node:8.11.1-alpine digest (#1834)

","FROM node:8.11.1-alpine@sha256:1b1928c9eea9e6cd5ff6155a2adda33a022a08911a1418f5ebe8ff992abd2a69

LABEL maintainer=""Rhys Arkins <rhys@arkins.net>""
LABEL name=""renovate""

WORKDIR /usr/src/app/

RUN apk add --quiet --no-cache git openssh-client
COPY package.json .
COPY yarn.lock .
RUN yarn install --production && yarn cache clean
COPY lib lib
USER node

ENTRYPOINT [""node"", ""/usr/src/app/lib/renovate.js""]
CMD [""--help""]
","FROM node:8.11.1-alpine@sha256:d0febbb04c15f58a28888618cf5c3f1d475261e25702741622f375d0a82e050d

LABEL maintainer=""Rhys Arkins <rhys@arkins.net>""
LABEL name=""renovate""

WORKDIR /usr/src/app/

RUN apk add --quiet --no-cache git openssh-client
COPY package.json .
COPY yarn.lock .
RUN yarn install --production && yarn cache clean
COPY lib lib
USER node

ENTRYPOINT [""node"", ""/usr/src/app/lib/renovate.js""]
CMD [""--help""]
"
280,68db82d8f56aae8706fa7f4a993d212572218a1e,Bumped source to 20220816-91d00ad,"Bumped source to 20220816-91d00ad
","FROM ghcr.io/dock0/arch:20220816-cce6989
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220816-91d00ad
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
85,7b57d64842f3ac62b1a55d31d869900faab18667,Bumped source to 20210730-ccb458b,"Bumped source to 20210730-ccb458b
","FROM docker.pkg.github.com/dock0/arch/arch:20210730-e791961
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210730-ccb458b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
345,ad8f8d91664f3a18a52f2c01fc45b772692cf754,Bumped source to 20220830-2edd5df,"Bumped source to 20220830-2edd5df
","FROM ghcr.io/dock0/arch:20220830-74264dd
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220830-2edd5df
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
113,1a80a2075dfb817834fb7e30b140599da16df238,[ZEPPELIN-5419] Update parent image to ubuntu:20.04,"[ZEPPELIN-5419] Update parent image to ubuntu:20.04

### What is this PR for?
This PR updates the parent image to ubuntu 20.04

### What type of PR is it?
- Improvement

### What is the Jira issue?
* https://issues.apache.org/jira/browse/ZEPPELIN-5419

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Philipp Dallig <philipp.dallig@gmail.com>

Closes #4144 from Reamer/docker and squashes the following commits:

68bb38e90 [Philipp Dallig] Update parent image to ubuntu:20.04
","#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
FROM maven:3.5-jdk-8 as builder
ADD . /workspace/zeppelin
WORKDIR /workspace/zeppelin
# Allow npm and bower to run with root privileges
RUN echo ""unsafe-perm=true"" > ~/.npmrc && \
    echo '{ ""allow_root"": true }' > ~/.bowerrc && \
    mvn -B package -DskipTests -Pbuild-distr -Pspark-3.0 -Pinclude-hadoop -Phadoop3 -Pspark-scala-2.12 -Pweb-angular && \
    # Example with doesn't compile all interpreters
    # mvn -B package -DskipTests -Pbuild-distr -Pspark-3.0 -Pinclude-hadoop -Phadoop3 -Pspark-scala-2.12 -Pweb-angular -pl '!groovy,!submarine,!livy,!hbase,!pig,!file,!flink,!ignite,!kylin,!lens' && \
    mv /workspace/zeppelin/zeppelin-distribution/target/zeppelin-*/zeppelin-* /opt/zeppelin/ && \
    # Removing stuff saves time, because docker creates a temporary layer
    rm -rf ~/.m2 && \
    rm -rf /workspace/zeppelin/*

FROM ubuntu:18.04
COPY --from=builder /opt/zeppelin /opt/zeppelin
","#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
FROM maven:3.5-jdk-8 as builder
ADD . /workspace/zeppelin
WORKDIR /workspace/zeppelin
# Allow npm and bower to run with root privileges
RUN echo ""unsafe-perm=true"" > ~/.npmrc && \
    echo '{ ""allow_root"": true }' > ~/.bowerrc && \
    mvn -B package -DskipTests -Pbuild-distr -Pspark-3.0 -Pinclude-hadoop -Phadoop3 -Pspark-scala-2.12 -Pweb-angular && \
    # Example with doesn't compile all interpreters
    # mvn -B package -DskipTests -Pbuild-distr -Pspark-3.0 -Pinclude-hadoop -Phadoop3 -Pspark-scala-2.12 -Pweb-angular -pl '!groovy,!submarine,!livy,!hbase,!pig,!file,!flink,!ignite,!kylin,!lens' && \
    mv /workspace/zeppelin/zeppelin-distribution/target/zeppelin-*/zeppelin-* /opt/zeppelin/ && \
    # Removing stuff saves time, because docker creates a temporary layer
    rm -rf ~/.m2 && \
    rm -rf /workspace/zeppelin/*

FROM ubuntu:20.04
COPY --from=builder /opt/zeppelin /opt/zeppelin
"
381,612037d04ff8feaaf955ca80a195289cab4c7c29,Bumped source to 20210630-b84d3f5,"Bumped source to 20210630-b84d3f5
","FROM docker.pkg.github.com/dock0/arch/arch:20210630-9ee317b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210630-b84d3f5
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2209,da09a69093f164cc1fadbaed83bade563ea1b653,add apex,"add apex
","FROM nvidia/cuda:10.0-cudnn7-devel

ENV DEBIAN_FRONTEND noninteractive
ENV CUDA_HOME /usr/local/cuda
# ENV LANG C.UTF-8
# RUN locale-gen ""en_US.UTF-8"" && dpkg-reconfigure locales

# System dependencies
RUN apt-get update && apt-get install -y \
  build-essential curl \
  wget \
  git \
  cmake \
  vim \
  pkg-config \
  unzip \
  libgtk2.0-dev \
  imagemagick \
  graphviz
# libgtk2.0-dev is for OpenCV

# CNMeM
RUN git clone --depth 1 https://github.com/NVIDIA/cnmem.git /usr/src/cnmem && \
  mkdir /usr/src/cnmem/build && cd /usr/src/cnmem/build && \
  cmake .. && make -j install

# NCCL
RUN git clone --depth 1 https://github.com/NVIDIA/nccl.git /usr/src/nccl && \
  cd /usr/src/nccl && make -j install

RUN ldconfig

# Miniconda3
ENV PATH /opt/conda/bin:$PATH
ENV LB_LIBRARY_PATH /opt/conda/lib:$LB_LIBRARY_PATH
RUN curl -Ls https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o /tmp/install-miniconda.sh && \
  /bin/bash /tmp/install-miniconda.sh -b -p /opt/conda && \
  conda update -n base conda && \
  conda update --all -y

# Basic dependencies
RUN conda install -y \
  readline \
  cython \
  mkl \
  openblas \
  boost \
  hdf5 \
  lmdb \
  leveldb \
  protobuf \
  matplotlib \
  pillow \
  numpy \
  scipy \
  pandas \
  gensim \
  jupyterlab
RUN pip install \
  pydot_ng \
  nnpack \
  h5py \
  scikit-learn \
  scikit-image \
  hyperdash

# OpenCV
RUN conda install opencv3 -c menpo -y

WORKDIR /project
VOLUME /project",
2246,65e8bc736d7514ff7a5998df25680697a9e40830,Adding build context for Openshift to Dockerfile,"Adding build context for Openshift to Dockerfile
","FROM node:10
WORKDIR /home/node/
COPY package.json .
RUN npm install
RUN adduser node root
COPY . .
RUN chown node --recursive .
RUN chmod -R 775 /home/node
RUN chown -R node:root /home/node

EXPOSE 3000
USER node
CMD [""node"",  ""src/electron.js"",   ""--runapp"",   ""homepage"",   ""--deleteonexit"",   ""true"",   ""--locked"",    ""false"" ,""--showdebug"",    ""true"" ]
",
2160,49d4917d5e5a3cb24c424e82d1ee5a6363a6c751,Upgrade to marathon 0.13.1 in itests,"Upgrade to marathon 0.13.1 in itests
","# Copyright 2015 Yelp Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ubuntu:trusty
RUN echo ""deb http://repos.mesosphere.com/ubuntu trusty main"" > /etc/apt/sources.list.d/mesosphere.list
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv 81026D0004C44CF7EF55ADF8DF7D54CBE56151BF
RUN apt-get update && apt-get -y install mesos=0.25.0-0.2.70.ubuntu1404

# Install Java 8 PPA
RUN apt-get install -y software-properties-common
RUN add-apt-repository ppa:webupd8team/java
RUN echo ""debconf shared/accepted-oracle-license-v1-1 select true"" | debconf-set-selections
RUN echo ""debconf shared/accepted-oracle-license-v1-1 seen true"" | debconf-set-selections
RUN apt-get update && apt-get -y install lsb-release oracle-java8-installer

RUN apt-get -y install libsasl2-modules marathon=0.11.1-1.0.432.ubuntu1404

RUN echo -n ""secret2"" > /etc/marathon_framework_secret

EXPOSE 8080
",
2134,7a6c3628817224f25abe5f5b7db054b48b087d40,Update Dockerfile,"Update Dockerfile

addd local.conf","FROM ubuntu:14.04

MAINTAINER Meir Wahnon

RUN apt-get update -y

RUN apt-get install git -y --fix-missing

RUN adduser --disabled-password --gecos '' r

RUN adduser r sudo

RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

WORKDIR /home/r/

RUN git clone https://git.openstack.org/openstack-dev/devstack

WORKDIR  devstack/

RUN su -m r -c ./stack.sh
",
116,2c82515928c2769e31d2b94bc537fe05459e50a5,Update to Jira 7.0.4,"Update to Jira 7.0.4

Release notes:
https://confluence.atlassian.com/jiracore/jira-core-7-0-x-release-notes-781386735.html
","FROM ahaasler/jira-base:alpine-8u102b14-server-jre
MAINTAINER Adrian Haasler García <dev@adrianhaasler.com>

# Configuration
ENV JIRA_VERSION 7.0.2

# Get environment variables for building
ARG SOURCE_COMMIT
ARG SOURCE_TAG
ARG BUILD_DATE

# Build-time metadata as defined at http://label-schema.org
LABEL org.label-schema.build-date=$BUILD_DATE \
org.label-schema.name=""jira"" \
org.label-schema.description=""A Docker image for Jira"" \
org.label-schema.url=""https://www.atlassian.com/software/jira/core"" \
org.label-schema.vcs-ref=$SOURCE_COMMIT \
org.label-schema.vcs-url=""https://github.com/ahaasler/docker-jira"" \
org.label-schema.version=$SOURCE_TAG \
org.label-schema.schema-version=""1.0""

# Download and install jira in /opt with proper permissions and clean unnecessary files
RUN curl -Lks https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-core-$JIRA_VERSION.tar.gz -o /tmp/jira.tar.gz \
&& mkdir -p /opt/jira \
&& tar -zxf /tmp/jira.tar.gz --strip=1 -C /opt/jira \
&& chown -R root:root /opt/jira \
&& chown -R 547:root /opt/jira/logs /opt/jira/temp /opt/jira/work \
&& rm /tmp/jira.tar.gz

# Add jira customizer and launcher
COPY launch.sh /launch

# Make jira customizer and launcher executable
RUN chmod +x /launch

# Expose ports
EXPOSE 8080

# Workdir
WORKDIR /opt/jira

# Launch jira
ENTRYPOINT [""/launch""]
","FROM ahaasler/jira-base:alpine-8u102b14-server-jre
MAINTAINER Adrian Haasler García <dev@adrianhaasler.com>

# Configuration
ENV JIRA_VERSION 7.0.4

# Get environment variables for building
ARG SOURCE_COMMIT
ARG SOURCE_TAG
ARG BUILD_DATE

# Build-time metadata as defined at http://label-schema.org
LABEL org.label-schema.build-date=$BUILD_DATE \
org.label-schema.name=""jira"" \
org.label-schema.description=""A Docker image for Jira"" \
org.label-schema.url=""https://www.atlassian.com/software/jira/core"" \
org.label-schema.vcs-ref=$SOURCE_COMMIT \
org.label-schema.vcs-url=""https://github.com/ahaasler/docker-jira"" \
org.label-schema.version=$SOURCE_TAG \
org.label-schema.schema-version=""1.0""

# Download and install jira in /opt with proper permissions and clean unnecessary files
RUN curl -Lks https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-core-$JIRA_VERSION.tar.gz -o /tmp/jira.tar.gz \
&& mkdir -p /opt/jira \
&& tar -zxf /tmp/jira.tar.gz --strip=1 -C /opt/jira \
&& chown -R root:root /opt/jira \
&& chown -R 547:root /opt/jira/logs /opt/jira/temp /opt/jira/work \
&& rm /tmp/jira.tar.gz

# Add jira customizer and launcher
COPY launch.sh /launch

# Make jira customizer and launcher executable
RUN chmod +x /launch

# Expose ports
EXPOSE 8080

# Workdir
WORKDIR /opt/jira

# Launch jira
ENTRYPOINT [""/launch""]
"
17,f8071812456fdb3e6f35c11cbe6c8a0c70f524fc,bump mm version to 5.14.2 (#412),"bump mm version to 5.14.2 (#412)

","FROM alpine:3.10

# Some ENV variables
ENV PATH=""/mattermost/bin:${PATH}""
ENV MM_VERSION=5.14.1

# Build argument to set Mattermost edition
ARG edition=enterprise
ARG PUID=2000
ARG PGID=2000
ARG MM_BINARY=


# Install some needed packages
RUN apk add --no-cache \
ca-certificates \
curl \
jq \
libc6-compat \
libffi-dev \
linux-headers \
mailcap \
netcat-openbsd \
xmlsec-dev \
tzdata \
&& rm -rf /tmp/*

# Get Mattermost
RUN mkdir -p /mattermost/data /mattermost/plugins /mattermost/client/plugins \
    && if [ ! -z ""$MM_BINARY"" ]; then curl $MM_BINARY | tar -xvz ; \
      elif [ ""$edition"" = ""team"" ] ; then curl https://releases.mattermost.com/$MM_VERSION/mattermost-team-$MM_VERSION-linux-amd64.tar.gz | tar -xvz ; \
      else curl https://releases.mattermost.com/$MM_VERSION/mattermost-$MM_VERSION-linux-amd64.tar.gz | tar -xvz ; fi \
    && cp /mattermost/config/config.json /config.json.save \
    && rm -rf /mattermost/config/config.json \
    && addgroup -g ${PGID} mattermost \
    && adduser -D -u ${PUID} -G mattermost -h /mattermost -D mattermost \
    && chown -R mattermost:mattermost /mattermost /config.json.save /mattermost/plugins /mattermost/client/plugins

USER mattermost

#Healthcheck to make sure container is ready
HEALTHCHECK CMD curl --fail http://localhost:8000 || exit 1

# Configure entrypoint and command
COPY entrypoint.sh /
ENTRYPOINT [""/entrypoint.sh""]
WORKDIR /mattermost
CMD [""mattermost""]

# Expose port 8000 of the container
EXPOSE 8000

# Declare volumes for mount point directories
VOLUME [""/mattermost/data"", ""/mattermost/logs"", ""/mattermost/config"", ""/mattermost/plugins"", ""/mattermost/client/plugins""]
","FROM alpine:3.10

# Some ENV variables
ENV PATH=""/mattermost/bin:${PATH}""
ENV MM_VERSION=5.14.2

# Build argument to set Mattermost edition
ARG edition=enterprise
ARG PUID=2000
ARG PGID=2000
ARG MM_BINARY=


# Install some needed packages
RUN apk add --no-cache \
ca-certificates \
curl \
jq \
libc6-compat \
libffi-dev \
linux-headers \
mailcap \
netcat-openbsd \
xmlsec-dev \
tzdata \
&& rm -rf /tmp/*

# Get Mattermost
RUN mkdir -p /mattermost/data /mattermost/plugins /mattermost/client/plugins \
    && if [ ! -z ""$MM_BINARY"" ]; then curl $MM_BINARY | tar -xvz ; \
      elif [ ""$edition"" = ""team"" ] ; then curl https://releases.mattermost.com/$MM_VERSION/mattermost-team-$MM_VERSION-linux-amd64.tar.gz | tar -xvz ; \
      else curl https://releases.mattermost.com/$MM_VERSION/mattermost-$MM_VERSION-linux-amd64.tar.gz | tar -xvz ; fi \
    && cp /mattermost/config/config.json /config.json.save \
    && rm -rf /mattermost/config/config.json \
    && addgroup -g ${PGID} mattermost \
    && adduser -D -u ${PUID} -G mattermost -h /mattermost -D mattermost \
    && chown -R mattermost:mattermost /mattermost /config.json.save /mattermost/plugins /mattermost/client/plugins

USER mattermost

#Healthcheck to make sure container is ready
HEALTHCHECK CMD curl --fail http://localhost:8000 || exit 1

# Configure entrypoint and command
COPY entrypoint.sh /
ENTRYPOINT [""/entrypoint.sh""]
WORKDIR /mattermost
CMD [""mattermost""]

# Expose port 8000 of the container
EXPOSE 8000

# Declare volumes for mount point directories
VOLUME [""/mattermost/data"", ""/mattermost/logs"", ""/mattermost/config"", ""/mattermost/plugins"", ""/mattermost/client/plugins""]
"
2163,057611e28855c712d375384cdad5178d7c29a2c2,adding influxd binary for backing that up too,"adding influxd binary for backing that up too
","FROM factual/docker-cdh5-base

# for mongo 3 tools
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
RUN echo ""deb http://repo.mongodb.org/apt/ubuntu ""$(lsb_release -sc)""/mongodb-org/3.2 multiverse"" | tee /etc/apt/sources.list.d/mongodb-org-3.2.list

#postgres
ENV PG_VERSION=9.5
RUN echo ""deb http://apt.postgresql.org/pub/repos/apt/ ""$(lsb_release -sc)""-pgdg main"" >> /etc/apt/sources.list.d/pgdg.list
RUN curl -s https://www.postgresql.org/media/keys/ACCC4CF8.asc |  apt-key add -


RUN apt-get update && apt-get install -y sudo git-core postgresql-client-$PG_VERSION mysql-client mongodb-org-shell mongodb-org-tools redis-tools

RUN apt-get clean
RUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ADD scripts /root/scripts
ADD bootstrap.sh /etc/my_init.d/099_bootstrap
",
415,e1763eed522223449939fb7c4cb74bc9dec80d13,Bumped source to 20200605-95499cd,"Bumped source to 20200605-95499cd
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200605-b4b2bca
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200605-95499cd
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
279,c309cd7a96a5efdb9a9f860137b844b0983e52f2,Bumped source to 20210924-20b87d2,"Bumped source to 20210924-20b87d2
","FROM docker.pkg.github.com/dock0/arch/arch:20210924-72e38fa
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20210924-20b87d2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
13,55c6beff96c6b46afb7cffbb1649d727118eac07,Update base image,"Update base image
","FROM gameontext/docker-liberty-custom:master-9

ENV SERVERDIRNAME room

COPY ./startup.sh /opt/startup.sh
ADD ./servers/gameon-room /opt/ol/wlp/usr/servers/defaultServer/

CMD [""/opt/startup.sh""]

HEALTHCHECK \
  --timeout=10s \
  --start-period=40s \
  CMD wget -q -O /dev/null http://localhost:9080/
","FROM gameontext/docker-liberty-custom:master-14

ENV SERVERDIRNAME room

COPY ./startup.sh /opt/startup.sh
ADD ./servers/gameon-room /opt/ol/wlp/usr/servers/defaultServer/

CMD [""/opt/startup.sh""]

HEALTHCHECK \
  --timeout=10s \
  --start-period=40s \
  CMD wget -q -O /dev/null http://localhost:9080/
"
24,e865c2c7207d6df82e3cc3c28c79672e5b8af6ce,FIXED static file links,"FIXED static file links
","FROM ubuntu:14.10

MAINTAINER Ibrahim Yılmaz (a.k.a dr.linux) <ibrahim@drlinux.org>

# Update Base System

RUN apt-get update
RUN apt-get -y upgrade

# Set Environment Variables

ENV HOME /root
# Set Language Environment

RUN apt-get install -y language-pack-en
ENV LANGUAGE en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8
RUN locale-gen en_US.UTF-8
RUN dpkg-reconfigure locales
ENV DEBIAN_FRONTEND noninteractive

# Install Basic Packages

RUN apt-get install -y build-essential software-properties-common

RUN apt-get install -y wget curl git man unzip screen


# Install Erlang
WORKDIR /tmp

RUN wget http://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb

RUN dpkg -i erlang-solutions_1.0_all.deb 

RUN apt-get update 

RUN apt-get install -y erlang

RUN apt-get clean

RUN rm -rf /tmp/*

RUN mkdir /source
 

# Install Chicago Boss

RUN git clone https://github.com/ChicagoBoss/ChicagoBoss.git /source/framework/

WORKDIR /source/framework

RUN make

RUN make app PROJECT=chericart

WORKDIR /source/chericart/src/controller

RUN wget https://www.dropbox.com/s/f54wzshkns5cllt/chericart_world_controller.erl?dl=1 -O chericart_world_controller.erl 

WORKDIR /source/chericart/priv/static

RUN wget https://www.dropbox.com/s/f9phqdh57jtmck0/style.css?dl=1 -O style.css

RUN wget https://www.dropbox.com/s/159gkyobxzwukf6/logo.png?dl=1 -O logo.png

WORKDIR /source/chericart/priv/

RUN rm chericart.routes

RUN wget https://www.dropbox.com/s/e3dgozs1dx3fmo4/chericart.routes?dl=1 -O chericart.routes

RUN mkdir -p /source/chericart/src/view/world 

WORKDIR /source/chericart/src/view/world

RUN wget https://www.dropbox.com/s/x6jdhd82et7rs34/hello.html?dl=1 -O hello.html

WORKDIR /source/chericart/

RUN make

RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

EXPOSE 8001

VOLUME [""/source/chericart"",""~/development/chericart""]

CMD [""/source/chericart/init-dev.sh""]


","FROM ubuntu:14.10

MAINTAINER Ibrahim Yılmaz (a.k.a dr.linux) <ibrahim@drlinux.org>

# Update Base System

RUN apt-get update
RUN apt-get -y upgrade

# Set Environment Variables

ENV HOME /root
# Set Language Environment

RUN apt-get install -y language-pack-en
ENV LANGUAGE en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8
RUN locale-gen en_US.UTF-8
RUN dpkg-reconfigure locales
ENV DEBIAN_FRONTEND noninteractive

# Install Basic Packages

RUN apt-get install -y build-essential software-properties-common

RUN apt-get install -y wget curl git man unzip screen


# Install Erlang
WORKDIR /tmp

RUN wget http://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb

RUN dpkg -i erlang-solutions_1.0_all.deb 

RUN apt-get update 

RUN apt-get install -y erlang

RUN apt-get clean

RUN rm -rf /tmp/*

RUN mkdir /source
 

# Install Chicago Boss

RUN git clone https://github.com/ChicagoBoss/ChicagoBoss.git /source/framework/

WORKDIR /source/framework

RUN make

RUN make app PROJECT=chericart

WORKDIR /source/chericart/priv/static

RUN wget https://gist.githubusercontent.com/drlinux/eef860ddc8f6065d31a4/raw/3ea14d46380b5a5629da2940502e494be0270c55/style.css -O style.css

RUN wget https://www.dropbox.com/s/159gkyobxzwukf6/logo.png?dl=1 -O logo.png

WORKDIR /source/chericart/priv

RUN rm *.routes

RUN touch chericart.routes

RUN echo '{""/"", [{controller, ""world""}, {action, ""hello""}]}.' >> chericart.routes

RUN cat chericart.routes

RUN mkdir -p /source/chericart/src/view/world 

WORKDIR /source/chericart/src/view/world

RUN wget https://gist.githubusercontent.com/drlinux/9be5ec9069a003c297b0/raw/e9ec1faa28221e8a1eb8a03a9754e5700cecdd45/hello.html -O hello.html

WORKDIR /source/chericart/src/controller

RUN wget https://gist.githubusercontent.com/drlinux/d296059b6f65dd04bc4f/raw/e66cf6a718428c1569af368f660bfe0dada8ab49/chericart_world_controller.erl -O chericart_world_controller.erl

WORKDIR /source/chericart/

RUN make

RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

EXPOSE 8001

VOLUME [""/source/chericart"",""~/development/chericart""]

CMD [""/source/chericart/init-dev.sh""]


"
2153,5961387c86109a381e4d6402f6a410313930c78e,Bumped source to 20201219-2f46b55,"Bumped source to 20201219-2f46b55
","FROM docker.pkg.github.com/dock0/arch/arch:20201219-ca7e1b3
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
125,e3ac2acb7ab165ddb802effafdd058eabb5c7cbb,clients/android: update gomobile to fix docker build,"clients/android: update gomobile to fix docker build

Due to a change in the Android NDK (starting from r16), building the
docker container fails with an error during the installation of
gomobile:
    fatal error: 'stdlib.h' file not found

This issue was addressed in more recent versions of gomobile, which
are compatible with the new NDK.
See https://github.com/golang/go/issues/21802

This CL simply updates gomobile to the most recent commit.

Change-Id: I87c468c34de441bc6acd40b717d1d950014e5a99
","# Copyright 2017 The Camlistore Authors.

FROM openjdk:8-jdk

MAINTAINER camlistore <camlistore@googlegroups.com>

RUN echo ""Adding gopher user and group"" \
&& groupadd --system --gid 1000 gopher \
&& useradd --system --gid gopher --uid 1000 --shell /bin/bash --create-home gopher \
&& mkdir /home/gopher/.gradle \
&& chown --recursive gopher:gopher /home/gopher

# To enable running android tools such as aapt
RUN apt-get update && apt-get -y upgrade
RUN apt-get install -y lib32z1 lib32stdc++6
# For Go:
RUN apt-get -y --no-install-recommends install curl gcc
RUN apt-get -y --no-install-recommends install ca-certificates libc6-dev git

USER gopher
VOLUME ""/home/gopher/.gradle""
ENV GOPHER /home/gopher

# Get android sdk, ndk, and rest of the stuff needed to build the android app.
WORKDIR $GOPHER
RUN mkdir android-sdk
ENV ANDROID_HOME $GOPHER/android-sdk
WORKDIR $ANDROID_HOME
RUN curl -O https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
RUN echo '444e22ce8ca0f67353bda4b85175ed3731cae3ffa695ca18119cbacef1c1bea0  sdk-tools-linux-3859397.zip' | sha256sum -c
RUN unzip sdk-tools-linux-3859397.zip
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager --update
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager 'platforms;android-17'
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager 'build-tools;26.0.0'
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager 'extras;android;m2repository'
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager 'ndk-bundle'

# Get Go stable release
WORKDIR $GOPHER
RUN curl -O https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz
RUN echo '1862f4c3d3907e59b04a757cfda0ea7aa9ef39274af99a784f5be843c80c6772  go1.8.3.linux-amd64.tar.gz' | sha256sum -c
RUN tar -xzf go1.8.3.linux-amd64.tar.gz
ENV GOPATH $GOPHER
ENV GOROOT $GOPHER/go
ENV PATH $PATH:$GOROOT/bin:$GOPHER/bin

# Get gomobile
RUN go get -u golang.org/x/mobile/cmd/gomobile
WORKDIR $GOPATH/src/golang.org/x/mobile/cmd/gomobile
RUN git reset --hard 44a54e9b78442c0a8233ee2d552c61da88e053c3
RUN go install

# init gomobile
RUN gomobile init -ndk $ANDROID_HOME/ndk-bundle

CMD [""/bin/bash""]
","# Copyright 2017 The Camlistore Authors.

FROM openjdk:8-jdk

MAINTAINER camlistore <camlistore@googlegroups.com>

RUN echo ""Adding gopher user and group"" \
&& groupadd --system --gid 1000 gopher \
&& useradd --system --gid gopher --uid 1000 --shell /bin/bash --create-home gopher \
&& mkdir /home/gopher/.gradle \
&& chown --recursive gopher:gopher /home/gopher

# To enable running android tools such as aapt
RUN apt-get update && apt-get -y upgrade
RUN apt-get install -y lib32z1 lib32stdc++6
# For Go:
RUN apt-get -y --no-install-recommends install curl gcc
RUN apt-get -y --no-install-recommends install ca-certificates libc6-dev git

USER gopher
VOLUME ""/home/gopher/.gradle""
ENV GOPHER /home/gopher

# Get android sdk, ndk, and rest of the stuff needed to build the android app.
WORKDIR $GOPHER
RUN mkdir android-sdk
ENV ANDROID_HOME $GOPHER/android-sdk
WORKDIR $ANDROID_HOME
RUN curl -O https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
RUN echo '444e22ce8ca0f67353bda4b85175ed3731cae3ffa695ca18119cbacef1c1bea0  sdk-tools-linux-3859397.zip' | sha256sum -c
RUN unzip sdk-tools-linux-3859397.zip
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager --update
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager 'platforms;android-17'
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager 'build-tools;26.0.0'
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager 'extras;android;m2repository'
RUN echo y | $ANDROID_HOME/tools/bin/sdkmanager 'ndk-bundle'

# Get Go stable release
WORKDIR $GOPHER
RUN curl -O https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz
RUN echo '1862f4c3d3907e59b04a757cfda0ea7aa9ef39274af99a784f5be843c80c6772  go1.8.3.linux-amd64.tar.gz' | sha256sum -c
RUN tar -xzf go1.8.3.linux-amd64.tar.gz
ENV GOPATH $GOPHER
ENV GOROOT $GOPHER/go
ENV PATH $PATH:$GOROOT/bin:$GOPHER/bin

# Get gomobile
RUN go get -u golang.org/x/mobile/cmd/gomobile
WORKDIR $GOPATH/src/golang.org/x/mobile/cmd/gomobile
RUN git reset --hard c0beac360cc13173963df8872fe4b0f2542cb85b
RUN go install

# init gomobile
RUN gomobile init -ndk $ANDROID_HOME/ndk-bundle

CMD [""/bin/bash""]
"
306,93aa395da88c199cbe2de62146892a4c0c7f9d9a,Fixed remove opt.,"Fixed remove opt.
","# Based on Miniconda and optmized for CPU
# https://github.com/ContinuumIO/docker-images/blob/master/miniconda3/debian/Dockerfile
# https://conda.io/projects/conda/en/latest/commands.html#conda-vs-pip-vs-virtualenv-commands
# 
# docker build --rm=true --no-cache=true -t markpeng/deepml-cpu -f ./Dockerfile .
# docker run --rm -p 8888:8888 -p 6006:6006 --name deepml-cpu -it markpeng/deepml-cpu bash
# 

FROM guitarmind/miniconda:py-3.8.5

LABEL MAINTAINER=""Mark Peng""

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
# Disabling SSL verification
ENV SSL_NO_VERIFY=1
ENV PATH=/opt/conda/bin:$PATH

RUN APT_INSTALL=""apt-get install -y --no-install-recommends"" && \
    PIP_INSTALL=""pip --no-cache-dir install --upgrade --default-timeout=100"" && \
    GIT_CLONE=""git clone --depth 10"" && \

# ==================================================================
# System Packages & Tools
# ------------------------------------------------------------------

    apt-get update --fix-missing && \
    apt-get clean && \

# ==================================================================
# Essesntial Packages
# ------------------------------------------------------------------

    conda install -y \
        psutil \
        Cython \
        numpy \
        scipy \
        pandas \
        scikit-learn \
        matplotlib \
        seaborn \
        cmake==3.14.0 \
        && \

    # Jupyter Notebook
    conda install -c conda-forge -y \
        jupyter \
        jupyter_contrib_nbextensions \
        jupyter_nbextensions_configurator \
        parso==0.8.1 \
        && \
    jupyter contrib nbextension install --user && \
    jupyter nbextension enable code_prettify/code_prettify && \
    jupyter nbextension enable collapsible_headings/main && \
    jupyter nbextension enable toggle_all_line_numbers/main && \

# ==================================================================
# Tensorflow
# ------------------------------------------------------------------

    conda install -y \
        tensorflow==2.3.0 \
        && \

# ==================================================================
# PyTorch
# ------------------------------------------------------------------

    conda install -y \
        pytorch==1.7.1 \
        torchvision torchaudio cpuonly -c pytorch && \
    conda install -c conda-forge -y \
        pytorch-lightning \
        && \

    $PIP_INSTALL \
        torch_optimizer \
        && \

# ==================================================================
# OpenCV
# ------------------------------------------------------------------

    apt-get install -y build-essential && \
    $GIT_CLONE --branch 4.3.0 https://github.com/opencv/opencv ~/opencv && \
    mkdir -p ~/opencv/build && cd ~/opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D WITH_IPP=OFF \
          -D WITH_CUDA=OFF \
          -D WITH_OPENCL=OFF \
          -D BUILD_TESTS=OFF \
          -D BUILD_PERF_TESTS=OFF \
          -D PYTHON3_LIBRARY=/opt/conda/lib/libpython3.8.so \
          -D PYTHON3_INCLUDE_DIR=/opt/conda/include/python3.8 \
          -D PYTHON3_EXECUTABLE=/opt/conda/bin/python \
          -D PYTHON3_PACKAGES_PATH=/opt/conda/lib/python3.8/site-packages \
          .. && \
    make -j""$(nproc)"" install && \
    ln -s /usr/local/include/opencv4/opencv2 /usr/local/include/opencv2 && \
    apt-get remove -y build-essential && \

# ==================================================================
# Additional Packages
# ------------------------------------------------------------------

    conda install -c conda-forge -y \
        gensim \
        transformers \
        optuna \
        yellowbrick \
        plotly \
        shap \
        gym \
        && \

    $PIP_INSTALL \
        zhconv \
        iterative-stratification \
        && \

    # LightGBM, Xgboost
    conda install -c conda-forge -y lightgbm xgboost \
        && \

# ==================================================================
# Config & Cleanup
# ------------------------------------------------------------------
    ldconfig && \
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /tmp/* && \
    rm -rf /var/cache/apk/* && \
    rm -r /root/.cache

ENV TZ=Asia/Taipei
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

EXPOSE 8888 6006 8090
WORKDIR /workspace
","# Based on Miniconda and optmized for CPU
# https://github.com/ContinuumIO/docker-images/blob/master/miniconda3/debian/Dockerfile
# https://conda.io/projects/conda/en/latest/commands.html#conda-vs-pip-vs-virtualenv-commands
# 
# docker build --rm=true --no-cache=true -t markpeng/deepml-cpu -f ./Dockerfile .
# docker run --rm -p 8888:8888 -p 6006:6006 --name deepml-cpu -it markpeng/deepml-cpu bash
# 

FROM guitarmind/miniconda:py-3.8.5

LABEL MAINTAINER=""Mark Peng""

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
# Disabling SSL verification
ENV SSL_NO_VERIFY=1
ENV PATH=/opt/conda/bin:$PATH

RUN APT_INSTALL=""apt-get install -y --no-install-recommends"" && \
    PIP_INSTALL=""pip --no-cache-dir install --upgrade --default-timeout=100"" && \
    GIT_CLONE=""git clone --depth 10"" && \

# ==================================================================
# System Packages & Tools
# ------------------------------------------------------------------

    apt-get update --fix-missing && \
    apt-get clean && \

# ==================================================================
# Essesntial Packages
# ------------------------------------------------------------------

    conda install -y \
        psutil \
        Cython \
        numpy \
        scipy \
        pandas \
        scikit-learn \
        matplotlib \
        seaborn \
        cmake==3.14.0 \
        && \

    # Jupyter Notebook
    conda install -c conda-forge -y \
        jupyter \
        jupyter_contrib_nbextensions \
        jupyter_nbextensions_configurator \
        parso==0.8.1 \
        && \
    jupyter contrib nbextension install --user && \
    jupyter nbextension enable code_prettify/code_prettify && \
    jupyter nbextension enable collapsible_headings/main && \
    jupyter nbextension enable toggle_all_line_numbers/main && \

# ==================================================================
# Tensorflow
# ------------------------------------------------------------------

    conda install -y \
        tensorflow==2.3.0 \
        && \

# ==================================================================
# PyTorch
# ------------------------------------------------------------------

    conda install -y \
        pytorch==1.7.1 \
        torchvision torchaudio cpuonly -c pytorch && \
    conda install -c conda-forge -y \
        pytorch-lightning \
        && \

    $PIP_INSTALL \
        torch_optimizer \
        && \

# ==================================================================
# OpenCV
# ------------------------------------------------------------------

    apt-get install -y build-essential && \
    $GIT_CLONE --branch 4.3.0 https://github.com/opencv/opencv ~/opencv && \
    mkdir -p ~/opencv/build && cd ~/opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D WITH_IPP=OFF \
          -D WITH_CUDA=OFF \
          -D WITH_OPENCL=OFF \
          -D BUILD_TESTS=OFF \
          -D BUILD_PERF_TESTS=OFF \
          -D PYTHON3_LIBRARY=/opt/conda/lib/libpython3.8.so \
          -D PYTHON3_INCLUDE_DIR=/opt/conda/include/python3.8 \
          -D PYTHON3_EXECUTABLE=/opt/conda/bin/python \
          -D PYTHON3_PACKAGES_PATH=/opt/conda/lib/python3.8/site-packages \
          .. && \
    make -j""$(nproc)"" install && \
    ln -s /usr/local/include/opencv4/opencv2 /usr/local/include/opencv2 && \
    DEBIAN_FRONTEND=noninteractive apt-get remove -y build-essential && \

# ==================================================================
# Additional Packages
# ------------------------------------------------------------------

    conda install -c conda-forge -y \
        gensim \
        transformers \
        optuna \
        yellowbrick \
        plotly \
        shap \
        gym \
        && \

    $PIP_INSTALL \
        zhconv \
        iterative-stratification \
        && \

    # LightGBM, Xgboost
    conda install -c conda-forge -y lightgbm xgboost \
        && \

# ==================================================================
# Config & Cleanup
# ------------------------------------------------------------------
    ldconfig && \
    apt-get clean -y && \
    apt-get autoremove -y && \
    rm -rf /tmp/* && \
    rm -rf /var/cache/apk/* && \
    rm -r /root/.cache

ENV TZ=Asia/Taipei
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

EXPOSE 8888 6006 8090
WORKDIR /workspace
"
190,914e14fe0c8ba8f37b585851d77529b60259fe72,Updated Atlassian Bamboo master branch to latest version 5.15.2,"Updated Atlassian Bamboo master branch to latest version 5.15.2
","FROM openjdk:8

# Setup useful environment variables
ENV BAMBOO_HOME     /var/atlassian/bamboo
ENV BAMBOO_INSTALL  /opt/atlassian/bamboo
ENV BAMBOO_VERSION  5.15.0.1

# Install Atlassian Bamboo and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apt-get update --quiet \
    && apt-get install --quiet --yes --no-install-recommends xmlstarlet \
    && apt-get install --quiet --yes --no-install-recommends -t jessie-backports libtcnative-1 \
    && apt-get clean \
    && mkdir -p               ""${BAMBOO_HOME}/lib"" \
    && chmod -R 700           ""${BAMBOO_HOME}"" \
    && chown -R daemon:daemon ""${BAMBOO_HOME}"" \
    && mkdir -p               ""${BAMBOO_INSTALL}"" \
    && curl -Ls               ""https://www.atlassian.com/software/bamboo/downloads/binary/atlassian-bamboo-${BAMBOO_VERSION}.tar.gz"" | tar -zx --directory  ""${BAMBOO_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.40.tar.gz"" | tar -xz --directory ""${BAMBOO_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar"" \
    && chmod -R 700           ""${BAMBOO_INSTALL}"" \
    && chown -R daemon:daemon ""${BAMBOO_INSTALL}"" \
    && sed --in-place         's/^# umask 0027$/umask 0027/g' ""${BAMBOO_INSTALL}/bin/setenv.sh"" \
    && xmlstarlet             ed --inplace \
        --delete              ""Server/Service/Engine/Host/@xmlValidation"" \
        --delete              ""Server/Service/Engine/Host/@xmlNamespaceAware"" \
                              ""${BAMBOO_INSTALL}/conf/server.xml"" \
    && touch -d ""@0""          ""${BAMBOO_INSTALL}/conf/server.xml""


# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP and SSH ports.
EXPOSE 8085 54663

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/bamboo"",""/opt/atlassian/bamboo/logs""]

# Set the default working directory as the Bamboo home directory.
WORKDIR /var/atlassian/bamboo

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian Bamboo as a foreground process by default.
CMD [""/opt/atlassian/bamboo/bin/start-bamboo.sh"", ""-fg""]
","FROM openjdk:8

# Setup useful environment variables
ENV BAMBOO_HOME     /var/atlassian/bamboo
ENV BAMBOO_INSTALL  /opt/atlassian/bamboo
ENV BAMBOO_VERSION  5.15.2

# Install Atlassian Bamboo and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apt-get update --quiet \
    && apt-get install --quiet --yes --no-install-recommends xmlstarlet \
    && apt-get install --quiet --yes --no-install-recommends -t jessie-backports libtcnative-1 \
    && apt-get clean \
    && mkdir -p               ""${BAMBOO_HOME}/lib"" \
    && chmod -R 700           ""${BAMBOO_HOME}"" \
    && chown -R daemon:daemon ""${BAMBOO_HOME}"" \
    && mkdir -p               ""${BAMBOO_INSTALL}"" \
    && curl -Ls               ""https://www.atlassian.com/software/bamboo/downloads/binary/atlassian-bamboo-${BAMBOO_VERSION}.tar.gz"" | tar -zx --directory  ""${BAMBOO_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.40.tar.gz"" | tar -xz --directory ""${BAMBOO_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar"" \
    && chmod -R 700           ""${BAMBOO_INSTALL}"" \
    && chown -R daemon:daemon ""${BAMBOO_INSTALL}"" \
    && sed --in-place         's/^# umask 0027$/umask 0027/g' ""${BAMBOO_INSTALL}/bin/setenv.sh"" \
    && xmlstarlet             ed --inplace \
        --delete              ""Server/Service/Engine/Host/@xmlValidation"" \
        --delete              ""Server/Service/Engine/Host/@xmlNamespaceAware"" \
                              ""${BAMBOO_INSTALL}/conf/server.xml"" \
    && touch -d ""@0""          ""${BAMBOO_INSTALL}/conf/server.xml""


# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP and SSH ports.
EXPOSE 8085 54663

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/bamboo"",""/opt/atlassian/bamboo/logs""]

# Set the default working directory as the Bamboo home directory.
WORKDIR /var/atlassian/bamboo

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian Bamboo as a foreground process by default.
CMD [""/opt/atlassian/bamboo/bin/start-bamboo.sh"", ""-fg""]
"
390,f4da0387ab6b09967617076de16799765e43c386,Upgrade to node v10 (#7417),"Upgrade to node v10 (#7417)

Need to add python and build-essential packages or the `yarn install --pure-lockfile`
fails while trying to invoke `detect-libc prebuild-install || node-gyp rebuild`.","FROM node:8-slim

# Install node_modules into a different directory to avoid npm/npm#9863.
RUN mkdir -p /srv/node
COPY package.json /srv/node/
COPY yarn.lock /srv/node/
WORKDIR /srv/node

# This file has been downloaded from: https://dl.yarnpkg.com/debian/pubkey.gpg
COPY docker/etc/pki/yarnpkg.gpg.key /etc/pki/yarnpkg.gpg.key

RUN buildDeps=' \
    git \
    yarn \
    ' && \
    # `apt-transport-https` is required to use https deb repositories
    apt-get update -y && \
    apt-get install -y --no-install-recommends apt-transport-https && \
    # configure Yarn repository, see: https://yarnpkg.com/en/docs/install#linux-tab
    apt-key add /etc/pki/yarnpkg.gpg.key && \
    echo ""deb https://dl.yarnpkg.com/debian/ stable main"" > /etc/apt/sources.list.d/yarn.list && \
    # the base image installs yarn, let's be sure we use ours
    rm -f /usr/local/bin/yarn /usr/local/bin/yarnpkg && \
    # install deps
    apt-get update -y && \
    apt-get install -y --no-install-recommends $buildDeps && \
    yarn install --pure-lockfile && \
    # cleanup
    # apt-get purge -y $buildDeps && \
    rm -rf /var/lib/apt/lists/*

COPY . /srv/code/
WORKDIR /srv/code

# The V2 Pipeline expects version.json to be located in /app/
# As a temporary measure symlink to the version.json generated by Circle-CI
RUN mkdir /app && ln -s /srv/code/version.json /app/version.json

# Replace the local node_modules with the ones we installed above.
RUN rm -rf node_modules
RUN ln -s /srv/node/node_modules

ENV SERVER_HOST 0.0.0.0
ENV SERVER_PORT 4000

CMD yarn start
","FROM node:10-slim

# Install node_modules into a different directory to avoid npm/npm#9863.
RUN mkdir -p /srv/node
COPY package.json /srv/node/
COPY yarn.lock /srv/node/
WORKDIR /srv/node

# This file has been downloaded from: https://dl.yarnpkg.com/debian/pubkey.gpg
COPY docker/etc/pki/yarnpkg.gpg.key /etc/pki/yarnpkg.gpg.key

RUN buildDeps=' \
    git \
    yarn \
    python \
    build-essential \
    ' && \
    # `apt-transport-https` is required to use https deb repositories
    apt-get update -y && \
    apt-get install -y --no-install-recommends apt-transport-https && \
    # configure Yarn repository, see: https://yarnpkg.com/en/docs/install#linux-tab
    apt-key add /etc/pki/yarnpkg.gpg.key && \
    echo ""deb https://dl.yarnpkg.com/debian/ stable main"" > /etc/apt/sources.list.d/yarn.list && \
    # the base image installs yarn, let's be sure we use ours
    rm -f /usr/local/bin/yarn /usr/local/bin/yarnpkg && \
    # install deps
    apt-get update -y && \
    apt-get install -y --no-install-recommends $buildDeps && \
    yarn install --pure-lockfile && \
    # cleanup
    # apt-get purge -y $buildDeps && \
    rm -rf /var/lib/apt/lists/*

COPY . /srv/code/
WORKDIR /srv/code

# The V2 Pipeline expects version.json to be located in /app/
# As a temporary measure symlink to the version.json generated by Circle-CI
RUN mkdir /app && ln -s /srv/code/version.json /app/version.json

# Replace the local node_modules with the ones we installed above.
RUN rm -rf node_modules
RUN ln -s /srv/node/node_modules

ENV SERVER_HOST 0.0.0.0
ENV SERVER_PORT 4000

CMD yarn start
"
2141,9b9661d88291da9cdff8ac838dada1eb8f2dd074,Writing and simplifying installation directions,"Writing and simplifying installation directions
","#Creates a ConnextCMS/KeystoneJS installation in Ubuntu container with user/password connextcms/password
#This version of the Dockerfile leverages a pre-built git hub repository that is faster and lighter
#weight than building KeystoneJS from source.

#INSTRUCTIONS
#Build docker image as 'connextcms':
#docker build -t connextcms .

#Run the MongoDB image
#Map port 27017 on the image to 3500 on the host.
#docker run --name mongo -d -p 3500:27017 --rm -v <your path>/db:/data/db mongo

#Execute my keystonejs docker image
#docker container run --name connextcms --link mongo:mongo -v <your path>/theme:/home/connextcms/theme --rm -it connextcms bash


#IMAGE BUILD COMMANDS
FROM ubuntu:16.10
MAINTAINER Chris Troutner <chris.troutner@gmail.com>

#Update the OS and install any OS packages needed.
RUN apt-get update
RUN apt-get install -y sudo

#Create the user 'connextcms' and add them to the sudo group.
RUN useradd -ms /bin/bash connextcms
RUN adduser connextcms sudo

#Set password to 'password' change value below if you want a different password
RUN echo connextcms:password | chpasswd

#Set the working directory to be the connextcms home directory
WORKDIR /home/connextcms

#Install KeystoneJS Dependencies
RUN apt-get install -y git
RUN apt-get install -y curl
RUN apt-get install -y nano
#RUN apt-get install -y make
#RUN apt-get install -y g++
#RUN apt-get install -y python

#Install Node and NPM
RUN curl -sL https://deb.nodesource.com/setup_4.x -o nodesource_setup.sh
RUN bash nodesource_setup.sh
RUN apt-get install -y nodejs
RUN apt-get install -y build-essential
RUN npm install -g npm

#Create a volume for persisting MongoDB data.
VOLUME /data/db

#Log into the shell as the newly created user
USER connextcms

#Create a directory for customizing the new site.
VOLUME /home/connextcms/theme

RUN git clone https://github.com/christroutner/keystone4-compiled
RUN git clone https://github.com/skagitpublishing/ConnextCMS
#RUN git clone https://github.com/skagitpublishing/plugin-template-connextcms
RUN mv keystone4-compiled keystone4
RUN mv ConnextCMS connextCMS

#RUN chmod 775 ~/theme/finalsetup
COPY finalsetup ~
RUN finalsetup

#RUN cd connextCMS
#RUN connextCMS/copy-keystone
#RUN connextCMS/merge-connextcms-keystone
#RUN cd ../myCMS
#RUN npm install
#RUN cp ../theme/keystone.js .

",
