id,Commit Hash,Subject,Message,Old Contents,New Contents
262,fd2247cbcee7415a6703cc9221d53f5dbac9accc,Bumped source to 20211130-4c00e06,"Bumped source to 20211130-4c00e06
","FROM docker.pkg.github.com/dock0/arch/arch:20211130-cbf05db
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20211130-4c00e06
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2103,d7d82169d11383f225a46cfa76cacb9a993c4135,Bumped source to 20210629-6b7f787,"Bumped source to 20210629-6b7f787
","FROM docker.pkg.github.com/dock0/arch/arch:20210629-e972d45
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
374,90bde9493ac67b6683c885859581cf52f73b489e,Bumped source to 20201103-c055246,"Bumped source to 20201103-c055246
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201103-c7ca449
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201103-c055246
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
2310,439ce8e0e4d322ae7d9e702ce1ac38becaacdeb7,Update Dockerfile,"Update Dockerfile

keeping bash.","FROM centos:7.3.1611

MAINTAINER Robert de Bock <robert@meinit.nl>

LABEL Description=""Base CentOS OpenSSH server image"" CentOS=""7.3.1611"" OpenSSH=""6.6.1p1-33.el7_3"" Tini=""0.14.0""

ENV TINI_VERSION v0.14.0

ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini

EXPOSE 22

RUN yum -y erase bash vim && \
    yum -y update && \
    yum -y install openssh openssh-server openssh-clients && \
    yum -y clean all

ADD start.sh /start.sh

RUN chmod +x /start.sh

RUN chmod +x /tini

ENTRYPOINT [""/tini"", ""-g"", ""--""]

CMD /start.sh
",
2170,3573db30cf61da7cbc7eee0a5234d286576f5665,add gnu tar for mesos docker fetcher,"add gnu tar for mesos docker fetcher
","FROM quay.io/vektorcloud/base:3.4

RUN apk --no-cache add docker \
  libstdc++ \
  subversion \
  curl \
  fts \
  openjdk8 \
  openssl  \
  binutils \
  coreutils \
  bash && \
  apk --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/community add dumb-init

# Mesos Default Options
ENV \ 
  VERSION=""1.2.0"" \
  MESOS_ZK=""zk://localhost:2181/mesos"" \
  MESOS_MASTER=""zk://localhost:2181/mesos"" \
  MESOS_QUORUM=""1"" \
  MESOS_WORK_DIR=""/mesos"" \
  MESOS_LOG_DIR=""/mesos/log"" \
  MESOS_CONTAINERIZERS=""mesos,docker"" \ 
  MESOS_EXECUTOR_REGISTRATION_TIMEOUT=""5mins"" \
  MESOS_LAUNCHER=""linux"" \
  MESOS_LOGGING_LEVEL=""WARNING"" \
  MESOS_SYSTEMD_ENABLE_SUPPORT=""false"" \
  MESOS_ISOLATION=""cgroups/cpu,cgroups/mem,cgroups/pids,namespaces/pid,filesystem/linux,docker/runtime""

COPY mesos/mesos-$VERSION/build /

COPY entrypoint.sh /

ENTRYPOINT [""/entrypoint.sh""]
",
2176,2feef0bf6c0463a85fffb6443968da5cadc59093,Bumped source to 20200824-40508fc,"Bumped source to 20200824-40508fc
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200824-cae6bbb
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
44,b491f955c938e4b688236e7a53153f9514594e90,update zoo,"update zoo

Signed-off-by: Mark McCahill <e3696564e7a7433e50b70b6d9fcacd26c7505e6a@duke.edu>
","# mccahill/r-studio
#
# VERSION 1.4

FROM ubuntu:18.04
MAINTAINER Mark McCahill ""mark.mccahill@duke.edu""

RUN apt-get  update ; \
    apt-get  install gnupg2 -y

# get R from a CRAN archive (we want the 3.5 version of R)
RUN echo  ""deb http://cran.rstudio.com/bin/linux/ubuntu bionic-cran35/""  >>  /etc/apt/sources.list
RUN DEBIAN_FRONTEND=noninteractive apt-key adv  --keyserver keyserver.ubuntu.com --recv-keys  E084DAB9

RUN apt-get  update ; \
    apt-get  dist-upgrade -y 

# we want OpenBLAS for faster linear algebra as described here: http://brettklamer.com/diversions/statistical/faster-blas-in-r/
RUN apt-get install  -y \
   apt-utils \
   libopenblas-base

RUN apt-get update ; \
   DEBIAN_FRONTEND=noninteractive apt-get  install -y  \
   r-base \
   r-base-dev \
   vim \
   less \
   net-tools \
   inetutils-ping \
   curl \
   git \
   telnet \
   nmap \
   socat \
   software-properties-common \
   wget \
   sudo 

RUN apt-get update ; \
   DEBIAN_FRONTEND=noninteractive apt-get  install -y \
   libcurl4-gnutls-dev \
   libgit2-dev \
   libxml2-dev \
   libssl-dev \
   libudunits2-dev \
   libpoppler-cpp-dev


# we need TeX for the rmarkdown package in RStudio, and pandoc is also useful 
RUN apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
   texlive \ 
   texlive-base \ 
   texlive-latex-extra \ 
   texlive-pstricks \ 
   pandoc

# R-Studio
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
   gdebi-core \
   libapparmor1
   
# RUN DEBIAN_FRONTEND=noninteractive wget https://download2.rstudio.org/rstudio-server-1.1.383-amd64.deb
RUN DEBIAN_FRONTEND=noninteractive wget https://s3.amazonaws.com/rstudio-ide-build/server/trusty/amd64/rstudio-server-1.2.907-amd64.deb
RUN DEBIAN_FRONTEND=noninteractive gdebi --n rstudio-server-1.2.907-amd64.deb
RUN rm rstudio-server-1.2.907-amd64.deb

# update the R packages we will need for knitr
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/xfun_0.5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/knitr_1.22.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/yaml_2.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/Rcpp_1.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/htmltools_0.3.6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/caTools_1.17.1.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/bitops_1.0-6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/digest_0.6.18.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/glue_1.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/stringr_1.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/markdown_0.9.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/highr_0.8.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/formatR_1.6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/evaluate_0.13.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mime_0.6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/stringi_1.4.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/magrittr_1.5.tar.gz


RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   bitops_1.0-6.tar.gz \
   caTools_1.17.1.2.tar.gz \
   digest_0.6.18.tar.gz \
   Rcpp_1.0.1.tar.gz \
   htmltools_0.3.6.tar.gz \
   yaml_2.2.0.tar.gz \
   stringi_1.4.3.tar.gz \
   magrittr_1.5.tar.gz \
   mime_0.6.tar.gz \
   glue_1.3.1.tar.gz \
   stringr_1.4.0.tar.gz \
   highr_0.8.tar.gz \
   formatR_1.6.tar.gz \
   evaluate_0.13.tar.gz \
   markdown_0.9.tar.gz \
   xfun_0.5.tar.gz \
   knitr_1.22.tar.gz
 

RUN rm \
   evaluate_0.13.tar.gz \
   formatR_1.6.tar.gz \
   highr_0.8.tar.gz \
   markdown_0.9.tar.gz \
   stringi_1.4.3.tar.gz \
   magrittr_1.5.tar.gz \
   glue_1.3.1.tar.gz \
   stringr_1.4.0.tar.gz \
   xfun_0.5.tar.gz \
   knitr_1.22.tar.gz \
   yaml_2.2.0.tar.gz \
   Rcpp_1.0.1.tar.gz \
   htmltools_0.3.6.tar.gz \
   caTools_1.17.1.2.tar.gz \
   bitops_1.0-6.tar.gz \
   digest_0.6.18.tar.gz \
   mime_0.6.tar.gz

# dependency for R XML library
RUN apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y \
   libxml2 \ 
   libxml2-dev \
   libssl-dev


# R packages we need for devtools - and we need devtools to be able to update the rmarkdown package
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/processx_3.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ps_1.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/callr_3.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/crayon_1.3.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/assertthat_0.2.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/cli_1.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/desc_1.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/prettyunits_1.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/backports_1.1.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rprojroot_1.3-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/withr_2.1.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pkgbuild_1.0.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rlang_0.3.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rstudioapi_0.10.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pkgload_1.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rcmdcheck_1.3.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/remotes_2.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/xopen_1.0.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/clipr_0.5.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/clisymbols_1.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/sessioninfo_1.1.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/usethis_1.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/sys_3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/askpass_1.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/openssl_1.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/brew_1.0-6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/Archive/roxygen2/roxygen2_5.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/fs_1.2.7.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/gh_1.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rversions_1.0.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/git2r_0.25.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/devtools_2.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/R6_2.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/httr_1.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/RCurl_1.95-4.12.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/BH_1.69.0-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/xml2_1.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/curl_3.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/jsonlite_1.6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ini_0.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/downloader_0.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/memoise_1.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/plyr_1.8.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/XML_3.98-1.19.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/whisker_0.3-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/bitops_1.0-6.tar.gz

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   ps_1.3.0.tar.gz \
   R6_2.4.0.tar.gz \
   processx_3.3.0.tar.gz \
   callr_3.2.0.tar.gz \
   crayon_1.3.4.tar.gz \
   assertthat_0.2.1.tar.gz \
   cli_1.1.0.tar.gz \
   backports_1.1.3.tar.gz \
   rprojroot_1.3-2.tar.gz \
   desc_1.2.0.tar.gz \
   prettyunits_1.0.2.tar.gz \
   withr_2.1.2.tar.gz \
   pkgbuild_1.0.3.tar.gz \
   rlang_0.3.3.tar.gz \
   rstudioapi_0.10.tar.gz \
   pkgload_1.0.2.tar.gz \
   xopen_1.0.0.tar.gz \
   sessioninfo_1.1.1.tar.gz \
   rcmdcheck_1.3.2.tar.gz \
   remotes_2.0.2.tar.gz \   
   whisker_0.3-2.tar.gz \
   git2r_0.25.2.tar.gz \
   fs_1.2.7.tar.gz \
   ini_0.3.1.tar.gz \
   jsonlite_1.6.tar.gz \
   sys_3.1.tar.gz \
   askpass_1.1.tar.gz \
   openssl_1.3.tar.gz \
   curl_3.3.tar.gz \
   httr_1.4.0.tar.gz \
   gh_1.0.1.tar.gz \
   clipr_0.5.0.tar.gz \
   clisymbols_1.2.0.tar.gz \   
   usethis_1.4.0.tar.gz \
   memoise_1.1.0.tar.gz \
   bitops_1.0-6.tar.gz \
   RCurl_1.95-4.12.tar.gz \
   plyr_1.8.4.tar.gz \
   devtools_2.0.1.tar.gz \
   brew_1.0-6.tar.gz \
   roxygen2_5.0.1.tar.gz \
   XML_3.98-1.19.tar.gz \
   BH_1.69.0-1.tar.gz \
   xml2_1.2.0.tar.gz \
   rversions_1.0.3.tar.gz \
   downloader_0.4.tar.gz

RUN rm \
   ps_1.3.0.tar.gz \
   callr_3.2.0.tar.gz \
   R6_2.4.0.tar.gz \
   processx_3.3.0.tar.gz \
   crayon_1.3.4.tar.gz \
   assertthat_0.2.1.tar.gz \
   cli_1.1.0.tar.gz \
   desc_1.2.0.tar.gz \
   prettyunits_1.0.2.tar.gz \
   backports_1.1.3.tar.gz \
   rprojroot_1.3-2.tar.gz \
   withr_2.1.2.tar.gz \
   pkgbuild_1.0.3.tar.gz \
   rlang_0.3.3.tar.gz \
   rstudioapi_0.10.tar.gz \
   clipr_0.5.0.tar.gz \
   clisymbols_1.2.0.tar.gz \
   pkgload_1.0.2.tar.gz \
   sessioninfo_1.1.1.tar.gz \
   xopen_1.0.0.tar.gz \
   rcmdcheck_1.3.2.tar.gz \
   remotes_2.0.2.tar.gz \
   usethis_1.4.0.tar.gz \
   ini_0.3.1.tar.gz \
   jsonlite_1.6.tar.gz \
   memoise_1.1.0.tar.gz \
   whisker_0.3-2.tar.gz \
   bitops_1.0-6.tar.gz \
   RCurl_1.95-4.12.tar.gz \
   plyr_1.8.4.tar.gz \
   httr_1.4.0.tar.gz \
   sys_3.1.tar.gz \
   askpass_1.1.tar.gz \
   openssl_1.3.tar.gz \
   brew_1.0-6.tar.gz \
   roxygen2_5.0.1.tar.gz \
   BH_1.69.0-1.tar.gz \
   XML_3.98-1.19.tar.gz \
   xml2_1.2.0.tar.gz \
   curl_3.3.tar.gz \
   rversions_1.0.3.tar.gz \
   git2r_0.25.2.tar.gz \
   devtools_2.0.1.tar.gz \
   downloader_0.4.tar.gz

# the CRAN install from source fails because a server at MIT will not respond
# install from source
ADD ./conf /r-studio
#RUN R CMD BATCH /r-studio/install-nloptr.R
#RUN rm /install-nloptr.Rout

RUN DEBIAN_FRONTEND=noninteractive wget \
    https://archive.linux.duke.edu/cran/src/contrib/nloptr_1.2.1.tar.gz

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
    nloptr_1.2.1.tar.gz

RUN rm \
    nloptr_1.2.1.tar.gz


# libraries Eric Green wanted
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/lubridate_1.7.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/lazyeval_0.2.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/utf8_1.1.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/fansi_0.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pillar_1.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pkgconfig_2.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/tibble_2.1.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggplot2_3.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/RColorBrewer_1.1-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/dichromat_2.0-0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/colorspace_1.4-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/munsell_0.5.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/labeling_0.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/viridisLite_0.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/scales_1.0.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/stargazer_5.2.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/reshape2_1.4.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/gtable_0.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/proto_1.0.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/minqa_1.2.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/RcppEigen_0.3.3.5.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/lme4_1.1-21.tar.gz

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   lubridate_1.7.4.tar.gz  \
   gtable_0.3.0.tar.gz \
   RColorBrewer_1.1-2.tar.gz \
   dichromat_2.0-0.tar.gz \
   colorspace_1.4-1.tar.gz \
   munsell_0.5.0.tar.gz \
   labeling_0.3.tar.gz \
   viridisLite_0.3.0.tar.gz \
   scales_1.0.0.tar.gz \
   proto_1.0.0.tar.gz \
   reshape2_1.4.3.tar.gz \
   lazyeval_0.2.2.tar.gz \
   utf8_1.1.4.tar.gz \
   fansi_0.4.0.tar.gz \
   pillar_1.3.1.tar.gz \
   pkgconfig_2.0.2.tar.gz \
   tibble_2.1.1.tar.gz \
   ggplot2_3.1.0.tar.gz \
   stargazer_5.2.2.tar.gz \
   minqa_1.2.4.tar.gz \
   RcppEigen_0.3.3.5.0.tar.gz \
   lme4_1.1-21.tar.gz

RUN rm \
   lubridate_1.7.4.tar.gz  \
   gtable_0.3.0.tar.gz \
   RColorBrewer_1.1-2.tar.gz \
   dichromat_2.0-0.tar.gz \
   colorspace_1.4-1.tar.gz \
   munsell_0.5.0.tar.gz \
   labeling_0.3.tar.gz \
   viridisLite_0.3.0.tar.gz \
   scales_1.0.0.tar.gz \
   proto_1.0.0.tar.gz \
   reshape2_1.4.3.tar.gz \
   lazyeval_0.2.2.tar.gz \
   utf8_1.1.4.tar.gz \
   fansi_0.4.0.tar.gz \
   pillar_1.3.1.tar.gz \
   pkgconfig_2.0.2.tar.gz \
   tibble_2.1.1.tar.gz \
   ggplot2_3.1.0.tar.gz \
   stargazer_5.2.2.tar.gz \
   minqa_1.2.4.tar.gz \
   RcppEigen_0.3.3.5.0.tar.gz \
   lme4_1.1-21.tar.gz
  
# more libraries Mine Cetinakya-Rundel asked for
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/openintro_1.7.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/bindr_0.1.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/bindrcpp_0.2.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/plogr_0.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/purrr_0.3.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/tidyselect_0.2.5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/dplyr_0.8.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/DBI_1.0.0.tar.gz 



RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   openintro_1.7.1.tar.gz \
   DBI_1.0.0.tar.gz \
   plogr_0.2.0.tar.gz \
   bindr_0.1.1.tar.gz \
   bindrcpp_0.2.2.tar.gz \
   purrr_0.3.2.tar.gz \
   tidyselect_0.2.5.tar.gz \
   dplyr_0.8.0.1.tar.gz 

RUN rm \
   openintro_1.7.1.tar.gz \
   DBI_1.0.0.tar.gz \
   bindr_0.1.1.tar.gz \
   bindrcpp_0.2.2.tar.gz \
   plogr_0.2.0.tar.gz \
   purrr_0.3.2.tar.gz \
   tidyselect_0.2.5.tar.gz \
   dplyr_0.8.0.1.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/chron_2.3-53.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/data.table_1.12.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rematch_1.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/cellranger_1.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/tidyr_0.8.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/googlesheets_0.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/hms_0.4.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/readr_1.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/selectr_0.4-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rvest_0.3.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pbkrtest_0.4-7.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   chron_2.3-53.tar.gz \
   data.table_1.12.0.tar.gz \
   rematch_1.0.1.tar.gz \
   cellranger_1.1.0.tar.gz \
   tidyr_0.8.3.tar.gz \
   hms_0.4.2.tar.gz \
   readr_1.3.1.tar.gz \
   googlesheets_0.3.0.tar.gz \
   selectr_0.4-1.tar.gz \
   rvest_0.3.2.tar.gz \
   pbkrtest_0.4-7.tar.gz 

RUN rm \
   chron_2.3-53.tar.gz \
   data.table_1.12.0.tar.gz \
   rematch_1.0.1.tar.gz \
   cellranger_1.1.0.tar.gz \
   tidyr_0.8.3.tar.gz \
   googlesheets_0.3.0.tar.gz \
   hms_0.4.2.tar.gz \
   readr_1.3.1.tar.gz \
   selectr_0.4-1.tar.gz \
   rvest_0.3.2.tar.gz \
   pbkrtest_0.4-7.tar.gz 

# Shiny
#RUN wget https://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.5.3.838-amd64.deb
RUN wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.7.907-amd64.deb
RUN DEBIAN_FRONTEND=noninteractive gdebi -n shiny-server-1.5.7.907-amd64.deb
RUN rm shiny-server-1.5.7.907-amd64.deb
RUN R CMD BATCH /r-studio/install-Shiny.R
RUN rm /install-Shiny.Rout


RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/SparseM_1.77.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/MatrixModels_0.4-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/quantreg_5.38.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/sp_1.3-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/maptools_0.9-5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/haven_2.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ellipsis_0.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/forcats_0.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/readxl_1.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/zip_2.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/openxlsx_4.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rio_0.5.16.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/abind_1.4-5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/carData_3.0-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/car_3.0-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mosaicData_0.17.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/latticeExtra_0.6-28.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/gridExtra_2.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggdendro_0.1-20.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mnormt_1.5-5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/psych_1.8.12.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/generics_0.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/broom_0.5.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/reshape_0.8.8.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/progress_1.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/GGally_1.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggstance_0.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggformula_0.9.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mosaicCore_0.6.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggrepel_0.8.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/base64enc_0.1-3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/crosstalk_1.0.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/htmlwidgets_1.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/png_0.1-7.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/raster_2.8-19.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/viridis_0.5.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/leaflet_2.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mosaic_1.5.0.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   SparseM_1.77.tar.gz \
   MatrixModels_0.4-1.tar.gz \
   quantreg_5.38.tar.gz \
   sp_1.3-1.tar.gz \
   maptools_0.9-5.tar.gz \
   ellipsis_0.1.0.tar.gz \
   forcats_0.4.0.tar.gz \
   haven_2.1.0.tar.gz \
   progress_1.2.0.tar.gz \
   readxl_1.3.1.tar.gz \
   zip_2.0.1.tar.gz \
   openxlsx_4.1.0.tar.gz \
   rio_0.5.16.tar.gz \
   abind_1.4-5.tar.gz \
   carData_3.0-2.tar.gz \
   car_3.0-2.tar.gz \
   mosaicData_0.17.0.tar.gz \
   latticeExtra_0.6-28.tar.gz \
   gridExtra_2.3.tar.gz \
   ggdendro_0.1-20.tar.gz \
   mnormt_1.5-5.tar.gz \
   psych_1.8.12.tar.gz \
   generics_0.0.2.tar.gz \
   broom_0.5.1.tar.gz \
   reshape_0.8.8.tar.gz \
   GGally_1.4.0.tar.gz \
   mosaicCore_0.6.0.tar.gz \
   ggstance_0.3.1.tar.gz \
   ggformula_0.9.1.tar.gz \
   ggrepel_0.8.0.tar.gz \
   base64enc_0.1-3.tar.gz \
   crosstalk_1.0.0.tar.gz \
   htmlwidgets_1.3.tar.gz \
   png_0.1-7.tar.gz \
   raster_2.8-19.tar.gz \
   viridis_0.5.1.tar.gz \
   leaflet_2.0.2.tar.gz \
   mosaic_1.5.0.tar.gz 

RUN rm \
   SparseM_1.77.tar.gz \
   MatrixModels_0.4-1.tar.gz \
   quantreg_5.38.tar.gz \
   sp_1.3-1.tar.gz \
   maptools_0.9-5.tar.gz \
   ellipsis_0.1.0.tar.gz \
   forcats_0.4.0.tar.gz \
   haven_2.1.0.tar.gz \
   readxl_1.3.1.tar.gz \
   zip_2.0.1.tar.gz \
   openxlsx_4.1.0.tar.gz \
   rio_0.5.16.tar.gz \
   abind_1.4-5.tar.gz \
   carData_3.0-2.tar.gz \
   car_3.0-2.tar.gz \
   mosaicData_0.17.0.tar.gz \
   latticeExtra_0.6-28.tar.gz \
   gridExtra_2.3.tar.gz \
   ggdendro_0.1-20.tar.gz \
   mnormt_1.5-5.tar.gz \
   psych_1.8.12.tar.gz \
   generics_0.0.2.tar.gz \
   broom_0.5.1.tar.gz \
   reshape_0.8.8.tar.gz \
   progress_1.2.0.tar.gz \
   GGally_1.4.0.tar.gz \
   mosaicCore_0.6.0.tar.gz \
   ggstance_0.3.1.tar.gz \
   ggformula_0.9.1.tar.gz \
   ggrepel_0.8.0.tar.gz \
   base64enc_0.1-3.tar.gz \
   crosstalk_1.0.0.tar.gz \
   htmlwidgets_1.3.tar.gz \
   png_0.1-7.tar.gz \
   raster_2.8-19.tar.gz \
   leaflet_2.0.2.tar.gz \
   viridis_0.5.1.tar.gz \
   mosaic_1.5.0.tar.gz 

# Cliburn Chan requested these:
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/RColorBrewer_1.1-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/maps_3.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/zoo_1.8-4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/gcookbook_2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/corrplot_0.84.tar.gz 


RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   RColorBrewer_1.1-2.tar.gz \
   maps_3.3.0.tar.gz \
   zoo_1.8-4.tar.gz \
   gcookbook_2.0.tar.gz \
   corrplot_0.84.tar.gz 


RUN rm \
   RColorBrewer_1.1-2.tar.gz \
   maps_3.3.0.tar.gz \
   zoo_1.8-4.tar.gz \
   gcookbook_2.0.tar.gz \
   corrplot_0.84.tar.gz 
   

# install rmarkdown
RUN R CMD BATCH /r-studio/install-rmarkdown.R
RUN rm /install-rmarkdown.Rout 

# Cliburn also wanted these
# but they have mega-dependencies, so intall them the other way
RUN R CMD BATCH /r-studio/install-dendextend.R
RUN rm /install-dendextend.Rout 
RUN R CMD BATCH /r-studio/install-igraph.R
RUN rm /install-igraph.Rout 

# install sparklyr so we can do Spark via Livy
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/config_0.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/dbplyr_1.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rappdirs_0.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/r2d3_0.2.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/forge_0.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/sparklyr_1.0.0.tar.gz
   
RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   config_0.3.tar.gz \
   dbplyr_1.3.0.tar.gz \
   rappdirs_0.3.1.tar.gz \
   r2d3_0.2.3.tar.gz \
   forge_0.2.0.tar.gz \
   sparklyr_1.0.0.tar.gz
   
RUN rm \
  config_0.3.tar.gz \
  dbplyr_1.3.0.tar.gz \
  rappdirs_0.3.1.tar.gz \
  r2d3_0.2.3.tar.gz \
  forge_0.2.0.tar.gz \
  sparklyr_1.0.0.tar.gz


# some more TeX so that papaja can be installed and students can create APA templates in Rmarkdown
RUN apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
   texlive \
   texlive-publishers \
   texlive-fonts-extra \
   texlive-latex-extra \
   texlive-humanities \
   lmodern 
# papaja
RUN R CMD BATCH /r-studio/install-papaja.R
RUN rm /install-papaja.Rout

# install templates and examples from Reed and the Tufte package
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/BHH2_2016.05.31.tar.gz
   
RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   BHH2_2016.05.31.tar.gz
   
RUN rm \
  BHH2_2016.05.31.tar.gz
  
RUN R CMD BATCH /r-studio/install-reed.R
RUN rm /install-reed.Rout 


# a couple dependencies for Eric Greene's tidycensus
RUN apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
libproj-dev \
libudunits2-0 \
libudunits2-dev \
software-properties-common
 
# we need gdal > 2
RUN  add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
RUN  apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
    gdal-bin \
    python-gdal \
    libgdal-dev


RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/rgdal_1.4-3.tar.gz \
   https://cran.r-project.org/src/contrib/Archive/rgeos/rgeos_0.3-28.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/uuid_0.1-2.tar.gz
 
 
RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   rgdal_1.4-3.tar.gz \
   rgeos_0.3-28.tar.gz \
   uuid_0.1-2.tar.gz 

RUN rm \
   rgdal_1.4-3.tar.gz \
   rgeos_0.3-28.tar.gz \
   uuid_0.1-2.tar.gz

RUN R CMD BATCH /r-studio/install-rappdirs.R
RUN rm /install-rappdirs.Rout 

RUN DEBIAN_FRONTEND=noninteractive wget \
    https://archive.linux.duke.edu/cran/src/contrib/tigris_0.7.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/tidycensus_0.9.tar.gz

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
    tigris_0.7.tar.gz \
    tidycensus_0.9.tar.gz 

RUN rm \
    tigris_0.7.tar.gz  \
    tidycensus_0.9.tar.gz 

# new packages for fall 2018
RUN DEBIAN_FRONTEND=noninteractive wget \
    https://archive.linux.duke.edu/cran/src/contrib/tidyverse_1.2.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/promises_1.0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/future_1.12.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/doMC_1.3.5.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/foreach_1.4.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/doParallel_1.0.14.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/furrr_0.1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/drat_0.1.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/tidygraph_1.1.2.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/here_0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rticles_0.7.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/styler_1.1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/lintr_1.0.3.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/testthat_2.0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/reprex_0.2.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/microbenchmark_1.4-6.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/modelr_0.1.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/globals_0.12.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/listenv_0.7.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/iterators_1.0.10.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/enc_0.2.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rematch2_2.0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rex_1.1.2.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/stringdist_0.9.5.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/praise_1.0.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/profmem_0.5.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/bench_1.0.1.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
    modelr_0.1.4.tar.gz \
    prex_0.2.0.tar.gz \
    reprex_0.2.1.tar.gz \
    tidyverse_1.2.1.tar.gz \
    promises_1.0.1.tar.gz \
    globals_0.12.4.tar.gz \
    listenv_0.7.0.tar.gz \
    future_1.12.0.tar.gz \
    iterators_1.0.10.tar.gz \
    foreach_1.4.4.tar.gz \
    doMC_1.3.5.tar.gz \
    doParallel_1.0.14.tar.gz \
    furrr_0.1.0.tar.gz \
    drat_0.1.4.tar.gz \
    tidygraph_1.1.2.tar.gz \
    here_0.1.tar.gz \
    rticles_0.7.tar.gz \
    enc_0.2.0.tar.gz \
    rematch2_2.0.1.tar.gz \
    styler_1.1.0.tar.gz \
    rex_1.1.2.tar.gz \
    stringdist_0.9.5.1.tar.gz \
    praise_1.0.0.tar.gz \
    testthat_2.0.1.tar.gz \
    lintr_1.0.3.tar.gz \
    profmem_0.5.0.tar.gz \
    microbenchmark_1.4-6.tar.gz \
    bench_1.0.1.tar.gz 

RUN rm \
    modelr_0.1.4.tar.gz \
    profmem_0.5.0.tar.gz \
    praise_1.0.0.tar.gz \
    rex_1.1.2.tar.gz \
    stringdist_0.9.5.1.tar.gz \
    enc_0.2.0.tar.gz \
    rematch2_2.0.1.tar.gz \
    globals_0.12.4.tar.gz \
    iterators_1.0.10.tar.gz \
    listenv_0.7.0.tar.gz \
    tidyverse_1.2.1.tar.gz \
    promises_1.0.1.tar.gz \
    future_1.12.0.tar.gz \
    doMC_1.3.5.tar.gz \
    foreach_1.4.4.tar.gz \
    doParallel_1.0.14.tar.gz \
    furrr_0.1.0.tar.gz \
    drat_0.1.4.tar.gz \
    tidygraph_1.1.2.tar.gz \
    here_0.1.tar.gz \
    rticles_0.7.tar.gz \
    styler_1.1.0.tar.gz \
    lintr_1.0.3.tar.gz \
    testthat_2.0.1.tar.gz \
    reprex_0.2.1.tar.gz \
    microbenchmark_1.4-6.tar.gz \
    bench_1.0.1.tar.gz 


RUN DEBIAN_FRONTEND=noninteractive wget \
    https://archive.linux.duke.edu/cran/src/contrib/pryr_0.1.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/profvis_0.3.5.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/RcppArmadillo_0.9.200.7.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/servr_0.13.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/xaringan_0.9.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rsconnect_0.8.13.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/PKI_0.1-5.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/RJSONIO_1.3-1.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/packrat_0.5.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/highlight_0.4.7.2.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/pkgdown_1.3.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/bookdown_0.9.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/blogdown_0.11.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/cowplot_0.9.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/influenceR_0.1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/Rook_1.1-1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rgexf_0.15.3.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/visNetwork_2.0.5.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/DiagrammeR_1.0.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/farver_1.1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/tweenr_1.0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/polyclip_1.10-0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/ggforce_0.2.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/RgoogleMaps_1.4.3.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rjson_0.2.20.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/mapproj_1.2.6.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/jpeg_0.1-8.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/geosphere_1.5-7.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/ggmap_3.0.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/ggraph_1.0.2.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/shiny_1.2.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/shinyjs_1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/flexdashboard_0.5.1.1.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
    pryr_0.1.4.tar.gz \
    profvis_0.3.5.tar.gz \
    RcppArmadillo_0.9.200.7.1.tar.gz \
    servr_0.13.tar.gz \
    xaringan_0.9.tar.gz \
    PKI_0.1-5.1.tar.gz \
    RJSONIO_1.3-1.1.tar.gz \
    packrat_0.5.0.tar.gz \
    rsconnect_0.8.13.tar.gz \
    highlight_0.4.7.2.tar.gz \
    pkgdown_1.3.0.tar.gz \
    bookdown_0.9.tar.gz \
    blogdown_0.11.tar.gz \
    cowplot_0.9.4.tar.gz \
    influenceR_0.1.0.tar.gz \
    Rook_1.1-1.tar.gz \
    rgexf_0.15.3.tar.gz \
    visNetwork_2.0.5.tar.gz \
    DiagrammeR_1.0.0.tar.gz \
    farver_1.1.0.tar.gz \
    tweenr_1.0.1.tar.gz \
    polyclip_1.10-0.tar.gz \
    ggforce_0.2.1.tar.gz \
    jpeg_0.1-8.tar.gz \
    RgoogleMaps_1.4.3.tar.gz \
    rjson_0.2.20.tar.gz \
    mapproj_1.2.6.tar.gz \
    geosphere_1.5-7.tar.gz \
    ggmap_3.0.0.tar.gz \
    ggraph_1.0.2.tar.gz \
    shiny_1.2.0.tar.gz \
    shinyjs_1.0.tar.gz \
    flexdashboard_0.5.1.1.tar.gz 

RUN rm \
    pryr_0.1.4.tar.gz \
    profvis_0.3.5.tar.gz \
    RcppArmadillo_0.9.200.7.1.tar.gz \
    servr_0.13.tar.gz \
    xaringan_0.9.tar.gz \
    PKI_0.1-5.1.tar.gz \
    RJSONIO_1.3-1.1.tar.gz \
    packrat_0.5.0.tar.gz \
    rsconnect","# mccahill/r-studio
#
# VERSION 1.4

FROM ubuntu:18.04
MAINTAINER Mark McCahill ""mark.mccahill@duke.edu""

RUN apt-get  update ; \
    apt-get  install gnupg2 -y

# get R from a CRAN archive (we want the 3.5 version of R)
RUN echo  ""deb http://cran.rstudio.com/bin/linux/ubuntu bionic-cran35/""  >>  /etc/apt/sources.list
RUN DEBIAN_FRONTEND=noninteractive apt-key adv  --keyserver keyserver.ubuntu.com --recv-keys  E084DAB9

RUN apt-get  update ; \
    apt-get  dist-upgrade -y 

# we want OpenBLAS for faster linear algebra as described here: http://brettklamer.com/diversions/statistical/faster-blas-in-r/
RUN apt-get install  -y \
   apt-utils \
   libopenblas-base

RUN apt-get update ; \
   DEBIAN_FRONTEND=noninteractive apt-get  install -y  \
   r-base \
   r-base-dev \
   vim \
   less \
   net-tools \
   inetutils-ping \
   curl \
   git \
   telnet \
   nmap \
   socat \
   software-properties-common \
   wget \
   sudo 

RUN apt-get update ; \
   DEBIAN_FRONTEND=noninteractive apt-get  install -y \
   libcurl4-gnutls-dev \
   libgit2-dev \
   libxml2-dev \
   libssl-dev \
   libudunits2-dev \
   libpoppler-cpp-dev


# we need TeX for the rmarkdown package in RStudio, and pandoc is also useful 
RUN apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
   texlive \ 
   texlive-base \ 
   texlive-latex-extra \ 
   texlive-pstricks \ 
   pandoc

# R-Studio
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
   gdebi-core \
   libapparmor1
   
# RUN DEBIAN_FRONTEND=noninteractive wget https://download2.rstudio.org/rstudio-server-1.1.383-amd64.deb
RUN DEBIAN_FRONTEND=noninteractive wget https://s3.amazonaws.com/rstudio-ide-build/server/trusty/amd64/rstudio-server-1.2.907-amd64.deb
RUN DEBIAN_FRONTEND=noninteractive gdebi --n rstudio-server-1.2.907-amd64.deb
RUN rm rstudio-server-1.2.907-amd64.deb

# update the R packages we will need for knitr
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/xfun_0.5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/knitr_1.22.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/yaml_2.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/Rcpp_1.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/htmltools_0.3.6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/caTools_1.17.1.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/bitops_1.0-6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/digest_0.6.18.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/glue_1.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/stringr_1.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/markdown_0.9.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/highr_0.8.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/formatR_1.6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/evaluate_0.13.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mime_0.6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/stringi_1.4.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/magrittr_1.5.tar.gz


RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   bitops_1.0-6.tar.gz \
   caTools_1.17.1.2.tar.gz \
   digest_0.6.18.tar.gz \
   Rcpp_1.0.1.tar.gz \
   htmltools_0.3.6.tar.gz \
   yaml_2.2.0.tar.gz \
   stringi_1.4.3.tar.gz \
   magrittr_1.5.tar.gz \
   mime_0.6.tar.gz \
   glue_1.3.1.tar.gz \
   stringr_1.4.0.tar.gz \
   highr_0.8.tar.gz \
   formatR_1.6.tar.gz \
   evaluate_0.13.tar.gz \
   markdown_0.9.tar.gz \
   xfun_0.5.tar.gz \
   knitr_1.22.tar.gz
 

RUN rm \
   evaluate_0.13.tar.gz \
   formatR_1.6.tar.gz \
   highr_0.8.tar.gz \
   markdown_0.9.tar.gz \
   stringi_1.4.3.tar.gz \
   magrittr_1.5.tar.gz \
   glue_1.3.1.tar.gz \
   stringr_1.4.0.tar.gz \
   xfun_0.5.tar.gz \
   knitr_1.22.tar.gz \
   yaml_2.2.0.tar.gz \
   Rcpp_1.0.1.tar.gz \
   htmltools_0.3.6.tar.gz \
   caTools_1.17.1.2.tar.gz \
   bitops_1.0-6.tar.gz \
   digest_0.6.18.tar.gz \
   mime_0.6.tar.gz

# dependency for R XML library
RUN apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y \
   libxml2 \ 
   libxml2-dev \
   libssl-dev


# R packages we need for devtools - and we need devtools to be able to update the rmarkdown package
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/processx_3.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ps_1.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/callr_3.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/crayon_1.3.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/assertthat_0.2.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/cli_1.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/desc_1.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/prettyunits_1.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/backports_1.1.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rprojroot_1.3-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/withr_2.1.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pkgbuild_1.0.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rlang_0.3.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rstudioapi_0.10.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pkgload_1.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rcmdcheck_1.3.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/remotes_2.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/xopen_1.0.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/clipr_0.5.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/clisymbols_1.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/sessioninfo_1.1.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/usethis_1.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/sys_3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/askpass_1.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/openssl_1.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/brew_1.0-6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/Archive/roxygen2/roxygen2_5.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/fs_1.2.7.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/gh_1.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rversions_1.0.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/git2r_0.25.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/devtools_2.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/R6_2.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/httr_1.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/RCurl_1.95-4.12.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/BH_1.69.0-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/xml2_1.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/curl_3.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/jsonlite_1.6.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ini_0.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/downloader_0.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/memoise_1.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/plyr_1.8.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/XML_3.98-1.19.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/whisker_0.3-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/bitops_1.0-6.tar.gz

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   ps_1.3.0.tar.gz \
   R6_2.4.0.tar.gz \
   processx_3.3.0.tar.gz \
   callr_3.2.0.tar.gz \
   crayon_1.3.4.tar.gz \
   assertthat_0.2.1.tar.gz \
   cli_1.1.0.tar.gz \
   backports_1.1.3.tar.gz \
   rprojroot_1.3-2.tar.gz \
   desc_1.2.0.tar.gz \
   prettyunits_1.0.2.tar.gz \
   withr_2.1.2.tar.gz \
   pkgbuild_1.0.3.tar.gz \
   rlang_0.3.3.tar.gz \
   rstudioapi_0.10.tar.gz \
   pkgload_1.0.2.tar.gz \
   xopen_1.0.0.tar.gz \
   sessioninfo_1.1.1.tar.gz \
   rcmdcheck_1.3.2.tar.gz \
   remotes_2.0.2.tar.gz \   
   whisker_0.3-2.tar.gz \
   git2r_0.25.2.tar.gz \
   fs_1.2.7.tar.gz \
   ini_0.3.1.tar.gz \
   jsonlite_1.6.tar.gz \
   sys_3.1.tar.gz \
   askpass_1.1.tar.gz \
   openssl_1.3.tar.gz \
   curl_3.3.tar.gz \
   httr_1.4.0.tar.gz \
   gh_1.0.1.tar.gz \
   clipr_0.5.0.tar.gz \
   clisymbols_1.2.0.tar.gz \   
   usethis_1.4.0.tar.gz \
   memoise_1.1.0.tar.gz \
   bitops_1.0-6.tar.gz \
   RCurl_1.95-4.12.tar.gz \
   plyr_1.8.4.tar.gz \
   devtools_2.0.1.tar.gz \
   brew_1.0-6.tar.gz \
   roxygen2_5.0.1.tar.gz \
   XML_3.98-1.19.tar.gz \
   BH_1.69.0-1.tar.gz \
   xml2_1.2.0.tar.gz \
   rversions_1.0.3.tar.gz \
   downloader_0.4.tar.gz

RUN rm \
   ps_1.3.0.tar.gz \
   callr_3.2.0.tar.gz \
   R6_2.4.0.tar.gz \
   processx_3.3.0.tar.gz \
   crayon_1.3.4.tar.gz \
   assertthat_0.2.1.tar.gz \
   cli_1.1.0.tar.gz \
   desc_1.2.0.tar.gz \
   prettyunits_1.0.2.tar.gz \
   backports_1.1.3.tar.gz \
   rprojroot_1.3-2.tar.gz \
   withr_2.1.2.tar.gz \
   pkgbuild_1.0.3.tar.gz \
   rlang_0.3.3.tar.gz \
   rstudioapi_0.10.tar.gz \
   clipr_0.5.0.tar.gz \
   clisymbols_1.2.0.tar.gz \
   pkgload_1.0.2.tar.gz \
   sessioninfo_1.1.1.tar.gz \
   xopen_1.0.0.tar.gz \
   rcmdcheck_1.3.2.tar.gz \
   remotes_2.0.2.tar.gz \
   usethis_1.4.0.tar.gz \
   ini_0.3.1.tar.gz \
   jsonlite_1.6.tar.gz \
   memoise_1.1.0.tar.gz \
   whisker_0.3-2.tar.gz \
   bitops_1.0-6.tar.gz \
   RCurl_1.95-4.12.tar.gz \
   plyr_1.8.4.tar.gz \
   httr_1.4.0.tar.gz \
   sys_3.1.tar.gz \
   askpass_1.1.tar.gz \
   openssl_1.3.tar.gz \
   brew_1.0-6.tar.gz \
   roxygen2_5.0.1.tar.gz \
   BH_1.69.0-1.tar.gz \
   XML_3.98-1.19.tar.gz \
   xml2_1.2.0.tar.gz \
   curl_3.3.tar.gz \
   rversions_1.0.3.tar.gz \
   git2r_0.25.2.tar.gz \
   devtools_2.0.1.tar.gz \
   downloader_0.4.tar.gz

# the CRAN install from source fails because a server at MIT will not respond
# install from source
ADD ./conf /r-studio
#RUN R CMD BATCH /r-studio/install-nloptr.R
#RUN rm /install-nloptr.Rout

RUN DEBIAN_FRONTEND=noninteractive wget \
    https://archive.linux.duke.edu/cran/src/contrib/nloptr_1.2.1.tar.gz

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
    nloptr_1.2.1.tar.gz

RUN rm \
    nloptr_1.2.1.tar.gz


# libraries Eric Green wanted
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/lubridate_1.7.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/lazyeval_0.2.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/utf8_1.1.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/fansi_0.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pillar_1.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pkgconfig_2.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/tibble_2.1.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggplot2_3.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/RColorBrewer_1.1-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/dichromat_2.0-0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/colorspace_1.4-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/munsell_0.5.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/labeling_0.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/viridisLite_0.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/scales_1.0.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/stargazer_5.2.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/reshape2_1.4.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/gtable_0.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/proto_1.0.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/minqa_1.2.4.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/RcppEigen_0.3.3.5.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/lme4_1.1-21.tar.gz

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   lubridate_1.7.4.tar.gz  \
   gtable_0.3.0.tar.gz \
   RColorBrewer_1.1-2.tar.gz \
   dichromat_2.0-0.tar.gz \
   colorspace_1.4-1.tar.gz \
   munsell_0.5.0.tar.gz \
   labeling_0.3.tar.gz \
   viridisLite_0.3.0.tar.gz \
   scales_1.0.0.tar.gz \
   proto_1.0.0.tar.gz \
   reshape2_1.4.3.tar.gz \
   lazyeval_0.2.2.tar.gz \
   utf8_1.1.4.tar.gz \
   fansi_0.4.0.tar.gz \
   pillar_1.3.1.tar.gz \
   pkgconfig_2.0.2.tar.gz \
   tibble_2.1.1.tar.gz \
   ggplot2_3.1.0.tar.gz \
   stargazer_5.2.2.tar.gz \
   minqa_1.2.4.tar.gz \
   RcppEigen_0.3.3.5.0.tar.gz \
   lme4_1.1-21.tar.gz

RUN rm \
   lubridate_1.7.4.tar.gz  \
   gtable_0.3.0.tar.gz \
   RColorBrewer_1.1-2.tar.gz \
   dichromat_2.0-0.tar.gz \
   colorspace_1.4-1.tar.gz \
   munsell_0.5.0.tar.gz \
   labeling_0.3.tar.gz \
   viridisLite_0.3.0.tar.gz \
   scales_1.0.0.tar.gz \
   proto_1.0.0.tar.gz \
   reshape2_1.4.3.tar.gz \
   lazyeval_0.2.2.tar.gz \
   utf8_1.1.4.tar.gz \
   fansi_0.4.0.tar.gz \
   pillar_1.3.1.tar.gz \
   pkgconfig_2.0.2.tar.gz \
   tibble_2.1.1.tar.gz \
   ggplot2_3.1.0.tar.gz \
   stargazer_5.2.2.tar.gz \
   minqa_1.2.4.tar.gz \
   RcppEigen_0.3.3.5.0.tar.gz \
   lme4_1.1-21.tar.gz
  
# more libraries Mine Cetinakya-Rundel asked for
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/openintro_1.7.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/bindr_0.1.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/bindrcpp_0.2.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/plogr_0.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/purrr_0.3.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/tidyselect_0.2.5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/dplyr_0.8.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/DBI_1.0.0.tar.gz 



RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   openintro_1.7.1.tar.gz \
   DBI_1.0.0.tar.gz \
   plogr_0.2.0.tar.gz \
   bindr_0.1.1.tar.gz \
   bindrcpp_0.2.2.tar.gz \
   purrr_0.3.2.tar.gz \
   tidyselect_0.2.5.tar.gz \
   dplyr_0.8.0.1.tar.gz 

RUN rm \
   openintro_1.7.1.tar.gz \
   DBI_1.0.0.tar.gz \
   bindr_0.1.1.tar.gz \
   bindrcpp_0.2.2.tar.gz \
   plogr_0.2.0.tar.gz \
   purrr_0.3.2.tar.gz \
   tidyselect_0.2.5.tar.gz \
   dplyr_0.8.0.1.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/chron_2.3-53.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/data.table_1.12.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rematch_1.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/cellranger_1.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/tidyr_0.8.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/googlesheets_0.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/hms_0.4.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/readr_1.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/selectr_0.4-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rvest_0.3.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/pbkrtest_0.4-7.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   chron_2.3-53.tar.gz \
   data.table_1.12.0.tar.gz \
   rematch_1.0.1.tar.gz \
   cellranger_1.1.0.tar.gz \
   tidyr_0.8.3.tar.gz \
   hms_0.4.2.tar.gz \
   readr_1.3.1.tar.gz \
   googlesheets_0.3.0.tar.gz \
   selectr_0.4-1.tar.gz \
   rvest_0.3.2.tar.gz \
   pbkrtest_0.4-7.tar.gz 

RUN rm \
   chron_2.3-53.tar.gz \
   data.table_1.12.0.tar.gz \
   rematch_1.0.1.tar.gz \
   cellranger_1.1.0.tar.gz \
   tidyr_0.8.3.tar.gz \
   googlesheets_0.3.0.tar.gz \
   hms_0.4.2.tar.gz \
   readr_1.3.1.tar.gz \
   selectr_0.4-1.tar.gz \
   rvest_0.3.2.tar.gz \
   pbkrtest_0.4-7.tar.gz 

# Shiny
#RUN wget https://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.5.3.838-amd64.deb
RUN wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.7.907-amd64.deb
RUN DEBIAN_FRONTEND=noninteractive gdebi -n shiny-server-1.5.7.907-amd64.deb
RUN rm shiny-server-1.5.7.907-amd64.deb
RUN R CMD BATCH /r-studio/install-Shiny.R
RUN rm /install-Shiny.Rout


RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/SparseM_1.77.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/MatrixModels_0.4-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/quantreg_5.38.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/sp_1.3-1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/maptools_0.9-5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/haven_2.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ellipsis_0.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/forcats_0.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/readxl_1.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/zip_2.0.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/openxlsx_4.1.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rio_0.5.16.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/abind_1.4-5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/carData_3.0-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/car_3.0-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mosaicData_0.17.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/latticeExtra_0.6-28.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/gridExtra_2.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggdendro_0.1-20.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mnormt_1.5-5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/psych_1.8.12.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/generics_0.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/broom_0.5.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/reshape_0.8.8.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/progress_1.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/GGally_1.4.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggstance_0.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggformula_0.9.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mosaicCore_0.6.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/ggrepel_0.8.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/base64enc_0.1-3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/crosstalk_1.0.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/htmlwidgets_1.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/png_0.1-7.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/raster_2.8-19.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/viridis_0.5.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/leaflet_2.0.2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/mosaic_1.5.0.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   SparseM_1.77.tar.gz \
   MatrixModels_0.4-1.tar.gz \
   quantreg_5.38.tar.gz \
   sp_1.3-1.tar.gz \
   maptools_0.9-5.tar.gz \
   ellipsis_0.1.0.tar.gz \
   forcats_0.4.0.tar.gz \
   haven_2.1.0.tar.gz \
   progress_1.2.0.tar.gz \
   readxl_1.3.1.tar.gz \
   zip_2.0.1.tar.gz \
   openxlsx_4.1.0.tar.gz \
   rio_0.5.16.tar.gz \
   abind_1.4-5.tar.gz \
   carData_3.0-2.tar.gz \
   car_3.0-2.tar.gz \
   mosaicData_0.17.0.tar.gz \
   latticeExtra_0.6-28.tar.gz \
   gridExtra_2.3.tar.gz \
   ggdendro_0.1-20.tar.gz \
   mnormt_1.5-5.tar.gz \
   psych_1.8.12.tar.gz \
   generics_0.0.2.tar.gz \
   broom_0.5.1.tar.gz \
   reshape_0.8.8.tar.gz \
   GGally_1.4.0.tar.gz \
   mosaicCore_0.6.0.tar.gz \
   ggstance_0.3.1.tar.gz \
   ggformula_0.9.1.tar.gz \
   ggrepel_0.8.0.tar.gz \
   base64enc_0.1-3.tar.gz \
   crosstalk_1.0.0.tar.gz \
   htmlwidgets_1.3.tar.gz \
   png_0.1-7.tar.gz \
   raster_2.8-19.tar.gz \
   viridis_0.5.1.tar.gz \
   leaflet_2.0.2.tar.gz \
   mosaic_1.5.0.tar.gz 

RUN rm \
   SparseM_1.77.tar.gz \
   MatrixModels_0.4-1.tar.gz \
   quantreg_5.38.tar.gz \
   sp_1.3-1.tar.gz \
   maptools_0.9-5.tar.gz \
   ellipsis_0.1.0.tar.gz \
   forcats_0.4.0.tar.gz \
   haven_2.1.0.tar.gz \
   readxl_1.3.1.tar.gz \
   zip_2.0.1.tar.gz \
   openxlsx_4.1.0.tar.gz \
   rio_0.5.16.tar.gz \
   abind_1.4-5.tar.gz \
   carData_3.0-2.tar.gz \
   car_3.0-2.tar.gz \
   mosaicData_0.17.0.tar.gz \
   latticeExtra_0.6-28.tar.gz \
   gridExtra_2.3.tar.gz \
   ggdendro_0.1-20.tar.gz \
   mnormt_1.5-5.tar.gz \
   psych_1.8.12.tar.gz \
   generics_0.0.2.tar.gz \
   broom_0.5.1.tar.gz \
   reshape_0.8.8.tar.gz \
   progress_1.2.0.tar.gz \
   GGally_1.4.0.tar.gz \
   mosaicCore_0.6.0.tar.gz \
   ggstance_0.3.1.tar.gz \
   ggformula_0.9.1.tar.gz \
   ggrepel_0.8.0.tar.gz \
   base64enc_0.1-3.tar.gz \
   crosstalk_1.0.0.tar.gz \
   htmlwidgets_1.3.tar.gz \
   png_0.1-7.tar.gz \
   raster_2.8-19.tar.gz \
   leaflet_2.0.2.tar.gz \
   viridis_0.5.1.tar.gz \
   mosaic_1.5.0.tar.gz 

# Cliburn Chan requested these:
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/RColorBrewer_1.1-2.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/maps_3.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/zoo_1.8-5.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/gcookbook_2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/corrplot_0.84.tar.gz 


RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   RColorBrewer_1.1-2.tar.gz \
   maps_3.3.0.tar.gz \
   zoo_1.8-5.tar.gz \
   gcookbook_2.0.tar.gz \
   corrplot_0.84.tar.gz 


RUN rm \
   RColorBrewer_1.1-2.tar.gz \
   maps_3.3.0.tar.gz \
   zoo_1.8-5.tar.gz \
   gcookbook_2.0.tar.gz \
   corrplot_0.84.tar.gz 
   

# install rmarkdown
RUN R CMD BATCH /r-studio/install-rmarkdown.R
RUN rm /install-rmarkdown.Rout 

# Cliburn also wanted these
# but they have mega-dependencies, so intall them the other way
RUN R CMD BATCH /r-studio/install-dendextend.R
RUN rm /install-dendextend.Rout 
RUN R CMD BATCH /r-studio/install-igraph.R
RUN rm /install-igraph.Rout 

# install sparklyr so we can do Spark via Livy
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/config_0.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/dbplyr_1.3.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/rappdirs_0.3.1.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/r2d3_0.2.3.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/forge_0.2.0.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/sparklyr_1.0.0.tar.gz
   
RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   config_0.3.tar.gz \
   dbplyr_1.3.0.tar.gz \
   rappdirs_0.3.1.tar.gz \
   r2d3_0.2.3.tar.gz \
   forge_0.2.0.tar.gz \
   sparklyr_1.0.0.tar.gz
   
RUN rm \
  config_0.3.tar.gz \
  dbplyr_1.3.0.tar.gz \
  rappdirs_0.3.1.tar.gz \
  r2d3_0.2.3.tar.gz \
  forge_0.2.0.tar.gz \
  sparklyr_1.0.0.tar.gz


# some more TeX so that papaja can be installed and students can create APA templates in Rmarkdown
RUN apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
   texlive \
   texlive-publishers \
   texlive-fonts-extra \
   texlive-latex-extra \
   texlive-humanities \
   lmodern 
# papaja
RUN R CMD BATCH /r-studio/install-papaja.R
RUN rm /install-papaja.Rout

# install templates and examples from Reed and the Tufte package
RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/BHH2_2016.05.31.tar.gz
   
RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   BHH2_2016.05.31.tar.gz
   
RUN rm \
  BHH2_2016.05.31.tar.gz
  
RUN R CMD BATCH /r-studio/install-reed.R
RUN rm /install-reed.Rout 


# a couple dependencies for Eric Greene's tidycensus
RUN apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
libproj-dev \
libudunits2-0 \
libudunits2-dev \
software-properties-common
 
# we need gdal > 2
RUN  add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
RUN  apt-get update 
RUN DEBIAN_FRONTEND=noninteractive apt-get  install -y \
    gdal-bin \
    python-gdal \
    libgdal-dev


RUN DEBIAN_FRONTEND=noninteractive wget \
   https://archive.linux.duke.edu/cran/src/contrib/rgdal_1.4-3.tar.gz \
   https://cran.r-project.org/src/contrib/Archive/rgeos/rgeos_0.3-28.tar.gz \
   https://archive.linux.duke.edu/cran/src/contrib/uuid_0.1-2.tar.gz
 
 
RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
   rgdal_1.4-3.tar.gz \
   rgeos_0.3-28.tar.gz \
   uuid_0.1-2.tar.gz 

RUN rm \
   rgdal_1.4-3.tar.gz \
   rgeos_0.3-28.tar.gz \
   uuid_0.1-2.tar.gz

RUN R CMD BATCH /r-studio/install-rappdirs.R
RUN rm /install-rappdirs.Rout 

RUN DEBIAN_FRONTEND=noninteractive wget \
    https://archive.linux.duke.edu/cran/src/contrib/tigris_0.7.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/tidycensus_0.9.tar.gz

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
    tigris_0.7.tar.gz \
    tidycensus_0.9.tar.gz 

RUN rm \
    tigris_0.7.tar.gz  \
    tidycensus_0.9.tar.gz 

# new packages for fall 2018
RUN DEBIAN_FRONTEND=noninteractive wget \
    https://archive.linux.duke.edu/cran/src/contrib/tidyverse_1.2.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/promises_1.0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/future_1.12.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/doMC_1.3.5.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/foreach_1.4.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/doParallel_1.0.14.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/furrr_0.1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/drat_0.1.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/tidygraph_1.1.2.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/here_0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rticles_0.7.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/styler_1.1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/lintr_1.0.3.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/testthat_2.0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/reprex_0.2.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/microbenchmark_1.4-6.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/modelr_0.1.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/globals_0.12.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/listenv_0.7.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/iterators_1.0.10.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/enc_0.2.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rematch2_2.0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rex_1.1.2.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/stringdist_0.9.5.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/praise_1.0.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/profmem_0.5.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/bench_1.0.1.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
    modelr_0.1.4.tar.gz \
    prex_0.2.0.tar.gz \
    reprex_0.2.1.tar.gz \
    tidyverse_1.2.1.tar.gz \
    promises_1.0.1.tar.gz \
    globals_0.12.4.tar.gz \
    listenv_0.7.0.tar.gz \
    future_1.12.0.tar.gz \
    iterators_1.0.10.tar.gz \
    foreach_1.4.4.tar.gz \
    doMC_1.3.5.tar.gz \
    doParallel_1.0.14.tar.gz \
    furrr_0.1.0.tar.gz \
    drat_0.1.4.tar.gz \
    tidygraph_1.1.2.tar.gz \
    here_0.1.tar.gz \
    rticles_0.7.tar.gz \
    enc_0.2.0.tar.gz \
    rematch2_2.0.1.tar.gz \
    styler_1.1.0.tar.gz \
    rex_1.1.2.tar.gz \
    stringdist_0.9.5.1.tar.gz \
    praise_1.0.0.tar.gz \
    testthat_2.0.1.tar.gz \
    lintr_1.0.3.tar.gz \
    profmem_0.5.0.tar.gz \
    microbenchmark_1.4-6.tar.gz \
    bench_1.0.1.tar.gz 

RUN rm \
    modelr_0.1.4.tar.gz \
    profmem_0.5.0.tar.gz \
    praise_1.0.0.tar.gz \
    rex_1.1.2.tar.gz \
    stringdist_0.9.5.1.tar.gz \
    enc_0.2.0.tar.gz \
    rematch2_2.0.1.tar.gz \
    globals_0.12.4.tar.gz \
    iterators_1.0.10.tar.gz \
    listenv_0.7.0.tar.gz \
    tidyverse_1.2.1.tar.gz \
    promises_1.0.1.tar.gz \
    future_1.12.0.tar.gz \
    doMC_1.3.5.tar.gz \
    foreach_1.4.4.tar.gz \
    doParallel_1.0.14.tar.gz \
    furrr_0.1.0.tar.gz \
    drat_0.1.4.tar.gz \
    tidygraph_1.1.2.tar.gz \
    here_0.1.tar.gz \
    rticles_0.7.tar.gz \
    styler_1.1.0.tar.gz \
    lintr_1.0.3.tar.gz \
    testthat_2.0.1.tar.gz \
    reprex_0.2.1.tar.gz \
    microbenchmark_1.4-6.tar.gz \
    bench_1.0.1.tar.gz 


RUN DEBIAN_FRONTEND=noninteractive wget \
    https://archive.linux.duke.edu/cran/src/contrib/pryr_0.1.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/profvis_0.3.5.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/RcppArmadillo_0.9.200.7.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/servr_0.13.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/xaringan_0.9.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rsconnect_0.8.13.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/PKI_0.1-5.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/RJSONIO_1.3-1.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/packrat_0.5.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/highlight_0.4.7.2.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/pkgdown_1.3.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/bookdown_0.9.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/blogdown_0.11.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/cowplot_0.9.4.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/influenceR_0.1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/Rook_1.1-1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rgexf_0.15.3.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/visNetwork_2.0.5.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/DiagrammeR_1.0.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/farver_1.1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/tweenr_1.0.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/polyclip_1.10-0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/ggforce_0.2.1.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/RgoogleMaps_1.4.3.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/rjson_0.2.20.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/mapproj_1.2.6.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/jpeg_0.1-8.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/geosphere_1.5-7.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/ggmap_3.0.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/ggraph_1.0.2.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/shiny_1.2.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/shinyjs_1.0.tar.gz \
    https://archive.linux.duke.edu/cran/src/contrib/flexdashboard_0.5.1.1.tar.gz 

RUN DEBIAN_FRONTEND=noninteractive R CMD INSTALL \
    pryr_0.1.4.tar.gz \
    profvis_0.3.5.tar.gz \
    RcppArmadillo_0.9.200.7.1.tar.gz \
    servr_0.13.tar.gz \
    xaringan_0.9.tar.gz \
    PKI_0.1-5.1.tar.gz \
    RJSONIO_1.3-1.1.tar.gz \
    packrat_0.5.0.tar.gz \
    rsconnect_0.8.13.tar.gz \
    highlight_0.4.7.2.tar.gz \
    pkgdown_1.3.0.tar.gz \
    bookdown_0.9.tar.gz \
    blogdown_0.11.tar.gz \
    cowplot_0.9.4.tar.gz \
    influenceR_0.1.0.tar.gz \
    Rook_1.1-1.tar.gz \
    rgexf_0.15.3.tar.gz \
    visNetwork_2.0.5.tar.gz \
    DiagrammeR_1.0.0.tar.gz \
    farver_1.1.0.tar.gz \
    tweenr_1.0.1.tar.gz \
    polyclip_1.10-0.tar.gz \
    ggforce_0.2.1.tar.gz \
    jpeg_0.1-8.tar.gz \
    RgoogleMaps_1.4.3.tar.gz \
    rjson_0.2.20.tar.gz \
    mapproj_1.2.6.tar.gz \
    geosphere_1.5-7.tar.gz \
    ggmap_3.0.0.tar.gz \
    ggraph_1.0.2.tar.gz \
    shiny_1.2.0.tar.gz \
    shinyjs_1.0.tar.gz \
    flexdashboard_0.5.1.1.tar.gz 

RUN rm \
    pryr_0.1.4.tar.gz \
    profvis_0.3.5.tar.gz \
    RcppArmadillo_0.9.200.7.1.tar.gz \
    servr_0.13.tar.gz \
    xaringan_0.9.tar.gz \
    PKI_0.1-5.1.tar.gz \
    RJSONIO_1.3-1.1.tar.gz \
    packrat_0.5.0.tar.gz \
    rsconnect"
300,1324476da8d000b901c9863b7e324f3010f7db38,add slapd.,"add slapd.
","FROM debian:wheezy
MAINTAINER Semen Pisarev <s.a.pisarev@gmail.com>

ENV DEBIAN_FRONTEND noninteractive
RUN echo ""APT::Install-Recommends 0;"" >> /etc/apt/apt.conf.d/01norecommends \
  && echo ""APT::Install-Suggests 0;"" >> /etc/apt/apt.conf.d/01norecommends

ENV IREDMAIL_VERSION 0.9.2

# TODO: Replace hostname
ENV HOSTNAME mx.phoneyou.net
ENV DOCKER_LDAP_DN dc=phoneyou,dc=net

# Local sources (for speed-up)
COPY ./sources.list.163 /etc/apt/sources.list
# Install some necessary packages
RUN echo 'deb http://inverse.ca/debian wheezy wheezy' > \
    /etc/apt/sources.list.d/00-inverse-ca.list \
  && apt-key adv --keyserver keys.gnupg.net --recv-key 0x810273C4 \
  && apt-get -q update \
  && apt-get install -y -q \
    apt-utils \
  && apt-get install -y -q \
    curl \
    wget \
    bzip2 \
    dialog \
    openssl \
    openldap \
    rsync \
    python-pygments \
    python-ldap \
    rsyslog \
    dovecot-core \
    dovecot-imapd \
    dovecot-ldap \
    dovecot-lmtpd \
    dovecot-managesieved \
    dovecot-mysql \
    dovecot-pop3d \
    dovecot-sieve \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/* \
  && rm -f /etc/apt/sources.list.d/00-inverse-ca.list

# Set working directory
WORKDIR /opt/iredmail

# Copy files, extract iRedMail, remove archive, copy & configure tools
COPY ./files ./  

RUN cp -rl iRedMail-""${IREDMAIL_VERSION}""/* . \
  && rm -rf iRedMail-""${IREDMAIL_VERSION}""* \
  && mkdir -p /opt/itools \
  && cp ./tools/* /opt/itools \
  && mkdir -p /var/vmail/backup \
  && mv ./backup.sh /var/vmail/backup \
  && sed -i 's/dc=phoneyou,dc=net/'""$DOCKER_LDAP_DN""'/' \
    /opt/itools/create_mail_user_OpenLDAP.py

# Fake `uname` and `hostname`
RUN mv /bin/uname /bin/uname_ \
  && mv /bin/hostname /bin/hostname_ \
  && cp -l ./hostname ./uname /bin/

# Set hostname
RUN echo $HOSTNAME > /etc/hostname \
  && echo $HOSTNAME > /etc/mailname \
  && mkdir -p /etc/apache2/ \
  && echo 'ServerName '$HOSTNAME > /etc/apache2/httpd.conf

# Make link to Apache log files
RUN rm -rf /var/www/apache2/ \
  && mkdir -p /var/log/apache2/www/ /var/www/ \
  && ln -s /var/log/apache2/www/ /var/www/apache2 \
  && chown -R www-data:www-data /var/www/ /var/log/apache2/

# Make ClamAV socket file (to avoid installation warning)
RUN touch /tmp/clamd.socket \
  && chmod -Rf 766 /tmp/clamd.socket

# Avoid getty errors in log files
RUN sed -ri 's/^[1-6]:[2-6]{2,4}:.*/#\0/' /etc/inittab

# Enable services startup during install, 
#   run iRedMail installation & remove unneeded, 
#   disable services startup during install
RUN sed -i 's/ 101/ 0/' /usr/sbin/policy-rc.d \
  && IREDMAIL_DEBUG='NO' \
    AUTO_USE_EXISTING_CONFIG_FILE=y \
    AUTO_INSTALL_WITHOUT_CONFIRM=y \
    AUTO_CLEANUP_REMOVE_SENDMAIL=y \
    AUTO_CLEANUP_REMOVE_MOD_PYTHON=y \
    AUTO_CLEANUP_REPLACE_FIREWALL_RULES=n \
    AUTO_CLEANUP_RESTART_IPTABLES=y \
    AUTO_CLEANUP_REPLACE_MYSQL_CONFIG=y \
    AUTO_CLEANUP_RESTART_POSTFIX=n \
    bash iRedMail.sh \
  && apt-get purge -y -q dialog apt-utils \
  && apt-get autoremove -y -q \
  && apt-get clean -y -q \
  && rm -rf /var/lib/apt/lists/* \
  && sed -i 's/ 0/ 101/' /usr/sbin/policy-rc.d

# Process initial CSV
RUN if [ -e mail_users.csv ]; \
    then \
      python /opt/itools/create_mail_user_OpenLDAP.py ./mail_users.csv \
      && mv ./mail_users.csv.ldif ldifs/20_mail_users.ldif; \
    fi

# Run slapd as root
RUN rm -rf /etc/ldap/slapd.d \
  && sed -i 's/openldap/root/g' /etc/default/slapd

# TODO: Replace ldap password (LDAP_ROOTPW)
# Copy initial ldif and add all ldifs to ldap
RUN cp /opt/iredmail/conf/ldap_init.ldif ldifs/00_ldap_init.ldif \
  && service slapd start \
  && for f in ldifs/*.ldif; \
  do \
    ( ldapadd -D 'cn=Manager,'""$DOCKER_LDAP_DN"" -w phoneyou$ldap -f ""$f"" || \
    ldapmodify -v -D 'cn=Manager,'""$DOCKER_LDAP_DN"" -w phoneyou$ldap -f ""$f"" ); \
  done

# Encrypy iRedMail.tips
# TODO: Replace tips password (random)
RUN echo 'YWYxNWY5NTMwZjVmNmNhOTNmZDY1Zj' | \
    openssl enc -in /opt/iredmail/iRedMail.tips -out /opt/iRedMail.tips.enc \
    -e -aes256 -pass stdin

# Schedule backup script
RUN (crontab -l 2>/dev/null; \
  echo ""0   4   *   *   *   /bin/bash /var/vmail/backup/backup.sh"") | \
  crontab -

# Force users to change passwords
RUN echo ""plugins.append('ldap_force_change_password_in_days')"" \
    >> /opt/iredapd/settings.py \
  && echo ""CHANGE_PASSWORD_DAYS = 365"" >> /opt/iredapd/settings.py \
  && echo ""CHANGE_PASSWORD_MESSAGE = 'Please change your password in webmail: https://$HOSTNAME/mail/'"" \
    >> /opt/iredapd/settings.py

WORKDIR /opt

# Remove distr, return `uname` and `hostname`
RUN rm -rf /opt/iredmail /root/.bash_history \
  && rm -f /bin/uname /bin/hostname \
  && mv /bin/uname_ /bin/uname \
  && mv /bin/hostname_ /bin/hostname 

# Open Ports: 
# Apache: 80/tcp, 443/tcp Postfix: 25/tcp, 587/tcp 
# Dovecot: 110/tcp, 143/tcp, 993/tcp, 995/tcp OpenLDAP: 389/tcp, 636/tcp
EXPOSE 80 443 25 587 110 143 993 995 389 636

# Volume for backups
VOLUME /backups

# Start all services
CMD [""/sbin/init"",""2""]
","FROM debian:wheezy
MAINTAINER Semen Pisarev <s.a.pisarev@gmail.com>

ENV DEBIAN_FRONTEND noninteractive
RUN echo ""APT::Install-Recommends 0;"" >> /etc/apt/apt.conf.d/01norecommends \
  && echo ""APT::Install-Suggests 0;"" >> /etc/apt/apt.conf.d/01norecommends

ENV IREDMAIL_VERSION 0.9.2

# TODO: Replace hostname
ENV HOSTNAME mx.phoneyou.net
ENV DOCKER_LDAP_DN dc=phoneyou,dc=net

# Local sources (for speed-up)
COPY ./sources.list.163 /etc/apt/sources.list
# Install some necessary packages
RUN echo 'deb http://inverse.ca/debian wheezy wheezy' > \
    /etc/apt/sources.list.d/00-inverse-ca.list \
  && apt-key adv --keyserver keys.gnupg.net --recv-key 0x810273C4 \
  && apt-get -q update \
  && apt-get install -y -q \
    apt-utils \
  && apt-get install -y -q \
    curl \
    wget \
    bzip2 \
    dialog \
    openssl \
    slapd \
    rsync \
    python-pygments \
    python-ldap \
    rsyslog \
    dovecot-core \
    dovecot-imapd \
    dovecot-ldap \
    dovecot-lmtpd \
    dovecot-managesieved \
    dovecot-mysql \
    dovecot-pop3d \
    dovecot-sieve \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/* \
  && rm -f /etc/apt/sources.list.d/00-inverse-ca.list

# Set working directory
WORKDIR /opt/iredmail

# Copy files, extract iRedMail, remove archive, copy & configure tools
COPY ./files ./  

RUN cp -rl iRedMail-""${IREDMAIL_VERSION}""/* . \
  && rm -rf iRedMail-""${IREDMAIL_VERSION}""* \
  && mkdir -p /opt/itools \
  && cp ./tools/* /opt/itools \
  && mkdir -p /var/vmail/backup \
  && mv ./backup.sh /var/vmail/backup \
  && sed -i 's/dc=phoneyou,dc=net/'""$DOCKER_LDAP_DN""'/' \
    /opt/itools/create_mail_user_OpenLDAP.py

# Fake `uname` and `hostname`
RUN mv /bin/uname /bin/uname_ \
  && mv /bin/hostname /bin/hostname_ \
  && cp -l ./hostname ./uname /bin/

# Set hostname
RUN echo $HOSTNAME > /etc/hostname \
  && echo $HOSTNAME > /etc/mailname \
  && mkdir -p /etc/apache2/ \
  && echo 'ServerName '$HOSTNAME > /etc/apache2/httpd.conf

# Make link to Apache log files
RUN rm -rf /var/www/apache2/ \
  && mkdir -p /var/log/apache2/www/ /var/www/ \
  && ln -s /var/log/apache2/www/ /var/www/apache2 \
  && chown -R www-data:www-data /var/www/ /var/log/apache2/

# Make ClamAV socket file (to avoid installation warning)
RUN touch /tmp/clamd.socket \
  && chmod -Rf 766 /tmp/clamd.socket

# Avoid getty errors in log files
RUN sed -ri 's/^[1-6]:[2-6]{2,4}:.*/#\0/' /etc/inittab

# Enable services startup during install, 
#   run iRedMail installation & remove unneeded, 
#   disable services startup during install
RUN sed -i 's/ 101/ 0/' /usr/sbin/policy-rc.d \
  && IREDMAIL_DEBUG='NO' \
    AUTO_USE_EXISTING_CONFIG_FILE=y \
    AUTO_INSTALL_WITHOUT_CONFIRM=y \
    AUTO_CLEANUP_REMOVE_SENDMAIL=y \
    AUTO_CLEANUP_REMOVE_MOD_PYTHON=y \
    AUTO_CLEANUP_REPLACE_FIREWALL_RULES=n \
    AUTO_CLEANUP_RESTART_IPTABLES=y \
    AUTO_CLEANUP_REPLACE_MYSQL_CONFIG=y \
    AUTO_CLEANUP_RESTART_POSTFIX=n \
    bash iRedMail.sh \
  && apt-get purge -y -q dialog apt-utils \
  && apt-get autoremove -y -q \
  && apt-get clean -y -q \
  && rm -rf /var/lib/apt/lists/* \
  && sed -i 's/ 0/ 101/' /usr/sbin/policy-rc.d

# Process initial CSV
RUN if [ -e mail_users.csv ]; \
    then \
      python /opt/itools/create_mail_user_OpenLDAP.py ./mail_users.csv \
      && mv ./mail_users.csv.ldif ldifs/20_mail_users.ldif; \
    fi

# Run slapd as root
RUN rm -rf /etc/ldap/slapd.d \
  && sed -i 's/openldap/root/g' /etc/default/slapd

# TODO: Replace ldap password (LDAP_ROOTPW)
# Copy initial ldif and add all ldifs to ldap
RUN cp /opt/iredmail/conf/ldap_init.ldif ldifs/00_ldap_init.ldif \
  && service slapd start \
  && for f in ldifs/*.ldif; \
  do \
    ( ldapadd -D 'cn=Manager,'""$DOCKER_LDAP_DN"" -w phoneyou$ldap -f ""$f"" || \
    ldapmodify -v -D 'cn=Manager,'""$DOCKER_LDAP_DN"" -w phoneyou$ldap -f ""$f"" ); \
  done

# Encrypy iRedMail.tips
# TODO: Replace tips password (random)
RUN echo 'YWYxNWY5NTMwZjVmNmNhOTNmZDY1Zj' | \
    openssl enc -in /opt/iredmail/iRedMail.tips -out /opt/iRedMail.tips.enc \
    -e -aes256 -pass stdin

# Schedule backup script
RUN (crontab -l 2>/dev/null; \
  echo ""0   4   *   *   *   /bin/bash /var/vmail/backup/backup.sh"") | \
  crontab -

# Force users to change passwords
RUN echo ""plugins.append('ldap_force_change_password_in_days')"" \
    >> /opt/iredapd/settings.py \
  && echo ""CHANGE_PASSWORD_DAYS = 365"" >> /opt/iredapd/settings.py \
  && echo ""CHANGE_PASSWORD_MESSAGE = 'Please change your password in webmail: https://$HOSTNAME/mail/'"" \
    >> /opt/iredapd/settings.py

WORKDIR /opt

# Remove distr, return `uname` and `hostname`
RUN rm -rf /opt/iredmail /root/.bash_history \
  && rm -f /bin/uname /bin/hostname \
  && mv /bin/uname_ /bin/uname \
  && mv /bin/hostname_ /bin/hostname 

# Open Ports: 
# Apache: 80/tcp, 443/tcp Postfix: 25/tcp, 587/tcp 
# Dovecot: 110/tcp, 143/tcp, 993/tcp, 995/tcp OpenLDAP: 389/tcp, 636/tcp
EXPOSE 80 443 25 587 110 143 993 995 389 636

# Volume for backups
VOLUME /backups

# Start all services
CMD [""/sbin/init"",""2""]
"
69,7ab359c3639d925b641e2e9c6195ddf35acd731b,Bumped source to 20200311-426bedf,"Bumped source to 20200311-426bedf
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200311-865905c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200311-426bedf
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
157,e6c9219191101a714488539ddf04b5f491b8c973,"add python-pip package, install websocket-client pip package","add python-pip package, install websocket-client pip package

useful for the slack client
","FROM       ubuntu:yakkety
MAINTAINER Florian Klink <flokli@flokli.de>

RUN apt-get update && apt-get install -y dirmngr apt-transport-https
RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 11E9DE8848F2B65222AA75B8D1820DB22A11534E
RUN bash -c ""echo 'deb https://weechat.org/ubuntu yakkety main' >/etc/apt/sources.list.d/weechat.list""
RUN bash -c ""echo 'deb-src https://weechat.org/ubuntu yakkety main' >>/etc/apt/sources.list.d/weechat.list""

RUN apt-get update && apt-get install -y \
  weechat weechat-plugins weechat-scripts \
  bitlbee bitlbee-plugin-otr \
  rxvt-unicode-256color

RUN locale-gen en_US.UTF-8
RUN locale-gen de_DE.UTF-8
RUN ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime

ADD bitlbee.conf /etc/bitlbee/bitlbee.conf

ADD run.sh /run.sh
RUN chmod +x /run.sh
CMD [""/run.sh""]
","FROM       ubuntu:yakkety
MAINTAINER Florian Klink <flokli@flokli.de>

RUN apt-get update && apt-get install -y dirmngr apt-transport-https
RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 11E9DE8848F2B65222AA75B8D1820DB22A11534E
RUN bash -c ""echo 'deb https://weechat.org/ubuntu yakkety main' >/etc/apt/sources.list.d/weechat.list""
RUN bash -c ""echo 'deb-src https://weechat.org/ubuntu yakkety main' >>/etc/apt/sources.list.d/weechat.list""

RUN apt-get update && apt-get install -y \
  weechat weechat-plugins weechat-scripts \
  python-pip \
  bitlbee bitlbee-plugin-otr \
  rxvt-unicode-256color

RUN locale-gen en_US.UTF-8
RUN locale-gen de_DE.UTF-8
RUN ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime

ADD bitlbee.conf /etc/bitlbee/bitlbee.conf

RUN pip install websocket-client

ADD run.sh /run.sh
RUN chmod +x /run.sh
CMD [""/run.sh""]
"
2135,5c7fa385590235d2911fda6c821bd9c0b1c15c9d,Bump debian from 11.3-slim to 11.4-slim in /dev/ci/docker_linux (#107865),"Bump debian from 11.3-slim to 11.4-slim in /dev/ci/docker_linux (#107865)

","# Flutter (https://flutter.dev) Development Environment for Linux
# ===============================================================
#
# This environment passes all Linux Flutter Doctor checks and is sufficient
# for building Android applications and running Flutter tests.
#
# To build iOS applications, a Mac development environment is necessary.
#
# This includes applications and sdks that are needed only by the CI system
# for performing pushes to production, and so this image is quite a bit larger
# than strictly needed for just building Flutter apps.

# Last manual update 2021-09-24 (changing this comment will re-build image)

FROM debian@sha256:f6957458017ec31c4e325a76f39d6323c4c21b0e31572efa006baa927a160891
MAINTAINER Flutter Developers <flutter-dev@googlegroups.com>

RUN apt-get update -y && \
  apt-get upgrade -y

# Install basics
RUN apt-get install -y --no-install-recommends \
  git \
  wget \
  curl \
  zip \
  unzip \
  apt-transport-https \
  ca-certificates \
  gnupg

# Add repo for chrome stable
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
RUN echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | \
    tee /etc/apt/sources.list.d/google-chrome.list

# Add repo for gcloud sdk and install it
RUN echo ""deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main"" | \
    tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
    apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

RUN apt-get update && apt-get install -y google-cloud-sdk && \
    gcloud config set core/disable_usage_reporting true && \
    gcloud config set component_manager/disable_update_check true

# Add repo for OpenJDK 8 from JFrog.io
RUN wget -q -O - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -
RUN echo 'deb [arch=amd64] https://adoptopenjdk.jfrog.io/adoptopenjdk/deb bullseye main' | \
    tee /etc/apt/sources.list.d/adoptopenjdk.list

# Install the dependencies needed for the rest of the build.
RUN apt-get update && apt-get install -y --no-install-recommends \
  adoptopenjdk-8-hotspot \
  build-essential \
  default-jdk-headless \
  gcc \
  google-chrome-stable \
  lib32stdc++6 \
  libglu1-mesa \
  libstdc++6 \
  locales \
  nodejs \
  npm \
  ruby \
  ruby-dev && \
  apt-get clean

ENV JAVA_HOME=""/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64""

# Install the Android SDK Dependency.
ENV ANDROID_SDK_URL=""https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip""
ENV ANDROID_TOOLS_ROOT=""/opt/android_sdk""
RUN mkdir -p ""${ANDROID_TOOLS_ROOT}""
RUN mkdir -p ~/.android
# Silence warning.
RUN touch ~/.android/repositories.cfg
ENV ANDROID_SDK_ARCHIVE=""${ANDROID_TOOLS_ROOT}/archive""
RUN wget --progress=dot:giga ""${ANDROID_SDK_URL}"" -O ""${ANDROID_SDK_ARCHIVE}""
RUN unzip -q -d ""${ANDROID_TOOLS_ROOT}"" ""${ANDROID_SDK_ARCHIVE}""
# Suppressing output of sdkmanager to keep log size down
# (it prints install progress WAY too often).
RUN yes ""y"" | ""${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager"" ""tools"" > /dev/null
RUN yes ""y"" | ""${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager"" ""build-tools;28.0.3"" > /dev/null
RUN yes ""y"" | ""${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager"" ""platforms;android-30"" > /dev/null
RUN yes ""y"" | ""${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager"" ""platform-tools"" > /dev/null
RUN yes ""y"" | ""${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager"" ""cmdline-tools;latest"" > /dev/null
RUN yes ""y"" | ""${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager"" ""extras;android;m2repository"" > /dev/null
RUN yes ""y"" | ""${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager"" ""extras;google;m2repository"" > /dev/null
RUN yes ""y"" | ""${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager"" ""patcher;v4"" > /dev/null
RUN rm ""${ANDROID_SDK_ARCHIVE}""
ENV PATH=""${ANDROID_TOOLS_ROOT}/tools:${PATH}""
ENV PATH=""${ANDROID_TOOLS_ROOT}/tools/bin:${PATH}""
# Silence warnings when accepting android licenses.
RUN mkdir -p ~/.android
RUN touch ~/.android/repositories.cfg

# Add npm to path.
ENV PATH=""/usr/bin:${PATH}""

# Set locale to en_US
RUN locale-gen en_US ""en_US.UTF-8"" && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales
ENV LANG en_US.UTF-8

# Install dependencies for desktop flutter run
RUN apt-get install -y --no-install-recommends \
  clang \
  cmake \
  libgtk-3-dev \
  ninja-build \
pkg-config \
x11-xserver-utils \
xauth \
xvfb && \
  apt-get upgrade -y --no-install-recommends && \
  apt-get clean
",
342,89a9660bad6598b1529e3162a04dd07c80203dd0,Add bird deb to dockerfile.,"Add bird deb to dockerfile.
","FROM fastlynet101/base
MAINTAINER dbarroso@fastly.com

LABEL fastly.net101.name=bird

WORKDIR /root

RUN dpkg -i ./bird_1.6.3-1+xenial+1_amd64.deb
RUN apt-get install -y inotify-tools netcat
RUN mkdir /run/bird

COPY ./run.sh /bin/run.sh
COPY ./birdwatcher /bin/birdwatcher
COPY ./webserver /bin/webserver

ENTRYPOINT [""/bin/run.sh""]
","FROM fastlynet101/base
MAINTAINER dbarroso@fastly.com

LABEL fastly.net101.name=bird

WORKDIR /root

ADD bird_1.6.3-1+xenial+1_amd64.deb /
RUN DEBIAN_FRONTEND=noninteractive dpkg -i /bird_1.6.3-1+xenial+1_amd64.deb
RUN apt-get install -y inotify-tools netcat
RUN mkdir /run/bird

COPY ./run.sh /bin/run.sh
COPY ./birdwatcher /bin/birdwatcher
COPY ./webserver /bin/webserver

ENTRYPOINT [""/bin/run.sh""]
"
2325,dc1a5c687b1ec67581b535fe2c48b71eb431d4d4,Bumped source to 20201214-8c2fdda,"Bumped source to 20201214-8c2fdda
","FROM docker.pkg.github.com/dock0/arch/arch:20201214-b82e33b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2284,35ad5ec9de7041f4eacbb7b68e711a1524ef6d5b,bump shiny to 1.4.4,"bump shiny to 1.4.4

update shiny md5 hash
","
# docker build --no-cache -t math-server:latest --build-arg http_proxy=""http://proxy:8080"" --build-arg https_proxy=""http://proxy:8080"" .

# In case you're building the image behind a proxy, use
# docker build --no-cache -t math-server:latest --build-arg http_proxy=""http://proxy:8080"" --build-arg https_proxy=""http://proxy:8080"" .

# 8787 for RStudio
# 8000 for Jupyter

# # docker run -d -p 8787:8787 -p 8000:8000 --name ms1 math-server

FROM centos:7

MAINTAINER felipenoris <felipenoris@users.noreply.github.com>

WORKDIR /root

ENV JULIA_PKGDIR /usr/local/julia/share/julia/site

RUN echo ""export PATH=/usr/local/sbin:/usr/local/bin:${PATH}"" >> /etc/profile.d/local-bin.sh \
&& echo ""export CPATH=/usr/include/glpk"" >> /etc/profile.d/glpk-include.sh \
&& source /etc/profile

RUN yum update -y && yum install -y epel-release && yum clean all

RUN yum update -y && yum install -y \
p7zip \
p7zip-plugins \
bison \
bzip2 \
bzip2-devel \
cmake \
curl-devel \
expat-devel \
flex \
gcc \
gcc-c++ \
gcc-gfortran \
gettext-devel \
glibc-devel \
java-1.8.0-openjdk-devel \
lynx \
libcurl \ 
libcurl-devel \
libedit-devel libffi-devel \
libgcc \
libstdc++-static \
m4 \
make \
man \
nano \
nload \
htop \
openssl \
openssl098e \
openssl-devel \
patch \
perl-ExtUtils-MakeMaker \
svn \
unzip \
valgrind \
sqlite \
sqlite-devel \
vim \
    wget \
zlib \
zlib-devel \
zip \
    && yum clean all

# GIT
# http://tecadmin.net/install-git-2-0-on-centos-rhel-fedora/#
ENV GIT_VER 2.9.3

RUN wget https://www.kernel.org/pub/software/scm/git/git-$GIT_VER.tar.gz \
&& tar xf git-$GIT_VER.tar.gz && cd git-$GIT_VER \
&& make -j""$(nproc --all)"" prefix=/usr/local all \
&& make prefix=/usr/local -j""$(nproc --all)"" install \
&& cd .. && rm -f git-$GIT_VER.tar.gz && rm -rf git-$GIT_VER

# Makes git use https by default
RUN git config --global url.""https://"".insteadOf git://

# llvm needs CMake 2.8.12.2 or higher
# https://cmake.org/download/
ENV CMAKE_VER_MAJ 3.6
ENV CMAKE_VER_MIN .1
ENV CMAKE_VER $CMAKE_VER_MAJ$CMAKE_VER_MIN

RUN wget https://cmake.org/files/v$CMAKE_VER_MAJ/cmake-$CMAKE_VER.tar.gz \
&& tar xf cmake-$CMAKE_VER.tar.gz && cd cmake-$CMAKE_VER \
&& ./bootstrap && make -j""$(nproc --all)"" && make -j""$(nproc --all)"" install \
&& cd .. && rm -rf cmake-$CMAKE_VER && rm -f cmake-$CMAKE_VER.tar.gz \
&& echo ""export CMAKE_ROOT=/usr/local/share/cmake-$CMAKE_VER_MAJ"" > /etc/profile.d/cmake-root.sh \
&& source /etc/profile

# Python 2
# https://github.com/h2oai/h2o-2/wiki/Installing-python-2.7-on-centos-6.3.-Follow-this-sequence-exactly-for-centos-machine-only
ENV PYTHON2_VER_MAJ 2.7
ENV PYTHON2_VER_MIN .11
ENV PYTHON2_VER $PYTHON2_VER_MAJ$PYTHON2_VER_MIN

RUN wget https://www.python.org/ftp/python/$PYTHON2_VER/Python-$PYTHON2_VER.tar.xz \
&& tar xf Python-$PYTHON2_VER.tar.xz \
&& cd Python-$PYTHON2_VER \
&& ./configure --prefix=/usr/local/python$PYTHON2_VER_MAJ --enable-shared --with-cxx-main=/usr/bin/g++ \
&& make -j""$(nproc --all)"" \
&& make -j""$(nproc --all)"" altinstall \
&& echo ""/usr/local/lib"" > /etc/ld.so.conf.d/usrLocalLib.conf \
&& ldconfig \
&& cd .. && rm -f Python-$PYTHON2_VER.tar.xz && rm -rf Python-$PYTHON2_VER

# pip for Python 2
RUN curl -O https://bootstrap.pypa.io/get-pip.py \
&& /usr/local/python$PYTHON2_VER_MAJ/bin/python$PYTHON2_VER_MAJ get-pip.py \
&& rm -f get-pip.py

# Python 3
ENV PYTHON3_VER_MAJ 3.5
ENV PYTHON3_VER_MIN .1
ENV PYTHON3_VER $PYTHON3_VER_MAJ$PYTHON3_VER_MIN

RUN wget https://www.python.org/ftp/python/$PYTHON3_VER/Python-$PYTHON3_VER.tar.xz \
&& tar xf Python-$PYTHON3_VER.tar.xz && cd Python-$PYTHON3_VER \
&& ./configure --prefix=/usr/local --enable-shared --with-cxx-main=/usr/bin/g++ \
&& echo ""zlib zlibmodule.c -I\$(prefix)/include -L\$(exec_prefix)/lib -lz"" >> ./Modules/Setup \
&& make -j""$(nproc --all)"" \
&& make -j""$(nproc --all)"" altinstall \
&& ln -s /usr/local/bin/python$PYTHON3_VER_MAJ /usr/local/bin/python3 \
&& ln -s /usr/local/bin/pip$PYTHON3_VER_MAJ /usr/local/bin/pip3 \
&& ldconfig \
&& cd .. && rm -f Python-$PYTHON3_VER.tar.xz && rm -rf Python-$PYTHON3_VER

# Upgrade pip
# https://pip.pypa.io/en/stable/installing/#upgrading-pip
RUN pip2 install -U pip

RUN pip3 install -U pip

# LLVM deps
# TODO: check if python-devel is needed
RUN yum -y install \
libedit-devel \
libffi-devel \
swig \
python-devel \
&& yum clean all

# LLVM
# Clang /tools/clang
# CompilerRT /projects/compiler-rt
# libc++ /projects/libcxx
# libc++abi /projects/libcxxabi
# lldb /tools/lldb

ENV LLVM_VER 3.7.1

RUN wget http://llvm.org/releases/$LLVM_VER/llvm-$LLVM_VER.src.tar.xz \
&& wget http://llvm.org/releases/$LLVM_VER/cfe-$LLVM_VER.src.tar.xz \
&& wget http://llvm.org/releases/$LLVM_VER/compiler-rt-$LLVM_VER.src.tar.xz \
&& wget http://llvm.org/releases/$LLVM_VER/libcxx-$LLVM_VER.src.tar.xz \
&& wget http://llvm.org/releases/$LLVM_VER/libcxxabi-$LLVM_VER.src.tar.xz \
&& wget http://llvm.org/releases/$LLVM_VER/lldb-$LLVM_VER.src.tar.xz \
&& mkdir llvm \
&& tar xf llvm-$LLVM_VER.src.tar.xz -C llvm --strip-components=1 \
&& mkdir llvm/tools/clang \
&& tar xf cfe-$LLVM_VER.src.tar.xz -C llvm/tools/clang --strip-components=1 \
&& mkdir llvm/projects/compiler-rt \
&& tar xf compiler-rt-$LLVM_VER.src.tar.xz -C llvm/projects/compiler-rt --strip-components=1 \
&& mkdir llvm/projects/libcxx \
&& tar xf libcxx-$LLVM_VER.src.tar.xz -C llvm/projects/libcxx --strip-components=1 \
&& mkdir llvm/projects/libcxxabi \
&& tar xf libcxxabi-$LLVM_VER.src.tar.xz -C llvm/projects/libcxxabi --strip-components=1 \
&& mkdir llvm/tools/lldb \
&& tar xf lldb-$LLVM_VER.src.tar.xz -C llvm/tools/lldb --strip-components=1 \
&& rm -f *tar.xz

# http://llvm.org/docs/CMake.html
# find / -iname 'ffi.h'
# cmake -G ""Unix Makefiles"" -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_ENABLE_PIC=ON -DLLVM_ENABLE_FFI=ON -DFFI_INCLUDE_DIR=/usr/lib64/libffi-3.0.5/include  ../llvm
RUN mkdir ~/llvm_build \
&& cd ~/llvm_build \
&& ../llvm/configure --enable-shared

RUN cd ~/llvm_build \
&& make ENABLE_OPTIMIZED=1 DISABLE_ASSERTIONS=1 -j""$(nproc --all)"" \
&& make -j""$(nproc --all)"" install \
&& ln -s /usr/local/lib/libLLVM-$LLVM_VER.so /usr/local/lib/libLLVM.so \
&& ldconfig \
&& cd .. && rm -rf llvm_build && rm -rf llvm

# node
ENV NODE_VER 6.3.1

RUN wget https://github.com/nodejs/node/archive/v$NODE_VER.tar.gz \
&& tar xf v$NODE_VER.tar.gz && cd node-$NODE_VER \
&& ./configure \
&& make -j""$(nproc --all)"" \
&& make -j""$(nproc --all)"" install \
&& cd .. && rm -f v$NODE_VER.tar.gz && rm -rf node-$NODE_VER

# reinstall npm with the lastest version
RUN npm cache clean \
&& curl -L https://npmjs.org/install.sh | sh

# Makes npm work behind proxy if http_proxy variable is set
RUN npm config set proxy ${http_proxy} \
&& npm config set https-proxy ${https_proxy} \
&& npm config set registry http://registry.npmjs.org/ \
&& npm set strict-ssl false

# TeX
RUN yum -y install perl-Tk perl-Digest-MD5 && yum clean all

ADD texlive.profile texlive.profile

# non-interactive http://www.tug.org/pipermail/tex-live/2008-June/016323.html
RUN wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz \
&& mkdir install-tl \
&& tar xf install-tl-unx.tar.gz -C install-tl --strip-components=1 \
&& ./install-tl/install-tl -profile ./texlive.profile \
&& rm -rf install-tl && rm -f install-tl-unx.tar.gz

# TODO: replace hardcoded 2015
RUN echo ""export PATH=/usr/local/texlive/2015/bin/x86_64-linux:${PATH}"" >> /etc/profile.d/local-bin.sh \
&& source /etc/profile

# R
RUN yum -y install \
lapack-devel \
blas-devel \
libicu-devel \
unixodbc-devel \
QuantLib \
QuantLib-devel \
boost \
boost-devel \
libxml2 \
libxml2-devel \
R \
    && yum clean all

# Set default CRAN Mirror
RUN echo 'options(repos = c(CRAN=""http://www.vps.fmvz.usp.br/CRAN/""))' >> /usr/lib64/R/library/base/R/Rprofile

# RStudio
ENV RSTUDIO_VER 0.99.902

RUN wget https://download2.rstudio.org/rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \
&& echo ""aa018deb6c93501caa60e61d0339b338  rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm"" > RSTUDIOMD5 \
&& RESULT=$(md5sum -c RSTUDIOMD5) \
&& echo ${RESULT} > ~/check-rstudio-md5.txt \
&& yum -y install --nogpgcheck rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \
    && yum clean all \
&& rm -f rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm && rm -f RSTUDIOMD5

# Libreoffice
ENV LIBREOFFICE_VER 5.2.0
ENV LIBREOFFICE_VER_MINOR .4

RUN wget http://mirror.nbtelecom.com.br/tdf/libreoffice/stable/$LIBREOFFICE_VER/rpm/x86_64/LibreOffice_${LIBREOFFICE_VER}_Linux_x86-64_rpm.tar.gz \
&& echo ""90c9b7b8aa6799ca1140a8d06c874838  LibreOffice_${LIBREOFFICE_VER}_Linux_x86-64_rpm.tar.gz"" > LIBREOFFICEMD5 \
&& RESULT=$(md5sum -c LIBREOFFICEMD5) \
&& echo ${RESULT} > ~/check-libreoffice-md5.txt \
&& tar xf LibreOffice_${LIBREOFFICE_VER}_Linux_x86-64_rpm.tar.gz \
&& cd LibreOffice_${LIBREOFFICE_VER}${LIBREOFFICE_VER_MINOR}_Linux_x86-64_rpm/RPMS \
&& yum -y install *.rpm \
    && yum clean all \
&& cd && rm -f LIBREOFFICEMD5 && rm -f LibreOffice_${LIBREOFFICE_VER}_Linux_x86-64_rpm.tar.gz \
&& rm -rf LibreOffice_${LIBREOFFICE_VER}${LIBREOFFICE_VER_MINOR}_Linux_x86-64_rpm

# Shiny
ENV SHINY_VER 1.4.2.786

RUN R -e 'install.packages(""shiny"")' \
&& wget https://download3.rstudio.org/centos5.9/x86_64/shiny-server-$SHINY_VER-rh5-x86_64.rpm \
&& echo ""45160b08eed65c89e0a9d03c58eba595  shiny-server-$SHINY_VER-rh5-x86_64.rpm"" > SHINYSERVERMD5 \
&& RESULT=$(md5sum -c SHINYSERVERMD5) \
&& echo ${RESULT} > ~/check-shiny-server-md5.txt \
&& yum -y install --nogpgcheck shiny-server-$SHINY_VER-rh5-x86_64.rpm \
    && yum clean all \
&& cd && rm -f SHINYSERVERMD5 && rm -f shiny-server-$SHINY_VER-rh5-x86_64.rpm

# Julia
ENV JULIA_VER_MAJ 0.4
ENV JULIA_VER_MIN .6
ENV JULIA_VER $JULIA_VER_MAJ$JULIA_VER_MIN

RUN wget https://github.com/JuliaLang/julia/releases/download/v$JULIA_VER/julia-$JULIA_VER-full.tar.gz \
        && tar xf julia-$JULIA_VER-full.tar.gz

ADD julia-Make.user julia-$JULIA_VER/Make.user

ADD cpuid cpuid

RUN cd cpuid && make

RUN cpuid/cpuid >> julia-$JULIA_VER/Make.user

RUN cd julia-$JULIA_VER \
&& make -j""$(nproc --all)"" \
&& make -j""$(nproc --all)"" install \
&& cd .. && rm -rf julia-$JULIA_VER && rm -f julia-$JULIA_VER-full.tar.gz \
&& ln -s /usr/local/julia/bin/julia /usr/local/bin/julia

# Init package folder on root's home folder
RUN julia -e 'Pkg.init()'

# Jupyter
# Add python2.7 kernel: https://github.com/jupyter/jupyter/issues/71
RUN pip2 install \
IPython \
notebook \
ipykernel \
ipyparallel \
enum34 \
&& /usr/local/python2.7/bin/python2.7 -m ipykernel install

RUN pip3 install \
IPython \
jupyterhub \
notebook \
ipykernel \
ipyparallel \
enum34 \
&& python3 -m ipykernel install

RUN npm install -g configurable-http-proxy

# ipywidgets not working for now...
# ipywidgets
# https://ipywidgets.readthedocs.org/en/latest/dev_install.html

#RUN git clone https://github.com/ipython/ipywidgets
#RUN wget https://github.com/ipython/ipywidgets/archive/4.1.1.tar.gz \
#&& tar xf 4.1.1.tar.gz

#RUN cd ipywidgets-4.1.1 \
#&& pip2 install -v -e . \
#&& pip3 install -v -e . \
#&& cd jupyter-js-widgets \
# && npm install \
# && cd ../widgetsnbextension \
# && npm install \
# && npm run update:widgets \
# && pip2 install -v -e . \
# && pip3 install -v -e .
 
# RUN rm -rf ipywidgets-4.1.1 && rm -f 4.1.1.tar.gz

# Support for other languages
# https://github.com/ipython/ipython/wiki/IPython-kernels-for-other-languages

# Add Julia kernel
# https://github.com/JuliaLang/IJulia.jl
# https://github.com/JuliaLang/IJulia.jl/issues/341
RUN julia -e 'Pkg.add(""IJulia""); using IJulia'

# registers global kernel
RUN cp -r ~/.local/share/jupyter/kernels/julia-$JULIA_VER_MAJ /usr/local/share/jupyter/kernels

# rewrite julia's kernel configuration
ADD julia-kernel.json /usr/local/share/jupyter/kernels/julia-$JULIA_VER_MAJ/kernel.json

# R
# http://irkernel.github.io/installation/
RUN yum -y install czmq-devel && yum clean all

RUN R -e 'install.packages(c(""pbdZMQ"", ""devtools""))' \
&& R -e 'devtools::install_github(paste0(""IRkernel/"", c(""repr"", ""IRdisplay"", ""IRkernel"")))'

# Optional configuration file for svn
ADD svn-servers /etc/subversion/servers

# coin SYMPHONY
# https://projects.coin-or.org/SYMPHONY
ENV SYMPHONY_VER 5.6

RUN git clone --branch=stable/$SYMPHONY_VER https://github.com/coin-or/SYMPHONY SYMPHONY-$SYMPHONY_VER \
&& cd SYMPHONY-$SYMPHONY_VER \
&& git clone --branch=stable/0.8 https://github.com/coin-or-tools/BuildTools/ \
&& chmod u+x ./BuildTools/get.dependencies.sh \
&& ./BuildTools/get.dependencies.sh fetch --no-third-party \
&& ./configure \
&& make -j""$(nproc --all)"" \
&& make -j""$(nproc --all)"" install \
&& cd .. && rm -rf SYMPHONY-$SYMPHONY_VER

#################
## LIBS
#################

RUN yum -y install \
freetype-devel \
glpk-devel \
hdf5 \
lcms2-devel \
libjpeg-devel \
libpng \
libpng-devel \
libtiff-devel \
libwebp-devel \
libxslt-devel \
libxml2-devel \
libzip-devel \
pandoc \
tcl-devel \
tk-devel \
    && yum clean all

ADD libs libs

RUN cd libs && make && ./install_libs

RUN cd libs && source ./install_JSAnimation.sh

RUN cd libs && source ./install_excel_readers.sh

# http://ipyparallel.readthedocs.org/en/latest/
RUN ipcluster nbextension enable

####################
## Services
####################

# 8787 for RStudio
# 8000 for Jupyter
EXPOSE 8787 8000

CMD /usr/sbin/sssd && /usr/lib/rstudio-server/bin/rserver && jupyterhub --no-ssl
",
336,754b298aa221880457553f715846183812ca2c74,Update Dockerfile,"Update Dockerfile
","FROM ubuntu
MAINTAINER Justin Plock <justin@plock.net>

RUN echo ""deb http://archive.ubuntu.com/ubuntu precise main universe"" > /etc/apt/sources.list
RUN apt-get update
RUN apt-get upgrade -y

RUN apt-get install -y -q wget openjdk-7-jre-headless
RUN mkdir -p /opt/snowizard /var/log/snowizard
RUN wget -q -O /opt/snowizard/snowizard.jar http://repo.maven.apache.org/maven2/com/ge/snowizard/snowizard-service/1.3.0/snowizard-service-1.3.0.jar

ADD ./snowizard-service/snowizard.upstart /etc/init/snowizard.conf
ADD ./snowizard-service/snowizard.yml /etc/snowizard.yml
ADD ./snowizard-service/snowizard.jvm.conf /etc/snowizard.jvm.conf

ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64

# Snowizard port
EXPOSE 8080
# Administration port
EXPOSE 8180

CMD /usr/bin/java -d64 -server -jar /opt/snowizard/snowizard.jar server /etc/snowizard.yml
","FROM debian:jessie
MAINTAINER Justin Plock <justin@plock.net>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && apt-get install -y -q wget openjdk-7-jre-headless
RUN mkdir -p /opt/snowizard /var/log/snowizard
RUN wget -q -O /opt/snowizard/snowizard.jar http://repo.maven.apache.org/maven2/com/ge/snowizard/snowizard-application/1.4.0/snowizard-application-1.4.0.jar

ADD ./snowizard-service/snowizard.upstart /etc/init/snowizard.conf
ADD ./snowizard-service/snowizard.yml /etc/snowizard.yml
ADD ./snowizard-service/snowizard.jvm.conf /etc/snowizard.jvm.conf

ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64

# Snowizard port
EXPOSE 8080
# Administration port
EXPOSE 8180

CMD /usr/bin/java -d64 -server -jar /opt/snowizard/snowizard.jar server /etc/snowizard.yml
"
187,cb4816475983c013f6d4bf4a8b85cc558e938f09,Bumped source to 20201210-e8d1594,"Bumped source to 20201210-e8d1594
",,
2182,30510e5c137abca1cf822921dd6277b43cd68e7f,Bump to Postfixadmin v3.0,"Bump to Postfixadmin v3.0
","FROM alpine
MAINTAINER Konstantin Jakobi <konstantin.jakobi@gmail.com>

ENV VERSION=2.93

EXPOSE 80

RUN apk add --no-cache bash curl dovecot mysql-client php-imap php-mysqli \
 && curl --location https://downloads.sourceforge.net/project/postfixadmin/postfixadmin/postfixadmin-${VERSION}/postfixadmin-${VERSION}.tar.gz | tar xzf - \
 && mv postfixadmin* /www \
 && mkdir /config

COPY config.php php.ini run.sh /
CMD /run.sh
",
393,84472153dacd449ae661acb55336c950fec05029,Bumped source to 20200831-140ca1d,"Bumped source to 20200831-140ca1d
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200831-24f76e7
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200831-140ca1d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
237,a05ffc658881fd7122ac2d772fa8f1abc64d13b8,Bumped source to 20200402-2cf0be5,"Bumped source to 20200402-2cf0be5
","FROM docker.pkg.github.com/dock0/arch/arch:20200402-3236609
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200402-2cf0be5
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2272,b258aa7c08677ff9d5089f98f6d3c44e7ffdefac,Bumped source to 20201001-e90cd1b,"Bumped source to 20201001-e90cd1b
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201001-7ceb967
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
227,991cad469a3df54802ef8cc8d81f5e95386fcf0e,add ssh client for git ssh access,"add ssh client for git ssh access
","FROM alpine:3.4
MAINTAINER G.J.R. Timmer <gjr.timmer@gmail.com>

ARG BUILD_DATE
ARG VCS_REF

LABEL \
nl.timmertech.build-date=${BUILD_DATE} \
nl.timmertech.name=alpine-sdk \
nl.timmertech.vendor=timmertech.nl \
nl.timmertech.vcs-url=""https://github.com/GJRTimmer/docker-alpine-sdk.git"" \
nl.timmertech.vcs-ref=${VCS_REF} \
nl.timmertech.license=MIT

RUN echo 'http://nl.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories && \
echo 'http://nl.alpinelinux.org/alpine/edge/community' >> /etc/apk/repositories && \
echo 'http://nl.alpinelinux.org/alpine/edge/testing' >> /etc/apk/repositories && \
apk upgrade --update-cache --no-cache --available && \
apk add --update --no-cache \
bash \
bash-completion \
ca-certificates \
shadow \
wget \
curl \
git \
alpine-sdk \
readline && \
adduser -D -s /bin/bash -G abuild apk && \
passwd --delete apk && \
echo ""apk ALL=(ALL) NOPASSWD: ALL"" > /etc/sudoers.d/apk && \
chmod 600 /etc/sudoers.d/apk && \
mkdir -p /var/cache/distfiles && \
chgrp abuild /var/cache/distfiles && \
chmod g+w /var/cache/distfiles && \
chown -R apk:abuild /var/cache/distfiles

COPY ./init /init
VOLUME [""/home/apk/data""]
CMD /init
","FROM alpine:3.4
MAINTAINER G.J.R. Timmer <gjr.timmer@gmail.com>

ARG BUILD_DATE
ARG VCS_REF

LABEL \
nl.timmertech.build-date=${BUILD_DATE} \
nl.timmertech.name=alpine-sdk \
nl.timmertech.vendor=timmertech.nl \
nl.timmertech.vcs-url=""https://github.com/GJRTimmer/docker-alpine-sdk.git"" \
nl.timmertech.vcs-ref=${VCS_REF} \
nl.timmertech.license=MIT

RUN echo 'http://nl.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories && \
echo 'http://nl.alpinelinux.org/alpine/edge/community' >> /etc/apk/repositories && \
echo 'http://nl.alpinelinux.org/alpine/edge/testing' >> /etc/apk/repositories && \
apk upgrade --update-cache --no-cache --available && \
apk add --update --no-cache \
bash \
bash-completion \
ca-certificates \
shadow \
openssh-client \
wget \
curl \
git \
alpine-sdk \
readline && \
adduser -D -s /bin/bash -G abuild apk && \
passwd --delete apk && \
echo ""apk ALL=(ALL) NOPASSWD: ALL"" > /etc/sudoers.d/apk && \
chmod 600 /etc/sudoers.d/apk && \
mkdir -p /var/cache/distfiles && \
chgrp abuild /var/cache/distfiles && \
chmod g+w /var/cache/distfiles && \
chown -R apk:abuild /var/cache/distfiles

COPY ./init /init
VOLUME [""/home/apk/data""]
CMD /init
"
135,e93e1b76ec79a2195c2b6e53263478dbe9ea1c41,Update Dockerfile to Rails 5.0.0,"Update Dockerfile to Rails 5.0.0
","FROM rails:4.2.6
MAINTAINER Davide Bove <me@davidebove.com>

ADD ./src /code
WORKDIR /code
ENV BUNDLE_PATH /box

CMD /bin/bash
","FROM rails:5.0.0
MAINTAINER Davide Bove <me@davidebove.com>

ADD ./src /code
WORKDIR /code
ENV BUNDLE_PATH /box

CMD [""/bin/bash""]
"
167,b88c4b43df7b149aff601c9f43cdff01f6cedac2,Bumped source to 20210719-5595c72,"Bumped source to 20210719-5595c72
","FROM docker.pkg.github.com/dock0/arch/arch:20210719-e784547
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210719-5595c72
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
141,12bcf2bedcc6a83102aec2006b18866580fc4126,Update the base image,"Update the base image
","FROM jedisct1/base-dev-rust-nightly:c44316d4a1ad0fe01ae366e163993aa3980c755f
MAINTAINER Frank Denis
ENV SERIAL 1

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get install -y \
    libsnappy-dev

ENV LIBRESSL_VERSION 2.2.5
ENV LIBRESSL_SHA256 e3caded0469d8dc64f4ca2fe8e499ada4dd014e84d1c5a71818d39e54e6c914b
ENV LIBRESSL_DOWNLOAD_URL http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${LIBRESSL_VERSION}.tar.gz

RUN set -x && \
    mkdir -p /tmp/src && \
    cd /tmp/src && \
    curl -sSL $LIBRESSL_DOWNLOAD_URL -o libressl.tar.gz && \
    echo ""${LIBRESSL_SHA256} *libressl.tar.gz"" | sha256sum -c - && \
    tar xzf libressl.tar.gz && \
    rm -f libressl.tar.gz && \
    cd libressl-${LIBRESSL_VERSION} && \
    ./configure --disable-shared --with-pic --disable-dependency-tracking --prefix=/opt/libressl && \
    make check && make install && \
    rm -fr /opt/libressl/share/man && \
    echo /opt/libressl/lib > /etc/ld.so.conf.d/libressl.conf && ldconfig && \
    rm -fr /tmp/*

ENV OPENSSL_LIB_DIR=/opt/libressl/lib
ENV OPENSSL_INCLUDE_DIR=/opt/libressl/include

RUN set -x && \
    cd /tmp && \
    git clone https://github.com/jedisct1/flowgger.git && \
    cd flowgger && \
    cargo build --release --features='ecdh coroutines' && \
    mkdir -p /opt/flowgger/etc /opt/flowgger/bin && \
    strip target/release/flowgger && \
    mv target/release/flowgger /opt/flowgger/bin/ && \
    rm -fr /tmp/flowgger

COPY flowgger.sh /etc/service/flowgger/run

EXPOSE 6514

ENTRYPOINT [""/sbin/my_init""]
","FROM jedisct1/base-dev-rust-nightly:34b4e66736a0fb65235feadbb5178d42bd09ed67
MAINTAINER Frank Denis
ENV SERIAL 1

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get install -y \
    libsnappy-dev

ENV LIBRESSL_VERSION 2.2.5
ENV LIBRESSL_SHA256 e3caded0469d8dc64f4ca2fe8e499ada4dd014e84d1c5a71818d39e54e6c914b
ENV LIBRESSL_DOWNLOAD_URL http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${LIBRESSL_VERSION}.tar.gz

RUN set -x && \
    mkdir -p /tmp/src && \
    cd /tmp/src && \
    curl -sSL $LIBRESSL_DOWNLOAD_URL -o libressl.tar.gz && \
    echo ""${LIBRESSL_SHA256} *libressl.tar.gz"" | sha256sum -c - && \
    tar xzf libressl.tar.gz && \
    rm -f libressl.tar.gz && \
    cd libressl-${LIBRESSL_VERSION} && \
    ./configure --disable-shared --with-pic --disable-dependency-tracking --prefix=/opt/libressl && \
    make check && make install && \
    rm -fr /opt/libressl/share/man && \
    echo /opt/libressl/lib > /etc/ld.so.conf.d/libressl.conf && ldconfig && \
    rm -fr /tmp/*

ENV OPENSSL_LIB_DIR=/opt/libressl/lib
ENV OPENSSL_INCLUDE_DIR=/opt/libressl/include

RUN set -x && \
    cd /tmp && \
    git clone https://github.com/jedisct1/flowgger.git && \
    cd flowgger && \
    cargo build --release --features='ecdh coroutines' && \
    mkdir -p /opt/flowgger/etc /opt/flowgger/bin && \
    strip target/release/flowgger && \
    mv target/release/flowgger /opt/flowgger/bin/ && \
    rm -fr /tmp/flowgger

COPY flowgger.sh /etc/service/flowgger/run

EXPOSE 6514

ENTRYPOINT [""/sbin/my_init""]
"
224,7855d3a05d1fa1f7ab96ee6ddccd66d5541fbf03,change confd binary url to get the version with ssl/tls memory problem fixed,"change confd binary url to get the version with ssl/tls memory problem fixed
","FROM salamandra/etcd

ADD https://github.com/kelseyhightower/confd/releases/download/v0.6.0-alpha3/confd-0.6.0-alpha3-linux-amd64 /usr/local/bin/confd
RUN chmod 0755 /usr/local/bin/confd
RUN mkdir /etc/confd/conf.d/ -p
RUN mkdir /etc/confd/templates/ -p
","FROM salamandra/etcd

# ADD https://github.com/kelseyhightower/confd/releases/download/v0.6.0-alpha3/confd-0.6.0-alpha3-linux-amd64 /usr/local/bin/confd
ADD https://github.com/ricardosasilva/confd/releases/download/v0.6.0-alpha4/confd-0.6.0-alpha4-linux-amd64 /usr/local/bin/confd
RUN chmod 0755 /usr/local/bin/confd
RUN mkdir /etc/confd/conf.d/ -p
RUN mkdir /etc/confd/templates/ -p
"
2253,f60c564e9500fd38c11ec3a8953742c87163843e,version updated,"version updated
","FROM airhacks/java
LABEL maintainer=""Adam Bien, adam-bien.com"" description=""Kibana""
ENV INSTALL_DIR kibana
RUN mkdir ${INSTALL_DIR}
RUN curl https://artifacts.elastic.co/downloads/kibana/kibana-6.0.1-linux-x86_64.tar.gz | tar xvz -C ${INSTALL_DIR} --strip-components=1
ENTRYPOINT ${INSTALL_DIR}/bin/kibana
EXPOSE 5601

",
195,2117899482da7ed6236913c5124afc6b075a4d11,Add CA certs to all-in-one image,"Add CA certs to all-in-one image

Signed-off-by: chandresh-pancholi <25dab51e580f04c0947224025fffefbe56ba05fb@gmail.com>","FROM scratch

# Agent zipkin.thrift compact
EXPOSE 5775/udp

# Agent jaeger.thrift compact
EXPOSE 6831/udp

# Agent jaeger.thrift binary
EXPOSE 6832/udp

# Agent config HTTP
EXPOSE 5778

# Collector HTTP
EXPOSE 14268

# Collector gRPC
EXPOSE 14250

# Web HTTP
EXPOSE 16686

COPY ./cmd/all-in-one/all-in-one-linux /go/bin/
COPY ./cmd/all-in-one/sampling_strategies.json /etc/jaeger/

ENTRYPOINT [""/go/bin/all-in-one-linux""]
CMD [""--sampling.strategies-file=/etc/jaeger/sampling_strategies.json""]
","FROM alpine:latest as certs
RUN apk add --update --no-cache ca-certificates

FROM scratch

COPY --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# Agent zipkin.thrift compact
EXPOSE 5775/udp

# Agent jaeger.thrift compact
EXPOSE 6831/udp

# Agent jaeger.thrift binary
EXPOSE 6832/udp

# Agent config HTTP
EXPOSE 5778

# Collector HTTP
EXPOSE 14268

# Collector gRPC
EXPOSE 14250

# Web HTTP
EXPOSE 16686

COPY ./cmd/all-in-one/all-in-one-linux /go/bin/
COPY ./cmd/all-in-one/sampling_strategies.json /etc/jaeger/

ENTRYPOINT [""/go/bin/all-in-one-linux""]
CMD [""--sampling.strategies-file=/etc/jaeger/sampling_strategies.json""]
"
2132,4320fbd88ee213e7b9db38161059681db930d1ee,Bump ipaddress package to fix SSL.Certificate Error,"Bump ipaddress package to fix SSL.Certificate Error
","#
# Dockerfile for pman repository.
#
# Build with
#
#   docker build -t <name> .
#
# For example if building a local version, you could do:
#
#   docker build -t local/pman .
#
# In the case of a proxy (located at 192.168.13.14:3128), do:
#
#    docker build --build-arg http_proxy=http://192.168.13.14:3128 --build-arg UID=$UID -t local/pman .
#
# To run an interactive shell inside this container, do:
#
#   docker run -ti --entrypoint /bin/bash local/pman
#
# To pass an env var HOST_IP to container, do:
#
#   docker run -ti -e HOST_IP=$(ip route | grep -v docker | awk '{if(NF==11) print $9}') --entrypoint /bin/bash local/pman
#


FROM fnndsc/ubuntu-python3:latest
MAINTAINER fnndsc ""dev@babymri.org""

# Pass a UID on build command line (see above) to set internal UID
ARG UID=1001
ENV UID=$UID

COPY . /tmp/pman
COPY ./docker-entrypoint.py /dock/docker-entrypoint.py

RUN apt-get update                                                    \
  && apt-get install sudo                                             \
  && useradd -u $UID -ms /bin/bash localuser                          \
  && addgroup localuser sudo                                          \
  && echo ""localuser:localuser"" | chpasswd                            \
  && adduser localuser sudo                                           \
  && apt-get install -y libssl-dev libcurl4-openssl-dev bsdmainutils net-tools inetutils-ping \
  && pip3 install pudb                                                \
  && pip3 install pyzmq                                               \
  && pip3 install webob                                               \
  && pip3 install psutil                                              \
  && pip3 install /tmp/pman                                           \ 
  && pip3 install pfmisc==1.2.2                                \
  && pip3 install kubernetes                                          \
  && pip3 install openshift                                           \
  && pip3 install docker                                              \
  && rm -rf /tmp/pman                                                 \
  && chmod 777 /dock                                                  \
  && chmod 777 /dock/docker-entrypoint.py                             \
  && echo ""localuser ALL=(ALL) NOPASSWD:ALL"" >> /etc/sudoers

ENTRYPOINT [""/dock/docker-entrypoint.py""]
EXPOSE 5010

# Start as user $UID
# USER $UID
",
2063,6d19e7d10584094549119a4a297469ee5957e795,Remove version from docker file since it's tagged already,"Remove version from docker file since it's tagged already
","FROM debian:jessie-slim
LABEL maintainer=""david.muto@gmail.com"" version=""1.0.0""

WORKDIR /

ADD https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zip ./
RUN apt-get -q -y update && \
  apt-get -q -y install unzip && \
  unzip protoc-3.3.0-linux-x86_64.zip -d ./usr/local && \
  rm protoc-3.3.0-linux-x86_64.zip && \
  apt-get purge -y unzip && \
  apt-get autoremove

ADD dist/protoc-gen-doc /usr/local/bin/
ADD script/entrypoint.sh ./

VOLUME [""/out"", ""/protos""]

ENTRYPOINT [""/entrypoint.sh""]
CMD [""--doc_opt=html,index.html""]
",
188,fe3862d94ee0f8a09114db979786ebf3c0fded44,Bump kubekins for kubeadm image,"Bump kubekins for kubeadm image
","# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM gcr.io/k8s-testimages/kubekins-e2e:v20170921-8218eea8
MAINTAINER beacham@google.com

RUN apt-get update && apt-get install -y \
    build-essential \
    pkg-config \
    unzip \
    bash-completion \
    git \
    wget && \
    apt-get clean

ENV TERRAFORM_VERSION=0.9.4 \
    KUBERNETES_PROVIDER=kubernetes-anywhere \
    KUBECTL_VERSION=1.6.4 \
    PATH=/usr/local/bin:${PATH}

# Add kubernetes-anywhere dependencies: jsonnet, terraform, kubectl
RUN cd /tmp && \
    git clone https://github.com/google/jsonnet.git && \
    ( cd jsonnet && \
      make jsonnet && \
      cp jsonnet /bin \
    ) && \
    rm -rf /tmp/jsonnet

RUN mkdir -p /tmp/terraform/ && \
    ( cd /tmp/terraform && \
      wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
      unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /bin \
    ) && \
    rm -rf /tmp/terraform

# TODO(pipejakob): Instead of fetching a specific precompiled version, get
# kubernetes-anywhere to use the kubectl built as part of this job.
RUN wget https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl && \
    chmod +x /usr/local/bin/kubectl

WORKDIR /workspace
ADD runner /
ENTRYPOINT [""/bin/bash"", ""/runner""]
","# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM gcr.io/k8s-testimages/kubekins-e2e:v20170921-38bb087e
MAINTAINER beacham@google.com

RUN apt-get update && apt-get install -y \
    build-essential \
    pkg-config \
    unzip \
    bash-completion \
    git \
    wget && \
    apt-get clean

ENV TERRAFORM_VERSION=0.9.4 \
    KUBERNETES_PROVIDER=kubernetes-anywhere \
    KUBECTL_VERSION=1.6.4 \
    PATH=/usr/local/bin:${PATH}

# Add kubernetes-anywhere dependencies: jsonnet, terraform, kubectl
RUN cd /tmp && \
    git clone https://github.com/google/jsonnet.git && \
    ( cd jsonnet && \
      make jsonnet && \
      cp jsonnet /bin \
    ) && \
    rm -rf /tmp/jsonnet

RUN mkdir -p /tmp/terraform/ && \
    ( cd /tmp/terraform && \
      wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
      unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /bin \
    ) && \
    rm -rf /tmp/terraform

# TODO(pipejakob): Instead of fetching a specific precompiled version, get
# kubernetes-anywhere to use the kubectl built as part of this job.
RUN wget https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl && \
    chmod +x /usr/local/bin/kubectl

WORKDIR /workspace
ADD runner /
ENTRYPOINT [""/bin/bash"", ""/runner""]
"
2294,4d7d893a3be04a5564e1a2009864ea149725e7a4,Bumped source to 20211021-9c92104,"Bumped source to 20211021-9c92104
","FROM docker.pkg.github.com/dock0/arch/arch:20211021-b1fff7b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2231,e40a4059ad0b6c745cf7ee74b7727a9bcdc15021,Minor fixes to Dockerfile,"Minor fixes to Dockerfile

Signed-off-by: Aaron <64b2b6d12bfe4baae7dad3d018f8cbf6b0e7a044@jadja.eu>
","FROM golang:1.12.7-alpine as builder

ARG CADDY_VERSION=""1.0.1""

ENV GO111MODULE=on

RUN apk add --no-cache git

COPY caddy.go /go/build/caddy.go
COPY go.mod /go/build/go.mod

RUN cd /go/build && \
    go build

FROM alpine:3.10

RUN apk add --no-cache --no-progress curl tini ca-certificates

COPY --from=builder /go/build/caddy /usr/bin/caddy

COPY Caddyfile /etc/caddy/Caddyfile
COPY index.md /www/index.md

EXPOSE 2016

ENTRYPOINT [""/sbin/tini"", ""--""]
CMD [""caddy""]
",
2085,0dce2e3ece366a6641ac570b50b99ad5430eb0ca,Bumped source to 20211117-612060d,"Bumped source to 20211117-612060d
","FROM docker.pkg.github.com/dock0/arch/arch:20211117-ebea708
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2082,12a1697221511df7e400fc337a2f6a0a88dd5c29,Bumped source to 20211023-2d7fa18,"Bumped source to 20211023-2d7fa18
","FROM docker.pkg.github.com/dock0/arch/arch:20211023-0815b05
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
19,ea6f6cc96b207d8503a10cbe014e51d476aeb539,Bump to 0.10.14 and go 1.10,Bump to 0.10.14 and go 1.10,"#
# Build stage by @abiosoft https://github.com/abiosoft/caddy-docker
#
FROM golang:1.9-alpine as build

ARG version=""0.10.11""
ARG plugins=""""

RUN apk add --no-cache git

# caddy
RUN git clone https://github.com/mholt/caddy -b ""v${version}"" /go/src/github.com/mholt/caddy \
    && cd /go/src/github.com/mholt/caddy \
    && git checkout -b ""v${version}""

# plugin helper
RUN go get -v github.com/abiosoft/caddyplug/caddyplug

# plugins
RUN for plugin in $(echo $plugins | tr "","" "" ""); do \
    go get -v $(caddyplug package $plugin); \
    printf ""package caddyhttp\nimport _ \""$(caddyplug package $plugin)\"""" > \
        /go/src/github.com/mholt/caddy/caddyhttp/$plugin.go ; \
    done

# builder dependency
RUN git clone https://github.com/caddyserver/builds /go/src/github.com/caddyserver/builds

# build
RUN cd /go/src/github.com/mholt/caddy/caddy \
    && git checkout -f \
    && go run build.go \
    && mv caddy /go/bin


#
# Compress Caddy with upx
#
FROM debian:stable as compress

# curl, tar
RUN apt-get update && apt install -y --no-install-recommends \
    tar \
    xz-utils \
    curl \
    ca-certificates

# get official upx binary
RUN curl --silent --show-error --fail --location -o - \
    ""https://github.com/upx/upx/releases/download/v3.94/upx-3.94-amd64_linux.tar.xz"" \
    | tar --no-same-owner -C /usr/bin/ -xJ \
    --strip-components 1 upx-3.94-amd64_linux/upx

# copy and compress
COPY --from=build /go/bin/caddy /usr/bin/caddy
RUN /usr/bin/upx --ultra-brute /usr/bin/caddy

# test
RUN /usr/bin/caddy -version


#
# Final image
#
FROM scratch

# labels
LABEL org.label-schema.vcs-url=""https://github.com/productionwentdown/caddy""
LABEL org.label-schema.version=${version}
LABEL org.label-schema.schema-version=""1.0""

# copy caddy binary and ca certs
COPY --from=compress /usr/bin/caddy /bin/caddy
COPY --from=compress /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# copy default caddyfile
COPY Caddyfile /etc/Caddyfile

# set default caddypath
ENV CADDYPATH=/etc/.caddy
VOLUME /etc/.caddy

# serve from /srv
WORKDIR /srv
COPY index.html /srv/index.html

ENTRYPOINT [""/bin/caddy""]
CMD [""--conf"", ""/etc/Caddyfile"", ""--log"", ""stdout""]
","#
# Build stage by @abiosoft https://github.com/abiosoft/caddy-docker
#
FROM golang:1.10-alpine as build

ARG version=""0.10.14""
ARG plugins=""""

RUN apk add --no-cache git

# caddy
RUN git clone https://github.com/mholt/caddy -b ""v${version}"" /go/src/github.com/mholt/caddy \
    && cd /go/src/github.com/mholt/caddy \
    && git checkout -b ""v${version}""

# plugin helper
RUN go get -v github.com/abiosoft/caddyplug/caddyplug

# plugins
RUN for plugin in $(echo $plugins | tr "","" "" ""); do \
    go get -v $(caddyplug package $plugin); \
    printf ""package caddyhttp\nimport _ \""$(caddyplug package $plugin)\"""" > \
        /go/src/github.com/mholt/caddy/caddyhttp/$plugin.go ; \
    done

# builder dependency
RUN git clone https://github.com/caddyserver/builds /go/src/github.com/caddyserver/builds

# build
RUN cd /go/src/github.com/mholt/caddy/caddy \
    && git checkout -f \
    && go run build.go \
    && mv caddy /go/bin


#
# Compress Caddy with upx
#
FROM debian:stable as compress

# curl, tar
RUN apt-get update && apt install -y --no-install-recommends \
    tar \
    xz-utils \
    curl \
    ca-certificates

# get official upx binary
RUN curl --silent --show-error --fail --location -o - \
    ""https://github.com/upx/upx/releases/download/v3.94/upx-3.94-amd64_linux.tar.xz"" \
    | tar --no-same-owner -C /usr/bin/ -xJ \
    --strip-components 1 upx-3.94-amd64_linux/upx

# copy and compress
COPY --from=build /go/bin/caddy /usr/bin/caddy
RUN /usr/bin/upx --ultra-brute /usr/bin/caddy

# test
RUN /usr/bin/caddy -version


#
# Final image
#
FROM scratch

# labels
LABEL org.label-schema.vcs-url=""https://github.com/productionwentdown/caddy""
LABEL org.label-schema.version=${version}
LABEL org.label-schema.schema-version=""1.0""

# copy caddy binary and ca certs
COPY --from=compress /usr/bin/caddy /bin/caddy
COPY --from=compress /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# copy default caddyfile
COPY Caddyfile /etc/Caddyfile

# set default caddypath
ENV CADDYPATH=/etc/.caddy
VOLUME /etc/.caddy

# serve from /srv
WORKDIR /srv
COPY index.html /srv/index.html

ENTRYPOINT [""/bin/caddy""]
CMD [""--conf"", ""/etc/Caddyfile"", ""--log"", ""stdout""]
"
2092,054d00f7f73615c4d83788a5b2be0472f7c1e9a4,Update jenkins + plugins,"Update jenkins + plugins
","FROM jenkins:2.19.4-alpine

COPY ref/init.groovy.d/executors.groovy /usr/share/jenkins/ref/init.groovy.d/executors.groovy
RUN install-plugins.sh git:3.0.1 blueocean:1.0.0-b13 ansicolor:0.4.3 \
    workflow-aggregator:2.4 pipeline-stage-view:2.4 cloudbees-folder:5.14 \
    ec2:1.36 \
 && echo 2.0 > /usr/share/jenkins/ref/jenkins.install.UpgradeWizard.state
",
111,42340ee22befc1eb9cd11cb696bf5bd6bac3c433,Upgrade confluent platform,"Upgrade confluent platform
","FROMubuntu:16.04
MAINTAINERNeal Hardesty <nealhardesty@yahoo.dot.com>

# Install Oracle JDK 8
# http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html
RUN \
    echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" | tee /etc/apt/sources.list.d/webupd8team-java.list \
    && echo ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" | tee -a /etc/apt/sources.list.d/webupd8team-java.list \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \
    && apt-get update -q \
    && echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \
    && echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends oracle-java8-installer oracle-java8-set-default \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends vim curl wget \
    && rm -rf /var/cache/oracle-jdk8-installer \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

#RUN curl -o /var/tmp/kafka.tgz http://mirrors.ocf.berkeley.edu/apache/kafka/0.10.0.0/kafka_2.11-0.10.0.0.tgz \
#    #&& file /var/tmp/kafka.tgz
#    && tar xzvCf /opt/ /var/tmp/kafka.tgz \
#    && ln -sfv /opt/kafka* /opt/kafka \
#    && rm /var/tmp/kafka.tgz

# Confluent Kafka Platform
RUN wget -qO - http://packages.confluent.io/deb/3.0/archive.key | apt-key add - \
    && echo ""deb http://packages.confluent.io/deb/3.0 stable main"" |tee -a /etc/apt/sources.list.d/confluent.list \
    && apt-get update -y \
    && apt-get install -y confluent-platform-2.11 \
    && apt-get clean \
    && apt-get autoremove \
    && rm -rf /var/lib/apt/lists/*

# This assumes we are running as a hostname of 'kafka'
RUN echo ""listeners=PLAINTEXT://kafka:9092"" >> /etc/kafka/server.properties \
    && echo ""log.cleaner.enable=true"" >> /etc/kafka/server.properties


ADD ./lib/start_kafka.sh /start_kafka.sh
ADD ./lib/topic-ls /usr/local/bin/topic-ls
ADD ./lib/topic-count /usr/local/bin/topic-count

# Zookeeper
EXPOSE 2181
# Kafka Broker
EXPOSE 9092
# Schema Registry
EXPOSE 8081

CMD /start_kafka.sh
","FROMubuntu:16.04
MAINTAINERNeal Hardesty <nealhardesty@yahoo.dot.com>

# Install Oracle JDK 8
# http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html
RUN \
    echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" | tee /etc/apt/sources.list.d/webupd8team-java.list \
    && echo ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" | tee -a /etc/apt/sources.list.d/webupd8team-java.list \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \
    && apt-get update -q \
    && echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \
    && echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends oracle-java8-installer oracle-java8-set-default \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends vim curl wget \
    && rm -rf /var/cache/oracle-jdk8-installer \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

#RUN curl -o /var/tmp/kafka.tgz http://mirrors.ocf.berkeley.edu/apache/kafka/0.10.0.0/kafka_2.11-0.10.0.0.tgz \
#    #&& file /var/tmp/kafka.tgz
#    && tar xzvCf /opt/ /var/tmp/kafka.tgz \
#    && ln -sfv /opt/kafka* /opt/kafka \
#    && rm /var/tmp/kafka.tgz

# Confluent Kafka Platform
echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" | tee /etc/apt/sources.list.d/webupd8team-java.list \
    && echo ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" | tee -a /etc/apt/sources.list.d/webupd8team-java.list \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \
    && apt-get update -q \
    && echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \
    && echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes oracle-java8-installer oracle-java8-set-default \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes vim curl wget

# This assumes we are running as a hostname of 'kafka'
RUN echo ""listeners=PLAINTEXT://kafka:9092"" >> /etc/kafka/server.properties \
    && echo ""log.cleaner.enable=true"" >> /etc/kafka/server.properties


ADD ./lib/start_kafka.sh /start_kafka.sh
ADD ./lib/topic-ls /usr/local/bin/topic-ls
ADD ./lib/topic-count /usr/local/bin/topic-count

# Zookeeper
EXPOSE 2181
# Kafka Broker
EXPOSE 9092
# Schema Registry
EXPOSE 8081

CMD /start_kafka.sh
"
59,c2f21f87dd7677826ada3819a4533a689887b345,Bumped source to 20201116-c392ca8,"Bumped source to 20201116-c392ca8
","FROM docker.pkg.github.com/dock0/service/service:20201116-44643f6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20201116-c392ca8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2257,a6b464319983ea9ff787511f47c7b9241ebcd5a5,Updated with dnsutils,"Updated with dnsutils
","FROM debian
MAINTAINER Marcel Grossmann <whatever4711@gmail.com>

ENV DEBIAN_FRONTEND noninteractive

ENV MININET_REPO git://github.com/mininet/mininet
ENV MININET_INSTALLER ./mininet/util/install.sh
ENV INSTALLER_SWITCHES -fbinptvwyx

WORKDIR /tmp

# Update and install minimal.
RUN \
    apt-get update \
        --quiet \
    && apt-get install \
        --yes \
        --no-install-recommends \
        --no-install-suggests \
    autoconf \
    automake \
    ca-certificates \
    git \
    curl \
    libtool \
    net-tools \
    openssh-client \
    patch \
    vim \
    dnsutils

# Clone and install.
    && git clone -b 2.2.1 $MININET_REPO \

# A few changes to make the install script behave.
    && sed -e 's/sudo //g' \
    -e 's/~\//\//g' \
    -e 's/\(apt-get -y install\)/\1 --no-install-recommends --no-install-suggests/g' \
    -i $MININET_INSTALLER \

# Install script expects to find this. Easier than patching that part of the script.
    && touch /.bashrc \

# Proceed with the install.
    && chmod +x $MININET_INSTALLER \
    && ./$MININET_INSTALLER -nfv \

# Clean up source.
    && rm -rf /tmp/mininet \
              /tmp/openflow \

# Clean up packages.
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create a start script to start OpenVSwitch
COPY docker-entry-point /docker-entry-point
RUN chmod 755 /docker-entry-point

VOLUME [""/data""]
WORKDIR /data

# Default command.
ENTRYPOINT [""/docker-entry-point""]
",
2307,082a73ee331d87ff1052441c214af9c3bc1a42a4,Bump NVM script version to 0.33.1 (#658),"Bump NVM script version to 0.33.1 (#658)

https://github.com/creationix/nvm/releases/tag/v0.33.1","#
#--------------------------------------------------------------------------
# Image Setup
#--------------------------------------------------------------------------
#
# To edit the 'workspace' base Image, visit its repository on Github
#    https://github.com/LaraDock/workspace
#
# To change its version, see the available Tags on the Docker Hub:
#    https://hub.docker.com/r/laradock/workspace/tags/
#

FROM laradock/workspace:1.3

MAINTAINER Mahmoud Zalt <mahmoud@zalt.me>

#
#--------------------------------------------------------------------------
# Mandatory Software's Installation
#--------------------------------------------------------------------------
#
# Mandatory Software's such as (""php7.0-cli"", ""git"", ""vim"", ....) are
# installed on the base image 'laradock/workspace' image. If you want
# to add more Software's or remove existing one, you need to edit the
# base image (https://github.com/LaraDock/workspace).
#

#
#--------------------------------------------------------------------------
# Optional Software's Installation
#--------------------------------------------------------------------------
#
# Optional Software's will only be installed if you set them to `true`
# in the `docker-compose.yml` before the build.
# Example:
#   - INSTALL_NODE=false
#   - ...
#

#####################################
# Non-Root User:
#####################################

# Add a non-root user to prevent files being created with root permissions on host machine.
ARG PUID=1000
ARG PGID=1000
RUN groupadd -g $PGID laradock && \
    useradd -u $PUID -g laradock -m laradock


#####################################
# SOAP:
#####################################
USER root

ARG INSTALL_SOAP=false
ENV INSTALL_SOAP ${INSTALL_SOAP}

RUN if [ ${INSTALL_SOAP} = true ]; then \
  # Install the PHP SOAP extension
  apt-get -y update && \
  add-apt-repository -y ppa:ondrej/php && \
  apt-get -y install libxml2-dev php7.0-soap && \
  echo ""extension=soap.so"" >> /etc/php/7.0/cli/conf.d/40-soap.ini \
;fi

#####################################
# Set Timezone
#####################################

ARG TZ=UTC
ENV TZ ${TZ}
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

#####################################
# Composer:
#####################################

# Add the composer.json
COPY ./composer.json /home/laradock/.composer/composer.json

# Make sure that ~/.composer belongs to laradock
RUN chown -R laradock:laradock /home/laradock/.composer
USER laradock

# Check if global install need to be ran
ARG COMPOSER_GLOBAL_INSTALL=false
ENV COMPOSER_GLOBAL_INSTALL ${COMPOSER_GLOBAL_INSTALL}
RUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then \
    # run the install
    composer global install \
;fi

# Export composer vendor path
RUN echo """" >> ~/.bashrc && \
echo 'export PATH=""~/.composer/vendor/bin:$PATH""' >> ~/.bashrc

#####################################
# Crontab
#####################################
USER root

COPY ./crontab /etc/cron.d
RUN chmod -R 644 /etc/cron.d

#####################################
# User Aliases
#####################################

USER laradock
COPY ./aliases.sh /home/laradock/aliases.sh
RUN echo """" >> ~/.bashrc && \
    echo ""# Load Custom Aliases"" >> ~/.bashrc && \
    echo ""source /home/laradock/aliases.sh"" >> ~/.bashrc && \
    echo """" >> ~/.bashrc

USER root
RUN echo """" >> ~/.bashrc && \
    echo ""# Load Custom Aliases"" >> ~/.bashrc && \
    echo ""source /home/laradock/aliases.sh"" >> ~/.bashrc && \
    echo """" >> ~/.bashrc

#####################################
# xDebug:
#####################################

ARG INSTALL_XDEBUG=false
RUN if [ ${INSTALL_XDEBUG} = true ]; then \
    # Load the xdebug extension only with phpunit commands
    apt-get update && \
    apt-get install -y --force-yes php7.0-xdebug && \
    sed -i 's/^/;/g' /etc/php/7.0/cli/conf.d/20-xdebug.ini && \
    echo ""alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'"" >> ~/.bashrc \
;fi
# ADD for REMOTE debugging
COPY ./xdebug.ini /etc/php/7.0/cli/conf.d/xdebug.ini

#####################################
# ssh:
#####################################
ARG INSTALL_WORKSPACE_SSH=false
ENV INSTALL_WORKSPACE_SSH ${INSTALL_WORKSPACE_SSH}

ADD insecure_id_rsa /tmp/id_rsa
ADD insecure_id_rsa.pub /tmp/id_rsa.pub

RUN if [ ${INSTALL_WORKSPACE_SSH} = true ]; then \
    rm -f /etc/service/sshd/down && \
    cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \
        && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \
        && cat /tmp/id_rsa >> /root/.ssh/id_rsa \
        && rm -f /tmp/id_rsa* \
        && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \
    && chmod 400 /root/.ssh/id_rsa \
;fi

#####################################
# MongoDB:
#####################################

# Check if Mongo needs to be installed
ARG INSTALL_MONGO=false
ENV INSTALL_MONGO ${INSTALL_MONGO}
RUN if [ ${INSTALL_MONGO} = true ]; then \
    # Install the mongodb extension
    pecl install mongodb && \
    echo ""extension=mongodb.so"" >> /etc/php/7.0/cli/conf.d/30-mongodb.ini \
;fi

#####################################
# Drush:
#####################################
USER root
ENV DRUSH_VERSION 8.1.2
ARG INSTALL_DRUSH=false
ENV INSTALL_DRUSH ${INSTALL_DRUSH}
RUN if [ ${INSTALL_DRUSH} = true ]; then \
    # Install Drush 8 with the phar file.
    curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash && \
    chmod +x /usr/local/bin/drush && \
    drush core-status \
;fi

USER laradock

#####################################
# Node / NVM:
#####################################

# Check if NVM needs to be installed
ARG NODE_VERSION=stable
ENV NODE_VERSION ${NODE_VERSION}
ARG INSTALL_NODE=false
ENV INSTALL_NODE ${INSTALL_NODE}
ENV NVM_DIR /home/laradock/.nvm
RUN if [ ${INSTALL_NODE} = true ]; then \
    # Install nvm (A Node Version Manager)
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash && \
        . $NVM_DIR/nvm.sh && \
        nvm install ${NODE_VERSION} && \
        nvm use ${NODE_VERSION} && \
        nvm alias ${NODE_VERSION} && \
        npm install -g gulp bower vue-cli \
;fi

# Wouldn't execute when added to the RUN statement in the above block
# Source NVM when loading bash since ~/.profile isn't loaded on non-login shell
RUN if [ ${INSTALL_NODE} = true ]; then \
    echo """" >> ~/.bashrc && \
    echo 'export NVM_DIR=""$HOME/.nvm""' >> ~/.bashrc && \
    echo '[ -s ""$NVM_DIR/nvm.sh"" ] && . ""$NVM_DIR/nvm.sh""  # This loads nvm' >> ~/.bashrc \
;fi

# Add NVM binaries to root's .bashrc
USER root

RUN if [ ${INSTALL_NODE} = true ]; then \
    echo """" >> ~/.bashrc && \
    echo 'export NVM_DIR=""/home/laradock/.nvm""' >> ~/.bashrc && \
    echo '[ -s ""$NVM_DIR/nvm.sh"" ] && . ""$NVM_DIR/nvm.sh""  # This loads nvm' >> ~/.bashrc \
;fi

#####################################
# YARN:
#####################################

USER laradock

ARG INSTALL_YARN=false
ENV INSTALL_YARN ${INSTALL_YARN}
ARG YARN_VERSION=latest
ENV YARN_VERSION ${YARN_VERSION}

RUN if [ ${INSTALL_YARN} = true ]; then \
    [ -s ""$NVM_DIR/nvm.sh"" ] && . ""$NVM_DIR/nvm.sh"" && \
    if [ ${YARN_VERSION} = ""latest"" ]; then \
        curl -o- -L https://yarnpkg.com/install.sh | bash; \
    else \
        curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \
    fi && \
    echo """" >> ~/.bashrc && \
    echo 'export PATH=""$HOME/.yarn/bin:$PATH""' >> ~/.bashrc \
;fi

# Add YARN binaries to root's .bashrc
USER root

RUN if [ ${INSTALL_YARN} = true ]; then \
    echo """" >> ~/.bashrc && \
    echo 'export YARN_DIR=""/home/laradock/.yarn""' >> ~/.bashrc && \
    echo 'export PATH=""$YARN_DIR/bin:$PATH""' >> ~/.bashrc \
;fi

#####################################
# PHP Aerospike:
#####################################
USER root

ARG INSTALL_AEROSPIKE_EXTENSION=true
ENV INSTALL_AEROSPIKE_EXTENSION ${INSTALL_AEROSPIKE_EXTENSION}

# Copy aerospike configration for remote debugging
COPY ./aerospike.ini /etc/php/7.0/cli/conf.d/aerospike.ini

RUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = true ]; then \
    # Install the php aerospike extension
    curl -L -o /tmp/aerospike-client-php.tar.gz ""https://github.com/luciano-jr/aerospike-client-php/archive/master.tar.gz"" \
    && mkdir -p aerospike-client-php \
    && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \
    && ( \
        cd aerospike-client-php/src/aerospike \
        && phpize \
        && ./build.sh \
        && make install \
    ) \
    && rm /tmp/aerospike-client-php.tar.gz \
;fi

RUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = false ]; then \
    rm /etc/php/7.0/cli/conf.d/aerospike.ini \
;fi

#####################################
# PHP V8JS:
#####################################
USER root

ARG INSTALL_V8JS_EXTENSION=false
ENV INSTALL_V8JS_EXTENSION ${INSTALL_V8JS_EXTENSION}

RUN if [ ${INSTALL_V8JS_EXTENSION} = true ]; then \
    # Install the php V8JS extension
    add-apt-repository -y ppa:pinepain/libv8-5.4 \
    && apt-get update \
    && apt-get install -y php-dev php-pear libv8-5.4 \
    && pecl install v8js \
    && echo ""extension=v8js.so"" >> /etc/php/7.0/cli/php.ini \
;fi

#####################################
# Non-root user : PHPUnit path
#####################################

# add ./vendor/bin to non-root user's bashrc (needed for phpunit)
USER laradock

RUN echo """" >> ~/.bashrc && \
    echo 'export PATH=""/var/www/vendor/bin:$PATH""' >> ~/.bashrc

#####################################
# Laravel Artisan Alias
#####################################
USER root

RUN echo """" >> ~/.bashrc && \
    echo 'alias art=""php artisan""' >> ~/.bashrc

#####################################
# Laravel Envoy:
#####################################
USER laradock

ARG INSTALL_LARAVEL_ENVOY=true
ENV INSTALL_LARAVEL_ENVOY ${INSTALL_LARAVEL_ENVOY}

RUN if [ ${INSTALL_LARAVEL_ENVOY} = true ]; then \
    # Install the Laravel Envoy
    composer global require ""laravel/envoy=~1.0"" \
;fi

#####################################
# Deployer:
#####################################
USER laradock

ARG INSTALL_DEPLOYER=false
ENV INSTALL_DEPLOYER ${INSTALL_DEPLOYER}

RUN if [ ${INSTALL_DEPLOYER} = true ]; then \
    # Install the Deployer
    composer global require ""deployer/deployer"" \
;fi

#####################################
# Linuxbrew:
#####################################
USER root

ARG INSTALL_LINUXBREW=true
ENV INSTALL_LINUXBREW ${INSTALL_LINUXBREW}

RUN if [ ${INSTALL_LINUXBREW} = true ]; then \

    # Preparation
    apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y build-essential make cmake scons curl git \
      ruby autoconf automake autoconf-archive \
      gettext libtool flex bison \
      libbz2-dev libcurl4-openssl-dev \
      libexpat-dev libncurses-dev && \

    # Install the Linuxbrew
    git clone https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew && \

    echo """" >> ~/.bashrc && \
    echo 'export PKG_CONFIG_PATH""=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH""' >> ~/.bashrc && \

    # Setup linuxbrew
    echo 'export LINUXBREWHOME=""$HOME/.linuxbrew""' >> ~/.bashrc && \
    echo 'export PATH=""$LINUXBREWHOME/bin:$PATH""' >> ~/.bashrc && \
    echo 'export MANPATH=""$LINUXBREWHOME/man:$MANPATH""' >> ~/.bashrc && \
    echo 'export PKG_CONFIG_PATH=""$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH""' >> ~/.bashrc && \
    echo 'export LD_LIBRARY_PATH=""$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH""' >> ~/.bashrc \
;fi

#####################################
# Minio:
#####################################
USER root
ARG INSTALL_MC=false
ENV INSTALL_MC ${INSTALL_MC}

COPY mc/config.json /root/.mc/config.json

RUN if [ ${INSTALL_MC} = true ]; then\
    curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc && \
    chmod +x /usr/local/bin/mc \
;fi

USER laradock

#
#--------------------------------------------------------------------------
# Final Touch
#--------------------------------------------------------------------------
#

# Clean up
USER root
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set default work directory
WORKDIR /var/www
",
154,79a028ce11741a7665cdeab40171f7dca724fb4f,Bumped source to 20200816-dcc09bc,"Bumped source to 20200816-dcc09bc
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200816-60b9c4b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200816-dcc09bc
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
99,55e20e7e2a583946eb7f05cf69c05842aa1ae08d,carriage return fix,"carriage return fix
","
FROM alpine:edge
# Note:
# This is image is intended to be as small as possible
MAINTAINER ""Paolo D'Onorio De Meo <p.donoriodemeo@cineca.it>""

RUN apk update && apk upgrade && apk add \
    python3 jq\
    bash vim curl wget less \
    && rm -rf /var/cache/apk/*

# Install easy install
ENV EASY_REPO https://bootstrap.pypa.io/ez_setup.py
RUN curl $EASY_REPO | python3

# Install pip and pip packages
RUN easy_install pip \
    && pip --no-cache-dir install --upgrade \
    pip httpie http-prompt

# Create a token from API
ADD client_init.sh /tmp/gettoken

# Handle a guest user
ENV GUEST_SHELL /bin/bash
ENV GUEST_USER developer
ENV GUEST_UID 1000
RUN adduser -s $GUEST_SHELL -u $GUEST_UID -D -h /home/$GUEST_USER $GUEST_USER

# Use the new user
USER $GUEST_USER
ENV BASHRC /home/$GUEST_USER/.bashrc
RUN echo ""export HISTCONTROL=ignoreboth:erasedups"" > $BASHRC \
    && echo ""echo '\\nSet your client with:'"" >> $BASHRC \
    && echo ""echo '$ . /tmp/gettoken'"" >> $BASHRC
ENV PAGER less
ENV TERM xterm
","
FROM alpine:edge
# Note:
# This is image is intended to be as small as possible
MAINTAINER ""Paolo D'Onorio De Meo <p.donoriodemeo@cineca.it>""

RUN apk update && apk upgrade && apk add \
    python3 jq\
    bash vim curl wget less \
    && rm -rf /var/cache/apk/*

# Install easy install
ENV EASY_REPO https://bootstrap.pypa.io/ez_setup.py
RUN curl $EASY_REPO | python3

# Install pip and pip packages
RUN easy_install pip \
    && pip --no-cache-dir install --upgrade \
    pip httpie http-prompt

# Create a token from API
ADD client_init.sh /tmp/gettoken

# Handle a guest user
ENV GUEST_SHELL /bin/bash
ENV GUEST_USER developer
ENV GUEST_UID 1000
RUN adduser -s $GUEST_SHELL -u $GUEST_UID -D -h /home/$GUEST_USER $GUEST_USER

# Use the new user
USER $GUEST_USER
ENV BASHRC /home/$GUEST_USER/.bashrc
RUN echo ""export HISTCONTROL=ignoreboth:erasedups"" > $BASHRC \
    && echo ""echo -e '\\nSet up this client with the command:'"" >> $BASHRC \
    && echo ""echo -e '$ . /tmp/gettoken\\n'"" >> $BASHRC
ENV PAGER less
ENV TERM xterm
"
145,5241c3e60a204f764ecf3857415fc9a16e5399f9,fixes up to python,"fixes up to python
","FROM nvidia/cuda:9.1-cudnn7-devel-centos7
MAINTAINER r@fael.nl

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8
ENV LC_ALL en_US.UTF-8

RUN yum update
RUN yum install -y  wget \
                    unzip \
                    screen tmux \
                    ruby \
                    vim

# C/C++ CMake Python

RUN RUN yum install -y  centos-release-scl && \
        yum install -y  devtoolset-7-gcc* \
                        devtoolset-7-valgrind \
                        devtoolset-7-gdb \
                        devtoolset-7-elfutils \
                        clang \
                        llvm-toolset-7 \
                        llvm-toolset-7-cmake \
                        rh-python36-python-pip \
                        rh-git29-git \
                        devtoolset-7-make

RUN echo ""source scl_source enable devtoolset-7"" >> /etc/bashrc
RUN echo ""source scl_source enable llvm-toolset-7"" >> /etc/bashrc
RUN echo ""source scl_source enable rh-python36"" >> /etc/bashrc
RUN echo ""source scl_source enable rh-git29"" >> /etc/bashrc

RUN yum install -y qt5*devel
RUN yum install -y gtk2-devel

RUN yum install -y  blas-devel \
                    lapack-devel \
                    atlas-devel \
                    gcc-gfortran \
                    tbb-devel \
                    jasper-devel \
                    libpng-devel \
                    libtiff-devel \
                    libv4l-devel

# Ninja builder

RUN cd /tmp/ && wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && \
   rpm -ivh epel-release-latest-7.noarch.rpm \
RUN yum -y --enablerepo=epel install ninja-build && \
   echo ""alias ninja='ninja-build'"" >> /etc/bashrc
RUN yum remove -y epel-release-7-11

# Fish

RUN cd /etc/yum.repos.d/ && wget https://download.opensuse.org/repositories/shells:fish:release:2/CentOS_7/shells:fish:release:2.repo 
RUN yum install fish -y

# Python libs & jupyter

RUN pip3 install --upgrade pip
RUN pip3 install numpy scipy matplotlib pandas tensorflow-gpu keras scikit-image scikit-learn
RUN pip3 install jsonschema jinja2 tornado pyzmq ipython jupyter

# OpenCV

ARG OPENCV_VERSION=""3.4.1""
RUN cd /root && wget -O opencv.zip https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip
RUN cd /root && wget -O contrib.zip https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip
RUN cd /root && unzip opencv.zip && unzip contrib.zip
RUN mkdir /root/opencv-$OPENCV_VERSION/build && cd /root/opencv-$OPENCV_VERSION/build && \
    cmake .. -G""Ninja"" -DCMAKE_BUILD_TYPE=RELEASE \
    -DENABLE_CXX11=ON -DOPENCV_ENABLE_NONFREE=ON -DCUDA_HOST_COMPILER=/usr/bin/g++ \
    -DOPENCV_EXTRA_MODULES_PATH=/root/opencv_contrib-$OPENCV_VERSION/modules \
    -DPYTHON_EXECUTABLE=$(which python3) && \
    ninja && ninja install
RUN cp /root/opencv-$OPENCV_VERSION/build/lib/python3/cv2.cpython-35m-x86_64-linux-gnu.so /usr/local/lib/python3.5/dist-packages/

# Julia

ARG JULIA_URL=""https://julialang-s3.julialang.org/bin/linux/x64/0.6/julia-0.6.2-linux-x86_64.tar.gz""
ARG JULIA_PATH=""julia-d386e40c17""
RUN cd /root && wget -O julia.tar.gz ${JULIA_URL} && tar xzf julia.tar.gz
RUN mv /root/$JULIA_PATH/ /opt/julia && chown -R root.root /opt/julia && chmod -R +rx /opt/julia
RUN ln -s /opt/julia/bin/julia /usr/local/bin/julia
RUN julia -e 'Pkg.update()'
RUN julia -e 'Pkg.add(""IJulia"")'

# # Finnaly

RUN rm -rf /tmp/*.rpm /root/*opencv* /root/*julia*

# # Vim Configuration

# COPY vimrc /root/.vimrc
# RUN curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# RUN echo -e ""Run inside vim\n:PlugInstall""


RUN mkdir /playground
WORKDIR /playground

CMD fish
EXPOSE 8888
","FROM nvidia/cuda:9.1-cudnn7-devel-centos7

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8
ENV LC_ALL en_US.UTF-8

RUN yum groupinstall -y ""Development tools""
RUN yum install -y  wget \
                    unzip \
                    screen tmux \
                    ruby \
                    vim

# C/C++ CMake Python

RUN yum install -y  centos-release-scl && \
    yum install -y  devtoolset-7-gcc* \
                    devtoolset-7-valgrind \
                    devtoolset-7-gdb \
                    devtoolset-7-elfutils \
                    clang \
                    llvm-toolset-7 \
                    llvm-toolset-7-cmake \
                    rh-python36-python-pip \
                    rh-git29-git \
                    devtoolset-7-make

RUN echo ""source scl_source enable devtoolset-7"" >> /etc/bashrc
RUN echo ""source scl_source enable llvm-toolset-7"" >> /etc/bashrc
RUN echo ""source scl_source enable rh-python36"" >> /etc/bashrc
RUN echo ""source scl_source enable rh-git29"" >> /etc/bashrc
RUN source /etc/bashrc

RUN yum install -y qt5*devel
RUN yum install -y gtk2-devel

RUN yum install -y  blas-devel \
                    lapack-devel \
                    atlas-devel \
                    gcc-gfortran \
                    tbb-devel \
                    jasper-devel \
                    libpng-devel \
                    libtiff-devel \
                    libv4l-devel

# Ninja builder

RUN cd /tmp/ && wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && \
   rpm -ivh epel-release-latest-7.noarch.rpm
RUN yum -y --enablerepo=epel install ninja-build && \
   echo ""alias ninja='ninja-build'"" >> /etc/bashrc
RUN yum remove -y epel-release-7-11
RUN source /etc/bashrc

# Fish

RUN cd /etc/yum.repos.d/ && wget https://download.opensuse.org/repositories/shells:fish:release:2/CentOS_7/shells:fish:release:2.repo 
RUN yum install fish -y

# Python libs & jupyter

RUN /opt/rh/rh-python36/root/usr/bin/pip3 install --upgrade pip
RUN /opt/rh/rh-python36/root/usr/bin/pip3 install \
        numpy scipy matplotlib pandas \
        tensorflow-gpu keras \
        scikit-image scikit-learn \
        jsonschema jinja2 tornado pyzmq ipython jupyter

# OpenCV

ARG OPENCV_VERSION=""3.4.1""
RUN cd /root && wget -O opencv.zip https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip
RUN cd /root && wget -O contrib.zip https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip
RUN cd /root && unzip opencv.zip && unzip contrib.zip
RUN mkdir /root/opencv-$OPENCV_VERSION/build && cd /root/opencv-$OPENCV_VERSION/build && \
    cmake .. -G""Ninja"" -DCMAKE_BUILD_TYPE=RELEASE \
    -DENABLE_CXX11=ON -DOPENCV_ENABLE_NONFREE=ON -DCUDA_HOST_COMPILER=/usr/bin/g++ \
    -DOPENCV_EXTRA_MODULES_PATH=/root/opencv_contrib-$OPENCV_VERSION/modules \
    -DPYTHON_EXECUTABLE=$(which python3) && \
    ninja && ninja install
RUN cp /root/opencv-$OPENCV_VERSION/build/lib/python3/cv2.cpython-35m-x86_64-linux-gnu.so /usr/local/lib/python3.5/dist-packages/

# Julia

ARG JULIA_URL=""https://julialang-s3.julialang.org/bin/linux/x64/0.6/julia-0.6.2-linux-x86_64.tar.gz""
ARG JULIA_PATH=""julia-d386e40c17""
RUN cd /root && wget -O julia.tar.gz ${JULIA_URL} && tar xzf julia.tar.gz
RUN mv /root/$JULIA_PATH/ /opt/julia && chown -R root.root /opt/julia && chmod -R +rx /opt/julia
RUN ln -s /opt/julia/bin/julia /usr/local/bin/julia
RUN julia -e 'Pkg.update()'
RUN julia -e 'Pkg.add(""IJulia"")'

# # Finnaly

RUN rm -rf /tmp/*.rpm /root/*opencv* /root/*julia*

# # Vim Configuration

# COPY vimrc /root/.vimrc
# RUN curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# RUN echo -e ""Run inside vim\n:PlugInstall""


RUN mkdir /playground
WORKDIR /playground

CMD fish
EXPOSE 8888
"
258,852b728a02ba474f6948c2e9b019f8959cc11a9d,Attempt to fix Dockerfile,"Attempt to fix Dockerfile
","FROM node:12-alpine

WORKDIR /src
ADD . /src

ARG env=production

RUN yarn global add bower \
  && bower install --allow-root \
  && yarn

WORKDIR /src
EXPOSE 9090
ENV NODE_ENV $env
CMD [""npm"", ""start""]
","FROM node:12-slim

WORKDIR /src
ADD . /src

ARG env=production

RUN apt-get update \
  && apt-get install build-essential git vim -y --no-install-recommends \
  && rm -rf /var/lib/apt/lists/*

RUN yarn global add bower \
  && bower install --allow-root \
  && yarn

WORKDIR /src
EXPOSE 9090
ENV NODE_ENV $env
CMD [""npm"", ""start""]
"
62,9d81ae8c9aed9b889130485f79e3c6788ee44f48,Bumped source to 20210708-032639e,"Bumped source to 20210708-032639e
","FROM docker.pkg.github.com/dock0/arch/arch:20210707-324d485
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210708-032639e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
303,13e51f196e00eaa7140413b6b27c490ad322ea12,Bumped source to 20210130-a067386,"Bumped source to 20210130-a067386
","FROM docker.pkg.github.com/dock0/arch/arch:20210130-f647073
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210130-a067386
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2097,d52fd80eea1515e83f85ba19640cd3601490484f,Bumped source to 20210119-0101695,"Bumped source to 20210119-0101695
","FROM docker.pkg.github.com/dock0/arch/arch:20210119-bab8ee8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
197,c913a3cc143fb8342d0c8eaabf94109d71f37ca3,Update golang:1.10-alpine Docker digest to bb3108,Update golang:1.10-alpine Docker digest to bb3108,"FROM golang:1.10-alpine@sha256:96e25c71acc7756adaa0c9237bc799dfba4c0a71409612b3111f20a79a9c4cc2 AS build

RUN apk add --no-cache \
    make \
    git \
    upx

RUN mkdir -p /go/src/github.com/hairyhenderson/gomplate
WORKDIR /go/src/github.com/hairyhenderson/gomplate
COPY . /go/src/github.com/hairyhenderson/gomplate

RUN make build-x compress-all

FROM scratch AS artifacts

COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=build /go/src/github.com/hairyhenderson/gomplate/bin/* /bin/

CMD [ ""/bin/gomplate_linux-amd64"" ]

FROM scratch AS gomplate

ARG BUILD_DATE
ARG VCS_REF
ARG OS=linux
ARG ARCH=amd64

LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.source=""https://github.com/hairyhenderson/gomplate""

COPY --from=artifacts /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=artifacts /bin/gomplate_${OS}-${ARCH} /gomplate

ENTRYPOINT [ ""/gomplate"" ]

CMD [ ""--help"" ]

FROM alpine:3.7@sha256:8c03bb07a531c53ad7d0f6e7041b64d81f99c6e493cb39abba56d956b40eacbc AS gomplate-alpine

ARG BUILD_DATE
ARG VCS_REF
ARG OS=linux
ARG ARCH=amd64

LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.source=""https://github.com/hairyhenderson/gomplate""

RUN apk add --no-cache ca-certificates
COPY --from=artifacts /bin/gomplate_${OS}-${ARCH}-slim /bin/gomplate

ENTRYPOINT [ ""/gomplate"" ]

CMD [ ""--help"" ]

FROM scratch AS gomplate-slim

ARG BUILD_DATE
ARG VCS_REF
ARG OS=linux
ARG ARCH=amd64

LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.source=""https://github.com/hairyhenderson/gomplate""

COPY --from=artifacts /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=artifacts /bin/gomplate_${OS}-${ARCH}-slim /gomplate

ENTRYPOINT [ ""/gomplate"" ]

CMD [ ""--help"" ]
","FROM golang:1.10-alpine@sha256:bb31085d5c5db578edf3d4e5541cfb949b713bb7018bbac4dfd407b2017ef5b8 AS build

RUN apk add --no-cache \
    make \
    git \
    upx

RUN mkdir -p /go/src/github.com/hairyhenderson/gomplate
WORKDIR /go/src/github.com/hairyhenderson/gomplate
COPY . /go/src/github.com/hairyhenderson/gomplate

RUN make build-x compress-all

FROM scratch AS artifacts

COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=build /go/src/github.com/hairyhenderson/gomplate/bin/* /bin/

CMD [ ""/bin/gomplate_linux-amd64"" ]

FROM scratch AS gomplate

ARG BUILD_DATE
ARG VCS_REF
ARG OS=linux
ARG ARCH=amd64

LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.source=""https://github.com/hairyhenderson/gomplate""

COPY --from=artifacts /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=artifacts /bin/gomplate_${OS}-${ARCH} /gomplate

ENTRYPOINT [ ""/gomplate"" ]

CMD [ ""--help"" ]

FROM alpine:3.7@sha256:8c03bb07a531c53ad7d0f6e7041b64d81f99c6e493cb39abba56d956b40eacbc AS gomplate-alpine

ARG BUILD_DATE
ARG VCS_REF
ARG OS=linux
ARG ARCH=amd64

LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.source=""https://github.com/hairyhenderson/gomplate""

RUN apk add --no-cache ca-certificates
COPY --from=artifacts /bin/gomplate_${OS}-${ARCH}-slim /bin/gomplate

ENTRYPOINT [ ""/gomplate"" ]

CMD [ ""--help"" ]

FROM scratch AS gomplate-slim

ARG BUILD_DATE
ARG VCS_REF
ARG OS=linux
ARG ARCH=amd64

LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.source=""https://github.com/hairyhenderson/gomplate""

COPY --from=artifacts /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=artifacts /bin/gomplate_${OS}-${ARCH}-slim /gomplate

ENTRYPOINT [ ""/gomplate"" ]

CMD [ ""--help"" ]
"
267,b935793b060a3a920837ae0ae507115840b856d6,Update AWS CLI version to 1.10.53,"Update AWS CLI version to 1.10.53
","FROM python:3.5-slim
MAINTAINER Nikolay Rybak <mykola.rybak@gmail.com>

RUN \
    mkdir -p /aws && \
    pip install --upgrade awscli==1.10.52 && \
    rm -rf /root/.cache && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /aws
ENTRYPOINT [""aws""]
","FROM python:3.5-slim
MAINTAINER Nikolay Rybak <mykola.rybak@gmail.com>

RUN \
    mkdir -p /aws && \
    pip install --upgrade awscli==1.10.53 && \
    rm -rf /root/.cache && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /aws
ENTRYPOINT [""aws""]
"
347,a063d2244249a62b8f5e0e0c28cc47dbcfa3b5ad,copy more files and add new entrypoint,"copy more files and add new entrypoint
","FROM alpine
COPY add-user gen-cert output-crt /usr/local/sbin/
RUN apk update \
 && apk add openssl \
 && apk add apache2-utils
ENTRYPOINT [""sh""]

","FROM alpine
COPY add-user del-user gen-cert output-crt output-auth sleep-forever /usr/local/sbin/
RUN apk update \
 && apk add openssl \
 && apk add apache2-utils
ENTRYPOINT [""sleep-forever""]

"
2117,4d1cd9fce58dd9c7ab31bc183d0294d2afd1a40f,Fixed my fingers being overhasty,"Fixed my fingers being overhasty
","FROM frolvlad/alpine-glibc

MAINTAINER Jannik Kolodziej <docker@jkolodziej.de>

ENV FACTORIO_VERSION=0.12.31 \
    MANAGER_VERSION=0.2.0 \
    ADMIN_PASSWORD=

VOLUME /opt/factorio/saves /opt/factorio/mods /security

RUN apk add --no-cache curl tar unzip nginx

WORKDIR /opt/
ADD ""init.sh"" ""/opt/init.sh""
ADD ""nginx.conf"" ""/etc/nginx/nginx.conf""

RUN curl -s -L -S -k https://www.factorio.com/get-download/$FACTORIO_VERSION/headless/linux64 -o /tmp/factorio_$FACTORIO_VERSION.tar.gz && \
    tar zxf /tmp/factorio_$FACTORIO_VERSION.tar.gz && \
    rm -rf /tmp/factorio_$FACTORIO_VERSION.tag.gz && \
    curl -s -L -S -k https://github.com/MajorMJR/factorio-server-manager/releases/download/$MANAGER_VERSION/factorio-server-manager-linux-x64.zip --cacert /opt/github.pem -o /tmp/factorio-server-manager-linux-x64_$MANAGER_VERSION.zip && \
    unzip -qq /tmp/factorio-server-manager-linux-x64_$MANAGER_VERSION.zip && \
    rm -rf /tmp/factorio-server-manager-linux-x64_$MANAGER_VERSION.zip
EXPOSE 80/tcp 443/tcp 34190-34200/udp

ENTRYPOINT [""/opt/init.sh""]
",
2139,56484a6117e307b4b78c4f7c4c059b1e2d0720ee,update awestruct to ruby 2.3,"update awestruct to ruby 2.3
","
FROM debian:jessie

RUN apt-get update \
&& apt-get install -y --no-install-recommends \
bzip2 \
ca-certificates \
curl \
libffi-dev \
libgdbm3 \
libssl-dev \
libyaml-dev \
procps \
zlib1g-dev \
&& rm -rf /var/lib/apt/lists/*

# skip installing gem documentation
RUN mkdir -p /usr/local/etc \
&& { \
echo 'install: --no-document'; \
echo 'update: --no-document'; \
} >> /usr/local/etc/gemrc

ENV RUBY_MAJOR 2.2
ENV RUBY_VERSION 2.2.5
ENV RUBY_DOWNLOAD_SHA256 30c4b31697a4ca4ea0c8db8ad30cf45e6690a0f09687e5d483c933c03ca335e3
ENV RUBYGEMS_VERSION 2.6.4
ENV BUNDLER_VERSION 1.12.3

ADD Gemfile /tmp/Gemfile

# some of ruby's build scripts are written in ruby
# we purge this later to make sure our final image uses what we just built
RUN set -ex \
&& buildDeps=' \
autoconf \
bison \
gcc \
libbz2-dev \
libgdbm-dev \
libglib2.0-dev \
libncurses-dev \
libreadline-dev \
libxml2-dev \
libxslt-dev \
make \
ruby \
' \
&& apt-get update \
&& apt-get install -y --no-install-recommends $buildDeps \
&& rm -rf /var/lib/apt/lists/* \
&& curl -fSL -o ruby.tar.gz ""http://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz"" \
&& echo ""$RUBY_DOWNLOAD_SHA256 *ruby.tar.gz"" | sha256sum -c - \
&& mkdir -p /usr/src/ruby \
&& tar -xzf ruby.tar.gz -C /usr/src/ruby --strip-components=1 \
&& rm ruby.tar.gz \
&& cd /usr/src/ruby \
&& { echo '#define ENABLE_PATH_CHECK 0'; echo; cat file.c; } > file.c.new && mv file.c.new file.c \
&& autoconf \
&& ./configure --disable-install-doc \
&& make -j""$(nproc)"" \
&& make install \
  && gem install bundler --version ""$BUNDLER_VERSION"" \
  && cd /tmp \
  && bundle install \
&& apt-get purge -y --auto-remove $buildDeps \
&& gem update --system $RUBYGEMS_VERSION \
&& rm -r /usr/src/ruby



RUN gem install bundler --version ""$BUNDLER_VERSION""

# install things globally, for great justice
# and don't create "".bundle"" in all our apps
ENV GEM_HOME /usr/local/bundle
ENV BUNDLE_PATH=""$GEM_HOME"" \
BUNDLE_BIN=""$GEM_HOME/bin"" \
BUNDLE_SILENCE_ROOT_WARNING=1 \
BUNDLE_APP_CONFIG=""$GEM_HOME""
ENV PATH $BUNDLE_BIN:$PATH
RUN mkdir -p ""$GEM_HOME"" ""$BUNDLE_BIN"" \
&& chmod 777 ""$GEM_HOME"" ""$BUNDLE_BIN""

WORKDIR /app

EXPOSE 4242

ENTRYPOINT [""awestruct""]

CMD [""--help""]
",
299,47ecafd9d67eeb0cdef5d97fba305695885908f3,Fix dependencies,"Fix dependencies
","ARG BASE_IMAGE_TAG

FROM wodby/alpine:${BASE_IMAGE_TAG}

ARG MARIADB_VER
ARG GALERA_VER
ARG WSREP_VER
ARG NPROC

ENV MARIADB_VER=""${MARIADB_VER}"" \
    GALERA_VER=""${GALERA_VER}"" \
    BACKUPS_DIR=""/mnt/backups""

COPY patches /tmp/patches

RUN set -xe; \
    \
    addgroup -g 101 -S mysql; \
    adduser -u 100 -D -S -s /bin/bash -G mysql mysql; \
    echo ""PS1='\w\$ '"" >> /home/mysql/.bashrc; \
    \
    apk add --update --no-cache -t .mariadb-run-deps \
        libaio \
        libstdc++ \
        libxml2 \
        linux-pam \
        make \
        pcre2 \
        pwgen \
        sudo \
        tzdata \
        xz-libs \
        zlib; \
    \
    apk add --update --no-cache -t .mariadb-build-deps \
        attr \
        autoconf \
        bison \
        build-base \
        cmake \
        coreutils \
        gnupg \
        libaio-dev \
        linux-pam-dev \
        # MariaDB 10.1 does not support OpenSSL 1.1.
        $(test ""${MARIADB_VER:0:4}"" = ""10.1"" && echo 'libressl-dev' || echo 'openssl-dev') \
        linux-headers \
        ncurses-dev \
        patch \
        pcre-dev \
        pcre2-dev \
        readline-dev \
        xz-dev \
        zlib-dev; \
    \
    mariadb_url=""https://downloads.mariadb.com/MariaDB/mariadb-${MARIADB_VER}/source/mariadb-${MARIADB_VER}.tar.gz""; \
    curl -fSL ""${mariadb_url}"" -o /tmp/mariadb.tar.gz; \
    curl -fSL ""${mariadb_url}.asc"" -o /tmp/mariadb.tar.gz.asc; \
    GPG_KEYS=""199369E5404BD5FC7D2FE43BCBCB082A1BB943DB;430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A;4D1BB29D63D98E422B2113B19334A25F8507EFA5"" gpg_verify /tmp/mariadb.tar.gz.asc /tmp/mariadb.tar.gz; \
    \
    tar zxf /tmp/mariadb.tar.gz -C /tmp; \
    #
    # Optional Galera Build/Install
    #
    if [ -n ""${GALERA_VER}"" ]; then \
        apk add --update --no-cache -t .galera-run-deps \
            boost-program_options \
            rsync \
            socat; \
        apk add --update --no-cache -t .galera-build-deps \
            boost-dev \
            check-dev \
            scons; \
        galera_url=""https://github.com/codership/galera/archive/release_${GALERA_VER}.tar.gz""; \
        curl -fSL ""${galera_url}"" -o /tmp/galera.tar.gz; \
        tar zxf /tmp/galera.tar.gz -C /tmp; \
        rmdir ""/tmp/galera-release_${GALERA_VER}/wsrep/src""; \
        ln -s ""/tmp/mariadb-${MARIADB_VER}/wsrep-lib/wsrep-API/v${WSREP_VER}"" ""/tmp/galera-release_${GALERA_VER}/wsrep/src""; \
        \
        cd ""/tmp/galera-release_${GALERA_VER}""; \
        for i in /tmp/patches/galera/""${GALERA_VER:0:4}""/*.patch; do patch -p1 -i ""${i}""; done; \
        RUN_TESTS=0 scripts/build.sh -j ""${NPROC:-$(nproc)}""; \
        apk del --purge .galera-build-deps; \
        \
        mkdir -p /usr/lib/galera; \
        cp -a ""/tmp/galera-release_${GALERA_VER}/libgalera_smm.so"" /usr/lib/galera; \
        chown -R mysql:mysql /usr/lib/galera; \
        \
        cp -a ""/tmp/galera-release_${GALERA_VER}/garb/garbd"" /usr/sbin; \
    fi; \
    \
    #
    # MariaDB Build
    #
    cd ""/tmp/mariadb-${MARIADB_VER}""; \
    # From alpine repository https://git.alpinelinux.org/cgit/aports/tree/main/mariadb?h=3.6-stable
    for i in /tmp/patches/""${MARIADB_VER:0:4}""/*.patch; do patch -p1 -i ""${i}""; done; \
    \
    cmake . -DBUILD_CONFIG=mysql_release \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DSYSCONFDIR=/etc/mysql \
    -DMYSQL_DATADIR=/var/lib/mysql \
    -DMYSQL_UNIX_ADDR=/run/mysqld/mysqld.sock \
    -DDEFAULT_CHARSET=utf8mb4 \
    -DDEFAULT_COLLATION=utf8mb4_general_ci \
    -DENABLED_LOCAL_INFILE=ON \
    -DINSTALL_INFODIR=share/mysql/docs \
    -DINSTALL_MANDIR=share/man \
    -DINSTALL_PLUGINDIR=lib/mysql/plugin \
    -DINSTALL_SCRIPTDIR=bin \
    -DINSTALL_INCLUDEDIR=include/mysql \
    -DINSTALL_DOCREADMEDIR=share/mysql \
    -DINSTALL_SUPPORTFILESDIR=share/mysql \
    -DINSTALL_MYSQLSHAREDIR=share/mysql \
    -DINSTALL_DOCDIR=share/mysql/docs \
    -DINSTALL_SHAREDIR=share/mysql \
    -DCONNECT_WITH_MYSQL=ON \
            -DCONNECT_WITH_LIBXML2=system \
            -DCONNECT_WITH_ODBC=NO \
            -DCONNECT_WITH_JDBC=NO \
    -DPLUGIN_ARCHIVE=YES \
            -DPLUGIN_ARIA=YES \
            -DPLUGIN_BLACKHOLE=YES \
            -DPLUGIN_CASSANDRA=NO \
            -DPLUGIN_CSV=YES \
            -DPLUGIN_MYISAM=YES \
            -DPLUGIN_MROONGA=NO \
            -DPLUGIN_OQGRAPH=NO \
            -DPLUGIN_PARTITION=YES \
            -DPLUGIN_ROCKSDB=YES \
            -DPLUGIN_SPHINX=NO \
            -DPLUGIN_TOKUDB=NO \
            -DPLUGIN_AUTH_GSSAPI=NO \
            -DPLUGIN_AUTH_GSSAPI_CLIENT=OFF \
            -DPLUGIN_CRACKLIB_PASSWORD_CHECK=NO \
    -DWITH_ASAN=OFF \
            -DWITH_EMBEDDED_SERVER=ON \
            -DWITH_EXTRA_CHARSETS=complex \
            -DWITH_INNODB_BZIP2=OFF \
            -DWITH_INNODB_LZ4=OFF \
            -DWITH_INNODB_LZMA=ON \
            -DWITH_INNODB_LZO=OFF \
            -DWITH_INNODB_SNAPPY=OFF \
            -DWITH_ROCKSDB_BZIP2=OFF \
            -DWITH_ROCKSDB_JEMALLOC=OFF \
            -DWITH_ROCKSDB_LZ4=OFF \
            -DWITH_ROCKSDB_ZSTD=OFF \
            -DWITH_ROCKSDB_SNAPPY=OFF \
            -DWITH_JEMALLOC=NO \
            -DWITH_LIBARCHIVE=system \
            -DWITH_LIBNUMA=NO \
            -DWITH_LIBWRAP=OFF \
            -DWITH_LIBWSEP=OFF \
            -DWITH_MARIABACKUP=ON \
            -DWITH_PCRE=system \
            -DWITH_READLINE=ON \
            -DWITH_SYSTEMD=no \
            -DWITH_SSL=system \
            -DWITH_VALGRIND=OFF \
            -DWITH_ZLIB=system; \
    \
    make -j ""${NPROC:-$(nproc)}""; \
    make install; \
    \
    # Script to fix volumes permissions via sudo.
    echo ""chown mysql:mysql /var/lib/mysql ${BACKUPS_DIR}"" > /usr/local/bin/init_volumes; \
    chmod +x /usr/local/bin/init_volumes; \
    echo 'mysql ALL=(root) NOPASSWD: /usr/local/bin/init_volumes' > /etc/sudoers.d/mysql; \
    \
    mkdir -p \
        /var/run/mysqld \
        /var/lib/mysql \
        /etc/mysql \
        /docker-entrypoint-initdb.d \
        ""${BACKUPS_DIR}""; \
    \
    chown -R mysql:mysql \
        /var/run/mysqld \
        /var/lib/mysql \
        /usr/lib/mysql/plugin \
        /etc/mysql \
        /docker-entrypoint-initdb.d \
        ""${BACKUPS_DIR}""; \
    \
    # Remove dev, test, doc, benchmark related files.
    rm -rf \
        /usr/bin/mysql_client_test \
        /usr/bin/mysql_client_test_embedded \
        /usr/bin/mysql_config \
        /usr/bin/mysqltest \
        /usr/bin/mysqltest_embedded \
        /usr/include/mysql \
        /usr/lib/libmariadb.so* \
        /usr/lib/libmariadbd.so.* \
        /usr/lib/libmysqlclient.so* \
        /usr/lib/libmysqlclient_r.so* \
        /usr/lib/libmysqld.so.* \
        /usr/mysql-test \
        /usr/share/man \
        /usr/sql-bench; \
    \
    find /usr/lib -name '*.a' -maxdepth 1 -print0 | xargs -0 rm; \
    find /usr/lib -name '*.so' -type l -maxdepth 1 -print0 | xargs -0 rm; \
    \
    # Stripping binaries and .so files.
    scanelf --symlink --recursive --nobanner --osabi --etype ""ET_DYN,ET_EXEC"" \
        /usr/bin/* /usr/sbin/* /usr/lib/mysql/plugin/* /usr/lib/galera/* | while read type osabi filename; do \
        ([ ""$osabi"" != ""STANDALONE"" ] && [ ""${filename}"" != ""/usr/bin/strip"" ]) || continue; \
        XATTR=$(getfattr --match="""" --dump ""${filename}""); \
        strip ""${filename}""; \
        if [ -n ""$XATTR"" ]; then \
            echo ""$XATTR"" | setfattr --restore=-; \
        fi; \
    done; \
    \
    # Clean up.
    apk del --purge .mariadb-build-deps; \
    rm -rf /tmp/*; \
    rm -rf /var/cache/apk/*

USER mysql

COPY bin /usr/local/bin
COPY templates /etc/gotpl/
COPY docker-entrypoint.sh /

WORKDIR /var/lib/mysql
VOLUME /var/lib/mysql

EXPOSE 3306

ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""mysqld""]
","ARG BASE_IMAGE_TAG

FROM wodby/alpine:${BASE_IMAGE_TAG}

ARG MARIADB_VER
ARG GALERA_VER
ARG WSREP_VER
ARG NPROC

ENV MARIADB_VER=""${MARIADB_VER}"" \
    GALERA_VER=""${GALERA_VER}"" \
    BACKUPS_DIR=""/mnt/backups""

COPY patches /tmp/patches

RUN set -xe; \
    \
    addgroup -g 101 -S mysql; \
    adduser -u 100 -D -S -s /bin/bash -G mysql mysql; \
    echo ""PS1='\w\$ '"" >> /home/mysql/.bashrc; \
    \
    apk add --update --no-cache -t .mariadb-run-deps \
        libaio \
        libstdc++ \
        libxml2 \
        linux-pam \
        make \
        $(test ""${MARIADB_VER:0:4}"" = ""10.5"" && echo 'pcre2' || echo 'pcre') \
        pwgen \
        sudo \
        tzdata \
        xz-libs \
        zlib; \
    \
    apk add --update --no-cache -t .mariadb-build-deps \
        attr \
        autoconf \
        bison \
        build-base \
        cmake \
        coreutils \
        gnupg \
        libaio-dev \
        linux-pam-dev \
        # MariaDB 10.1 does not support OpenSSL 1.1.
        $(test ""${MARIADB_VER:0:4}"" = ""10.1"" && echo 'libressl-dev' || echo 'openssl-dev') \
        linux-headers \
        ncurses-dev \
        patch \
        $(test ""${MARIADB_VER:0:4}"" = ""10.5"" && echo 'pcre2-dev' || echo 'pcre-dev') \
        readline-dev \
        xz-dev \
        zlib-dev; \
    \
    mariadb_url=""https://downloads.mariadb.com/MariaDB/mariadb-${MARIADB_VER}/source/mariadb-${MARIADB_VER}.tar.gz""; \
    curl -fSL ""${mariadb_url}"" -o /tmp/mariadb.tar.gz; \
    curl -fSL ""${mariadb_url}.asc"" -o /tmp/mariadb.tar.gz.asc; \
    GPG_KEYS=""199369E5404BD5FC7D2FE43BCBCB082A1BB943DB;430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A;4D1BB29D63D98E422B2113B19334A25F8507EFA5"" gpg_verify /tmp/mariadb.tar.gz.asc /tmp/mariadb.tar.gz; \
    \
    tar zxf /tmp/mariadb.tar.gz -C /tmp; \
    #
    # Optional Galera Build/Install
    #
    if [ -n ""${GALERA_VER}"" ]; then \
        apk add --update --no-cache -t .galera-run-deps \
            boost-program_options \
            rsync \
            socat; \
        apk add --update --no-cache -t .galera-build-deps \
            boost-dev \
            check-dev \
            scons; \
        galera_url=""https://github.com/codership/galera/archive/release_${GALERA_VER}.tar.gz""; \
        curl -fSL ""${galera_url}"" -o /tmp/galera.tar.gz; \
        tar zxf /tmp/galera.tar.gz -C /tmp; \
        rmdir ""/tmp/galera-release_${GALERA_VER}/wsrep/src""; \
        ln -s ""/tmp/mariadb-${MARIADB_VER}/wsrep-lib/wsrep-API/v${WSREP_VER}"" ""/tmp/galera-release_${GALERA_VER}/wsrep/src""; \
        \
        cd ""/tmp/galera-release_${GALERA_VER}""; \
        for i in /tmp/patches/galera/""${GALERA_VER:0:4}""/*.patch; do patch -p1 -i ""${i}""; done; \
        RUN_TESTS=0 scripts/build.sh -j ""${NPROC:-$(nproc)}""; \
        apk del --purge .galera-build-deps; \
        \
        mkdir -p /usr/lib/galera; \
        cp -a ""/tmp/galera-release_${GALERA_VER}/libgalera_smm.so"" /usr/lib/galera; \
        chown -R mysql:mysql /usr/lib/galera; \
        \
        cp -a ""/tmp/galera-release_${GALERA_VER}/garb/garbd"" /usr/sbin; \
    fi; \
    \
    #
    # MariaDB Build
    #
    cd ""/tmp/mariadb-${MARIADB_VER}""; \
    # From alpine repository https://git.alpinelinux.org/cgit/aports/tree/main/mariadb?h=3.6-stable
    for i in /tmp/patches/""${MARIADB_VER:0:4}""/*.patch; do patch -p1 -i ""${i}""; done; \
    \
    cmake . -DBUILD_CONFIG=mysql_release \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DSYSCONFDIR=/etc/mysql \
    -DMYSQL_DATADIR=/var/lib/mysql \
    -DMYSQL_UNIX_ADDR=/run/mysqld/mysqld.sock \
    -DDEFAULT_CHARSET=utf8mb4 \
    -DDEFAULT_COLLATION=utf8mb4_general_ci \
    -DENABLED_LOCAL_INFILE=ON \
    -DINSTALL_INFODIR=share/mysql/docs \
    -DINSTALL_MANDIR=share/man \
    -DINSTALL_PLUGINDIR=lib/mysql/plugin \
    -DINSTALL_SCRIPTDIR=bin \
    -DINSTALL_INCLUDEDIR=include/mysql \
    -DINSTALL_DOCREADMEDIR=share/mysql \
    -DINSTALL_SUPPORTFILESDIR=share/mysql \
    -DINSTALL_MYSQLSHAREDIR=share/mysql \
    -DINSTALL_DOCDIR=share/mysql/docs \
    -DINSTALL_SHAREDIR=share/mysql \
    -DCONNECT_WITH_MYSQL=ON \
            -DCONNECT_WITH_LIBXML2=system \
            -DCONNECT_WITH_ODBC=NO \
            -DCONNECT_WITH_JDBC=NO \
    -DPLUGIN_ARCHIVE=YES \
            -DPLUGIN_ARIA=YES \
            -DPLUGIN_BLACKHOLE=YES \
            -DPLUGIN_CASSANDRA=NO \
            -DPLUGIN_CSV=YES \
            -DPLUGIN_MYISAM=YES \
            -DPLUGIN_MROONGA=NO \
            -DPLUGIN_OQGRAPH=NO \
            -DPLUGIN_PARTITION=YES \
            -DPLUGIN_ROCKSDB=YES \
            -DPLUGIN_SPHINX=NO \
            -DPLUGIN_TOKUDB=NO \
            -DPLUGIN_AUTH_GSSAPI=NO \
            -DPLUGIN_AUTH_GSSAPI_CLIENT=OFF \
            -DPLUGIN_CRACKLIB_PASSWORD_CHECK=NO \
    -DWITH_ASAN=OFF \
            -DWITH_EMBEDDED_SERVER=ON \
            -DWITH_EXTRA_CHARSETS=complex \
            -DWITH_INNODB_BZIP2=OFF \
            -DWITH_INNODB_LZ4=OFF \
            -DWITH_INNODB_LZMA=ON \
            -DWITH_INNODB_LZO=OFF \
            -DWITH_INNODB_SNAPPY=OFF \
            -DWITH_ROCKSDB_BZIP2=OFF \
            -DWITH_ROCKSDB_JEMALLOC=OFF \
            -DWITH_ROCKSDB_LZ4=OFF \
            -DWITH_ROCKSDB_ZSTD=OFF \
            -DWITH_ROCKSDB_SNAPPY=OFF \
            -DWITH_JEMALLOC=NO \
            -DWITH_LIBARCHIVE=system \
            -DWITH_LIBNUMA=NO \
            -DWITH_LIBWRAP=OFF \
            -DWITH_LIBWSEP=OFF \
            -DWITH_MARIABACKUP=ON \
            -DWITH_PCRE=system \
            -DWITH_READLINE=ON \
            -DWITH_SYSTEMD=no \
            -DWITH_SSL=system \
            -DWITH_VALGRIND=OFF \
            -DWITH_ZLIB=system; \
    \
    make -j ""${NPROC:-$(nproc)}""; \
    make install; \
    \
    # Script to fix volumes permissions via sudo.
    echo ""chown mysql:mysql /var/lib/mysql ${BACKUPS_DIR}"" > /usr/local/bin/init_volumes; \
    chmod +x /usr/local/bin/init_volumes; \
    echo 'mysql ALL=(root) NOPASSWD: /usr/local/bin/init_volumes' > /etc/sudoers.d/mysql; \
    \
    mkdir -p \
        /var/run/mysqld \
        /var/lib/mysql \
        /etc/mysql \
        /docker-entrypoint-initdb.d \
        ""${BACKUPS_DIR}""; \
    \
    chown -R mysql:mysql \
        /var/run/mysqld \
        /var/lib/mysql \
        /usr/lib/mysql/plugin \
        /etc/mysql \
        /docker-entrypoint-initdb.d \
        ""${BACKUPS_DIR}""; \
    \
    # Remove dev, test, doc, benchmark related files.
    rm -rf \
        /usr/bin/mysql_client_test \
        /usr/bin/mysql_client_test_embedded \
        /usr/bin/mysql_config \
        /usr/bin/mysqltest \
        /usr/bin/mysqltest_embedded \
        /usr/include/mysql \
        /usr/lib/libmariadb.so* \
        /usr/lib/libmariadbd.so.* \
        /usr/lib/libmysqlclient.so* \
        /usr/lib/libmysqlclient_r.so* \
        /usr/lib/libmysqld.so.* \
        /usr/mysql-test \
        /usr/share/man \
        /usr/sql-bench; \
    \
    find /usr/lib -name '*.a' -maxdepth 1 -print0 | xargs -0 rm; \
    find /usr/lib -name '*.so' -type l -maxdepth 1 -print0 | xargs -0 rm; \
    \
    # Stripping binaries and .so files.
    scanelf --symlink --recursive --nobanner --osabi --etype ""ET_DYN,ET_EXEC"" \
        /usr/bin/* /usr/sbin/* /usr/lib/mysql/plugin/* /usr/lib/galera/* | while read type osabi filename; do \
        ([ ""$osabi"" != ""STANDALONE"" ] && [ ""${filename}"" != ""/usr/bin/strip"" ]) || continue; \
        XATTR=$(getfattr --match="""" --dump ""${filename}""); \
        strip ""${filename}""; \
        if [ -n ""$XATTR"" ]; then \
            echo ""$XATTR"" | setfattr --restore=-; \
        fi; \
    done; \
    \
    # Clean up.
    apk del --purge .mariadb-build-deps; \
    rm -rf /tmp/*; \
    rm -rf /var/cache/apk/*

USER mysql

COPY bin /usr/local/bin
COPY templates /etc/gotpl/
COPY docker-entrypoint.sh /

WORKDIR /var/lib/mysql
VOLUME /var/lib/mysql

EXPOSE 3306

ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""mysqld""]
"
2127,62a19f1f0472341c1123f35917e443316e31b77a,docker build fix,"docker build fix
","FROM java:8

MAINTAINER EMC

ADD build/dist/mongoose*.tgz /opt/

RUN ln -s /opt/mongoose* /opt/mongoose

EXPOSE 1099,9020-9040

ENTRYPOINT [""java"", ""-jar"", ""/opt/mongoose/mongoose.jar""]
",
128,22f7f36a55a47a8740a68a88de82f43ac19eb37c,Fix Dockerfile,"Fix Dockerfile
","FROM node:argon
CMD npm install && npm start
","FROM node:argon

# Create app directory
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Install app dependencies
COPY package.json /usr/src/app/
ENV NODE_ENV production
ENV NPM_CONFIG_PRODUCTION false
ENV DEBUG app*
ENV PORT 8080
ENV DATABASE_URL mongodb://heroku_72vsvrmw:rl7hd5113dkqf45fp6nd7ilfa0@ds033797.mlab.com:33797/heroku_72vsvrmw
RUN npm install

# Bundle app source
COPY . /usr/src/app

EXPOSE 8080
CMD [ ""npm"", ""start"" ]
"
2081,e6333e2802f65c36ce6dad913aa4ac583319fcc0,Bump Dockerfile to 10.2.0-811-ea36d43e,"Bump Dockerfile to 10.2.0-811-ea36d43e
","FROM stellar/base:latest

MAINTAINER Mat Schaffer <mat@stellar.org>

ENV STELLAR_CORE_VERSION 10.2.0-810-54504c71

EXPOSE 11625
EXPOSE 11626

VOLUME /data
VOLUME /postgresql-unix-sockets
VOLUME /heka

ADD install /
RUN /install

ADD heka /heka
ADD confd /etc/confd
ADD utils /utils
ADD start /

CMD [""/start""]
",
2075,afe8d2b9c9da520e1582c720928be76af4ea41f6,Bumped source to 20201124-36e8399,"Bumped source to 20201124-36e8399
","FROM docker.pkg.github.com/dock0/service/service:20201124-291f445
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
2249,5e7da2337763400ead5bbff17395a87ca31a547b,Upgraded to GoCD 17.1.0,"Upgraded to GoCD 17.1.0
","# We need edge for the xmlstarlet package right now.
FROM alpine:3.5
MAINTAINER karel.bemelmans@unibet.com

# Install more apk packages we might need
RUN apk --no-cache --update add \
  apache2-utils \
  bash \
  curl \
  git \
  openjdk8-jre \
  subversion \
  xmlstarlet \
  && rm -rf /var/cache/apk/*

# Add go user and group
RUN addgroup -g 500 go && adduser -u 500 -h /var/lib/go-server -H -S -G go go

# Install GoCD Server from zip file
ARG GO_MAJOR_VERSION=16.12.0
ARG GO_BUILD_VERSION=4352
ARG GO_VERSION=""${GO_MAJOR_VERSION}-${GO_BUILD_VERSION}""
ARG GOCD_SHA256=6ca2b62426167821f9e182f4c4173adb8cf86057b4d8deed8fb4fc29c2881ce5

RUN curl -L --silent https://download.gocd.io/binaries/${GO_VERSION}/generic/go-server-${GO_VERSION}.zip \
       -o /tmp/go-server.zip \
  && echo ""${GOCD_SHA256}  /tmp/go-server.zip"" | sha256sum -c - \
  && unzip /tmp/go-server.zip -d /usr/local \
  && ln -s /usr/local/go-server-${GO_MAJOR_VERSION} /usr/local/go-server \
  && chown -R go:go /usr/local/go-server-${GO_MAJOR_VERSION} \
  && rm /tmp/go-server.zip

RUN mkdir -p /etc/default \
  && cp /usr/local/go-server-${GO_MAJOR_VERSION}/go-server.default /etc/default/go-server \
  && sed -i -e ""s/DAEMON=Y/DAEMON=N/"" /etc/default/go-server

RUN mkdir /etc/go && chown go:go /etc/go \
  && mkdir /var/lib/go-server && chown go:go /var/lib/go-server \
  && mkdir /var/log/go-server && chown go:go /var/log/go-server

# Expose ports needed
EXPOSE 8153 8154

VOLUME /etc/go
VOLUME /var/lib/go-server
VOLUME /var/log/go-server

# add the entrypoint config and run it when we start the container
COPY ./docker-entrypoint.sh /
RUN chown go:go /docker-entrypoint.sh && chmod 500 /docker-entrypoint.sh

USER go
ENTRYPOINT [""/docker-entrypoint.sh""]
",
82,ad2a3c7d6b3bae8f3843bd4cb1584e6315ca6d0b,Add ant-junit and bc to java container,Add ant-junit and bc to java container,"# DOCKER-VERSION 1.1.0

#inherit from the default container, which have all the needed script to launch tasks
FROM    ingi/inginious-c-default

# Add java 1.7
RUN     yum install -y java-1.7.0-openjdk java-1.7.0-openjdk-devel ant
","# DOCKER-VERSION 1.1.0

#inherit from the default container, which have all the needed script to launch tasks
FROM    ingi/inginious-c-default

# Add java 1.7
RUN     yum install -y java-1.7.0-openjdk java-1.7.0-openjdk-devel ant ant-junit bc
"
367,8a10596b9c86dc70dc597ac18011a5cbf2d2c38a,Bump amazon/aws-cli from 2.2.1 to 2.2.2 (#324),"Bump amazon/aws-cli from 2.2.1 to 2.2.2 (#324)

","FROM amazon/aws-cli:2.2.1

RUN mkdir -p ~/.aws/cli

COPY alias /root/.aws/cli/alias

ENTRYPOINT [""/usr/local/bin/aws""]
","FROM amazon/aws-cli:2.2.2

RUN mkdir -p ~/.aws/cli

COPY alias /root/.aws/cli/alias

ENTRYPOINT [""/usr/local/bin/aws""]
"
2207,188a520fdb7ccf190131a191da749c996f4c42e0,Bumped source to 20210701-a9f2016,"Bumped source to 20210701-a9f2016
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210701-928277e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
169,b86c0ce4751a39a655cfcba6300f4e7c80b3b1e5,Android client docker: version bump Go to 1.3.1,"Android client docker: version bump Go to 1.3.1

Change-Id: Id3cce36343688c05eff220327534f7fa5880af5d
","# Build environment in which to build the Camlistore Android app.
#
# This extends the Dockerfile from https://index.docker.io/u/wasabeef/android/

FROM wasabeef/android
MAINTAINER bradfitz <brad@danga.com>

# Found these from: android list sdk -u -e
RUN android list sdk -u -e | grep build-tools- | perl -npe 's/.+""(.+)""/$1/' > /tmp/build-tools-version
RUN perl -e 'die ""No Android build tools version found."" unless -s ""/tmp/build-tools-version""'
RUN echo y | android update sdk -u -t $(cat /tmp/build-tools-version)
RUN echo y | android update sdk -u -t android-17

# Don't need mercurial yet, since we're just using the archive URL to fetch Go.
# But it's possible we may want to switch to using hg, in which case:
# RUN yum -y install mercurial

# Update the GOVERS to depend on a new version of Go.
#
# The 70499e5fbe5b version is in the Go 1.3 dev cycle (2014-02-21),
# after I fixed some net/http bugs (that are also worked around in
# Camlistore, but...), and after some Go 1.3 GC precision fixes. It
# enables precise stack scanning too, for better or worse (risk).
ENV GOVERS 70499e5fbe5b

RUN cd /usr/local && curl -O http://go.googlecode.com/archive/$GOVERS.zip
RUN cd /usr/local && unzip -q $GOVERS.zip
RUN cd /usr/local && mv go-$GOVERS go
RUN chmod 0755 /usr/local/go/src/make.bash
RUN echo $GOVERS > /usr/local/go/VERSION
RUN GOROOT=/usr/local/go GOARCH=arm bash -c ""cd /usr/local/go/src && ./make.bash""


ENV ANDROID_HOME /usr/local/android-sdk-linux
ENV ANT_HOME /usr/local/apache-ant-1.9.2
ENV PATH $PATH:$ANDROID_HOME/tools
ENV PATH $PATH:$ANDROID_HOME/platform-tools
ENV PATH $PATH:$ANT_HOME/bin
ENV IN_DOCKER 1
","# Build environment in which to build the Camlistore Android app.
#
# This extends the Dockerfile from https://index.docker.io/u/wasabeef/android/

FROM wasabeef/android
MAINTAINER bradfitz <brad@danga.com>

# Found these from: android list sdk -u -e
RUN android list sdk -u -e | grep build-tools- | perl -npe 's/.+""(.+)""/$1/' > /tmp/build-tools-version
RUN perl -e 'die ""No Android build tools version found."" unless -s ""/tmp/build-tools-version""'
RUN echo y | android update sdk -u -t $(cat /tmp/build-tools-version)
RUN echo y | android update sdk -u -t android-17

# Don't need mercurial yet, since we're just using the archive URL to fetch Go.
# But it's possible we may want to switch to using hg, in which case:
# RUN yum -y install mercurial

# Update the GOVERS to depend on a new version of Go.
#
# The 073fc578434b version is Go 1.3.1 (2014-02-21),
# to satisfy the dependency for Go 1.3 in the Docker build of
# camput.
ENV GOVERS 073fc578434b

RUN cd /usr/local && curl -O http://go.googlecode.com/archive/$GOVERS.zip
RUN cd /usr/local && unzip -q $GOVERS.zip
RUN cd /usr/local && mv go-$GOVERS go
RUN chmod 0755 /usr/local/go/src/make.bash
RUN echo $GOVERS > /usr/local/go/VERSION
RUN GOROOT=/usr/local/go GOARCH=arm bash -c ""cd /usr/local/go/src && ./make.bash""


ENV ANDROID_HOME /usr/local/android-sdk-linux
ENV ANT_HOME /usr/local/apache-ant-1.9.2
ENV PATH $PATH:$ANDROID_HOME/tools
ENV PATH $PATH:$ANDROID_HOME/platform-tools
ENV PATH $PATH:$ANT_HOME/bin
ENV IN_DOCKER 1
"
2254,f26f7948e954b8a5055812d538a5c2cd5f2dcaa7,Added libvshadow to libyal project configuration (#5698),"Added libvshadow to libyal project configuration (#5698)

","# Copyright 2020 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

FROM gcr.io/oss-fuzz-base/base-builder

RUN apt-get update && apt-get install -y make autoconf automake autopoint libtool pkg-config flex byacc

RUN git clone --depth 1 https://github.com/libyal/libfplist.git libfplist
RUN git clone --depth 1 https://github.com/libyal/libftxf.git libftxf
RUN git clone --depth 1 https://github.com/libyal/libfusn.git libfusn
RUN git clone --depth 1 https://github.com/libyal/libfwnt.git libfwnt
RUN git clone --depth 1 https://github.com/libyal/libfwps.git libfwps
RUN git clone --depth 1 https://github.com/libyal/libfwsi.git libfwsi

RUN git clone --depth 1 https://github.com/libyal/libagdb.git libagdb
RUN git clone --depth 1 https://github.com/libyal/libcreg.git libcreg
RUN git clone --depth 1 https://github.com/libyal/libesedb.git libesedb
RUN git clone --depth 1 https://github.com/libyal/libevt.git libevt
RUN git clone --depth 1 https://github.com/libyal/libevtx.git libevtx
RUN git clone --depth 1 https://github.com/libyal/libexe.git libexe
RUN git clone --depth 1 https://github.com/libyal/liblnk.git liblnk
RUN git clone --depth 1 https://github.com/libyal/libmdmp.git libmdmp
RUN git clone --depth 1 https://github.com/libyal/libmsiecf.git libmsiecf
RUN git clone --depth 1 https://github.com/libyal/libnk2.git libnk2
RUN git clone --depth 1 https://github.com/libyal/libolecf.git libolecf
RUN git clone --depth 1 https://github.com/libyal/libpff.git libpff
RUN git clone --depth 1 https://github.com/libyal/libregf.git libregf
RUN git clone --depth 1 https://github.com/libyal/libscca.git libscca

RUN git clone --depth 1 https://github.com/libyal/libfsapfs.git libfsapfs
RUN git clone --depth 1 https://github.com/libyal/libfsext.git libfsext
RUN git clone --depth 1 https://github.com/libyal/libfshfs.git libfshfs
RUN git clone --depth 1 https://github.com/libyal/libfsntfs.git libfsntfs
RUN git clone --depth 1 https://github.com/libyal/libfsxfs.git libfsxfs

RUN git clone --depth 1 https://github.com/libyal/libbde.git libbde
RUN git clone --depth 1 https://github.com/libyal/libluksde.git libluksde
RUN git clone --depth 1 https://github.com/libyal/libvsgpt.git libvsgpt
RUN git clone --depth 1 https://github.com/libyal/libvslvm.git libvslvm
RUN git clone --depth 1 https://github.com/libyal/libvsmbr.git libvsmbr

RUN git clone --depth 1 https://github.com/libyal/libewf.git libewf
RUN git clone --depth 1 https://github.com/libyal/libmodi.git libmodi
RUN git clone --depth 1 https://github.com/libyal/libqcow.git libqcow
RUN git clone --depth 1 https://github.com/libyal/libsmraw.git libsmraw
RUN git clone --depth 1 https://github.com/libyal/libvhdi.git libvhdi
RUN git clone --depth 1 https://github.com/libyal/libvmdk.git libvmdk

WORKDIR libyal
COPY build.sh $SRC/
",
365,43831b4ad82143d7532960157468d2c6f8447d3e,Bumped source to 20211210-5bd4e44,"Bumped source to 20211210-5bd4e44
","FROM docker.pkg.github.com/dock0/arch/arch:20211210-4b4802a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20211210-5bd4e44
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
387,a8408a41f49a626740c8ffa5f53cb360a15999e4,Update selenium/node-chrome:latest Docker digest to d9465ea,Update selenium/node-chrome:latest Docker digest to d9465ea,"FROM selenium/node-chrome:latest@sha256:656a0c72255c756c39587578465841e0fc0fa8e4b5b3949e33fac3ca2eb0aa8a

USER root

RUN apt-get update -qqy \
  && apt-get install -y git \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/* \
  && rm /bin/sh && ln -s /bin/bash /bin/sh \
  && chown seluser /usr/local

ENV NVM_DIR /usr/local/nvm
RUN wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash \
  && source $NVM_DIR/nvm.sh \
  && nvm install v8

ENV CHROME_BIN /opt/google/chrome/chrome
ENV INSIDE_DOCKER=1

WORKDIR /usr/src
ENTRYPOINT source $NVM_DIR/nvm.sh && npm i && npm test
","FROM selenium/node-chrome:latest@sha256:d9465eab867411e36b6e5befa2d6b5862288ff836e25bf4215d0afcdeca58279

USER root

RUN apt-get update -qqy \
  && apt-get install -y git \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/* \
  && rm /bin/sh && ln -s /bin/bash /bin/sh \
  && chown seluser /usr/local

ENV NVM_DIR /usr/local/nvm
RUN wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash \
  && source $NVM_DIR/nvm.sh \
  && nvm install v8

ENV CHROME_BIN /opt/google/chrome/chrome
ENV INSIDE_DOCKER=1

WORKDIR /usr/src
ENTRYPOINT source $NVM_DIR/nvm.sh && npm i && npm test
"
2108,cc149592fcd5882fa933fa54bf7f8ef86784df78,Update Dockerfile,"Update Dockerfile

Updated acme-tiny client to fix license issue","FROM nginx

MAINTAINER Weiyan Shao ""lighteningman@gmail.com""

WORKDIR /root

ENV DOCKER_GEN_VERSION 0.7.0

ADD https://github.com/just-containers/s6-overlay/releases/download/v1.11.0.1/s6-overlay-amd64.tar.gz /tmp/
ADD https://github.com/jwilder/docker-gen/releases/download/$DOCKER_GEN_VERSION/docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz /tmp/
ADD https://raw.githubusercontent.com/diafygi/acme-tiny/fcb7cd6f66e951eeae76ff2f48d8ad3e40da37ef/acme_tiny.py /bin/acme_tiny

RUN tar xzf /tmp/s6-overlay-amd64.tar.gz -C / &&\
    tar -C /bin -xzf /tmp/docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz && \
    rm /tmp/docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz && \
    rm /tmp/s6-overlay-amd64.tar.gz && \
    rm /etc/nginx/conf.d/default.conf && \
    apt-get update && \
    apt-get install -y python ruby cron && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

COPY ./fs_overlay /

RUN chmod a+x /bin/* && \
    chmod a+x /etc/cron.weekly/renew_certs

VOLUME /var/lib/https-portal

ENTRYPOINT [""/init""]
",
343,df029a98277a5811783c4f9a1569930aa10652a4,Bump golang from 1.16.2 to 1.16.3,"Bump golang from 1.16.2 to 1.16.3

Bumps golang from 1.16.2 to 1.16.3.

Signed-off-by: dependabot[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@github.com>",,
2203,7ecf4a1d0cb7e4c973ff919997b11e5d3abcf552,:whale: bumped to latest php 7.10.0 base,":whale: bumped to latest php 7.10.0 base
","FROM uqlibrary/docker-fpm70:14

RUN rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro && \
  yum install -y http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm && \
  yum install -y file && \
  yum install -y mysql && \
  yum install -y poppler-utils && \
  yum install -y perl-Image-ExifTool --enablerepo=epel-testing && \
  yum install -y ffmpeg --enablerepo=nux-dextop && \
  yum install -y ImageMagick-last ImageMagick-last-devel --enablerepo=remi --skip-broken && \
  wget -O /usr/local/src/jhove.tar.gz http://downloads.sourceforge.net/project/jhove/jhove/JHOVE%201.11/jhove-1_11.tar.gz && \
  wget -O /usr/local/src/yamdi.tar.gz http://downloads.sourceforge.net/project/yamdi/yamdi/1.9/yamdi-1.9.tar.gz && \
  wget -O /usr/local/src/graphviz.tar.gz http://www.graphviz.org/pub/graphviz/stable/SOURCES/graphviz-2.38.0.tar.gz && \
  cd /usr/local/src && tar xvzf yamdi.tar.gz && \
  cd /usr/local/src && tar xvzf jhove.tar.gz && \
  cd /usr/local/src && tar xvzf graphviz.tar.gz && \
  yum group install -y ""Development Tools"" && \
  cd /usr/local/src/yamdi-1.9 && gcc yamdi.c -o yamdi -O2 -Wall && mv yamdi /usr/bin/yamdi && chmod +x /usr/bin/yamdi && cd .. && rm -rf yamdi-1.9 && rm -f yamdi.tar.gz && \
  yum install -y cairo-devel expat-devel freetype-devel gd-devel fontconfig-devel glib libpng zlib pango-devel pango && \
  cd /usr/local/src/graphviz-2.38.0 && ./configure && make && make install && \
  yum install -y java-1.8.0-openjdk-headless && \
  mv /usr/local/src/jhove /usr/local/jhove && rm -f /usr/local/src/jhove.tar.gz && \
  yum group remove -y ""Development Tools"" && \
  yum autoremove -y && yum clean all

COPY jhove /usr/local/jhove/
RUN chmod +x /usr/local/jhove/jhove && sed -i 's/\#JHOVE_HOME=\[fill in path to jhove directory\]/JHOVE_HOME=\/usr\/local\/jhove\//' /usr/local/jhove/jhove

COPY etc/php-fpm.d/www.conf /etc/php-fpm.d/www.conf

RUN mkdir -p /espace/data && \
  mkdir -p /espace_san/incoming && \
  sed -i ""s/memory_limit = 128M/memory_limit = 800M/"" /etc/php.ini && \
  sed -i ""s/post_max_size = 8M/post_max_size = 800M/"" /etc/php.ini && \
  sed -i ""s/upload_max_filesize = 30M/upload_max_filesize = 800M/"" /etc/php.ini && \
  sed -i ""s/; max_input_vars = 1000/max_input_vars = 5000/"" /etc/php.ini
",
351,ae642147090eb0ff64cd16a439d4845b15696fa5,Bump version of terraform and kubectl,"Bump version of terraform and kubectl
","FROM jenkins:1.625.3
MAINTAINER Marat Garafutdinov <marat.g@samsung.com>

USER root
COPY plugins.txt /usr/share/jenkins/plugins.txt
COPY keys /root/.ssh/
RUN chmod 400 /root/.ssh/id_rsa

# versions
ENV TERRAFORM_VERSION 0.6.6
ENV TERRAFORM_EXECUTE_VERSION v0.0.2
ENV TERRAFORM_COREOSBOX_VERSION v0.0.1
ENV KUBERNETES_VERSION v1.1.1
ENV VAULT_VERSION 0.3.1

# install jenkins plugins
RUN /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt

# skip installing gem documentation
RUN echo 'gem: --no-rdoc --no-ri' >> /.gemrc

# ruby, ansible and golang
RUN apt-get update \
    && apt-get install -y --force-yes \
      curl \
      unzip \
      jq \
      ruby \
      ruby-dev \
      build-essential \
      python-yaml \
      python-jinja2 \
      python-httplib2 \
      python-keyczar \
      python-paramiko \
      python-setuptools \
      python-pkg-resources \
      git \
      python-pip \
      vim \
      golang \
      rsync \
    && rm -rf /var/lib/apt/lists/*

ENV GOROOT=/usr/lib/go
RUN mkdir /etc/ansible/
RUN pip install ansible
COPY ansible.cfg /etc/ansible/ansible.cfg

# install bundler and other gems
RUN gem install bundler aruba cucumber

# install terraform and custom providers
RUN wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \
  && wget https://github.com/Samsung-AG/terraform-provider-execute/releases/download/${TERRAFORM_EXECUTE_VERSION}/terraform-provider-execute_linux_amd64.tar.gz \
  && wget https://github.com/Samsung-AG/terraform-provider-coreosbox/releases/download/${TERRAFORM_COREOSBOX_VERSION}/terraform-provider-coreosbox_linux_amd64.tar.gz \
  && unzip -o terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/local/bin \
  && tar -xvf terraform-provider-coreosbox_linux_amd64.tar.gz \
  && tar -xvf terraform-provider-execute_linux_amd64.tar.gz \
  && cp terraform* /usr/local/bin \
  && rm terraform*

# install kubectl
RUN wget https://github.com/kubernetes/kubernetes/releases/download/${KUBERNETES_VERSION}/kubernetes.tar.gz \
  && tar -xvf kubernetes.tar.gz \
  && cp kubernetes/platforms/linux/amd64/kubectl /usr/bin \
  && rm kubernetes.tar.gz

# install vault cli
RUN wget https://dl.bintray.com/mitchellh/vault/vault_${VAULT_VERSION}_linux_amd64.zip \
    && unzip -o vault_${VAULT_VERSION}_linux_amd64.zip -d /usr/local/bin \
    && rm vault_${VAULT_VERSION}_linux_amd64.zip

# install hipchat messaging script
COPY hipchat_room_message /usr/local/bin/hipchat_room_message
RUN chmod +x /usr/local/bin/hipchat_room_message

# install awscli
RUN pip install awscli

# preload host keys for github.com
RUN ssh-keyscan -H github.com >> ~/.ssh/known_hosts
","FROM jenkins:1.625.3
MAINTAINER Marat Garafutdinov <marat.g@samsung.com>

USER root
COPY plugins.txt /usr/share/jenkins/plugins.txt
COPY keys /root/.ssh/
RUN chmod 400 /root/.ssh/id_rsa

# versions
ENV TERRAFORM_VERSION 0.6.8
ENV TERRAFORM_EXECUTE_VERSION v0.0.2
ENV TERRAFORM_COREOSBOX_VERSION v0.0.1
ENV KUBERNETES_VERSION v1.1.3
ENV VAULT_VERSION 0.3.1

# install jenkins plugins
RUN /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt

# skip installing gem documentation
RUN echo 'gem: --no-rdoc --no-ri' >> /.gemrc

# ruby, ansible and golang
RUN apt-get update \
    && apt-get install -y --force-yes \
      curl \
      unzip \
      jq \
      ruby \
      ruby-dev \
      build-essential \
      python-yaml \
      python-jinja2 \
      python-httplib2 \
      python-keyczar \
      python-paramiko \
      python-setuptools \
      python-pkg-resources \
      git \
      python-pip \
      vim \
      golang \
      rsync \
    && rm -rf /var/lib/apt/lists/*

ENV GOROOT=/usr/lib/go
RUN mkdir /etc/ansible/
RUN pip install ansible
COPY ansible.cfg /etc/ansible/ansible.cfg

# install bundler and other gems
RUN gem install bundler aruba cucumber

# install terraform and custom providers
RUN wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \
  && wget https://github.com/Samsung-AG/terraform-provider-execute/releases/download/${TERRAFORM_EXECUTE_VERSION}/terraform-provider-execute_linux_amd64.tar.gz \
  && wget https://github.com/Samsung-AG/terraform-provider-coreosbox/releases/download/${TERRAFORM_COREOSBOX_VERSION}/terraform-provider-coreosbox_linux_amd64.tar.gz \
  && unzip -o terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/local/bin \
  && tar -xvf terraform-provider-coreosbox_linux_amd64.tar.gz \
  && tar -xvf terraform-provider-execute_linux_amd64.tar.gz \
  && cp terraform* /usr/local/bin \
  && rm terraform*

# install kubectl
RUN wget https://github.com/kubernetes/kubernetes/releases/download/${KUBERNETES_VERSION}/kubernetes.tar.gz \
  && tar -xvf kubernetes.tar.gz \
  && cp kubernetes/platforms/linux/amd64/kubectl /usr/bin \
  && rm kubernetes.tar.gz

# install vault cli
RUN wget https://dl.bintray.com/mitchellh/vault/vault_${VAULT_VERSION}_linux_amd64.zip \
    && unzip -o vault_${VAULT_VERSION}_linux_amd64.zip -d /usr/local/bin \
    && rm vault_${VAULT_VERSION}_linux_amd64.zip

# install hipchat messaging script
COPY hipchat_room_message /usr/local/bin/hipchat_room_message
RUN chmod +x /usr/local/bin/hipchat_room_message

# install awscli
RUN pip install awscli

# preload host keys for github.com
RUN ssh-keyscan -H github.com >> ~/.ssh/known_hosts
"
179,8cedf26f34394042aa5cdeb49a30f284b242a471,Bumped source to 20200414-499f783,"Bumped source to 20200414-499f783
","FROM docker.pkg.github.com/dock0/arch/arch:20200414-e5fc19e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20200414-499f783
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
414,8e0da3b27c02bb45471161921e186790cf888fe9,update dockerfile for new pipenv stuffs,"update dockerfile for new pipenv stuffs

tested this running on docker locally, and also tested this on Heroku (no docker)
","FROM ubuntu

RUN apt-get update
RUN apt-get install -y python python-pip build-essential libssl-dev libffi-dev python-dev

WORKDIR /app

ADD ./ /app

RUN pip install -r ./requirements.txt

CMD python run.py
","FROM python:2

COPY . /app
WORKDIR /app

RUN pip install pipenv
RUN pipenv install --system --deploy

CMD [""gunicorn"", ""-b 0.0.0.0:5000"", ""wsgi""]
"
378,ebe5bc1e2cdabe5aae7ff28eb871409aac7b6fcd,fix(manager): gradle needs a jdk (#6006),"fix(manager): gradle needs a jdk (#6006)

","ARG IMAGE=latest

# Base image
#============
FROM renovate/yarn:1.22.4@sha256:0115b2988eeb4b691a829ab118b5195f842167c78dcca0462d11e05cfbf19ad6 AS base

LABEL maintainer=""Rhys Arkins <rhys@arkins.net>""
LABEL name=""renovate""
LABEL org.opencontainers.image.source=""https://github.com/renovatebot/renovate"" \
      org.opencontainers.image.url=""https://renovatebot.com"" \
      org.opencontainers.image.licenses=""AGPL-3.0-only""

USER root
WORKDIR /usr/src/app/

# Build image
#============
FROM base as tsbuild

# Python 3 and make are required to build node-re2
RUN apt-get update && apt-get install -y python3-minimal build-essential
# force python3 for node-gyp
RUN rm -rf /usr/bin/python && ln /usr/bin/python3 /usr/bin/python

COPY package.json .
COPY yarn.lock .
COPY tools tools
COPY patches patches
RUN yarn install --frozen-lockfile

COPY lib lib
COPY tsconfig.json tsconfig.json
COPY tsconfig.app.json tsconfig.app.json


RUN yarn build:docker

# Prune node_modules to production-only so they can be copied into the final image

RUN yarn install --production --frozen-lockfile


# Final-base image
#============
FROM base as final-base

# Docker client and group

RUN groupadd -g 999 docker
RUN usermod -aG docker ubuntu

# renovate: datasource=docker depName=docker versioning=docker
ENV DOCKER_VERSION=19.03.8

RUN curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz \
    && tar xzvf docker-${DOCKER_VERSION}.tgz --strip 1 \
    -C /usr/local/bin docker/docker \
    && rm docker-${DOCKER_VERSION}.tgz

# Slim image
#============
FROM final-base as slim

ENV RENOVATE_BINARY_SOURCE=docker

# Full image
#============
FROM final-base as latest

RUN apt-get update && \
    apt-get install -y gpg wget unzip xz-utils openssh-client bsdtar build-essential openjdk-8-jre-headless dirmngr && \
    rm -rf /var/lib/apt/lists/*


## Gradle (needs java-jre, installed above)

# renovate: datasource=gradle-version depName=gradle versioning=maven
ENV GRADLE_VERSION=6.3

RUN wget --no-verbose https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip && \
    unzip -q -d /opt/ gradle-$GRADLE_VERSION-bin.zip && \
    rm -f gradle-$GRADLE_VERSION-bin.zip && \
    mv /opt/gradle-$GRADLE_VERSION /opt/gradle && \
    ln -s /opt/gradle/bin/gradle /usr/local/bin/gradle

# Erlang

RUN cd /tmp && \
    curl https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb -o erlang-solutions_1.0_all.deb && \
    dpkg -i erlang-solutions_1.0_all.deb && \
    rm -f erlang-solutions_1.0_all.deb

ENV ERLANG_VERSION=22.0.2-1

RUN apt-get update && \
    apt-cache policy esl-erlang && \
    apt-get install -y esl-erlang=1:$ERLANG_VERSION && \
    rm -rf /var/lib/apt/lists/*

# Elixir

ENV ELIXIR_VERSION=1.8.2

RUN curl -L https://github.com/elixir-lang/elixir/releases/download/v${ELIXIR_VERSION}/Precompiled.zip -o Precompiled.zip && \
    mkdir -p /opt/elixir-${ELIXIR_VERSION}/ && \
    unzip Precompiled.zip -d /opt/elixir-${ELIXIR_VERSION}/ && \
    rm Precompiled.zip

ENV PATH $PATH:/opt/elixir-${ELIXIR_VERSION}/bin

# PHP Composer

RUN echo ""deb http://ppa.launchpad.net/ondrej/php/ubuntu bionic main"" > /etc/apt/sources.list.d/ondrej-php.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 14AA40EC0831756756D7F66C4F4EA0AAE5267A6C && \
    apt-get update && \
    apt-get -y install php7.4-cli php7.4-mbstring php7.4-curl && \
    rm -rf /var/lib/apt/lists/*

# renovate: datasource=github-releases depName=composer/composer
ENV COMPOSER_VERSION=1.10.5

RUN php -r ""copy('https://github.com/composer/composer/releases/download/$COMPOSER_VERSION/composer.phar', '/usr/local/bin/composer');""

RUN chmod +x /usr/local/bin/composer

# Go Modules

RUN apt-get update && apt-get install -y bzr mercurial && \
    rm -rf /var/lib/apt/lists/*

ENV GOLANG_VERSION=1.13.4

# Disable GOPROXY and GOSUMDB until we offer a solid solution to configure
# private repositories.
ENV GOPROXY=direct GOSUMDB=off

RUN wget -q -O go.tgz ""https://golang.org/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz"" && \
  tar -C /usr/local -xzf go.tgz && \
  rm go.tgz && \
  export PATH=""/usr/local/go/bin:$PATH""

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN mkdir -p ""$GOPATH/src"" ""$GOPATH/bin"" && chmod -R 777 ""$GOPATH""

ENV CGO_ENABLED=0

# Python

RUN apt-get update && apt-get install -y python3.8-dev python3.8-venv python3-distutils && \
    rm -rf /var/lib/apt/lists/*

RUN rm -fr /usr/bin/python3 && ln /usr/bin/python3.8 /usr/bin/python3
RUN rm -rf /usr/bin/python && ln /usr/bin/python3.8 /usr/bin/python

# Pip

RUN curl --silent https://bootstrap.pypa.io/get-pip.py | python

# CocoaPods
RUN apt-get update && apt-get install -y ruby ruby2.5-dev && rm -rf /var/lib/apt/lists/*
RUN ruby --version

# renovate: datasource=rubygems depName=cocoapods versioning=ruby
ENV COCOAPODS_VERSION 1.9.1
RUN gem install --no-rdoc --no-ri cocoapods -v ${COCOAPODS_VERSION}

USER ubuntu

# HOME does not get passed after user switch :-(
ENV HOME=/home/ubuntu

# Cargo

ENV RUST_BACKTRACE=1 \
  PATH=${HOME}/.cargo/bin:$PATH

ENV RUST_VERSION=1.36.0

RUN set -ex ;\
  curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path --profile minimal --default-toolchain ${RUST_VERSION} -y

# Mix and Rebar

RUN mix local.hex --force
RUN mix local.rebar --force

# Pipenv

ENV PATH=""${HOME}/.local/bin:$PATH""

RUN pip install --user pipenv

# Poetry

# renovate: datasource=github-releases depName=python-poetry/poetry
ENV POETRY_VERSION=1.0.5

RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - --version ${POETRY_VERSION}

ENV PATH=""${HOME}/.poetry/bin:$PATH""
RUN poetry config virtualenvs.in-project false

# Renovate
#=========
FROM $IMAGE as final


COPY package.json .

COPY --from=tsbuild /usr/src/app/dist dist
COPY --from=tsbuild /usr/src/app/node_modules node_modules
COPY bin bin
COPY data data


# Numeric user ID for the ubuntu user. Used to indicate a non-root user to OpenShift
USER 1000

ENTRYPOINT [""node"", ""/usr/src/app/dist/renovate.js""]
CMD []
","ARG IMAGE=latest

# Base image
#============
FROM renovate/yarn:1.22.4@sha256:0115b2988eeb4b691a829ab118b5195f842167c78dcca0462d11e05cfbf19ad6 AS base

LABEL maintainer=""Rhys Arkins <rhys@arkins.net>""
LABEL name=""renovate""
LABEL org.opencontainers.image.source=""https://github.com/renovatebot/renovate"" \
      org.opencontainers.image.url=""https://renovatebot.com"" \
      org.opencontainers.image.licenses=""AGPL-3.0-only""

USER root
WORKDIR /usr/src/app/

# Build image
#============
FROM base as tsbuild

# Python 3 and make are required to build node-re2
RUN apt-get update && apt-get install -y python3-minimal build-essential
# force python3 for node-gyp
RUN rm -rf /usr/bin/python && ln /usr/bin/python3 /usr/bin/python

COPY package.json .
COPY yarn.lock .
COPY tools tools
COPY patches patches
RUN yarn install --frozen-lockfile

COPY lib lib
COPY tsconfig.json tsconfig.json
COPY tsconfig.app.json tsconfig.app.json


RUN yarn build:docker

# Prune node_modules to production-only so they can be copied into the final image

RUN yarn install --production --frozen-lockfile


# Final-base image
#============
FROM base as final-base

# Docker client and group

RUN groupadd -g 999 docker
RUN usermod -aG docker ubuntu

# renovate: datasource=docker depName=docker versioning=docker
ENV DOCKER_VERSION=19.03.8

RUN curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz \
    && tar xzvf docker-${DOCKER_VERSION}.tgz --strip 1 \
    -C /usr/local/bin docker/docker \
    && rm docker-${DOCKER_VERSION}.tgz

# Slim image
#============
FROM final-base as slim

ENV RENOVATE_BINARY_SOURCE=docker

# Full image
#============
FROM final-base as latest

RUN apt-get update && \
    apt-get install -y gpg wget unzip xz-utils openssh-client bsdtar build-essential openjdk-8-jdk-headless dirmngr && \
    rm -rf /var/lib/apt/lists/*


## Gradle (needs java-jre, installed above)

# renovate: datasource=gradle-version depName=gradle versioning=maven
ENV GRADLE_VERSION=6.3

RUN wget --no-verbose https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip && \
    unzip -q -d /opt/ gradle-$GRADLE_VERSION-bin.zip && \
    rm -f gradle-$GRADLE_VERSION-bin.zip && \
    mv /opt/gradle-$GRADLE_VERSION /opt/gradle && \
    ln -s /opt/gradle/bin/gradle /usr/local/bin/gradle

# Erlang

RUN cd /tmp && \
    curl https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb -o erlang-solutions_1.0_all.deb && \
    dpkg -i erlang-solutions_1.0_all.deb && \
    rm -f erlang-solutions_1.0_all.deb

ENV ERLANG_VERSION=22.0.2-1

RUN apt-get update && \
    apt-cache policy esl-erlang && \
    apt-get install -y esl-erlang=1:$ERLANG_VERSION && \
    rm -rf /var/lib/apt/lists/*

# Elixir

ENV ELIXIR_VERSION=1.8.2

RUN curl -L https://github.com/elixir-lang/elixir/releases/download/v${ELIXIR_VERSION}/Precompiled.zip -o Precompiled.zip && \
    mkdir -p /opt/elixir-${ELIXIR_VERSION}/ && \
    unzip Precompiled.zip -d /opt/elixir-${ELIXIR_VERSION}/ && \
    rm Precompiled.zip

ENV PATH $PATH:/opt/elixir-${ELIXIR_VERSION}/bin

# PHP Composer

RUN echo ""deb http://ppa.launchpad.net/ondrej/php/ubuntu bionic main"" > /etc/apt/sources.list.d/ondrej-php.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 14AA40EC0831756756D7F66C4F4EA0AAE5267A6C && \
    apt-get update && \
    apt-get -y install php7.4-cli php7.4-mbstring php7.4-curl && \
    rm -rf /var/lib/apt/lists/*

# renovate: datasource=github-releases depName=composer/composer
ENV COMPOSER_VERSION=1.10.5

RUN php -r ""copy('https://github.com/composer/composer/releases/download/$COMPOSER_VERSION/composer.phar', '/usr/local/bin/composer');""

RUN chmod +x /usr/local/bin/composer

# Go Modules

RUN apt-get update && apt-get install -y bzr mercurial && \
    rm -rf /var/lib/apt/lists/*

ENV GOLANG_VERSION=1.13.4

# Disable GOPROXY and GOSUMDB until we offer a solid solution to configure
# private repositories.
ENV GOPROXY=direct GOSUMDB=off

RUN wget -q -O go.tgz ""https://golang.org/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz"" && \
  tar -C /usr/local -xzf go.tgz && \
  rm go.tgz && \
  export PATH=""/usr/local/go/bin:$PATH""

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN mkdir -p ""$GOPATH/src"" ""$GOPATH/bin"" && chmod -R 777 ""$GOPATH""

ENV CGO_ENABLED=0

# Python

RUN apt-get update && apt-get install -y python3.8-dev python3.8-venv python3-distutils && \
    rm -rf /var/lib/apt/lists/*

RUN rm -fr /usr/bin/python3 && ln /usr/bin/python3.8 /usr/bin/python3
RUN rm -rf /usr/bin/python && ln /usr/bin/python3.8 /usr/bin/python

# Pip

RUN curl --silent https://bootstrap.pypa.io/get-pip.py | python

# CocoaPods
RUN apt-get update && apt-get install -y ruby ruby2.5-dev && rm -rf /var/lib/apt/lists/*
RUN ruby --version

# renovate: datasource=rubygems depName=cocoapods versioning=ruby
ENV COCOAPODS_VERSION 1.9.1
RUN gem install --no-rdoc --no-ri cocoapods -v ${COCOAPODS_VERSION}

USER ubuntu

# HOME does not get passed after user switch :-(
ENV HOME=/home/ubuntu

# Cargo

ENV RUST_BACKTRACE=1 \
  PATH=${HOME}/.cargo/bin:$PATH

ENV RUST_VERSION=1.36.0

RUN set -ex ;\
  curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path --profile minimal --default-toolchain ${RUST_VERSION} -y

# Mix and Rebar

RUN mix local.hex --force
RUN mix local.rebar --force

# Pipenv

ENV PATH=""${HOME}/.local/bin:$PATH""

RUN pip install --user pipenv

# Poetry

# renovate: datasource=github-releases depName=python-poetry/poetry
ENV POETRY_VERSION=1.0.5

RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - --version ${POETRY_VERSION}

ENV PATH=""${HOME}/.poetry/bin:$PATH""
RUN poetry config virtualenvs.in-project false

# Renovate
#=========
FROM $IMAGE as final


COPY package.json .

COPY --from=tsbuild /usr/src/app/dist dist
COPY --from=tsbuild /usr/src/app/node_modules node_modules
COPY bin bin
COPY data data


# Numeric user ID for the ubuntu user. Used to indicate a non-root user to OpenShift
USER 1000

ENTRYPOINT [""node"", ""/usr/src/app/dist/renovate.js""]
CMD []
"
2277,799b7e5daa1f2674c8cd776384ffc40ec4900d70,Bumped source to 20210403-72dc6c7,"Bumped source to 20210403-72dc6c7
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210403-c4dcdef
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
2102,ce20fdd8074b6c86d684016879dc27481ef7c4c6,Bumped source to 20201222-dc7b1c0,"Bumped source to 20201222-dc7b1c0
","FROM docker.pkg.github.com/dock0/arch/arch:20201222-e042ba0
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
2262,f219e99407ea6bfb4021f496ca4aec95a9786c5e,chore(tests): install g++ since Docker Hub won't create a new image,"chore(tests): install g++ since Docker Hub won't create a new image
","FROM malept/electron-forge-container:latest

RUN mkdir /code
WORKDIR /code
ADD . /code/
",
316,880252fdb5d10913c7aa0922331b359b713b64cf,Add libgconf-2-4 to Dockerfile because chromedriver depends on it,"Add libgconf-2-4 to Dockerfile because chromedriver depends on it

Trying to fix error in dotnet buildpack pipeline.

Signed-off-by: Leah Hanson <59915d4d5a651c1df4fd522b917423b47c84f68b@pivotal.io>
","FROM ruby:2.3.1-slim

ENV LANG=""C.UTF-8""

COPY config/apt-key.gpg config/google-chrome-apt-key.pub /tmp/
RUN echo ""deb http://packages.cloud.google.com/apt cloud-sdk-jessie main"" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
  && echo ""deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"" >> /etc/apt/sources.list.d/google-chrome.list \
  && apt-key add /tmp/apt-key.gpg \
  && apt-key add /tmp/google-chrome-apt-key.pub

RUN apt-get update \
  && apt-get -y install \
  aufs-tools \
  curl \
  expect \
  git \
  google-cloud-sdk \
  iptables \
  jq \
  libmysqlclient-dev \
  libpq-dev \
  libsqlite3-dev \
  lsb-release \
  module-init-tools \
  npm \
  php5 \
  python-dev \
  python-pip \
  shellcheck \
  wget \
  zip \
  google-chrome-stable && \
  apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN curl -sSL https://get.docker.com/ | sh

RUN git config --global user.email ""cf-buildpacks-eng@pivotal.io""
RUN git config --global user.name ""CF Buildpacks Team CI Server""
RUN git config --global core.pager cat

# download and install chromedriver
 RUN wget -O chromedriver.zip 'https://chromedriver.storage.googleapis.com/2.34/chromedriver_linux64.zip' \
   && [ e42a55f9e28c3b545ef7c7727a2b4218c37489b4282e88903e4470e92bc1d967 = $(shasum -a 256 chromedriver.zip | cut -d' ' -f1) ] \
   && unzip chromedriver.zip -d /usr/local/bin/ \
   && rm chromedriver.zip

# composer is a package manager for PHP apps
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/
RUN mv /usr/bin/composer.phar /usr/bin/composer

# download the CF-CLI
RUN wget -O cf-cli.tgz 'https://cli.run.pivotal.io/stable?release=linux64-binary&version=6.35.2&source=github-rel' \
  && [ 708a7757d3b3192a40e2cd8073b4f20afc59b7cbb0cb6bd88244268dfc6eb77d = $(shasum -a 256 cf-cli.tgz | cut -d' ' -f1) ] \
  && tar xzf cf-cli.tgz -C /usr/bin \
  && rm cf-cli.tgz

# download the bosh2 CLI
RUN curl https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-2.0.45-linux-amd64 -o /usr/local/bin/bosh2 \
  && [ bf04be72daa7da0c9bbeda16fda7fc7b2b8af51e = $(shasum -a 1 /usr/local/bin/bosh2 | cut -d' ' -f1) ] \
  && chmod +x /usr/local/bin/bosh2

# download bbl
RUN wget -O /usr/local/bin/bbl 'https://github.com/cloudfoundry/bosh-bootloader/releases/download/v5.11.6/bbl-v5.11.6_linux_x86-64' \
  && [ 2ee595a0b8bc2546151f26e5fb986f599c1149557c9e15791b0043844f881866 = $(shasum -a 256 /usr/local/bin/bbl | cut -d' ' -f1) ] \
  && chmod +x /usr/local/bin/bbl

# download terraform (used by bbl)
RUN wget -O terraform.zip 'https://releases.hashicorp.com/terraform/0.10.8/terraform_0.10.8_linux_amd64.zip' \
  && [ b786c0cf936e24145fad632efd0fe48c831558cc9e43c071fffd93f35e3150db = $(shasum -a 256 terraform.zip | cut -d' ' -f1) ] \
  && funzip terraform.zip > /usr/local/bin/terraform \
  && rm terraform.zip \
  && chmod 755 /usr/local/bin/terraform

#download spiff for spiffy things
RUN wget -O spiff.zip 'https://github.com/cloudfoundry-incubator/spiff/releases/download/v1.0.8/spiff_linux_amd64.zip' \
  && [ e5b49b7f32b2b3973536bf2a48beda2d236956bebff7677aa109cc2b71f56002 = $(shasum -a 256 spiff.zip | cut -d' ' -f1) ] \
  && funzip spiff.zip > /usr/bin/spiff \
  && rm spiff.zip
RUN chmod 755 /usr/bin/spiff

# Ensure Concourse Filter binary is present
RUN wget 'https://github.com/pivotal-cf-experimental/concourse-filter/releases/download/v0.0.4/concourse-filter' \
  && [ 2bcad41417bf5bdc545a0912c30d9c466abd4ed0cffa6b02b678f06f71a73bb8 = $(shasum -a 256 concourse-filter | cut -d' ' -f1) ] \
  && mv concourse-filter /usr/local/bin \
  && chmod +x /usr/local/bin/concourse-filter

# AWS CLI
RUN pip install awscli

# when docker container starts, ensure login scripts run
COPY build/*.sh /etc/profile.d/

# install buildpacks-ci Gemfile
RUN gem update --system
RUN gem install bundler -v 1.15.4
COPY Gemfile /usr/local/Gemfile
COPY Gemfile.lock /usr/local/Gemfile.lock
RUN cd /usr/local && bundle install
RUN bundle binstub bundler --force

#install fly-cli
RUN curl ""https://buildpacks.ci.cf-app.com/api/v1/cli?arch=amd64&platform=linux"" -sfL -o /usr/local/bin/fly \
  && chmod +x /usr/local/bin/fly

# git-hooks and git-secrets
RUN curl -L https://github.com/git-hooks/git-hooks/releases/download/v1.1.4/git-hooks_linux_amd64.tar.gz -o githooks.tgz \
  && [ 3f21c856064f8f08f8c25494ac784882a2b8811eea3bfb721a6c595b55577c48 = $(shasum -a 256 githooks.tgz | cut -d' ' -f1) ] \
  && tar -zxf githooks.tgz --to-stdout > /usr/local/bin/git-hooks \
  && rm githooks.tgz \
  && chmod 755 /usr/local/bin/git-hooks

RUN git clone https://github.com/awslabs/git-secrets && cd git-secrets && make install

# Ensure that Concourse filtering is on for non-interactive shells
ENV BASH_ENV /etc/profile.d/filter.sh

# Install go 1.9
RUN cd /usr/local \
  && curl -L https://buildpacks.cloudfoundry.org/dependencies/go/go1.9.2.linux-amd64-f60fe671.tar.gz -o go.tar.gz \
  && [ 6af27e6a59b4538fbf196c8019ef67c5cfeb6d21298bf9bb6bab1390a4da3448 = $(shasum -a 256 go.tar.gz | cut -d' ' -f1) ] \
  && tar xf go.tar.gz \
  && rm go.tar.gz \
  && ln -s /usr/local/go/bin/* /usr/local/bin/

ENV GOROOT=/usr/local/go

# Install poltergeist for running dotnet-core-buildpack specs
RUN gem install phantomjs && ruby -e 'require ""phantomjs""; Phantomjs.path'

# Add git known host
RUN mkdir -p /root/.ssh/ && echo github.com,192.30.252.131 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ== > /root/.ssh/known_hosts
","FROM ruby:2.3.1-slim

ENV LANG=""C.UTF-8""

COPY config/apt-key.gpg config/google-chrome-apt-key.pub /tmp/
RUN echo ""deb http://packages.cloud.google.com/apt cloud-sdk-jessie main"" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
  && echo ""deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"" >> /etc/apt/sources.list.d/google-chrome.list \
  && apt-key add /tmp/apt-key.gpg \
  && apt-key add /tmp/google-chrome-apt-key.pub

RUN apt-get update \
  && apt-get -y install \
  aufs-tools \
  curl \
  expect \
  git \
  google-cloud-sdk \
  iptables \
  jq \
  libmysqlclient-dev \
  libpq-dev \
  libsqlite3-dev \
  libgconf-2-4 \
  lsb-release \
  module-init-tools \
  npm \
  php5 \
  python-dev \
  python-pip \
  shellcheck \
  wget \
  zip \
  google-chrome-stable && \
  apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN curl -sSL https://get.docker.com/ | sh

RUN git config --global user.email ""cf-buildpacks-eng@pivotal.io""
RUN git config --global user.name ""CF Buildpacks Team CI Server""
RUN git config --global core.pager cat

# download and install chromedriver
 RUN wget -O chromedriver.zip 'https://chromedriver.storage.googleapis.com/2.34/chromedriver_linux64.zip' \
   && [ e42a55f9e28c3b545ef7c7727a2b4218c37489b4282e88903e4470e92bc1d967 = $(shasum -a 256 chromedriver.zip | cut -d' ' -f1) ] \
   && unzip chromedriver.zip -d /usr/local/bin/ \
   && rm chromedriver.zip

# composer is a package manager for PHP apps
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/
RUN mv /usr/bin/composer.phar /usr/bin/composer

# download the CF-CLI
RUN wget -O cf-cli.tgz 'https://cli.run.pivotal.io/stable?release=linux64-binary&version=6.35.2&source=github-rel' \
  && [ 708a7757d3b3192a40e2cd8073b4f20afc59b7cbb0cb6bd88244268dfc6eb77d = $(shasum -a 256 cf-cli.tgz | cut -d' ' -f1) ] \
  && tar xzf cf-cli.tgz -C /usr/bin \
  && rm cf-cli.tgz

# download the bosh2 CLI
RUN curl https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-2.0.45-linux-amd64 -o /usr/local/bin/bosh2 \
  && [ bf04be72daa7da0c9bbeda16fda7fc7b2b8af51e = $(shasum -a 1 /usr/local/bin/bosh2 | cut -d' ' -f1) ] \
  && chmod +x /usr/local/bin/bosh2

# download bbl
RUN wget -O /usr/local/bin/bbl 'https://github.com/cloudfoundry/bosh-bootloader/releases/download/v5.11.6/bbl-v5.11.6_linux_x86-64' \
  && [ 2ee595a0b8bc2546151f26e5fb986f599c1149557c9e15791b0043844f881866 = $(shasum -a 256 /usr/local/bin/bbl | cut -d' ' -f1) ] \
  && chmod +x /usr/local/bin/bbl

# download terraform (used by bbl)
RUN wget -O terraform.zip 'https://releases.hashicorp.com/terraform/0.10.8/terraform_0.10.8_linux_amd64.zip' \
  && [ b786c0cf936e24145fad632efd0fe48c831558cc9e43c071fffd93f35e3150db = $(shasum -a 256 terraform.zip | cut -d' ' -f1) ] \
  && funzip terraform.zip > /usr/local/bin/terraform \
  && rm terraform.zip \
  && chmod 755 /usr/local/bin/terraform

#download spiff for spiffy things
RUN wget -O spiff.zip 'https://github.com/cloudfoundry-incubator/spiff/releases/download/v1.0.8/spiff_linux_amd64.zip' \
  && [ e5b49b7f32b2b3973536bf2a48beda2d236956bebff7677aa109cc2b71f56002 = $(shasum -a 256 spiff.zip | cut -d' ' -f1) ] \
  && funzip spiff.zip > /usr/bin/spiff \
  && rm spiff.zip
RUN chmod 755 /usr/bin/spiff

# Ensure Concourse Filter binary is present
RUN wget 'https://github.com/pivotal-cf-experimental/concourse-filter/releases/download/v0.0.4/concourse-filter' \
  && [ 2bcad41417bf5bdc545a0912c30d9c466abd4ed0cffa6b02b678f06f71a73bb8 = $(shasum -a 256 concourse-filter | cut -d' ' -f1) ] \
  && mv concourse-filter /usr/local/bin \
  && chmod +x /usr/local/bin/concourse-filter

# AWS CLI
RUN pip install awscli

# when docker container starts, ensure login scripts run
COPY build/*.sh /etc/profile.d/

# install buildpacks-ci Gemfile
RUN gem update --system
RUN gem install bundler -v 1.15.4
COPY Gemfile /usr/local/Gemfile
COPY Gemfile.lock /usr/local/Gemfile.lock
RUN cd /usr/local && bundle install
RUN bundle binstub bundler --force

#install fly-cli
RUN curl ""https://buildpacks.ci.cf-app.com/api/v1/cli?arch=amd64&platform=linux"" -sfL -o /usr/local/bin/fly \
  && chmod +x /usr/local/bin/fly

# git-hooks and git-secrets
RUN curl -L https://github.com/git-hooks/git-hooks/releases/download/v1.1.4/git-hooks_linux_amd64.tar.gz -o githooks.tgz \
  && [ 3f21c856064f8f08f8c25494ac784882a2b8811eea3bfb721a6c595b55577c48 = $(shasum -a 256 githooks.tgz | cut -d' ' -f1) ] \
  && tar -zxf githooks.tgz --to-stdout > /usr/local/bin/git-hooks \
  && rm githooks.tgz \
  && chmod 755 /usr/local/bin/git-hooks

RUN git clone https://github.com/awslabs/git-secrets && cd git-secrets && make install

# Ensure that Concourse filtering is on for non-interactive shells
ENV BASH_ENV /etc/profile.d/filter.sh

# Install go 1.9
RUN cd /usr/local \
  && curl -L https://buildpacks.cloudfoundry.org/dependencies/go/go1.9.2.linux-amd64-f60fe671.tar.gz -o go.tar.gz \
  && [ 6af27e6a59b4538fbf196c8019ef67c5cfeb6d21298bf9bb6bab1390a4da3448 = $(shasum -a 256 go.tar.gz | cut -d' ' -f1) ] \
  && tar xf go.tar.gz \
  && rm go.tar.gz \
  && ln -s /usr/local/go/bin/* /usr/local/bin/

ENV GOROOT=/usr/local/go

# Install poltergeist for running dotnet-core-buildpack specs
RUN gem install phantomjs && ruby -e 'require ""phantomjs""; Phantomjs.path'

# Add git known host
RUN mkdir -p /root/.ssh/ && echo github.com,192.30.252.131 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ== > /root/.ssh/known_hosts
"
47,c83f96d3049941ea0653aec9382d75956a28b7b5,Bumped source to 20200713-4a82ca8,"Bumped source to 20200713-4a82ca8
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200713-ac2d221
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200713-4a82ca8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
151,972c76a4001c76fbe330900d0c41393050c58908,Fix Redis server setup in docker file,"Fix Redis server setup in docker file
","FROM buildpack-deps:wheezy

RUN groupadd --gid 1000 node \
  && useradd --uid 1000 --gid node --shell /bin/bash --create-home node

# gpg keys listed at https://github.com/nodejs/node
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

ENV NPM_CONFIG_LOGLEVEL info
ENV NODE_VERSION 4.7.2

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"" \
  && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  && grep "" node-v$NODE_VERSION-linux-x64.tar.xz\$"" SHASUMS256.txt | sha256sum -c - \
  && tar -xJf ""node-v$NODE_VERSION-linux-x64.tar.xz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-x64.tar.xz"" SHASUMS256.txt.asc SHASUMS256.txt \
  && ln -s /usr/local/bin/node /usr/local/bin/nodejs
CMD [ ""node"" ]

RUN apt-get update
RUN apt-get install -y redis-server

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

ARG NODE_ENV
ENV NODE_ENV $NODE_ENV
COPY package.json /usr/src/app/
RUN npm install && npm cache clean
COPY . /usr/src/app

CMD [""npm"", ""start""]
EXPOSE 3000","FROM buildpack-deps:wheezy

RUN groupadd --gid 1000 node \
  && useradd --uid 1000 --gid node --shell /bin/bash --create-home node

# gpg keys listed at https://github.com/nodejs/node
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

ENV NPM_CONFIG_LOGLEVEL info
ENV NODE_VERSION 4.7.2

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"" \
  && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  && grep "" node-v$NODE_VERSION-linux-x64.tar.xz\$"" SHASUMS256.txt | sha256sum -c - \
  && tar -xJf ""node-v$NODE_VERSION-linux-x64.tar.xz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-x64.tar.xz"" SHASUMS256.txt.asc SHASUMS256.txt \
  && ln -s /usr/local/bin/node /usr/local/bin/nodejs
CMD [ ""node"" ]

# Install Redis.
RUN \
  cd /tmp && \
  wget http://download.redis.io/redis-stable.tar.gz && \
  tar xvzf redis-stable.tar.gz && \
  cd redis-stable && \
  make && \
  make install && \
  cp -f src/redis-sentinel /usr/local/bin && \
  mkdir -p /etc/redis && \
  cp -f *.conf /etc/redis && \
  rm -rf /tmp/redis-stable* && \
  sed -i 's/^\(bind .*\)$/# \1/' /etc/redis/redis.conf && \
  sed -i 's/^\(daemonize .*\)$/# \1/' /etc/redis/redis.conf && \
  sed -i 's/^\(dir .*\)$/# \1\ndir \/data/' /etc/redis/redis.conf && \
  sed -i 's/^\(logfile .*\)$/# \1/' /etc/redis/redis.conf

# Define mountable directories.
VOLUME [""/data""]

# Define working directory.
WORKDIR /data

#CMD [""redis-server"", ""/etc/redis/redis.conf""]
RUN redis-server &

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

ARG NODE_ENV
ENV NODE_ENV $NODE_ENV
COPY package.json /usr/src/app/
RUN npm install && npm cache clean
COPY . /usr/src/app

CMD [""npm"", ""start""]
EXPOSE 3000"
2296,4cf002a92495e973bb1d7571e40e32b3b4697cbb,Run docker/update.sh,"Run docker/update.sh
","FROM alpine:3.3

RUN apk add --no-cache curl

ENV DOCKER_VERSION 1.12.0-dev
ENV DOCKER_URL https://master.dockerproject.org/linux/amd64/docker-1.12.0-dev.tgz
ENV DOCKER_SHA256 3a45162f37f12f284815ec32a6a3bcbe4dffa181d768a924441a922451d99ff5

RUN set -x \
&& curl -fSL ""${DOCKER_URL}"" -o docker.tgz \
&& echo ""${DOCKER_SHA256} *docker.tgz"" | sha256sum -c - \
&& tar -xzvf docker.tgz \
&& mv docker/* /usr/local/bin/ \
&& rmdir docker \
&& rm docker.tgz \
&& docker -v

COPY docker-entrypoint.sh /usr/local/bin/

ENTRYPOINT [""docker-entrypoint.sh""]
CMD [""sh""]
",
210,cd46c51f77fabac4abd60ca29f7da82faaaf2b5f,updated Dockerfile to use crate version 3.2.8,"updated Dockerfile to use crate version 3.2.8
","## -*- docker-image-name: ""docker-crate"" -*-
#
# Crate Dockerfile
# https://github.com/crate/docker-crate
#

FROM centos:7

RUN groupadd crate && useradd -u 1000 -g crate -d /crate crate

RUN curl --retry 8 -o /openjdk.tar.gz https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_linux-x64_bin.tar.gz \
    && echo ""7a6bb980b9c91c478421f865087ad2d69086a0583aeeb9e69204785e8e97dcfd */openjdk.tar.gz"" | sha256sum -c - \
    && tar -C /opt -zxf /openjdk.tar.gz \
    && rm /openjdk.tar.gz

ENV JAVA_HOME /opt/jdk-11.0.1

# REF: https://github.com/elastic/elasticsearch-docker/issues/171
RUN ln -sf /etc/pki/ca-trust/extracted/java/cacerts /opt/jdk-11.0.1/lib/security/cacerts

# install crate
RUN yum install -y yum-utils https://centos7.iuscommunity.org/ius-release.rpm \
    && yum makecache \
    && yum install -y python36u openssl \
    && yum clean all \
    && rm -rf /var/cache/yum \
    && curl -fSL -O https://cdn.crate.io/downloads/releases/crate-3.2.7.tar.gz \
    && curl -fSL -O https://cdn.crate.io/downloads/releases/crate-3.2.7.tar.gz.asc \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 90C23FC6585BC0717F8FBFC37FAAE51A06F6EAEB \
    && gpg --batch --verify crate-3.2.7.tar.gz.asc crate-3.2.7.tar.gz \
    && rm -rf ""$GNUPGHOME"" crate-3.2.7.tar.gz.asc \
    && tar -xf crate-3.2.7.tar.gz -C /crate --strip-components=1 \
    && rm crate-3.2.7.tar.gz \
    && ln -sf /usr/bin/python3.6 /usr/bin/python3 \
    && ln -sf /usr/bin/python3.6 /usr/bin/python

COPY --chown=1000:0 config/crate.yml /crate/config/crate.yml
COPY --chown=1000:0 config/log4j2.properties /crate/config/log4j2.properties

# install crash
RUN curl -fSL -O https://cdn.crate.io/downloads/releases/crash_standalone_0.24.2\
    && curl -fSL -O https://cdn.crate.io/downloads/releases/crash_standalone_0.24.2.asc \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 90C23FC6585BC0717F8FBFC37FAAE51A06F6EAEB \
    && gpg --batch --verify crash_standalone_0.24.2.asc crash_standalone_0.24.2 \
    && rm -rf ""$GNUPGHOME"" crash_standalone_0.24.2.asc \
    && mv crash_standalone_0.24.2 /usr/local/bin/crash \
    && chmod +x /usr/local/bin/crash

ENV PATH /crate/bin:$PATH
# Default heap size for Docker, can be overwritten by args
ENV CRATE_HEAP_SIZE 512M

RUN mkdir -p /data/data /data/log

VOLUME /data

WORKDIR /data

# http: 4200 tcp
# transport: 4300 tcp
# postgres protocol ports: 5432 tcp
EXPOSE 4200 4300 5432

# These COPY commands have been moved before the last one due to the following issues:
# https://github.com/moby/moby/issues/37965#issuecomment-448926448
# https://github.com/moby/moby/issues/38866
COPY --chown=1000:0 config/crate.yml /crate/config/crate.yml
COPY --chown=1000:0 config/log4j2.properties /crate/config/log4j2.properties

LABEL maintainer=""Crate.io <office@crate.io>"" \
    org.label-schema.schema-version=""1.0"" \
    org.label-schema.build-date=""2019-04-09T14:51:03.875528243+00:00"" \
    org.label-schema.name=""crate"" \
    org.label-schema.description=""CrateDB is a distributed SQL database handles massive amounts of machine data in real-time."" \
    org.label-schema.url=""https://crate.io/products/cratedb/"" \
    org.label-schema.vcs-url=""https://github.com/crate/docker-crate"" \
    org.label-schema.vendor=""Crate.io"" \
    org.label-schema.version=""3.2.7""

COPY docker-entrypoint.sh /

ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""crate""]
","## -*- docker-image-name: ""docker-crate"" -*-
#
# Crate Dockerfile
# https://github.com/crate/docker-crate
#

FROM centos:7

RUN groupadd crate && useradd -u 1000 -g crate -d /crate crate

RUN curl --retry 8 -o /openjdk.tar.gz https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_linux-x64_bin.tar.gz \
    && echo ""7a6bb980b9c91c478421f865087ad2d69086a0583aeeb9e69204785e8e97dcfd */openjdk.tar.gz"" | sha256sum -c - \
    && tar -C /opt -zxf /openjdk.tar.gz \
    && rm /openjdk.tar.gz

ENV JAVA_HOME /opt/jdk-11.0.1

# REF: https://github.com/elastic/elasticsearch-docker/issues/171
RUN ln -sf /etc/pki/ca-trust/extracted/java/cacerts /opt/jdk-11.0.1/lib/security/cacerts

# install crate
RUN yum install -y yum-utils https://centos7.iuscommunity.org/ius-release.rpm \
    && yum makecache \
    && yum install -y python36u openssl \
    && yum clean all \
    && rm -rf /var/cache/yum \
    && curl -fSL -O https://cdn.crate.io/downloads/releases/crate-3.2.8.tar.gz \
    && curl -fSL -O https://cdn.crate.io/downloads/releases/crate-3.2.8.tar.gz.asc \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 90C23FC6585BC0717F8FBFC37FAAE51A06F6EAEB \
    && gpg --batch --verify crate-3.2.8.tar.gz.asc crate-3.2.8.tar.gz \
    && rm -rf ""$GNUPGHOME"" crate-3.2.8.tar.gz.asc \
    && tar -xf crate-3.2.8.tar.gz -C /crate --strip-components=1 \
    && rm crate-3.2.8.tar.gz \
    && ln -sf /usr/bin/python3.6 /usr/bin/python3 \
    && ln -sf /usr/bin/python3.6 /usr/bin/python

COPY --chown=1000:0 config/crate.yml /crate/config/crate.yml
COPY --chown=1000:0 config/log4j2.properties /crate/config/log4j2.properties

# install crash
RUN curl -fSL -O https://cdn.crate.io/downloads/releases/crash_standalone_0.24.2\
    && curl -fSL -O https://cdn.crate.io/downloads/releases/crash_standalone_0.24.2.asc \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 90C23FC6585BC0717F8FBFC37FAAE51A06F6EAEB \
    && gpg --batch --verify crash_standalone_0.24.2.asc crash_standalone_0.24.2 \
    && rm -rf ""$GNUPGHOME"" crash_standalone_0.24.2.asc \
    && mv crash_standalone_0.24.2 /usr/local/bin/crash \
    && chmod +x /usr/local/bin/crash

ENV PATH /crate/bin:$PATH
# Default heap size for Docker, can be overwritten by args
ENV CRATE_HEAP_SIZE 512M

RUN mkdir -p /data/data /data/log

VOLUME /data

WORKDIR /data

# http: 4200 tcp
# transport: 4300 tcp
# postgres protocol ports: 5432 tcp
EXPOSE 4200 4300 5432

# These COPY commands have been moved before the last one due to the following issues:
# https://github.com/moby/moby/issues/37965#issuecomment-448926448
# https://github.com/moby/moby/issues/38866
COPY --chown=1000:0 config/crate.yml /crate/config/crate.yml
COPY --chown=1000:0 config/log4j2.properties /crate/config/log4j2.properties

LABEL maintainer=""Crate.io <office@crate.io>"" \
    org.label-schema.schema-version=""1.0"" \
    org.label-schema.build-date=""2019-04-16T16:01:11.365468982+00:00"" \
    org.label-schema.name=""crate"" \
    org.label-schema.description=""CrateDB is a distributed SQL database handles massive amounts of machine data in real-time."" \
    org.label-schema.url=""https://crate.io/products/cratedb/"" \
    org.label-schema.vcs-url=""https://github.com/crate/docker-crate"" \
    org.label-schema.vendor=""Crate.io"" \
    org.label-schema.version=""3.2.8""

COPY docker-entrypoint.sh /

ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""crate""]
"
2098,ea4a3db25b8c1e1b4a4c20fd9627a2ed3150f028,update Dockerfile,"update Dockerfile
","#Docker App Auto Deployment Simple Weather App

FROM ubuntu:14.04.4
MAINTAINER Tonia Thompson <writing@toniathompson.com>

# Surpress Upstart errors/warning
RUN dpkg-divert --local --rename --add /sbin/initctl
RUN ln -sf /bin/true /sbin/initctl

# Update base image
# Add sources for latest nginx
# Install software requirements
RUN apt-get update && \
apt-get install -y software-properties-common && \
nginx=stable && \
add-apt-repository ppa:nginx/$nginx && \
apt-get update && \
apt-get upgrade -y && \
BUILD_PACKAGES=""supervisor nginx php5-fpm php5-curl"" && \
apt-get -y install $BUILD_PACKAGES && \
apt-get remove --purge -y software-properties-common && \
apt-get autoremove -y && \
apt-get clean && \
apt-get autoclean && \
echo -n > /var/lib/apt/extended_states && \
rm -rf /var/lib/apt/lists/* && \
rm -rf /usr/share/man/?? && \
rm -rf /usr/share/man/??_*

# tweak php-fpm config
RUN sed -i -e ""s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g"" /etc/php5/fpm/php.ini

# Setup Volume
VOLUME [""/usr/share/nginx/html""]

EXPOSE 80

CMD [""/bin/bash"", ""/start.sh""]",
109,764ac96175d2da8d3a80a348a3f3c785d804459e,[cd] Update CIPD package versions used by `cd` Docker image,"[cd] Update CIPD package versions used by `cd` Docker image

Bug: skia:12544
Change-Id: I70e34fcbd1033fa8a276c1b252a0a5baa5ef8e13
Reviewed-on: https://skia-review.googlesource.com/c/buildbot/+/539061
Commit-Queue: Eric Boren <0e499112533c8544f0505ea0d08394fb5ad7d8fa@google.com>
Reviewed-by: Ravi Mistry <9fa2e7438b8cb730f96b74865492597170561628@google.com>
","ARG CIPD_ROOT=""/cipd""

FROM debian:bullseye as base
RUN apt-get update && apt-get upgrade -y && apt-get install -y  \
    apt-transport-https \
    ca-certificates \
    clang-11 \
    curl \
    gnupg2 \
    make \
    patch \
    software-properties-common \
    && curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - \
    && add-apt-repository ""deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable"" \
    && apt-get update \
    && apt-get install -y docker-ce \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get remove -y git \
    && ln -s /usr/bin/python3 /usr/bin/python
ENV CC=clang-11

# Install the CIPD client by syncing depot_tools to the revision specified in
# recipes.cfg (we're not a recipe, but it's conveniently pinned there and auto-
# rolled) and running the wrapper script. This process requires temporarily
# installing some packages that we prefer to obtain via CIPD.
FROM base AS install_cipd
RUN apt-get update && apt-get install -y git curl python3-minimal
COPY ./recipes.cfg /tmp/recipes.cfg
RUN cat /tmp/recipes.cfg | \
    python3 -c ""import json; import sys; print(json.load(sys.stdin)['deps']['depot_tools']['revision'])"" > /tmp/depot_tools_rev \
    && cd $(mktemp -d) \
    && git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git \
    && cd depot_tools \
    && git reset --hard ""$(cat /tmp/depot_tools_rev)"" \
    && ./cipd --version \
    && cp ./.cipd_client /tmp/cipd

# This stage brings us back to the base image, plus the CIPD binary.
FROM base AS cipd
COPY --from=install_cipd /tmp/cipd /usr/local/bin/cipd

# Now install the desired packages.
FROM cipd AS install_pkgs
ARG CIPD_ROOT
ENV CIPD_ROOT=$CIPD_ROOT
RUN mkdir -p ${CIPD_ROOT}
ENV CIPD_CACHE_DIR=""/tmp/.cipd_cache""
RUN cipd init ${CIPD_ROOT} -force \
    && cipd install skia/bots/bazelisk version:0 -root /cipd \
    && cipd install infra/3pp/tools/git/linux-amd64 version:2.29.2.chromium.6 -root /cipd \
    && cipd install skia/bots/go version:14 -root /cipd

# The final stage brings us back to the base image with the installed CIPD packages.
FROM base AS final
ARG CIPD_ROOT
ENV CIPD_ROOT=$CIPD_ROOT
COPY --from=install_pkgs ${CIPD_ROOT} ${CIPD_ROOT}
ENV GOPATH=/go
RUN mkdir -p ${GOPATH}
ENV PATH=""${CIPD_ROOT}/bin:${CIPD_ROOT}/go/bin:${CIPD_ROOT}:${GOPATH}/bin:${PATH}""
","ARG CIPD_ROOT=""/cipd""

FROM debian:bullseye as base
RUN apt-get update && apt-get upgrade -y && apt-get install -y  \
    apt-transport-https \
    ca-certificates \
    clang-11 \
    curl \
    gnupg2 \
    make \
    patch \
    software-properties-common \
    && curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - \
    && add-apt-repository ""deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable"" \
    && apt-get update \
    && apt-get install -y docker-ce \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get remove -y git \
    && ln -s /usr/bin/python3 /usr/bin/python
ENV CC=clang-11

# Install the CIPD client by syncing depot_tools to the revision specified in
# recipes.cfg (we're not a recipe, but it's conveniently pinned there and auto-
# rolled) and running the wrapper script. This process requires temporarily
# installing some packages that we prefer to obtain via CIPD.
FROM base AS install_cipd
RUN apt-get update && apt-get install -y git curl python3-minimal
COPY ./recipes.cfg /tmp/recipes.cfg
RUN cat /tmp/recipes.cfg | \
    python3 -c ""import json; import sys; print(json.load(sys.stdin)['deps']['depot_tools']['revision'])"" > /tmp/depot_tools_rev \
    && cd $(mktemp -d) \
    && git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git \
    && cd depot_tools \
    && git reset --hard ""$(cat /tmp/depot_tools_rev)"" \
    && ./cipd --version \
    && cp ./.cipd_client /tmp/cipd

# This stage brings us back to the base image, plus the CIPD binary.
FROM base AS cipd
COPY --from=install_cipd /tmp/cipd /usr/local/bin/cipd

# Now install the desired packages.
FROM cipd AS install_pkgs
ARG CIPD_ROOT
ENV CIPD_ROOT=$CIPD_ROOT
RUN mkdir -p ${CIPD_ROOT}
ENV CIPD_CACHE_DIR=""/tmp/.cipd_cache""
RUN cipd init ${CIPD_ROOT} -force \
    && cipd install skia/bots/bazelisk version:0 -root /cipd \
    && cipd install infra/3pp/tools/git/linux-amd64 version:2.36.0-rc2.chromium.8 -root /cipd \
    && cipd install skia/bots/go version:16 -root /cipd

# The final stage brings us back to the base image with the installed CIPD packages.
FROM base AS final
ARG CIPD_ROOT
ENV CIPD_ROOT=$CIPD_ROOT
COPY --from=install_pkgs ${CIPD_ROOT} ${CIPD_ROOT}
ENV GOPATH=/go
RUN mkdir -p ${GOPATH}
ENV PATH=""${CIPD_ROOT}/bin:${CIPD_ROOT}/go/bin:${CIPD_ROOT}:${GOPATH}/bin:${PATH}""
"
2248,4a094c867c89d847fe52f97cf62e04d3e50d10e1,docker-compose.yml updates,"docker-compose.yml updates
","FROM node:7.8-alpine

ENV USERNAME nodeuser

RUN adduser -D $USERNAME && \
    mkdir /code && \
    chown $USERNAME:$USERNAME /code

USER $USERNAME
WORKDIR /code

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

COPY yarn.lock package.json /code/

USER root
RUN find /code -user 0 -print0 | xargs -0 chown $USERNAME:$USERNAME
USER $USERNAME

# install dev dependences because they're used by yarn build
RUN NODE_ENV=development && yarn
EXPOSE 3333
RUN npm rebuild node-sass
RUN cd node_modules/nhsuk-frontend && npm run postinstall

COPY . /code

USER root
RUN find /code -user 0 -print0 | xargs -0 chown $USERNAME:$USERNAME
USER $USERNAME
RUN yarn build:webpack",
230,335f38711d8cf7621fd1b7fc9fd4efe59acd2ed9,Bumped source to 20201216-e99bf31,"Bumped source to 20201216-e99bf31
","FROM docker.pkg.github.com/dock0/arch/arch:20201216-170ce7b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20201216-e99bf31
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
294,dfc5473806e2771f1f45df623083b9ab32f9677a,Bumped source to 20200901-86f791f,"Bumped source to 20200901-86f791f
","FROM docker.pkg.github.com/dock0/service/service:20200901-f88737f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200901-86f791f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2158,1bc6cf776a9091cd8c5e382fed1b7d897cd93529,Update Dockerfile,Update Dockerfile,"# A docker file to run a ubuntu archive mirror
FROM alpine:latest
MAINTAINER Antoine GIRARD <antoine.girard@sapk.fr>

ENV SYNCMODE=""archive"" RSYNCSOURCE=""rsync://rsync.archive.ubuntu.com/ubuntu"" BASEDIR=""/var/www/ubuntuarchive/""
# Could use in release mode SYNCMODE=""releases"" with RSYNCSOURCE=""rsync://rsync.releases.ubuntu.com/releases""

COPY start.sh /

RUN apk -U --no-progress upgrade \
 && apk -U --force --no-progress add \
    rsync bash darkhttpd \
 && addgroup -S ubuntu && adduser -S -H -h ${BASEDIR} -G ubuntu ubuntu \
 && mkdir ${BASEDIR} && chown ubuntu:ubuntu ${BASEDIR} \
 && chmod +x /start.sh \
 && rm /var/cache/apk/*
 
USER ubuntu
VOLUME ${BASEDIR} 

EXPOSE 8080
ENTRYPOINT [""/start.sh""]
",
310,cf9962b50a101684cd59a428043a4e64542e0065,Add CMD,"Add CMD
","FROM ubuntu:latest
MAINTAINER Chen, Wenli <chenwenli@chenwenli.com>

WORKDIR /tmp/work
ENV PRJROOT=/tmp/work/w64 \
TARGET=x86_64-w64-mingw32 
ENV PREFIX=${PRJROOT}/tools \
BUILD=${PRJROOT}/build-tools 
ENV TARGET_PREFIX=${PREFIX}/${TARGET}
ENVMAKEOPTS=""-j4 --quiet""

COPY createdir.sh .

RUN \
/bin/bash createdir.sh && rm createdir.sh

WORKDIR $BUILD

RUN apt-get -qq update && apt-get install --no-install-recommends -qqy \
build-essential \
ca-certificates \
curl \
tar \
gzip \
lzip \
 && rm -rf /var/lib/apt/lists/*

RUN curl -L http://ftp.gnu.org/gnu/binutils/binutils-2.27.tar.gz > binutils-2.27.tar.gz \
 && tar zxf binutils-2.27.tar.gz \
 && cd build-binutils \
 && ../binutils-2.27/configure --target=$TARGET --prefix=$PREFIX --with-sysroot=$PREFIX \
 && make \
 && make install \ 
 && cd $BUILD \ 
 && rm -rf build-binutils binutils-2.27 binutils-2.27.tar.gz

# mingw headers

RUN curl -L http://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v5.0.0.tar.bz2 > mingw-w64-v5.0.0.tar.bz2 \
 && tar jxf mingw-w64-v5.0.0.tar.bz2 \
 && rm mingw-w64-v5.0.0.tar.bz2 \
 && mkdir -p $BUILD/build-mingw-w64-header/ \
 && cd $BUILD/build-mingw-w64-header/ \
 && ../mingw-w64-v5.0.0/configure --prefix=$TARGET_PREFIX --without-crt \
 && make \
 && make install \
 && cd $BUILD \
 && rm -rf build-mingw-w64-header

# gcc
RUN \
 curl -L http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-6.3.0/gcc-6.3.0.tar.bz2 | tar jxf - \
 && ln -s $TARGET_PREFIX $PREFIX/mingw \
 && mkdir -p $TARGET_PREFIX/lib \
 && ln -s $TARGET_PREFIX/lib $TARGET_PREFIX/lib64 \
# gmp
 && curl -L https://gmplib.org/download/gmp/gmp-6.1.2.tar.lz | tar --lzip -xf -  \
 && mv gmp-6.1.2 gcc-6.3.0/gmp \
# mpc
 && curl -L ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz | tar zxf - \
 && mv mpc-1.0.3 gcc-6.3.0/mpc \
# mpfr
 && curl -L http://www.mpfr.org/mpfr-current/mpfr-3.1.5.tar.bz2 | tar jxf - \
 && mv mpfr-3.1.5 gcc-6.3.0/mpfr \
 && cd $BUILD/build-boot-gcc \
 && ../gcc-6.3.0/configure --target=$TARGET --prefix=$PREFIX --enable-languages=c,c++ \
 && make all-gcc \
 && make install-gcc \
 && cd $BUILD \
 && rm -rf build-boot-gcc

RUN \
 cd $BUILD/build-mingw-w64-crt \
 && ../mingw-w64-v5.0.0/configure --host=$TARGET --prefix=$TARGET_PREFIX --without-header --with-sysroot=$TARGET_PREFIX \
 && make \
 && make install \
 && cd $BUILD \
 && rm -rf build-mingw-w64-crt mingw-w64-v5.0.0

RUN \
 cd $BUILD/build-gcc \
 && ../gcc-6.3.0/configure --target=$TARGET --prefix=$PREFIX --enable-languages=c,c++ \
 && make all \
 && make install \
 && cd $BUILD \
 && rm -rf build-gcc gcc-6.3.0

","FROM ubuntu:latest
MAINTAINER Chen, Wenli <chenwenli@chenwenli.com>

WORKDIR /tmp/work
ENV PRJROOT=/tmp/work/w64 \
TARGET=x86_64-w64-mingw32 
ENV PREFIX=${PRJROOT}/tools \
BUILD=${PRJROOT}/build-tools 
ENV TARGET_PREFIX=${PREFIX}/${TARGET}
ENVMAKEOPTS=""-j4 --quiet""

COPY createdir.sh .

RUN \
/bin/bash createdir.sh && rm createdir.sh

WORKDIR $BUILD

RUN apt-get -qq update && apt-get install --no-install-recommends -qqy \
build-essential \
ca-certificates \
curl \
tar \
gzip \
lzip \
 && rm -rf /var/lib/apt/lists/*

RUN curl -L http://ftp.gnu.org/gnu/binutils/binutils-2.27.tar.gz > binutils-2.27.tar.gz \
 && tar zxf binutils-2.27.tar.gz \
 && cd build-binutils \
 && ../binutils-2.27/configure --target=$TARGET --prefix=$PREFIX --with-sysroot=$PREFIX \
 && make \
 && make install \ 
 && cd $BUILD \ 
 && rm -rf build-binutils binutils-2.27 binutils-2.27.tar.gz

# mingw headers

RUN curl -L http://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v5.0.0.tar.bz2 > mingw-w64-v5.0.0.tar.bz2 \
 && tar jxf mingw-w64-v5.0.0.tar.bz2 \
 && rm mingw-w64-v5.0.0.tar.bz2 \
 && mkdir -p $BUILD/build-mingw-w64-header/ \
 && cd $BUILD/build-mingw-w64-header/ \
 && ../mingw-w64-v5.0.0/configure --prefix=$TARGET_PREFIX --without-crt \
 && make \
 && make install \
 && cd $BUILD \
 && rm -rf build-mingw-w64-header

# gcc
RUN \
 curl -L http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-6.3.0/gcc-6.3.0.tar.bz2 | tar jxf - \
 && ln -s $TARGET_PREFIX $PREFIX/mingw \
 && mkdir -p $TARGET_PREFIX/lib \
 && ln -s $TARGET_PREFIX/lib $TARGET_PREFIX/lib64 \
# gmp
 && curl -L https://gmplib.org/download/gmp/gmp-6.1.2.tar.lz | tar --lzip -xf -  \
 && mv gmp-6.1.2 gcc-6.3.0/gmp \
# mpc
 && curl -L ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz | tar zxf - \
 && mv mpc-1.0.3 gcc-6.3.0/mpc \
# mpfr
 && curl -L http://www.mpfr.org/mpfr-current/mpfr-3.1.5.tar.bz2 | tar jxf - \
 && mv mpfr-3.1.5 gcc-6.3.0/mpfr \
 && cd $BUILD/build-boot-gcc \
 && ../gcc-6.3.0/configure --target=$TARGET --prefix=$PREFIX --enable-languages=c,c++ \
 && make all-gcc \
 && make install-gcc \
 && cd $BUILD \
 && rm -rf build-boot-gcc

RUN \
 cd $BUILD/build-mingw-w64-crt \
 && ../mingw-w64-v5.0.0/configure --host=$TARGET --prefix=$TARGET_PREFIX --without-header --with-sysroot=$TARGET_PREFIX \
 && make \
 && make install \
 && cd $BUILD \
 && rm -rf build-mingw-w64-crt mingw-w64-v5.0.0

RUN \
 cd $BUILD/build-gcc \
 && ../gcc-6.3.0/configure --target=$TARGET --prefix=$PREFIX --enable-languages=c,c++ \
 && make all \
 && make install \
 && cd $BUILD \
 && rm -rf build-gcc gcc-6.3.0

ENV PATH=${PATH}:${PREFIX}/bin

CMD [""/bin/bash""]
"
236,38921903645d7bb218a7aeca8eabb301408bd8bf,Update to 6.5.0,"Update to 6.5.0
","# Logstash 6.4.3

# This image re-bundles the Docker image from the upstream provider, Elastic.
FROM docker.elastic.co/logstash/logstash:6.4.3@sha256:392a232fdde65fb4821fc0d5e00ded19fec721226e1550bff4ab8ca84447d719

# The upstream image was built by:
#   https://github.com/elastic/logstash-docker/tree/6.4.3

# For a full list of supported images and tags visit https://www.docker.elastic.co

# For Logstash documentation visit https://www.elastic.co/guide/en/logstash/current/docker.html

# See https://github.com/docker-library/official-images/pull/5039 for more details.
","# Logstash 6.5.0

# This image re-bundles the Docker image from the upstream provider, Elastic.
FROM docker.elastic.co/logstash/logstash:6.5.0@sha256:8735c7e6cb271dd064cb6fa4828750059d8b94cd92aed776e4291e100568a9e7

# The upstream image was built by:
#   https://github.com/elastic/logstash-docker/tree/6.5.0

# For a full list of supported images and tags visit https://www.docker.elastic.co

# For Logstash documentation visit https://www.elastic.co/guide/en/logstash/current/docker.html

# See https://github.com/docker-library/official-images/pull/5039 for more details.
"
244,9c89d1768220e7b2698c8b0b1ed9871618f237fe,Optimize docker image size.,"Optimize docker image size.
","FROM l3iggs/archlinux-aur

# Prefer to use the server at Samfundet, Trondheim.
RUN sudo sed -i '1s/^/Server = http:\/\/mirror.archlinux.no\/$repo\/os\/$arch /' /etc/pacman.d/mirrorlist

# Arch does not support ""partial upgrades"" so we must install every
# Arch package in the same docker RUN command.
RUN yaourt --noconfirm -Syua \
    scala \
    scons \
    chisel \
    jdk \
    java-commons-io \
    clang \
    python-pint \
    scalastyle

# Using the latest RISC-V toolchain causes a compilation error when
# building the RISC-V tests, but this revision is known to work. TODO:
# debug compilation error.
ENV TOOLCHAIN_REVISION f0addb7

# Install the RISC-V toolchain from github and build from source
RUN git clone https://github.com/riscv/riscv-gnu-toolchain.git
RUN pushd riscv-gnu-toolchain \
&& git checkout $TOOLCHAIN_REVISION \
&& ./configure --prefix=/opt/riscv \
&& sudo make -j8 \
&& popd \
&& sudo rm -rf riscv-gnu-toolchain/
ENV PATH $PATH:/opt/riscv/bin

CMD [""/bin/bash""]
","FROM l3iggs/archlinux-aur

# Install the RISC-V toolchain from github and build from source

# Using the latest RISC-V toolchain causes a compilation error when
# building the RISC-V tests, but this revision is known to work. TODO:
# debug compilation error.
ENV TOOLCHAIN_REVISION f0addb7
RUN git clone https://github.com/riscv/riscv-gnu-toolchain.git
RUN pushd riscv-gnu-toolchain \
&& git checkout $TOOLCHAIN_REVISION \
&& ./configure --prefix=/opt/riscv \
&& sudo make -j8 \
&& popd \
&& sudo rm -rf riscv-gnu-toolchain/
ENV PATH $PATH:/opt/riscv/bin

# Prefer to use the server at Samfundet, Trondheim.
RUN sudo sed -i '1s/^/Server = http:\/\/mirror.archlinux.no\/$repo\/os\/$arch /' /etc/pacman.d/mirrorlist

# Arch does not support ""partial upgrades"" so we must install every
# Arch package in the same docker RUN command.
RUN yaourt --noconfirm -Syua \
    scala \
    scons \
    chisel \
    jdk \
    java-commons-io \
    clang \
    python-pint \
    scalastyle \
    && \
    pacman -Scc # Clean pacman cache before committing

CMD [""/bin/bash""]
"
106,77d0b75d485c8a0c909e3bb57e918c669ff23e68,update libudev-dev,"update libudev-dev
","FROM ubuntu:16.04@sha256:97b54e5692c27072234ff958a7442dde4266af21e7b688e7fca5dc5acc8ed7d9

ENV LC_ALL=C.UTF-8 LANG=C.UTF-8

RUN apt-get update -q && \
    apt-get install -qy \
        git=1:2.7.4-0ubuntu1.7 \
        wget=1.17.1-1ubuntu1.5 \
        make=4.1-6 \
        autotools-dev=20150820.1 \
        autoconf=2.69-9 \
        libtool=2.4.6-0.1 \
        xz-utils=5.1.1alpha+20120614-2ubuntu2 \
        libssl-dev=1.0.2g-1ubuntu4.15 \
        libssl1.0.0=1.0.2g-1ubuntu4.15 \
        openssl=1.0.2g-1ubuntu4.15 \
        zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 \
        libffi-dev=3.2.1-4 \
        libncurses5-dev=6.0+20160213-1ubuntu1 \
        libsqlite3-dev=3.11.0-1ubuntu1.3 \
        libusb-1.0-0-dev=2:1.0.20-1 \
        libudev-dev=229-4ubuntu21.23 \
        gettext=0.19.7-2ubuntu3.1 \
        libzbar0=0.10+doc-10ubuntu1  \
        libdbus-1-3=1.10.6-1ubuntu3.4 \
        libxkbcommon-x11-0=0.5.0-1ubuntu2.1 \
        && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get autoremove -y && \
    apt-get clean
","FROM ubuntu:16.04@sha256:97b54e5692c27072234ff958a7442dde4266af21e7b688e7fca5dc5acc8ed7d9

ENV LC_ALL=C.UTF-8 LANG=C.UTF-8

RUN apt-get update -q && \
    apt-get install -qy \
        git=1:2.7.4-0ubuntu1.7 \
        wget=1.17.1-1ubuntu1.5 \
        make=4.1-6 \
        autotools-dev=20150820.1 \
        autoconf=2.69-9 \
        libtool=2.4.6-0.1 \
        xz-utils=5.1.1alpha+20120614-2ubuntu2 \
        libssl-dev=1.0.2g-1ubuntu4.15 \
        libssl1.0.0=1.0.2g-1ubuntu4.15 \
        openssl=1.0.2g-1ubuntu4.15 \
        zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 \
        libffi-dev=3.2.1-4 \
        libncurses5-dev=6.0+20160213-1ubuntu1 \
        libsqlite3-dev=3.11.0-1ubuntu1.3 \
        libusb-1.0-0-dev=2:1.0.20-1 \
        libudev-dev=229-4ubuntu21.27 \
        gettext=0.19.7-2ubuntu3.1 \
        libzbar0=0.10+doc-10ubuntu1  \
        libdbus-1-3=1.10.6-1ubuntu3.4 \
        libxkbcommon-x11-0=0.5.0-1ubuntu2.1 \
        && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get autoremove -y && \
    apt-get clean
"
2073,18dfb91eab9d000b2199feec1fc636470bb13375,Bump Dockerfile to 0.1-192-e78aebbd,"Bump Dockerfile to 0.1-192-e78aebbd
","FROM stellar/base:latest

MAINTAINER Mat Schaffer <mat@stellar.org>

ENV STELLAR_CORE_VERSION 0.1-191-341fa19d

EXPOSE 11625
EXPOSE 11626

VOLUME /data
VOLUME /postgresql-unix-sockets
VOLUME /heka

ADD install /
RUN /install

ADD heka /heka
ADD confd /etc/confd
ADD utils /utils
ADD start /

CMD [""/start""]
",
404,00648d5aef7a07eca7a8b8bd0350bbc838c02d31,Updated to ownCloud 8.1.0.,"Updated to ownCloud 8.1.0.
","FROM debian:jessie
MAINTAINER Josh Chaney ""josh@chaney.io""

ADD misc/bootstrap.sh /usr/bin/
ADD configs/nginx_ssl.conf /root/
ADD configs/nginx.conf /root/

RUN dpkg-divert --local --rename --add /sbin/initctl && ln -sf /bin/true /sbin/initctl

RUN DEBIAN_FRONTEND=noninteractive ;\
    apt-get update && \
    apt-get install -y php5-cli php5-gd php5-pgsql php5-sqlite php5-mysqlnd php5-curl php5-intl php5-mcrypt php5-ldap php5-gmp php5-apcu php5-imagick php5-fpm smbclient nginx wget bzip2 cron sudo

ADD misc/owncloud.asc /tmp/owncloud.asc
ADD https://download.owncloud.org/community/owncloud-8.0.4.tar.bz2 /tmp/oc.tar.bz2
ADD https://download.owncloud.org/community/owncloud-8.0.4.tar.bz2.asc /tmp/oc.tar.bz2.asc
RUN mkdir -p /var/www/owncloud /owncloud /var/log/cron && \
    gpg --import /tmp/owncloud.asc && \
    gpg --verify /tmp/oc.tar.bz2.asc && \
    tar -C /var/www/ -xf /tmp/oc.tar.bz2 && \
    chown -R www-data:www-data /var/www/owncloud && \
    rm -rf /var/www/owncloud/config && ln -sf /owncloud /var/www/owncloud/config && \
    chmod +x /usr/bin/bootstrap.sh && \
    rm /tmp/oc.tar.bz2 /tmp/oc.tar.bz2.asc /tmp/owncloud.asc

ADD configs/php.ini /etc/php5/fpm/
RUN echo 'always_populate_raw_post_data = -1' >> /etc/php5/cli/php.ini
ADD configs/cron.conf /etc/oc-cron.conf
RUN crontab /etc/oc-cron.conf

ADD misc/extensions.sh configs/extensions.conf /var/www/owncloud/apps/
RUN chmod a+x /var/www/owncloud/apps/extensions.sh ; \
    /var/www/owncloud/apps/extensions.sh /var/www/owncloud/apps/extensions.conf /var/www/owncloud/apps ; \
    rm /var/www/owncloud/apps/extensions.sh /var/www/owncloud/apps/extensions.conf

ENV OWNCLOUD_IN_ROOTPATH 0
EXPOSE 80
EXPOSE 443

ENTRYPOINT  [""bootstrap.sh""]
","FROM debian:jessie
MAINTAINER Josh Chaney ""josh@chaney.io""

ADD misc/bootstrap.sh /usr/bin/
ADD configs/nginx_ssl.conf /root/
ADD configs/nginx.conf /root/

ENV OWNCLOUD_VERSION 8.1.0

RUN dpkg-divert --local --rename --add /sbin/initctl && ln -sf /bin/true /sbin/initctl

RUN DEBIAN_FRONTEND=noninteractive ;\
    apt-get update && \
    apt-get install -y php5-cli php5-gd php5-pgsql php5-sqlite php5-mysqlnd php5-curl php5-intl php5-mcrypt php5-ldap php5-gmp php5-apcu php5-imagick php5-fpm smbclient nginx wget bzip2 cron sudo

ADD misc/owncloud.asc /tmp/owncloud.asc
ADD https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2 /tmp/oc.tar.bz2
ADD https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc /tmp/oc.tar.bz2.asc
RUN mkdir -p /var/www/owncloud /owncloud /var/log/cron && \
    gpg --import /tmp/owncloud.asc && \
    gpg --verify /tmp/oc.tar.bz2.asc && \
    tar -C /var/www/ -xf /tmp/oc.tar.bz2 && \
    chown -R www-data:www-data /var/www/owncloud && \
    rm -rf /var/www/owncloud/config && ln -sf /owncloud /var/www/owncloud/config && \
    chmod +x /usr/bin/bootstrap.sh && \
    rm /tmp/oc.tar.bz2 /tmp/oc.tar.bz2.asc /tmp/owncloud.asc

ADD configs/php.ini /etc/php5/fpm/
RUN echo 'always_populate_raw_post_data = -1' >> /etc/php5/cli/php.ini
ADD configs/cron.conf /etc/oc-cron.conf
RUN crontab /etc/oc-cron.conf

ADD misc/extensions.sh configs/extensions.conf /var/www/owncloud/apps/
RUN chmod a+x /var/www/owncloud/apps/extensions.sh ; \
    /var/www/owncloud/apps/extensions.sh /var/www/owncloud/apps/extensions.conf /var/www/owncloud/apps ; \
    rm /var/www/owncloud/apps/extensions.sh /var/www/owncloud/apps/extensions.conf

ENV OWNCLOUD_IN_ROOTPATH 0
EXPOSE 80
EXPOSE 443

ENTRYPOINT  [""bootstrap.sh""]
"
2116,5c0ec432b33a66571b50f201d3e44307617ab4ca,Update to the latest version of the Heroku CLI,"Update to the latest version of the Heroku CLI
","FROM debian:jessie
LABEL maintainer='Codeship Inc., <maintainers@codeship.com>'

ENV CACHE_BUST='2017-08-07' \
    JQ_VERSION='1.5' \
    PATH=""/usr/local/heroku/bin:${PATH}""

RUN \
  apt-get update && \
  apt-get install -y --no-install-recommends \
    bash \
    curl \
    ruby \
    sudo \
    wget && \
  apt-get clean -y && \
  rm -rf /var/lib/apt/lists/*

# Install the Heroku Toolbelt and and add it to the PATH
RUN \
  wget -O- https://toolbelt.heroku.com/install-ubuntu.sh | sh && \
  heroku --version && \
  apt-get clean -y && \
  rm -rf /var/lib/apt/lists/*

# Install JQ, required for some of the included scripts
RUN \
  wget -q -O /usr/bin/jq ""https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64"" && \
  chmod 744 /usr/bin/jq

COPY scripts/ /usr/bin/
",
2241,a57eefa3b8ce2f8a8e86075106011fd9978a7d15,Update youtube-dl to 2017.08.13,"Update youtube-dl to 2017.08.13
","FROM golang:1.8
MAINTAINER Mattias Wadman mattias.wadman@gmail.com

ENV FFMPEG_VERSION=n3.3.3
ENV YDL_VERSION=2017.08.09
ENV TINI_VERSION=v0.14.0
ENV LISTEN=:8080
ENV FORMATS=/etc/formats.json

RUN \
  sed -i 's/main/main contrib non-free/g' /etc/apt/sources.list && \
  apt-get update && \
  apt-get -y install \
    build-essential \
    git-core \
    yasm \
    pkg-config \
    libssl-dev \
    libmp3lame-dev \
    libvorbis-dev \
    libvpx-dev \
    libopus-dev \
    libfdk-aac-dev \
    libx264-dev \
    rtmpdump \
    mplayer \
    && \
  apt-get clean

RUN \
  git clone --branch $FFMPEG_VERSION --depth 1 https://github.com/FFmpeg/FFmpeg.git && \
  (cd FFmpeg && \
    ./configure \
      --toolchain=hardened \
      --enable-gpl \
      --enable-nonfree \
      --enable-openssl \
      --disable-ffserver \
      --disable-doc \
      --disable-ffplay \
      --disable-encoders \
      --enable-libmp3lame \
      --enable-encoder=libmp3lame \
      --enable-libvorbis \
      --enable-encoder=libvorbis \
      --enable-libopus \
      --enable-encoder=libopus \
      --enable-libvpx \
      --enable-encoder=libvpx_vp8 \
      --enable-encoder=libvpx_vp9 \
      --enable-libfdk-aac \
      --enable-encoder=libfdk_aac \
      --enable-libx264 \
      --enable-encoder=libx264 \
      && \
    make && \
    make install) && \
  rm -rf FFmpeg && \
  ldconfig

RUN \
  curl -L -o /usr/local/bin/youtube-dl https://yt-dl.org/downloads/$YDL_VERSION/youtube-dl && \
  chmod a+x /usr/local/bin/youtube-dl

RUN \
  curl -L -o /usr/local/bin/tini https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini && \
  chmod a+x /usr/local/bin/tini

COPY . /go/src/github.com/wader/ydls/
COPY formats.json /etc/
COPY entrypoint.sh /usr/local/bin

RUN \
  cd /go/src/github.com/wader/ydls && \
  TEST_FFMPEG=1 TEST_YOUTUBEDL=1 TEST_NETWORK=1 \
    go test -v -cover -race ./... && \
  go install ./cmd/... && \
  test_cmd/ydls-get.sh && \
  test_cmd/ydls-server.sh && \
  cp /go/bin/* /usr/local/bin && \
  go clean -r ./cmd/... && \
  rm -rf /go/*

USER nobody
EXPOSE 8080/tcp
ENTRYPOINT [""/usr/local/bin/entrypoint.sh""]
",
215,4d5f561266ce52988d832d70b618f3df73ece6bd,Add trailing slashes to the dirs in Dockerfile to allow older versions of docker to build,"Add trailing slashes to the dirs in Dockerfile to allow older versions of docker to build
","FROM ruby:2.3.0

RUN mkdir -p /srv/app
WORKDIR /srv/app

ADD Gemfile /srv/app
ADD Gemfile.lock /srv/app
RUN bundle install

ADD . /srv/app
RUN RAILS_ENV=production bin/rake assets:precompile

EXPOSE 3000

CMD [""bin/unicorn"", ""-p"", ""3000"", ""-c"", ""config/unicorn.rb""]
","FROM ruby:2.3.0

RUN mkdir -p /srv/app
WORKDIR /srv/app

ADD Gemfile /srv/app/
ADD Gemfile.lock /srv/app/
RUN bundle install

ADD . /srv/app
RUN RAILS_ENV=production bin/rake assets:precompile

EXPOSE 3000

CMD [""bin/unicorn"", ""-p"", ""3000"", ""-c"", ""config/unicorn.rb""]
"
20,8ce5e48ca8deda91b64b78a3b0b2f5073bc4a9b0,Bumped source to 20200609-c4be92a,"Bumped source to 20200609-c4be92a
","FROM docker.pkg.github.com/dock0/arch/arch:20200609-c2fdda7
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200609-c4be92a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
285,e0866f1904b335b143f04a7de7786d6351eac1e6,Bumped source to 20201013-a2201e2,"Bumped source to 20201013-a2201e2
","FROM docker.pkg.github.com/dock0/arch/arch:20201013-9e971d1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20201013-a2201e2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
11,02ee9045f00c23178cb62335bcc33bf9acc3592e,Update kernel to 4.14.109,"Update kernel to 4.14.109
","FROM debian:stretch-slim

SHELL [""/bin/bash"", ""-Eeuo"", ""pipefail"", ""-xc""]

RUN apt-get update; \
apt-get install -y --no-install-recommends \
bash-completion \
bc \
ca-certificates \
cpio \
gcc \
git \
gnupg dirmngr \
golang-go \
kmod \
libc6-dev \
libelf-dev \
make \
p7zip-full \
patch \
squashfs-tools \
wget \
xorriso \
xz-utils \
; \
rm -rf /var/lib/apt/lists/*

# cleaner wget output
RUN echo 'progress = dot:giga' >> ~/.wgetrc; \
# color prompt (better debugging/devel)
cp /etc/skel/.bashrc ~/

WORKDIR /rootfs

# updated via ""update.sh""
ENV TCL_MIRRORS http://distro.ibiblio.org/tinycorelinux http://repo.tinycorelinux.net
ENV TCL_MAJOR 8.x
ENV TCL_VERSION 8.2.1

# http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/archive/8.2.1/distribution_files/rootfs64.gz.md5.txt
# updated via ""update.sh""
ENV TCL_ROOTFS=""rootfs64.gz"" TCL_ROOTFS_MD5=""b4991d3c07b88649b61616f86f2f079f""

COPY files/tce-load.patch files/udhcpc.patch /tcl-patches/

RUN for mirror in $TCL_MIRRORS; do \
if \
{ \
wget -O /rootfs.gz ""$mirror/$TCL_MAJOR/x86_64/archive/$TCL_VERSION/distribution_files/$TCL_ROOTFS"" \
# 9.x doesn't seem to use "".../archive/X.Y.Z/..."" in the same way as 8.x :(
|| wget -O /rootfs.gz ""$mirror/$TCL_MAJOR/x86_64/release/distribution_files/$TCL_ROOTFS"" \
; } && echo ""$TCL_ROOTFS_MD5 */rootfs.gz"" | md5sum -c - \
; then \
break; \
fi; \
done; \
echo ""$TCL_ROOTFS_MD5 */rootfs.gz"" | md5sum -c -; \
zcat /rootfs.gz | cpio \
--extract \
--make-directories \
--no-absolute-filenames \
; \
rm /rootfs.gz; \
\
for patch in /tcl-patches/*.patch; do \
patch \
--input ""$patch"" \
--strip 1 \
--verbose \
; \
done; \
\
{ \
echo '# https://1.1.1.1/'; \
echo 'nameserver 1.1.1.1'; \
echo 'nameserver 1.0.0.1'; \
echo; \
echo '# https://developers.google.com/speed/public-dns/'; \
echo 'nameserver 8.8.8.8'; \
echo 'nameserver 8.8.4.4'; \
} > etc/resolv.conf; \
cp etc/resolv.conf etc/resolv.conf.b2d; \
{ \
echo '#!/usr/bin/env bash'; \
echo 'set -Eeuo pipefail'; \
echo ""cd '$PWD'""; \
echo 'cp -T etc/resolv.conf etc/resolv.conf.bak'; \
echo 'cp -T /etc/resolv.conf etc/resolv.conf'; \
echo 'cp -T /proc/cpuinfo proc/cpuinfo 2>/dev/null || :'; \
echo 'trap ""mv -T etc/resolv.conf.bak etc/resolv.conf || :; rm proc/cpuinfo 2>/dev/null || :"" EXIT'; \
echo 'env -i PATH=""/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"" TERM=""$TERM"" chroot '""'$PWD'""' ""$@""'; \
} > /usr/local/bin/tcl-chroot; \
chmod +x /usr/local/bin/tcl-chroot

# add new ""docker"" user (and replace ""tc"" user usage with ""docker"")
RUN tcl-chroot adduser \
-h /home/docker \
-g 'Docker' \
-s /bin/sh \
-G staff \
-D \
-u 1000 \
docker \
; \
echo 'docker:tcuser' | tcl-chroot chpasswd; \
echo 'docker ALL = NOPASSWD: ALL' >> etc/sudoers; \
sed -i 's/USER=""tc""/USER=""docker""/g' etc/init.d/tc-* etc/init.d/services/*

# https://github.com/tatsushid/docker-tinycore/blob/017b258a08a41399f65250c9865a163226c8e0bf/8.2/x86_64/Dockerfile
RUN mkdir -p proc; \
touch proc/cmdline; \
mkdir -p tmp/tce/optional usr/local/tce.installed/optional; \
chown -R root:staff tmp/tce usr/local/tce.installed; \
chmod -R g+w tmp/tce; \
ln -sT ../../tmp/tce etc/sysconfig/tcedir; \
echo -n docker > etc/sysconfig/tcuser; \
tcl-chroot sh -c '. /etc/init.d/tc-functions && setupHome'

# packages (and their deps) that we either need for our ""tce-load"" patches or that dep on ""...-KERNEL"" which we don't need (since we build our own kernel)
# http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.dep
# http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.md5.txt
# updated via ""update.sh""
ENV TCL_PACKAGES=""squashfs-tools.tcz liblzma.tcz lzo.tcz libzstd.tcz"" TCL_PACKAGE_MD5__squashfs_tools_tcz=""a44331fa2117314e62267147b6876a49"" TCL_PACKAGE_MD5__liblzma_tcz=""32b4958b9cb03d54d2d1d50df5bed699"" TCL_PACKAGE_MD5__lzo_tcz=""c9a1260675774c50cea1a490978b100d"" TCL_PACKAGE_MD5__libzstd_tcz=""a7f383473a4ced6c79e8b1a0cc9ad167""

RUN for package in $TCL_PACKAGES; do \
eval 'md5=""$TCL_PACKAGE_MD5__'""$(echo ""$package"" | sed -r 's/[^a-zA-Z0-9]+/_/g')""'""'; \
echo ""$md5 *$package"" > ""usr/local/tce.installed/optional/$package.md5.txt""; \
for mirror in $TCL_MIRRORS; do \
if \
wget -O ""usr/local/tce.installed/optional/$package"" ""$mirror/$TCL_MAJOR/x86_64/tcz/$package"" \
&& ( cd usr/local/tce.installed/optional && md5sum -c ""$package.md5.txt"" ) \
; then \
break; \
fi; \
done; \
( cd usr/local/tce.installed/optional && md5sum -c ""$package.md5.txt"" ); \
unsquashfs -dest . -force ""usr/local/tce.installed/optional/$package""; \
touch ""usr/local/tce.installed/${package%.tcz}""; \
# pretend this package has no deps (we already installed them)
touch ""usr/local/tce.installed/optional/$package.dep""; \
done; \
\
tcl-chroot ldconfig; \
for script in usr/local/tce.installed/*; do \
[ -f ""$script"" ] || continue; \
[ -x ""$script"" ] || continue; \
tcl-chroot ""$script""; \
done; \
\
{ \
echo '#!/bin/bash -Eeux'; \
echo 'tcl-chroot su -c ""tce-load -wicl \""\$@\"""" docker -- - ""$@""'; \
} > /usr/local/bin/tcl-tce-load; \
chmod +x /usr/local/bin/tcl-tce-load

RUN tcl-tce-load bash; \
tcl-chroot bash --version; \
# delete all the TCL user-specific profile/rc files -- they have odd settings like auto-login from interactive root directly to ""tcuser""
# (and the bash-provided defaults are reasonably sane)
rm -vf \
home/docker/.ashrc \
home/docker/.bashrc \
home/docker/.profile \
root/.ashrc \
root/.bashrc \
root/.profile \
; \
echo 'source /etc/profile' > home/docker/.profile; \
echo 'source /etc/profile' > root/.profile; \
# swap ""docker"" (and ""root"") user shell from /bin/sh to /bin/bash now that it exists
sed -ri '/^(docker|root):/ s!:[^:]*$!:/bin/bash!' etc/passwd; \
grep -E '^root:' etc/passwd | grep bash; \
grep -E '^docker:' etc/passwd | grep bash; \
# /etc/profile has a minor root bug where it uses ""\#"" in PS1 instead of ""\$"" (so we get a counter in our prompt instead of a ""#"")
# but also, does not use \[ and \] for escape sequences, so Bash readline gets confused, so let's replace it outright with something perty
grep '\\#' etc/profile; \
echo 'PS1='""'""'\[\e[1;32m\]\u@\h\[\e[0m\]:\[\e[1;34m\]\w\[\e[0m\]\$ '""'""'' > etc/profile.d/boot2docker-ps1.sh; \
source etc/profile.d/boot2docker-ps1.sh; \
[ ""$PS1"" = '\[\e[1;32m\]\u@\h\[\e[0m\]:\[\e[1;34m\]\w\[\e[0m\]\$ ' ]

# https://www.kernel.org/category/signatures.html#important-fingerprints
ENV LINUX_GPG_KEYS \
# Linus Torvalds
ABAF11C65A2970B130ABE3C479BE3E4300411886 \
# Greg Kroah-Hartman
647F28654894E3BD457199BE38DBBDC86092693E

# updated via ""update.sh""
ENV LINUX_VERSION 4.14.107

RUN wget -O /linux.tar.xz ""https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.xz""; \
wget -O /linux.tar.asc ""https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.sign""; \
\
# decompress (signature is for the decompressed file)
xz --decompress /linux.tar.xz; \
[ -f /linux.tar ] && [ ! -f /linux.tar.xz ]; \
\
# verify
export GNUPGHOME=""$(mktemp -d)""; \
for key in $LINUX_GPG_KEYS; do \
for mirror in \
ha.pool.sks-keyservers.net \
pgp.mit.edu \
hkp://p80.pool.sks-keyservers.net:80 \
ipv4.pool.sks-keyservers.net \
keyserver.ubuntu.com \
hkp://keyserver.ubuntu.com:80 \
; do \
if gpg --batch --verbose --keyserver ""$mirror"" --keyserver-options timeout=5 --recv-keys ""$key""; then \
break; \
fi; \
done; \
gpg --batch --fingerprint ""$key""; \
done; \
gpg --batch --verify /linux.tar.asc /linux.tar; \
gpgconf --kill all; \
rm -rf ""$GNUPGHOME""; \
\
# extract
tar --extract --file /linux.tar --directory /usr/src; \
rm /linux.tar /linux.tar.asc; \
ln -sT ""linux-$LINUX_VERSION"" /usr/src/linux; \
[ -d /usr/src/linux ]

RUN { \
echo '#!/usr/bin/env bash'; \
echo 'set -Eeuo pipefail'; \
echo 'while [ ""$#"" -gt 0 ]; do'; \
echo 'conf=""${1%%=*}""; shift'; \
echo 'conf=""${conf#CONFIG_}""'; \
# https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt
# TODO somehow capture ""if"" directives (https://github.com/torvalds/linux/blob/52e60b754438f34d23348698534e9ca63cd751d7/drivers/message/fusion/Kconfig#L12) since they're dependency related (can't set ""CONFIG_FUSION_SAS"" without first setting ""CONFIG_FUSION"")
echo 'find /usr/src/linux/ \
-name Kconfig \
-exec awk -v conf=""$conf"" '""'""' \
$1 ~ /^(menu)?config$/ && $2 == conf { \
yes = 1; \
printf ""-- %s:%s --\n"", FILENAME, FNR; \
print; \
next; \
} \
$1 ~ /^(end)?((menu)?config|choice|comment|menu|if|source)$/ { yes = 0; next } \
# TODO parse help text properly (indentation-based) to avoid false positives when scraping deps
yes { print; next } \
'""'""' ""{}"" + \
'; \
echo 'done'; \
} > /usr/local/bin/linux-kconfig-info; \
chmod +x /usr/local/bin/linux-kconfig-info; \
linux-kconfig-info CGROUPS

COPY files/kernel-config.d /kernel-config.d

RUN setConfs=""$(grep -vEh '^[#-]' /kernel-config.d/* | sort -u)""; \
unsetConfs=""$(sed -n 's/^-//p' /kernel-config.d/* | sort -u)""; \
IFS=$'\n'; \
setConfs=( $setConfs ); \
unsetConfs=( $unsetConfs ); \
unset IFS; \
\
make -C /usr/src/linux \
defconfig \
kvmconfig \
xenconfig \
> /dev/null; \
\
( \
set +x; \
for conf in ""${unsetConfs[@]}""; do \
sed -i -e ""s!^$conf=.*\$!# $conf is not set!"" /usr/src/linux/.config; \
done; \
for confV in ""${setConfs[@]}""; do \
conf=""${confV%%=*}""; \
sed -ri -e ""s!^($conf=.*|# $conf is not set)\$!$confV!"" /usr/src/linux/.config; \
if ! grep -q ""^$confV\$"" /usr/src/linux/.config; then \
echo ""$confV"" >> /usr/src/linux/.config; \
fi; \
done; \
); \
make -C /usr/src/linux olddefconfig; \
set +x; \
ret=; \
for conf in ""${unsetConfs[@]}""; do \
if grep ""^$conf="" /usr/src/linux/.config; then \
echo ""$conf is set!""; \
ret=1; \
fi; \
done; \
for confV in ""${setConfs[@]}""; do \
if ! grep -q ""^$confV\$"" /usr/src/linux/.config; then \
kconfig=""$(linux-kconfig-info ""$confV"")""; \
echo >&2; \
echo >&2 ""'$confV' is not set:""; \
echo >&2; \
echo >&2 ""$kconfig""; \
echo >&2; \
for dep in $(awk '$1 == ""depends"" && $2 == ""on"" { $1 = """"; $2 = """"; gsub(/[^a-zA-Z0-9_-]+/, "" ""); print }' <<<""$kconfig""); do \
grep >&2 -E ""^CONFIG_$dep=|^# CONFIG_$dep is not set$"" /usr/src/linux/.config || :; \
done; \
echo >&2; \
ret=1; \
fi; \
done; \
[ -z ""$ret"" ] || exit ""$ret""

RUN make -C /usr/src/linux -j ""$(nproc)"" bzImage modules; \
make -C /usr/src/linux INSTALL_MOD_PATH=""$PWD"" modules_install
RUN mkdir -p /tmp/iso/boot; \
cp -vLT /usr/src/linux/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz

RUN tcl-tce-load \
acpid \
bash-completion \
ca-certificates \
curl \
e2fsprogs \
git \
iproute2 \
iptables \
ncurses-terminfo \
nfs-utils \
openssh \
openssl \
parted \
procps \
rsync \
tar \
util-linux \
xz

# bash-completion puts auto-load in /usr/local/etc/profile.d instead of /etc/profile.d
# (this one-liner is the same as the loop at the end of /etc/profile with an adjusted search path)
RUN echo 'for i in /usr/local/etc/profile.d/*.sh ; do if [ -r ""$i"" ]; then . $i; fi; done' > etc/profile.d/usr-local-etc-profile-d.sh; \
# Docker expects to find certs in /etc/ssl
ln -svT ../usr/local/etc/ssl etc/ssl; \
# make sure the Docker group exists and we're part of it
tcl-chroot sh -eux -c 'addgroup -S docker && addgroup docker docker'

# install kernel headers so we can use them for building xen-utils, etc
RUN make -C /usr/src/linux INSTALL_HDR_PATH=/usr/local headers_install

# https://lkml.org/lkml/2018/4/12/711 (https://github.com/boot2docker/boot2docker/pull/1322)
# https://github.com/jirka-h/haveged/releases
ENV HAVEGED_VERSION 1.9.4
RUN wget -O /haveged.tgz ""https://github.com/jirka-h/haveged/archive/${HAVEGED_VERSION}.tar.gz""; \
mkdir /usr/src/haveged; \
tar --extract --file /haveged.tgz --directory /usr/src/haveged --strip-components 1; \
rm /haveged.tgz
# https://debbugs.gnu.org/11064 (libtool eats ""-static"", gcc doesn't mind getting ""--static"" even more than once)
RUN ( cd /usr/src/haveged && ./configure LDFLAGS='-static --static' ); \
make -C /usr/src/haveged/src -j ""$(nproc)"" haveged; \
cp -v /usr/src/haveged/src/haveged usr/local/sbin/; \
strip usr/local/sbin/haveged; \
tcl-chroot haveged --run 1

# http://download.virtualbox.org/virtualbox/
# updated via ""update.sh""
ENV VBOX_VERSION 5.2.26
# https://www.virtualbox.org/download/hashes/$VBOX_VERSION/SHA256SUMS
ENV VBOX_SHA256 b927c5d0d4c97a9da2522daad41fe96b616ed06bfb0c883f9c42aad2244f7c38
# (VBoxGuestAdditions_X.Y.Z.iso SHA256, for verification)

RUN wget -O /vbox.iso ""https://download.virtualbox.org/virtualbox/$VBOX_VERSION/VBoxGuestAdditions_$VBOX_VERSION.iso""; \
echo ""$VBOX_SHA256 */vbox.iso"" | sha256sum -c -; \
7z x -o/ /vbox.iso VBoxLinuxAdditions.run; \
rm /vbox.iso; \
sh /VBoxLinuxAdditions.run --noexec --target /usr/src/vbox; \
mkdir /usr/src/vbox/amd64; \
7z x -so /usr/src/vbox/VBoxGuestAdditions-amd64.tar.bz2 | tar --extract --directory /usr/src/vbox/amd64; \
rm /usr/src/vbox/VBoxGuestAdditions-*.tar.bz2; \
ln -sT ""vboxguest-$VBOX_VERSION"" /usr/src/vbox/amd64/src/vboxguest
RUN make -C /usr/src/vbox/amd64/src/vboxguest -j ""$(nproc)"" \
KERN_DIR='/usr/src/linux' \
KERN_VER=""$(< /usr/src/linux/include/config/kernel.release)"" \
vboxguest vboxsf \
; \
cp -v /usr/src/vbox/amd64/src/vboxguest/*.ko lib/modules/*/; \
# create hacky symlink so these binaries can work as-is
ln -sT lib lib64; \
cp -v /usr/src/vbox/amd64/other/mount.vboxsf /usr/src/vbox/amd64/sbin/VBoxService sbin/; \
cp -v /usr/src/vbox/amd64/bin/VBoxControl bin/

# TCL includes VMware's open-vm-tools 10.2.0.1608+ (no reason to compile that ourselves)
RUN tcl-tce-load open-vm-tools; \
tcl-chroot vmhgfs-fuse --version; \
tcl-chroot vmtoolsd --version

ENV PARALLELS_VERSION 13.3.0-43321

RUN wget -O /parallels.tgz ""https://download.parallels.com/desktop/v${PARALLELS_VERSION%%.*}/$PARALLELS_VERSION/ParallelsTools-$PARALLELS_VERSION-boot2docker.tar.gz""; \
mkdir /usr/src/parallels; \
tar --extract --file /parallels.tgz --directory /usr/src/parallels --strip-components 1; \
rm /parallels.tgz
RUN cp -vr /usr/src/parallels/tools/* ./; \
make -C /usr/src/parallels/kmods -f Makefile.kmods -j ""$(nproc)"" installme \
SRC='/usr/src/linux' \
KERNEL_DIR='/usr/src/linux' \
KVER=""$(< /usr/src/linux/include/config/kernel.release)"" \
PRL_FREEZE_SKIP=1 \
; \
find /usr/src/parallels/kmods -name '*.ko' -exec cp -v '{}' lib/modules/*/ ';'; \
tcl-chroot prltoolsd -V

# https://github.com/xenserver/xe-guest-utilities/tags
# updated via ""update.sh""
ENV XEN_VERSION 7.11.0

RUN wget -O /xen.tgz ""https://github.com/xenserver/xe-guest-utilities/archive/v$XEN_VERSION.tar.gz""; \
mkdir /usr/src/xen; \
tar --extract --file /xen.tgz --directory /usr/src/xen --strip-components 1; \
rm /xen.tgz
RUN make -C /usr/src/xen -j ""$(nproc)"" PRODUCT_VERSION=""$XEN_VERSION"" RELEASE='boot2docker'; \
tar --extract --file ""/usr/src/xen/build/dist/xe-guest-utilities_$XEN_VERSION-boot2docker_x86_64.tgz""; \
tcl-chroot xenstore || [ ""$?"" = 1 ]

# Hyper-V KVP Daemon
RUN make -C /usr/src/linux/tools/hv hv_kvp_daemon; \
cp /usr/src/linux/tools/hv/hv_kvp_daemon usr/local/sbin/; \
tcl-chroot hv_kvp_daemon --help || [ ""$?"" = 1 ]

# scan all built modules for kernel loading
RUN tcl-chroot depmod ""$(< /usr/src/linux/include/config/kernel.release)""

# https://github.com/tianon/cgroupfs-mount/releases
ENV CGROUPFS_MOUNT_VERSION 1.4

RUN wget -O usr/local/sbin/cgroupfs-mount ""https://github.com/tianon/cgroupfs-mount/raw/${CGROUPFS_MOUNT_VERSION}/cgroupfs-mount""; \
chmod +x usr/local/sbin/cgroupfs-mount; \
tcl-chroot cgroupfs-mount

ENV DOCKER_VERSION 18.09.4-rc1

# Get the Docker binaries with version that matches our boot2docker version.
RUN DOCKER_CHANNEL='edge'; \
case ""$DOCKER_VERSION"" in \
# all the pre-releases go in the ""test"" channel
*-rc* | *-beta* | *-tp* ) DOCKER_CHANNEL='test' ;; \
esac; \
\
wget -O /docker.tgz ""https://download.docker.com/linux/static/$DOCKER_CHANNEL/x86_64/docker-$DOCKER_VERSION.tgz""; \
tar -zxvf /docker.tgz -C ""usr/local/bin"" --strip-components=1; \
rm /docker.tgz; \
\
# download bash-completion too
wget -O usr/local/share/bash-completion/completions/docker ""https://github.com/docker/docker-ce/raw/v${DOCKER_VERSION}/components/cli/contrib/completion/bash/docker""; \
\
for binary in \
containerd \
ctr \
docker \
docker-init \
dockerd \
runc \
; do \
chroot . ""$binary"" --version; \
done

# set up a few branding bits
RUN { \
echo 'NAME=Boot2Docker'; \
echo ""VERSION=$DOCKER_VERSION""; \
echo 'ID=boot2docker'; \
echo 'ID_LIKE=tcl'; \
echo ""VERSION_ID=$DOCKER_VERSION""; \
echo ""PRETTY_NAME=\""Boot2Docker $DOCKER_VERSION (TCL $TCL_VERSION)\""""; \
echo 'ANSI_COLOR=""1;34""'; \
echo 'HOME_URL=""https://github.com/boot2docker/boot2docker""'; \
echo 'SUPPORT_URL=""https://blog.docker.com/2016/11/introducing-docker-community-directory-docker-community-slack/""'; \
echo 'BUG_REPORT_URL=""https://github.com/boot2docker/boot2docker/issues""'; \
} > etc/os-release; \
sed -i 's/HOSTNAME=""box""/HOSTNAME=""boot2docker""/g' usr/bin/sethostname; \
tcl-chroot sethostname; \
[ ""$(< etc/hostname)"" = 'boot2docker' ]; \
for num in 0 1 2 3; do \
echo ""server $num.boot2docker.pool.ntp.org""; \
done > etc/ntp.conf; \
rm -v etc/sysconfig/ntpserver

COPY files/forgiving-getty files/shutdown ./usr/local/sbin/

# getty/inittab setup
RUN awk -F: ' \
$1 == ""tty1"" { \
print ""tty1::respawn:/usr/local/sbin/forgiving-getty tty1""; \
print ""ttyS0::respawn:/usr/local/sbin/forgiving-getty ttyS0""; \
next; \
} \
$1 ~ /^#?tty/ { next } \
{ print } \
' etc/inittab > etc/inittab.new; \
mv etc/inittab.new etc/inittab; \
grep forgiving-getty etc/inittab; \
# /sbin/autologin likes to invoke getty directly, so we skip that noise (especially since we want to always autologin)
# (and getty's ""-l"" argument cannot accept anything but a single command to ""exec"" directly -- no args)
# (and getty's ""-n"" argument to autologin doesn't seem to work properly)
{ \
echo '#!/bin/sh'; \
echo 'user=""$(cat /etc/sysconfig/tcuser 2>/dev/null)""'; \
echo 'exec login -f ""${user:-docker}""'; \
} > usr/local/sbin/autologin; \
chmod +x usr/local/sbin/autologin

# ssh config prep
RUN [ ! -f usr/local/etc/sshd_config ]; \
sed -r \
-e 's/^#(UseDNS[[:space:]])/\1/' \
-e 's/^#(PermitUserEnvironment)[[:space:]].*$/\1 yes/' \
usr/local/etc/ssh/sshd_config.orig \
> usr/local/etc/ssh/sshd_config; \
grep '^UseDNS no$' usr/local/etc/ssh/sshd_config; \
# ""This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
# (and there are several important binaries in /usr/local/sbin that ""docker-machine"" needs to invoke like ""ip"" and ""iptables"")
grep '^PermitUserEnvironment yes$' usr/local/etc/ssh/sshd_config; \
mkdir -p home/docker/.ssh; \
echo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' > home/docker/.ssh/environment; \
# acpid prep (looks in the wrong path for /etc/acpi)
ln -sT ../usr/local/etc/acpi etc/acpi; \
[ -z ""$(ls -A etc/acpi/events)"" ]; \
{ echo 'event=button/power'; echo 'action=/usr/bin/env poweroff'; } > etc/acpi/events/power; \
# explicit UTC timezone (especially for container bind-mounting)
echo 'UTC' > etc/timezone; \
cp -vL /usr/share/zoneinfo/UTC etc/localtime; \
# ""dockremap"" user/group so ""--userns-remap=default"" works out-of-the-box
tcl-chroot addgroup -S dockremap; \
tcl-chroot adduser -S -G dockremap dockremap; \
echo 'dockremap:165536:65536' | tee etc/subuid | tee etc/subgid

RUN savedAptMark=""$(apt-mark showmanual)""; \
apt-get update; \
apt-get install -y --no-install-recommends \
isolinux \
syslinux-common \
; \
rm -rf /var/lib/apt/lists/*; \
mkdir -p /tmp/iso/isolinux; \
cp -v \
/usr/lib/ISOLINUX/isolinux.bin \
/usr/lib/syslinux/modules/bios/ldlinux.c32 \
/usr/lib/syslinux/modules/bios/libutil.c32 \
/usr/lib/syslinux/modules/bios/menu.c32 \
/tmp/iso/isolinux/ \
; \
cp -v /usr/lib/ISOLINUX/isohdpfx.bin /tmp/; \
apt-mark auto '.*' > /dev/null; \
apt-mark manual $savedAptMark; \
apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
COPY files/isolinux.cfg /tmp/iso/isolinux/

COPY files/init.d/* ./etc/init.d/
COPY files/bootsync.sh ./opt/

# temporary boot debugging aid
#RUN sed -i '2i set -x' etc/init.d/tc-config

COPY files/make-b2d-iso.sh /usr/local/bin/
RUN time make-b2d-iso.sh; \
du -hs /tmp/boot2docker.iso

CMD [""sh"", ""-c"", ""[ -t 1 ] && exec bash || exec cat /tmp/boot2docker.iso""]
","FROM debian:stretch-slim

SHELL [""/bin/bash"", ""-Eeuo"", ""pipefail"", ""-xc""]

RUN apt-get update; \
apt-get install -y --no-install-recommends \
bash-completion \
bc \
ca-certificates \
cpio \
gcc \
git \
gnupg dirmngr \
golang-go \
kmod \
libc6-dev \
libelf-dev \
make \
p7zip-full \
patch \
squashfs-tools \
wget \
xorriso \
xz-utils \
; \
rm -rf /var/lib/apt/lists/*

# cleaner wget output
RUN echo 'progress = dot:giga' >> ~/.wgetrc; \
# color prompt (better debugging/devel)
cp /etc/skel/.bashrc ~/

WORKDIR /rootfs

# updated via ""update.sh""
ENV TCL_MIRRORS http://distro.ibiblio.org/tinycorelinux http://repo.tinycorelinux.net
ENV TCL_MAJOR 8.x
ENV TCL_VERSION 8.2.1

# http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/archive/8.2.1/distribution_files/rootfs64.gz.md5.txt
# updated via ""update.sh""
ENV TCL_ROOTFS=""rootfs64.gz"" TCL_ROOTFS_MD5=""b4991d3c07b88649b61616f86f2f079f""

COPY files/tce-load.patch files/udhcpc.patch /tcl-patches/

RUN for mirror in $TCL_MIRRORS; do \
if \
{ \
wget -O /rootfs.gz ""$mirror/$TCL_MAJOR/x86_64/archive/$TCL_VERSION/distribution_files/$TCL_ROOTFS"" \
# 9.x doesn't seem to use "".../archive/X.Y.Z/..."" in the same way as 8.x :(
|| wget -O /rootfs.gz ""$mirror/$TCL_MAJOR/x86_64/release/distribution_files/$TCL_ROOTFS"" \
; } && echo ""$TCL_ROOTFS_MD5 */rootfs.gz"" | md5sum -c - \
; then \
break; \
fi; \
done; \
echo ""$TCL_ROOTFS_MD5 */rootfs.gz"" | md5sum -c -; \
zcat /rootfs.gz | cpio \
--extract \
--make-directories \
--no-absolute-filenames \
; \
rm /rootfs.gz; \
\
for patch in /tcl-patches/*.patch; do \
patch \
--input ""$patch"" \
--strip 1 \
--verbose \
; \
done; \
\
{ \
echo '# https://1.1.1.1/'; \
echo 'nameserver 1.1.1.1'; \
echo 'nameserver 1.0.0.1'; \
echo; \
echo '# https://developers.google.com/speed/public-dns/'; \
echo 'nameserver 8.8.8.8'; \
echo 'nameserver 8.8.4.4'; \
} > etc/resolv.conf; \
cp etc/resolv.conf etc/resolv.conf.b2d; \
{ \
echo '#!/usr/bin/env bash'; \
echo 'set -Eeuo pipefail'; \
echo ""cd '$PWD'""; \
echo 'cp -T etc/resolv.conf etc/resolv.conf.bak'; \
echo 'cp -T /etc/resolv.conf etc/resolv.conf'; \
echo 'cp -T /proc/cpuinfo proc/cpuinfo 2>/dev/null || :'; \
echo 'trap ""mv -T etc/resolv.conf.bak etc/resolv.conf || :; rm proc/cpuinfo 2>/dev/null || :"" EXIT'; \
echo 'env -i PATH=""/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"" TERM=""$TERM"" chroot '""'$PWD'""' ""$@""'; \
} > /usr/local/bin/tcl-chroot; \
chmod +x /usr/local/bin/tcl-chroot

# add new ""docker"" user (and replace ""tc"" user usage with ""docker"")
RUN tcl-chroot adduser \
-h /home/docker \
-g 'Docker' \
-s /bin/sh \
-G staff \
-D \
-u 1000 \
docker \
; \
echo 'docker:tcuser' | tcl-chroot chpasswd; \
echo 'docker ALL = NOPASSWD: ALL' >> etc/sudoers; \
sed -i 's/USER=""tc""/USER=""docker""/g' etc/init.d/tc-* etc/init.d/services/*

# https://github.com/tatsushid/docker-tinycore/blob/017b258a08a41399f65250c9865a163226c8e0bf/8.2/x86_64/Dockerfile
RUN mkdir -p proc; \
touch proc/cmdline; \
mkdir -p tmp/tce/optional usr/local/tce.installed/optional; \
chown -R root:staff tmp/tce usr/local/tce.installed; \
chmod -R g+w tmp/tce; \
ln -sT ../../tmp/tce etc/sysconfig/tcedir; \
echo -n docker > etc/sysconfig/tcuser; \
tcl-chroot sh -c '. /etc/init.d/tc-functions && setupHome'

# packages (and their deps) that we either need for our ""tce-load"" patches or that dep on ""...-KERNEL"" which we don't need (since we build our own kernel)
# http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.dep
# http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.md5.txt
# updated via ""update.sh""
ENV TCL_PACKAGES=""squashfs-tools.tcz liblzma.tcz lzo.tcz libzstd.tcz"" TCL_PACKAGE_MD5__squashfs_tools_tcz=""a44331fa2117314e62267147b6876a49"" TCL_PACKAGE_MD5__liblzma_tcz=""32b4958b9cb03d54d2d1d50df5bed699"" TCL_PACKAGE_MD5__lzo_tcz=""c9a1260675774c50cea1a490978b100d"" TCL_PACKAGE_MD5__libzstd_tcz=""a7f383473a4ced6c79e8b1a0cc9ad167""

RUN for package in $TCL_PACKAGES; do \
eval 'md5=""$TCL_PACKAGE_MD5__'""$(echo ""$package"" | sed -r 's/[^a-zA-Z0-9]+/_/g')""'""'; \
echo ""$md5 *$package"" > ""usr/local/tce.installed/optional/$package.md5.txt""; \
for mirror in $TCL_MIRRORS; do \
if \
wget -O ""usr/local/tce.installed/optional/$package"" ""$mirror/$TCL_MAJOR/x86_64/tcz/$package"" \
&& ( cd usr/local/tce.installed/optional && md5sum -c ""$package.md5.txt"" ) \
; then \
break; \
fi; \
done; \
( cd usr/local/tce.installed/optional && md5sum -c ""$package.md5.txt"" ); \
unsquashfs -dest . -force ""usr/local/tce.installed/optional/$package""; \
touch ""usr/local/tce.installed/${package%.tcz}""; \
# pretend this package has no deps (we already installed them)
touch ""usr/local/tce.installed/optional/$package.dep""; \
done; \
\
tcl-chroot ldconfig; \
for script in usr/local/tce.installed/*; do \
[ -f ""$script"" ] || continue; \
[ -x ""$script"" ] || continue; \
tcl-chroot ""$script""; \
done; \
\
{ \
echo '#!/bin/bash -Eeux'; \
echo 'tcl-chroot su -c ""tce-load -wicl \""\$@\"""" docker -- - ""$@""'; \
} > /usr/local/bin/tcl-tce-load; \
chmod +x /usr/local/bin/tcl-tce-load

RUN tcl-tce-load bash; \
tcl-chroot bash --version; \
# delete all the TCL user-specific profile/rc files -- they have odd settings like auto-login from interactive root directly to ""tcuser""
# (and the bash-provided defaults are reasonably sane)
rm -vf \
home/docker/.ashrc \
home/docker/.bashrc \
home/docker/.profile \
root/.ashrc \
root/.bashrc \
root/.profile \
; \
echo 'source /etc/profile' > home/docker/.profile; \
echo 'source /etc/profile' > root/.profile; \
# swap ""docker"" (and ""root"") user shell from /bin/sh to /bin/bash now that it exists
sed -ri '/^(docker|root):/ s!:[^:]*$!:/bin/bash!' etc/passwd; \
grep -E '^root:' etc/passwd | grep bash; \
grep -E '^docker:' etc/passwd | grep bash; \
# /etc/profile has a minor root bug where it uses ""\#"" in PS1 instead of ""\$"" (so we get a counter in our prompt instead of a ""#"")
# but also, does not use \[ and \] for escape sequences, so Bash readline gets confused, so let's replace it outright with something perty
grep '\\#' etc/profile; \
echo 'PS1='""'""'\[\e[1;32m\]\u@\h\[\e[0m\]:\[\e[1;34m\]\w\[\e[0m\]\$ '""'""'' > etc/profile.d/boot2docker-ps1.sh; \
source etc/profile.d/boot2docker-ps1.sh; \
[ ""$PS1"" = '\[\e[1;32m\]\u@\h\[\e[0m\]:\[\e[1;34m\]\w\[\e[0m\]\$ ' ]

# https://www.kernel.org/category/signatures.html#important-fingerprints
ENV LINUX_GPG_KEYS \
# Linus Torvalds
ABAF11C65A2970B130ABE3C479BE3E4300411886 \
# Greg Kroah-Hartman
647F28654894E3BD457199BE38DBBDC86092693E

# updated via ""update.sh""
ENV LINUX_VERSION 4.14.109

RUN wget -O /linux.tar.xz ""https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.xz""; \
wget -O /linux.tar.asc ""https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.sign""; \
\
# decompress (signature is for the decompressed file)
xz --decompress /linux.tar.xz; \
[ -f /linux.tar ] && [ ! -f /linux.tar.xz ]; \
\
# verify
export GNUPGHOME=""$(mktemp -d)""; \
for key in $LINUX_GPG_KEYS; do \
for mirror in \
ha.pool.sks-keyservers.net \
pgp.mit.edu \
hkp://p80.pool.sks-keyservers.net:80 \
ipv4.pool.sks-keyservers.net \
keyserver.ubuntu.com \
hkp://keyserver.ubuntu.com:80 \
; do \
if gpg --batch --verbose --keyserver ""$mirror"" --keyserver-options timeout=5 --recv-keys ""$key""; then \
break; \
fi; \
done; \
gpg --batch --fingerprint ""$key""; \
done; \
gpg --batch --verify /linux.tar.asc /linux.tar; \
gpgconf --kill all; \
rm -rf ""$GNUPGHOME""; \
\
# extract
tar --extract --file /linux.tar --directory /usr/src; \
rm /linux.tar /linux.tar.asc; \
ln -sT ""linux-$LINUX_VERSION"" /usr/src/linux; \
[ -d /usr/src/linux ]

RUN { \
echo '#!/usr/bin/env bash'; \
echo 'set -Eeuo pipefail'; \
echo 'while [ ""$#"" -gt 0 ]; do'; \
echo 'conf=""${1%%=*}""; shift'; \
echo 'conf=""${conf#CONFIG_}""'; \
# https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt
# TODO somehow capture ""if"" directives (https://github.com/torvalds/linux/blob/52e60b754438f34d23348698534e9ca63cd751d7/drivers/message/fusion/Kconfig#L12) since they're dependency related (can't set ""CONFIG_FUSION_SAS"" without first setting ""CONFIG_FUSION"")
echo 'find /usr/src/linux/ \
-name Kconfig \
-exec awk -v conf=""$conf"" '""'""' \
$1 ~ /^(menu)?config$/ && $2 == conf { \
yes = 1; \
printf ""-- %s:%s --\n"", FILENAME, FNR; \
print; \
next; \
} \
$1 ~ /^(end)?((menu)?config|choice|comment|menu|if|source)$/ { yes = 0; next } \
# TODO parse help text properly (indentation-based) to avoid false positives when scraping deps
yes { print; next } \
'""'""' ""{}"" + \
'; \
echo 'done'; \
} > /usr/local/bin/linux-kconfig-info; \
chmod +x /usr/local/bin/linux-kconfig-info; \
linux-kconfig-info CGROUPS

COPY files/kernel-config.d /kernel-config.d

RUN setConfs=""$(grep -vEh '^[#-]' /kernel-config.d/* | sort -u)""; \
unsetConfs=""$(sed -n 's/^-//p' /kernel-config.d/* | sort -u)""; \
IFS=$'\n'; \
setConfs=( $setConfs ); \
unsetConfs=( $unsetConfs ); \
unset IFS; \
\
make -C /usr/src/linux \
defconfig \
kvmconfig \
xenconfig \
> /dev/null; \
\
( \
set +x; \
for conf in ""${unsetConfs[@]}""; do \
sed -i -e ""s!^$conf=.*\$!# $conf is not set!"" /usr/src/linux/.config; \
done; \
for confV in ""${setConfs[@]}""; do \
conf=""${confV%%=*}""; \
sed -ri -e ""s!^($conf=.*|# $conf is not set)\$!$confV!"" /usr/src/linux/.config; \
if ! grep -q ""^$confV\$"" /usr/src/linux/.config; then \
echo ""$confV"" >> /usr/src/linux/.config; \
fi; \
done; \
); \
make -C /usr/src/linux olddefconfig; \
set +x; \
ret=; \
for conf in ""${unsetConfs[@]}""; do \
if grep ""^$conf="" /usr/src/linux/.config; then \
echo ""$conf is set!""; \
ret=1; \
fi; \
done; \
for confV in ""${setConfs[@]}""; do \
if ! grep -q ""^$confV\$"" /usr/src/linux/.config; then \
kconfig=""$(linux-kconfig-info ""$confV"")""; \
echo >&2; \
echo >&2 ""'$confV' is not set:""; \
echo >&2; \
echo >&2 ""$kconfig""; \
echo >&2; \
for dep in $(awk '$1 == ""depends"" && $2 == ""on"" { $1 = """"; $2 = """"; gsub(/[^a-zA-Z0-9_-]+/, "" ""); print }' <<<""$kconfig""); do \
grep >&2 -E ""^CONFIG_$dep=|^# CONFIG_$dep is not set$"" /usr/src/linux/.config || :; \
done; \
echo >&2; \
ret=1; \
fi; \
done; \
[ -z ""$ret"" ] || exit ""$ret""

RUN make -C /usr/src/linux -j ""$(nproc)"" bzImage modules; \
make -C /usr/src/linux INSTALL_MOD_PATH=""$PWD"" modules_install
RUN mkdir -p /tmp/iso/boot; \
cp -vLT /usr/src/linux/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz

RUN tcl-tce-load \
acpid \
bash-completion \
ca-certificates \
curl \
e2fsprogs \
git \
iproute2 \
iptables \
ncurses-terminfo \
nfs-utils \
openssh \
openssl \
parted \
procps \
rsync \
tar \
util-linux \
xz

# bash-completion puts auto-load in /usr/local/etc/profile.d instead of /etc/profile.d
# (this one-liner is the same as the loop at the end of /etc/profile with an adjusted search path)
RUN echo 'for i in /usr/local/etc/profile.d/*.sh ; do if [ -r ""$i"" ]; then . $i; fi; done' > etc/profile.d/usr-local-etc-profile-d.sh; \
# Docker expects to find certs in /etc/ssl
ln -svT ../usr/local/etc/ssl etc/ssl; \
# make sure the Docker group exists and we're part of it
tcl-chroot sh -eux -c 'addgroup -S docker && addgroup docker docker'

# install kernel headers so we can use them for building xen-utils, etc
RUN make -C /usr/src/linux INSTALL_HDR_PATH=/usr/local headers_install

# https://lkml.org/lkml/2018/4/12/711 (https://github.com/boot2docker/boot2docker/pull/1322)
# https://github.com/jirka-h/haveged/releases
ENV HAVEGED_VERSION 1.9.4
RUN wget -O /haveged.tgz ""https://github.com/jirka-h/haveged/archive/${HAVEGED_VERSION}.tar.gz""; \
mkdir /usr/src/haveged; \
tar --extract --file /haveged.tgz --directory /usr/src/haveged --strip-components 1; \
rm /haveged.tgz
# https://debbugs.gnu.org/11064 (libtool eats ""-static"", gcc doesn't mind getting ""--static"" even more than once)
RUN ( cd /usr/src/haveged && ./configure LDFLAGS='-static --static' ); \
make -C /usr/src/haveged/src -j ""$(nproc)"" haveged; \
cp -v /usr/src/haveged/src/haveged usr/local/sbin/; \
strip usr/local/sbin/haveged; \
tcl-chroot haveged --run 1

# http://download.virtualbox.org/virtualbox/
# updated via ""update.sh""
ENV VBOX_VERSION 5.2.26
# https://www.virtualbox.org/download/hashes/$VBOX_VERSION/SHA256SUMS
ENV VBOX_SHA256 b927c5d0d4c97a9da2522daad41fe96b616ed06bfb0c883f9c42aad2244f7c38
# (VBoxGuestAdditions_X.Y.Z.iso SHA256, for verification)

RUN wget -O /vbox.iso ""https://download.virtualbox.org/virtualbox/$VBOX_VERSION/VBoxGuestAdditions_$VBOX_VERSION.iso""; \
echo ""$VBOX_SHA256 */vbox.iso"" | sha256sum -c -; \
7z x -o/ /vbox.iso VBoxLinuxAdditions.run; \
rm /vbox.iso; \
sh /VBoxLinuxAdditions.run --noexec --target /usr/src/vbox; \
mkdir /usr/src/vbox/amd64; \
7z x -so /usr/src/vbox/VBoxGuestAdditions-amd64.tar.bz2 | tar --extract --directory /usr/src/vbox/amd64; \
rm /usr/src/vbox/VBoxGuestAdditions-*.tar.bz2; \
ln -sT ""vboxguest-$VBOX_VERSION"" /usr/src/vbox/amd64/src/vboxguest
RUN make -C /usr/src/vbox/amd64/src/vboxguest -j ""$(nproc)"" \
KERN_DIR='/usr/src/linux' \
KERN_VER=""$(< /usr/src/linux/include/config/kernel.release)"" \
vboxguest vboxsf \
; \
cp -v /usr/src/vbox/amd64/src/vboxguest/*.ko lib/modules/*/; \
# create hacky symlink so these binaries can work as-is
ln -sT lib lib64; \
cp -v /usr/src/vbox/amd64/other/mount.vboxsf /usr/src/vbox/amd64/sbin/VBoxService sbin/; \
cp -v /usr/src/vbox/amd64/bin/VBoxControl bin/

# TCL includes VMware's open-vm-tools 10.2.0.1608+ (no reason to compile that ourselves)
RUN tcl-tce-load open-vm-tools; \
tcl-chroot vmhgfs-fuse --version; \
tcl-chroot vmtoolsd --version

ENV PARALLELS_VERSION 13.3.0-43321

RUN wget -O /parallels.tgz ""https://download.parallels.com/desktop/v${PARALLELS_VERSION%%.*}/$PARALLELS_VERSION/ParallelsTools-$PARALLELS_VERSION-boot2docker.tar.gz""; \
mkdir /usr/src/parallels; \
tar --extract --file /parallels.tgz --directory /usr/src/parallels --strip-components 1; \
rm /parallels.tgz
RUN cp -vr /usr/src/parallels/tools/* ./; \
make -C /usr/src/parallels/kmods -f Makefile.kmods -j ""$(nproc)"" installme \
SRC='/usr/src/linux' \
KERNEL_DIR='/usr/src/linux' \
KVER=""$(< /usr/src/linux/include/config/kernel.release)"" \
PRL_FREEZE_SKIP=1 \
; \
find /usr/src/parallels/kmods -name '*.ko' -exec cp -v '{}' lib/modules/*/ ';'; \
tcl-chroot prltoolsd -V

# https://github.com/xenserver/xe-guest-utilities/tags
# updated via ""update.sh""
ENV XEN_VERSION 7.11.0

RUN wget -O /xen.tgz ""https://github.com/xenserver/xe-guest-utilities/archive/v$XEN_VERSION.tar.gz""; \
mkdir /usr/src/xen; \
tar --extract --file /xen.tgz --directory /usr/src/xen --strip-components 1; \
rm /xen.tgz
RUN make -C /usr/src/xen -j ""$(nproc)"" PRODUCT_VERSION=""$XEN_VERSION"" RELEASE='boot2docker'; \
tar --extract --file ""/usr/src/xen/build/dist/xe-guest-utilities_$XEN_VERSION-boot2docker_x86_64.tgz""; \
tcl-chroot xenstore || [ ""$?"" = 1 ]

# Hyper-V KVP Daemon
RUN make -C /usr/src/linux/tools/hv hv_kvp_daemon; \
cp /usr/src/linux/tools/hv/hv_kvp_daemon usr/local/sbin/; \
tcl-chroot hv_kvp_daemon --help || [ ""$?"" = 1 ]

# scan all built modules for kernel loading
RUN tcl-chroot depmod ""$(< /usr/src/linux/include/config/kernel.release)""

# https://github.com/tianon/cgroupfs-mount/releases
ENV CGROUPFS_MOUNT_VERSION 1.4

RUN wget -O usr/local/sbin/cgroupfs-mount ""https://github.com/tianon/cgroupfs-mount/raw/${CGROUPFS_MOUNT_VERSION}/cgroupfs-mount""; \
chmod +x usr/local/sbin/cgroupfs-mount; \
tcl-chroot cgroupfs-mount

ENV DOCKER_VERSION 18.09.4-rc1

# Get the Docker binaries with version that matches our boot2docker version.
RUN DOCKER_CHANNEL='edge'; \
case ""$DOCKER_VERSION"" in \
# all the pre-releases go in the ""test"" channel
*-rc* | *-beta* | *-tp* ) DOCKER_CHANNEL='test' ;; \
esac; \
\
wget -O /docker.tgz ""https://download.docker.com/linux/static/$DOCKER_CHANNEL/x86_64/docker-$DOCKER_VERSION.tgz""; \
tar -zxvf /docker.tgz -C ""usr/local/bin"" --strip-components=1; \
rm /docker.tgz; \
\
# download bash-completion too
wget -O usr/local/share/bash-completion/completions/docker ""https://github.com/docker/docker-ce/raw/v${DOCKER_VERSION}/components/cli/contrib/completion/bash/docker""; \
\
for binary in \
containerd \
ctr \
docker \
docker-init \
dockerd \
runc \
; do \
chroot . ""$binary"" --version; \
done

# set up a few branding bits
RUN { \
echo 'NAME=Boot2Docker'; \
echo ""VERSION=$DOCKER_VERSION""; \
echo 'ID=boot2docker'; \
echo 'ID_LIKE=tcl'; \
echo ""VERSION_ID=$DOCKER_VERSION""; \
echo ""PRETTY_NAME=\""Boot2Docker $DOCKER_VERSION (TCL $TCL_VERSION)\""""; \
echo 'ANSI_COLOR=""1;34""'; \
echo 'HOME_URL=""https://github.com/boot2docker/boot2docker""'; \
echo 'SUPPORT_URL=""https://blog.docker.com/2016/11/introducing-docker-community-directory-docker-community-slack/""'; \
echo 'BUG_REPORT_URL=""https://github.com/boot2docker/boot2docker/issues""'; \
} > etc/os-release; \
sed -i 's/HOSTNAME=""box""/HOSTNAME=""boot2docker""/g' usr/bin/sethostname; \
tcl-chroot sethostname; \
[ ""$(< etc/hostname)"" = 'boot2docker' ]; \
for num in 0 1 2 3; do \
echo ""server $num.boot2docker.pool.ntp.org""; \
done > etc/ntp.conf; \
rm -v etc/sysconfig/ntpserver

COPY files/forgiving-getty files/shutdown ./usr/local/sbin/

# getty/inittab setup
RUN awk -F: ' \
$1 == ""tty1"" { \
print ""tty1::respawn:/usr/local/sbin/forgiving-getty tty1""; \
print ""ttyS0::respawn:/usr/local/sbin/forgiving-getty ttyS0""; \
next; \
} \
$1 ~ /^#?tty/ { next } \
{ print } \
' etc/inittab > etc/inittab.new; \
mv etc/inittab.new etc/inittab; \
grep forgiving-getty etc/inittab; \
# /sbin/autologin likes to invoke getty directly, so we skip that noise (especially since we want to always autologin)
# (and getty's ""-l"" argument cannot accept anything but a single command to ""exec"" directly -- no args)
# (and getty's ""-n"" argument to autologin doesn't seem to work properly)
{ \
echo '#!/bin/sh'; \
echo 'user=""$(cat /etc/sysconfig/tcuser 2>/dev/null)""'; \
echo 'exec login -f ""${user:-docker}""'; \
} > usr/local/sbin/autologin; \
chmod +x usr/local/sbin/autologin

# ssh config prep
RUN [ ! -f usr/local/etc/sshd_config ]; \
sed -r \
-e 's/^#(UseDNS[[:space:]])/\1/' \
-e 's/^#(PermitUserEnvironment)[[:space:]].*$/\1 yes/' \
usr/local/etc/ssh/sshd_config.orig \
> usr/local/etc/ssh/sshd_config; \
grep '^UseDNS no$' usr/local/etc/ssh/sshd_config; \
# ""This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
# (and there are several important binaries in /usr/local/sbin that ""docker-machine"" needs to invoke like ""ip"" and ""iptables"")
grep '^PermitUserEnvironment yes$' usr/local/etc/ssh/sshd_config; \
mkdir -p home/docker/.ssh; \
echo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' > home/docker/.ssh/environment; \
# acpid prep (looks in the wrong path for /etc/acpi)
ln -sT ../usr/local/etc/acpi etc/acpi; \
[ -z ""$(ls -A etc/acpi/events)"" ]; \
{ echo 'event=button/power'; echo 'action=/usr/bin/env poweroff'; } > etc/acpi/events/power; \
# explicit UTC timezone (especially for container bind-mounting)
echo 'UTC' > etc/timezone; \
cp -vL /usr/share/zoneinfo/UTC etc/localtime; \
# ""dockremap"" user/group so ""--userns-remap=default"" works out-of-the-box
tcl-chroot addgroup -S dockremap; \
tcl-chroot adduser -S -G dockremap dockremap; \
echo 'dockremap:165536:65536' | tee etc/subuid | tee etc/subgid

RUN savedAptMark=""$(apt-mark showmanual)""; \
apt-get update; \
apt-get install -y --no-install-recommends \
isolinux \
syslinux-common \
; \
rm -rf /var/lib/apt/lists/*; \
mkdir -p /tmp/iso/isolinux; \
cp -v \
/usr/lib/ISOLINUX/isolinux.bin \
/usr/lib/syslinux/modules/bios/ldlinux.c32 \
/usr/lib/syslinux/modules/bios/libutil.c32 \
/usr/lib/syslinux/modules/bios/menu.c32 \
/tmp/iso/isolinux/ \
; \
cp -v /usr/lib/ISOLINUX/isohdpfx.bin /tmp/; \
apt-mark auto '.*' > /dev/null; \
apt-mark manual $savedAptMark; \
apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
COPY files/isolinux.cfg /tmp/iso/isolinux/

COPY files/init.d/* ./etc/init.d/
COPY files/bootsync.sh ./opt/

# temporary boot debugging aid
#RUN sed -i '2i set -x' etc/init.d/tc-config

COPY files/make-b2d-iso.sh /usr/local/bin/
RUN time make-b2d-iso.sh; \
du -hs /tmp/boot2docker.iso

CMD [""sh"", ""-c"", ""[ -t 1 ] && exec bash || exec cat /tmp/boot2docker.iso""]
"
40,27460554f5ebd6f04ab7668683d4979a9248e320,Update Docker image,"Update Docker image
","FROM node:11.12.0
WORKDIR /usr/src/app/
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 5000
CMD [""npm"",""start""]
","FROM node:14.8.0-slim
WORKDIR /usr/src/app/
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 5000
CMD [""npm"",""start""]
"
2201,d37a541164eaa6e1b6bc63256e14714ea4c0eed1,Upgrade to Baleen 2.2.0,"Upgrade to Baleen 2.2.0
","# Use a Oracle JDK base image
FROM committed/java
MAINTAINER Dstl <https://github.com/dstl/baleen>

# Baleen installation and configuration
ENV BALEEN_VERSION 2.1.0

# Download the (English) OpenNLP Name Entity Recognition models
RUN mkdir -p /opt/baleen/models \
 && wget -q -P /opt/baleen/models/ http://opennlp.sourceforge.net/models-1.5/en-ner-date.bin \
 && wget -q -P /opt/baleen/models/ http://opennlp.sourceforge.net/models-1.5/en-ner-location.bin \
 && wget -q -P /opt/baleen/models/ http://opennlp.sourceforge.net/models-1.5/en-ner-money.bin \
 && wget -q -P /opt/baleen/models/ http://opennlp.sourceforge.net/models-1.5/en-ner-organization.bin \
 && wget -q -P /opt/baleen/models/ http://opennlp.sourceforge.net/models-1.5/en-ner-percentage.bin  \
 && wget -q -P /opt/baleen/models/ http://opennlp.sourceforge.net/models-1.5/en-ner-person.bin \
 && wget -q -P /opt/baleen/models/ http://opennlp.sourceforge.net/models-1.5/en-ner-time.bin

# Now create the necessary directories (/baleen used as a volume, /opt/baleen for the jars):

# Either, download the Jars direct from github releases
RUN mkdir -p /baleen \
 && mkdir -p /opt/baleen \
 && wget -q -O /opt/baleen/baleen.jar https://github.com/dstl/baleen/releases/download/v${BALEEN_VERSION}/baleen-${BALEEN_VERSION}.jar \
 && wget -q -O /opt/baleen/baleen-javadoc.jar https://github.com/dstl/baleen/releases/download/v${BALEEN_VERSION}/baleen-${BALEEN_VERSION}-javadoc.jar
# Or, if you have a local version you can comment out the wget above
# and use the ADD line instead.
# ADD baleen-${BALEEN_VERSION}.jar /opt/baleen/baleen.jar
# ADD baleen-${BALEEN_VERSION}-javadoc.jar /opt/baleen/baleen-javadoc.jar

# Mount /baleen as the working directory, expose the Baleen's standard port
VOLUME /baleen
WORKDIR /baleen
EXPOSE 6413

# Always run Baleen
ENTRYPOINT [""java"", ""-jar"", ""/opt/baleen/baleen.jar""]
",
2099,cc934983dc64ebce40754aff75cc3a3be8465d84,Bumped source to 20200513-5a9ec88,"Bumped source to 20200513-5a9ec88
","FROM docker.pkg.github.com/dock0/arch/arch:20200512-2d69455
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
297,96e6b606d1567cfa1d5c2c029dd53d5e1031df16,- Fixing demo-server dir name.,"- Fixing demo-server dir name.
","FROM    centos:centos6

# Enable EPEL for Node.js
RUN     rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
# Install Node.js and npm
RUN     yum install -y npm git

RUN npm install bower -g

# Bundle app source
COPY . /src/twilio

# Install client dependencies
RUN cd /src/twilio; bower install --allow-root

# Install server dependencies
RUN cd /src/twilio/server-demo; npm install

EXPOSE 3000

CMD [""node"", ""/src/twilio/server-demo/index.js""]
","FROM    centos:centos6

# Enable EPEL for Node.js
RUN     rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
# Install Node.js and npm
RUN     yum install -y npm git

RUN npm install bower -g

# Bundle app source
COPY . /src/twilio

# Install client dependencies
RUN cd /src/twilio; bower install --allow-root

# Install server dependencies
RUN cd /src/twilio/demo-server; npm install

EXPOSE 3000

CMD [""node"", ""/src/twilio/demo-server/index.js""]
"
133,1aaa3177c5b8c85276c2d1395ca3c7d8c10c94e1,Run docker/update.sh,"Run docker/update.sh
","FROM alpine:3.2

RUN apk add --update \
curl \
&& rm -rf /var/cache/apk/*

ENV DOCKER_VERSION 1.9.0-dev
ENV DOCKER_URL https://master.dockerproject.org/linux/amd64/docker-1.9.0-dev
ENV DOCKER_SHA256 cb05d3e724c94be6c593f13d1e2f66a7f4482def75edd072b40d36d9423382ed

RUN curl -fSL ""${DOCKER_URL}"" -o /usr/local/bin/docker \
&& echo ""${DOCKER_SHA256}  /usr/local/bin/docker"" | sha256sum -c - \
&& chmod +x /usr/local/bin/docker

COPY docker-entrypoint.sh /usr/local/bin/

ENTRYPOINT [""docker-entrypoint.sh""]
CMD [""sh""]
","FROM alpine:3.2

RUN apk add --update \
curl \
&& rm -rf /var/cache/apk/*

ENV DOCKER_VERSION 1.9.0-dev
ENV DOCKER_URL https://master.dockerproject.org/linux/amd64/docker-1.9.0-dev
ENV DOCKER_SHA256 c5bcf49f7426123521e1a3ea26fa0bf41c88793437df5e894ab5b23ef74938d8

RUN curl -fSL ""${DOCKER_URL}"" -o /usr/local/bin/docker \
&& echo ""${DOCKER_SHA256}  /usr/local/bin/docker"" | sha256sum -c - \
&& chmod +x /usr/local/bin/docker

COPY docker-entrypoint.sh /usr/local/bin/

ENTRYPOINT [""docker-entrypoint.sh""]
CMD [""sh""]
"
36,4c1e5a84665f724f5ce712f83aa730bb115d6375,Bumped source to 20200614-12dcdbe,"Bumped source to 20200614-12dcdbe
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200614-2780f9b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200614-12dcdbe
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
2198,f84a3a887fd468cc408419d8dd93a389500ce9c0,Bumped source to 20200226-0c1391b,"Bumped source to 20200226-0c1391b
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200226-6536815
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
176,0936f0a3771b87ff2831b94ab7c242ca8aba008f,Update default base image,"Update default base image
","# 3DCityDB PostGIS Dockerfile #################################################
#   Official website    https://www.3dcitydb.net
#   GitHub              https://github.com/3dcitydb
###############################################################################

# Base image
ARG BASEIMAGE_TAG='14-3.2'
FROM postgis/postgis:${BASEIMAGE_TAG}

# Set 3DCityDB version
ARG CITYDB_VERSION='4.3.0'
ENV CITYDBVERSION=${CITYDB_VERSION}

# Copy SQL scripts
WORKDIR /3dcitydb
COPY SQLScripts .
COPY DockerScripts/3dcitydb-initdb.sh /docker-entrypoint-initdb.d/

# Set labels
LABEL maintainer=""Bruno Willenborg""
LABEL maintainer.email=""b.willenborg(at)tum.de""
LABEL maintainer.organization=""Chair of Geoinformatics, Technical University of Munich (TUM)""
LABEL source.repo=""https://github.com/3dcitydb/3dcitydb""
","# 3DCityDB PostGIS Dockerfile #################################################
#   Official website    https://www.3dcitydb.net
#   GitHub              https://github.com/3dcitydb
###############################################################################

# Base image
ARG BASEIMAGE_TAG='14-3.3'
FROM postgis/postgis:${BASEIMAGE_TAG}

# Set 3DCityDB version
ARG CITYDB_VERSION='4.3.0'
ENV CITYDBVERSION=${CITYDB_VERSION}

# Copy SQL scripts
WORKDIR /3dcitydb
COPY SQLScripts .
COPY DockerScripts/3dcitydb-initdb.sh /docker-entrypoint-initdb.d/

# Set labels
LABEL maintainer=""Bruno Willenborg""
LABEL maintainer.email=""b.willenborg(at)tum.de""
LABEL maintainer.organization=""Chair of Geoinformatics, Technical University of Munich (TUM)""
LABEL source.repo=""https://github.com/3dcitydb/3dcitydb""
"
357,68ce09ad49fdbfc4b1042b1f855cd67f9ee32f91,Update Dockerfile,Update Dockerfile,"FROM ubuntu:16.04
# Default is ASCII, but Discovery documents are UTF-8.
ENV LANG C.UTF-8

RUN apt-get update

# Install the latest stable version of git.
RUN apt-get install -y software-properties-common
RUN add-apt-repository -y ppa:git-core/ppa
RUN apt-get update
RUN apt-get install -y git

RUN apt-get install -y curl openssh-client wget

# Install Go 1.8.
RUN wget https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz
RUN tar -xvf go1.8.linux-amd64.tar.gz
RUN mv go /usr/local
ENV PATH /usr/local/go/bin:$PATH

# Install Node.js 8.x.
# We need to use 8.x because generate.ts in google-cloud-nodejs-client
# uses async function
RUN curl -sL https://deb.nodesource.com/setup_8.x | bash -
RUN apt-get install -y nodejs

# Install PHP 7 and Composer.
RUN apt-get install -y php7.0 php7.0-xml
RUN curl https://getcomposer.org/download/1.5.2/composer.phar \
    -o /usr/local/bin/composer
RUN chmod +x /usr/local/bin/composer

# Install pip and setup /env.
RUN apt-get install -y python-pip
RUN pip install virtualenv
RUN virtualenv /env -p python3

# Install Ruby 2.3 and Bundler.
RUN apt-get install -y ruby ruby-dev
RUN gem install bundler --no-ri --no-rdoc

# Set virtualenv environment variables. This is equivalent to running
# source /env/bin/activate
ENV VIRTUAL_ENV /env
ENV PATH /env/bin:$PATH
ADD . /app
WORKDIR /app
RUN pip install -r requirements.txt

# 1 hour timeout so the process is not killed before any task completes.
CMD scripts/git-cookie-authdaemon && \
    gunicorn -b :$PORT main:app --timeout 3600 --workers 4
","FROM ubuntu:16.04
# Default is ASCII, but Discovery documents are UTF-8.
ENV LANG C.UTF-8

RUN apt-get update

# Install the latest stable version of git.
RUN apt-get install -y software-properties-common
RUN add-apt-repository -y ppa:git-core/ppa
RUN apt-get update
RUN apt-get install -y git

RUN apt-get install -y curl openssh-client wget

# Install Go 1.8.
RUN wget https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz
RUN tar -xvf go1.8.linux-amd64.tar.gz
RUN mv go /usr/local
ENV PATH /usr/local/go/bin:$PATH

# Install Node.js 8.x.
# We need to use 8.x because generate.ts in google-cloud-nodejs-client
# uses async function and 8.x is LTS release
RUN curl -sL https://deb.nodesource.com/setup_8.x | bash -
RUN apt-get install -y nodejs

# Install PHP 7 and Composer.
RUN apt-get install -y php7.0 php7.0-xml
RUN curl https://getcomposer.org/download/1.5.2/composer.phar \
    -o /usr/local/bin/composer
RUN chmod +x /usr/local/bin/composer

# Install pip and setup /env.
RUN apt-get install -y python-pip
RUN pip install virtualenv
RUN virtualenv /env -p python3

# Install Ruby 2.3 and Bundler.
RUN apt-get install -y ruby ruby-dev
RUN gem install bundler --no-ri --no-rdoc

# Set virtualenv environment variables. This is equivalent to running
# source /env/bin/activate
ENV VIRTUAL_ENV /env
ENV PATH /env/bin:$PATH
ADD . /app
WORKDIR /app
RUN pip install -r requirements.txt

# 1 hour timeout so the process is not killed before any task completes.
CMD scripts/git-cookie-authdaemon && \
    gunicorn -b :$PORT main:app --timeout 3600 --workers 4
"
155,3803edf038cc6dda83a451b8db954c967234eded,Bumped source to 20210403-9d736da,"Bumped source to 20210403-9d736da
","FROM docker.pkg.github.com/dock0/service/service:20210403-5fd329c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20210403-9d736da
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2322,47cdd15d537405b70a03f28a75d47048fa203772,add libnuma,"add libnuma
","FROM ubuntu:16.04

ARG PREFIX=/opt/rocm

# Support multiarch
RUN dpkg --add-architecture i386

# Add rocm repository
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl apt-utils wget
RUN curl https://raw.githubusercontent.com/RadeonOpenCompute/ROCm-docker/develop/add-rocm.sh | bash

# Install dependencies required to build hcc
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated \
    apt-utils \
    build-essential \
    clang-3.8 \
    clang-format-3.8 \
    clang-tidy-3.8 \
    cmake \
    curl \
    doxygen \
    g++-mingw-w64 \
    g++-mingw-w64-x86-64 \
    g++-multilib \
    git \
    hsa-rocr-dev \
    hsakmt-roct-dev \
    lcov \
    libelf-dev \
    libncurses5-dev \
    libpthread-stubs0-dev \
    libunwind-dev \
    mingw-w64 \
    mingw-w64-tools \
    nsis \
    python \
    python-dev \
    python-pip \
    rocm-opencl \
    rocm-opencl-dev \
    software-properties-common \
    wget \
    wine \
    xvfb && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install an init system
RUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb
RUN dpkg -i dumb-init_*.deb && rm dumb-init_*.deb

# Install cget
RUN pip install cget

# Add the windows toolchain
ADD cmake/mingw-toolchain.cmake $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake
RUN cget -p $PREFIX/x86_64-w64-mingw32 init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake

# Build hcc
RUN git clone --depth 1 https://github.com/RadeonOpenCompute/hcc.git -b roc-1.7.x /hcc && \
    cd hcc && \
    git submodule init && \
    git submodule update --recursive && \
    cget -p $PREFIX install hcc,. && cd .. && rm -rf /hcc

# This is a workaround for broken installations
RUN ln -s $PREFIX /opt/rocm/hip
RUN ln -s $PREFIX /opt/rocm/hcc

# Build using hcc
RUN cget -p $PREFIX init --cxx $PREFIX/bin/hcc

# Install cppcheck
RUN cget -p $PREFIX install danmar/cppcheck@1.81

# Install hip
RUN cget -p $PREFIX install ROCm-Developer-Tools/HIP@85975e719dcae7dbd4d0edf6e691c197c0a4f18c

RUN cget -p $PREFIX install pfultz2/rocm-recipes

# Install dependencies
ADD dev-requirements.txt /dev-requirements.txt
RUN CXXFLAGS='-isystem $PREFIX/include' cget -p $PREFIX install -f /dev-requirements.txt
RUN cget -p $PREFIX install RadeonOpenCompute/clang-ocl@2f118b5b6b05f0b17467ef07a8bd3b8e5d8b3aac

# Install doc requirements
ADD doc/requirements.txt /doc-requirements.txt
RUN pip install -r /doc-requirements.txt

# Install windows opencl
RUN cget -p $PREFIX/x86_64-w64-mingw32/opencl init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake
RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl KhronosGroup/OpenCL-Headers@master -X header -DINCLUDE_DIR=opencl22
RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl pfultz2/OpenCL-ICD-Loader@master

# Install windows dependencies
RUN cget -p $PREFIX/x86_64-w64-mingw32 install pfultz2/rocm-recipes
RUN cget -p $PREFIX/x86_64-w64-mingw32 install -X header meganz/mingw-std-threads@dad05201ad4e096c5d1b2043081f412aeb8f5efb
RUN ln -s $PREFIX/x86_64-w64-mingw32/include/mingw.thread.h $PREFIX/x86_64-w64-mingw32/include/thread 
# RUN CXXFLAGS='-I $PREFIX/x86_64-w64-mingw32/include' AMDAPPSDKROOT=$PREFIX/x86_64-w64-mingw32/opencl cget -p $PREFIX/x86_64-w64-mingw32 install -f /dev-requirements.txt

# Setup wine
RUN mkdir -p /jenkins
RUN chmod 777 /jenkins
RUN WINEDEBUG=-all DISPLAY=:55.0 wineboot; wineserver -w
",
146,9c99ee94114f3ded8d657a2128115f5829217159,add new WORKDIR to docker container,"add new WORKDIR to docker container
","FROM broadinstitute/java-baseimage
MAINTAINER Broad Institute DSDE <dsde-engineering@broadinstitute.org>

# Install ant, git for building
RUN apt-get update && \
    apt-get --no-install-recommends install -y --force-yes \
        git \
        ant && \
    apt-get clean autoclean && \
    apt-get autoremove -y

# Assumes Dockerfile lives in root of the git repo. Pull source files into container
COPY build.xml /usr/picard/build.xml
COPY src /usr/picard/src
COPY lib /usr/picard/lib
WORKDIR /usr/picard

# Clone out htsjdk. First turn off git ssl verification
RUN git config --global http.sslVerify false && git clone https://github.com/samtools/htsjdk.git

# Build the distribution jar, clean up everything else
RUN ant clean all && \
    mv dist/picard.jar picard.jar && \
    mv src/scripts/picard/docker_helper.sh docker_helper.sh && \
    ant clean && \
    rm -rf htsjdk && \
    rm -rf src && \
    rm -rf lib && \
    rm build.xml

ENTRYPOINT [""./docker_helper.sh""]","FROM broadinstitute/java-baseimage
MAINTAINER Broad Institute DSDE <dsde-engineering@broadinstitute.org>

# Install ant, git for building
RUN apt-get update && \
    apt-get --no-install-recommends install -y --force-yes \
        git \
        ant && \
    apt-get clean autoclean && \
    apt-get autoremove -y

# Assumes Dockerfile lives in root of the git repo. Pull source files into container
COPY build.xml /usr/picard/build.xml
COPY src /usr/picard/src
COPY lib /usr/picard/lib
WORKDIR /usr/picard

# Clone out htsjdk. First turn off git ssl verification
RUN git config --global http.sslVerify false && git clone https://github.com/samtools/htsjdk.git

# Build the distribution jar, clean up everything else
RUN ant clean all && \
    mv dist/picard.jar picard.jar && \
    mv src/scripts/picard/docker_helper.sh docker_helper.sh && \
    ant clean && \
    rm -rf htsjdk && \
    rm -rf src && \
    rm -rf lib && \
    rm build.xml

RUN mkdir /usr/working
WORKDIR /usr/working

ENTRYPOINT [""/usr/picard/docker_helper.sh""]
"
207,243a47d4b9f50463d247e9727f87edce03896036,dockerfile: upgrade to `sameersbn/ubuntu:14.04.20160218`,"dockerfile: upgrade to `sameersbn/ubuntu:14.04.20160218`
","FROM sameersbn/ubuntu:14.04.20160121
MAINTAINER sameer@damagehead.com

ENV PG_APP_HOME=""/etc/docker-postgresql""\
    PG_VERSION=9.4 \
    PG_USER=postgres \
    PG_HOME=/var/lib/postgresql \
    PG_RUNDIR=/run/postgresql \
    PG_LOGDIR=/var/log/postgresql \
    PG_CERTDIR=/etc/postgresql/certs

ENV PG_BINDIR=/usr/lib/postgresql/${PG_VERSION}/bin \
    PG_DATADIR=${PG_HOME}/${PG_VERSION}/main

RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 && echo 'deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' > /etc/apt/sources.list.d/pgdg.list \
 && apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y acl \
      postgresql-${PG_VERSION} postgresql-client-${PG_VERSION} postgresql-contrib-${PG_VERSION} \
 && ln -sf ${PG_DATADIR}/postgresql.conf /etc/postgresql/${PG_VERSION}/main/postgresql.conf \
 && ln -sf ${PG_DATADIR}/pg_hba.conf /etc/postgresql/${PG_VERSION}/main/pg_hba.conf \
 && ln -sf ${PG_DATADIR}/pg_ident.conf /etc/postgresql/${PG_VERSION}/main/pg_ident.conf \
 && rm -rf ${PG_HOME} \
 && rm -rf /var/lib/apt/lists/*

COPY runtime/ ${PG_APP_HOME}/
COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

EXPOSE 5432/tcp
VOLUME [""${PG_HOME}"", ""${PG_RUNDIR}""]
WORKDIR ${PG_HOME}
ENTRYPOINT [""/sbin/entrypoint.sh""]
","FROM sameersbn/ubuntu:14.04.20160218
MAINTAINER sameer@damagehead.com

ENV PG_APP_HOME=""/etc/docker-postgresql""\
    PG_VERSION=9.4 \
    PG_USER=postgres \
    PG_HOME=/var/lib/postgresql \
    PG_RUNDIR=/run/postgresql \
    PG_LOGDIR=/var/log/postgresql \
    PG_CERTDIR=/etc/postgresql/certs

ENV PG_BINDIR=/usr/lib/postgresql/${PG_VERSION}/bin \
    PG_DATADIR=${PG_HOME}/${PG_VERSION}/main

RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 && echo 'deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' > /etc/apt/sources.list.d/pgdg.list \
 && apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y acl \
      postgresql-${PG_VERSION} postgresql-client-${PG_VERSION} postgresql-contrib-${PG_VERSION} \
 && ln -sf ${PG_DATADIR}/postgresql.conf /etc/postgresql/${PG_VERSION}/main/postgresql.conf \
 && ln -sf ${PG_DATADIR}/pg_hba.conf /etc/postgresql/${PG_VERSION}/main/pg_hba.conf \
 && ln -sf ${PG_DATADIR}/pg_ident.conf /etc/postgresql/${PG_VERSION}/main/pg_ident.conf \
 && rm -rf ${PG_HOME} \
 && rm -rf /var/lib/apt/lists/*

COPY runtime/ ${PG_APP_HOME}/
COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

EXPOSE 5432/tcp
VOLUME [""${PG_HOME}"", ""${PG_RUNDIR}""]
WORKDIR ${PG_HOME}
ENTRYPOINT [""/sbin/entrypoint.sh""]
"
70,e1a7adbcc23619b956b86f8c905189f1d1920858,Bumped source to 20221008-095a533,"Bumped source to 20221008-095a533
","FROM ghcr.io/dock0/arch:20221008-060e903
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20221008-095a533
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
58,050daae82daa14961bd060946a6062f1ac1e87bf,Bump ZIPKIN_VERSION to 1.27.0,"Bump ZIPKIN_VERSION to 1.27.0
","FROM openzipkin/jre-full:1.8.0_60
MAINTAINER OpenZipkin ""http://zipkin.io/""

RUN apk update && apk add curl

ENV ZIPKIN_REPO https://jcenter.bintray.com
ENV ZIPKIN_VERSION 1.26.1
# Use to set heap, trust store or other system properties.
# Intentionally defaulted to empty string.
ENV JAVA_OPTS=

RUN mkdir /zipkin
ADD .cassandra_profile /zipkin/.cassandra_profile
ADD .http_profile /zipkin/.http_profile
ADD .kafka_profile /zipkin/.kafka_profile
ADD .mysql_profile /zipkin/.mysql_profile
ADD .scribe_profile /zipkin/.scribe_profile

WORKDIR /zipkin
","FROM openzipkin/jre-full:1.8.0_60
MAINTAINER OpenZipkin ""http://zipkin.io/""

RUN apk update && apk add curl

ENV ZIPKIN_REPO https://jcenter.bintray.com
ENV ZIPKIN_VERSION 1.27.0
# Use to set heap, trust store or other system properties.
# Intentionally defaulted to empty string.
ENV JAVA_OPTS=

RUN mkdir /zipkin
ADD .cassandra_profile /zipkin/.cassandra_profile
ADD .http_profile /zipkin/.http_profile
ADD .kafka_profile /zipkin/.kafka_profile
ADD .mysql_profile /zipkin/.mysql_profile
ADD .scribe_profile /zipkin/.scribe_profile

WORKDIR /zipkin
"
2129,8ae93e41951e649784f03f150468039f72e6703b,Bumped source to 20210920-21e1115,"Bumped source to 20210920-21e1115
","FROM docker.pkg.github.com/dock0/arch/arch:20210920-751967d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
234,09c59065959099daf24b0126ebb932a74d4194c7,Updated node to 9.7.0,"Updated node to 9.7.0
","FROM node:9.6.1

MAINTAINER Anthony Smith <anthony@sticksnleaves.com>

ENV APP_HOME /usr/src/app

RUN curl -L https://api.github.com/repos/npm/npm/tarball/latest -o npm.tar.gz
RUN tar xzf npm.tar.gz
RUN npm-npm-*/scripts/install.sh
RUN rm -f npm.tar.gz
RUN rm -rf npm-npm-*/

RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -

RUN apt-get update && \
  apt-get install apt-transport-https

RUN echo ""deb https://dl.yarnpkg.com/debian/ stable main"" | tee /etc/apt/sources.list.d/yarn.list

RUN apt-get update && \
  apt-get install yarn

RUN apt-get clean

WORKDIR $APP_HOME
","FROM node:9.7.0

MAINTAINER Anthony Smith <anthony@sticksnleaves.com>

ENV APP_HOME /usr/src/app

RUN curl -L https://api.github.com/repos/npm/npm/tarball/latest -o npm.tar.gz
RUN tar xzf npm.tar.gz
RUN npm-npm-*/scripts/install.sh
RUN rm -f npm.tar.gz
RUN rm -rf npm-npm-*/

RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -

RUN apt-get update && \
  apt-get install apt-transport-https

RUN echo ""deb https://dl.yarnpkg.com/debian/ stable main"" | tee /etc/apt/sources.list.d/yarn.list

RUN apt-get update && \
  apt-get install yarn

RUN apt-get clean

WORKDIR $APP_HOME
"
137,a7b48effcac4fc45ffd984c5ada02b1d79d2a5ba,add a dockerfile to run this in a container as well,"add a dockerfile to run this in a container as well
",,
323,1bd5b2b4e4050c92e1c51d2124e5e235cf17e974,Updated Atlassian JIRA Software master branch to latest version 8.18.0,"Updated Atlassian JIRA Software master branch to latest version 8.18.0
","FROM openjdk:8-alpine

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV JIRA_VERSION  8.16.1

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk add --no-cache curl xmlstarlet bash ttf-dejavu libc6-compat \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R daemon:daemon  ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-8.16.1.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-42.2.1.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-42.2.1.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/start-jira.sh"", ""-fg""]
","FROM openjdk:8-alpine

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV JIRA_VERSION  8.18.0

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk add --no-cache curl xmlstarlet bash ttf-dejavu libc6-compat \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R daemon:daemon  ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-8.16.1.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-42.2.1.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-42.2.1.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/start-jira.sh"", ""-fg""]
"
2208,ca8e2c170bef1316cbe1e4b43113f8b59e23d7b0,Removes the RUN prefix before chown and changes ENTRYPOINT to CMD.,"Removes the RUN prefix before chown and changes ENTRYPOINT to CMD.
","FROM ubuntu:14.04
MAINTAINER Boggart <github.com/Boggart>
ENV DEBIAN_FRONTEND noninteractive
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8
ENV LC_ALL en_US.UTF-8

# Nginx-PHP Installation
RUN apt-get update
RUN apt-get install -y nano curl wget build-essential software-properties-common
RUN add-apt-repository -y ppa:ondrej/php5
RUN add-apt-repository -y ppa:nginx/stable
RUN apt-get update
RUN apt-get install -y php5-cli php5-mysql php5-pgsql php5-sqlite php5-curl\
       php5-gd php5-mcrypt php5-intl php5-imap php5-tidy php5-fpm supervisor nginx

RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create folder for server and add index.php file to for nginx
RUN mkdir -p /var/www/html && chmod a+r /var/www/html && echo ""<?php phpinfo(); ?>"" > /var/www/html/index.php

# ADD Nginx config
ADD build/nginx.conf /etc/nginx/conf.d/default.conf
RUN sed -i -e""s/keepalive_timeout\s*65/keepalive_timeout 2/"" /etc/nginx/nginx.conf
RUN sed -i -e""s/keepalive_timeout 2/keepalive_timeout 2;\n\tclient_max_body_size 300m/"" /etc/nginx/nginx.conf
RUN echo ""daemon off;"" >> /etc/nginx/nginx.conf
RUN echo ""user www-data;"" >> /etc/nginx/nginx.conf

# php-fpm config
RUN sed -i -e ""s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g"" /etc/php5/fpm/php.ini
RUN sed -i -e ""s/upload_max_filesize\s*=\s*2M/upload_max_filesize = 300M/g"" /etc/php5/fpm/php.ini
RUN sed -i -e ""s/post_max_size\s*=\s*8M/post_max_size = 300M/g"" /etc/php5/fpm/php.ini
RUN sed -i -e ""s/;daemonize\s*=\s*yes/daemonize = no/g"" /etc/php5/fpm/php-fpm.conf
RUN sed -i -e ""s/;catch_workers_output\s*=\s*yes/catch_workers_output = yes/g"" /etc/php5/fpm/pool.d/www.conf
RUN find /etc/php5/cli/conf.d/ -name ""*.ini"" -exec sed -i -re 's/^(\s*)#(.*)/\1;\2/g' {} \;

# ADD supervisord config
ADD build/supervisord.conf /etc/supervisord.conf

ADD build/run.sh /run.sh
RUN chmod a+x /run.sh

EXPOSE 80

#Start supervisord
ENTRYPOINT [""RUN chown -R www-data:www-data /var/www/html"", ""/run.sh""]",
2123,ce988d9c12840e7885f153e43c98f319bb2caac4,Bumped source to 20200621-2c4c868,"Bumped source to 20200621-2c4c868
","FROM docker.pkg.github.com/dock0/service/service:20200621-e1a6ecd
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
38,ccba83f799d56b2bd0eda5f9ac242128de19659f,update pip3,"update pip3
","FROM phusion/baseimage:0.9.18
# look for new versions here: https://github.com/phusion/baseimage-docker/blob/master/Changelog.md
# has 'python3', nothing linked to 'python'.

# need gcc to compile psycopg2
# env: http://askubuntu.com/a/506635/69983
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y python3-pip libpq-dev gcc python3-dev python3-scipy 
RUN pip3 install ""psycopg2>=2.6,<2.7"" && pip3 install awscli
RUN DEBIAN_FRONTEND=noninteractive apt-get autoremove -y gcc

RUN ln -s /usr/bin/python3 /usr/bin/python

CMD mkdir -p /opt/app
VOLUME /opt/
VOLUME /usr/src/app/

ENV build_s3_bucket=""BUCKET_NAME""
ENV build_s3_key=""BUCKET_KEY""

# make sure volumes are the last thing done in their directory. otherwise contents are discarded with a further file operation.
VOLUME /opt/
VOLUME /usr/src/app/

# no matter the command, we wrap it with my_init, which gets the services running.
CMD /sbin/my_init -- bash -c ""mkdir -p /opt/app && aws --region=us-east-1 s3 cp s3://${build_s3_bucket}/${build_s3_key} /opt/app/app.tgz && tar -C /opt/app/ -xzvf /opt/app/app.tgz && bash /opt/app/run.sh""


","FROM phusion/baseimage:0.9.18
# look for new versions here: https://github.com/phusion/baseimage-docker/blob/master/Changelog.md
# has 'python3', nothing linked to 'python'.

# need gcc to compile psycopg2
# env: http://askubuntu.com/a/506635/69983
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y python3-pip libpq-dev gcc python3-dev python3-scipy 
RUN pip3 install --upgrade pip3 # ancient version in apt
RUN pip3 install ""psycopg2>=2.6,<2.7"" && pip3 install awscli
RUN DEBIAN_FRONTEND=noninteractive apt-get autoremove -y gcc

RUN ln -s /usr/bin/python3 /usr/bin/python

CMD mkdir -p /opt/app
VOLUME /opt/
VOLUME /usr/src/app/

ENV build_s3_bucket=""BUCKET_NAME""
ENV build_s3_key=""BUCKET_KEY""

# make sure volumes are the last thing done in their directory. otherwise contents are discarded with a further file operation.
VOLUME /opt/
VOLUME /usr/src/app/

# no matter the command, we wrap it with my_init, which gets the services running.
CMD /sbin/my_init -- bash -c ""mkdir -p /opt/app && aws --region=us-east-1 s3 cp s3://${build_s3_bucket}/${build_s3_key} /opt/app/app.tgz && tar -C /opt/app/ -xzvf /opt/app/app.tgz && bash /opt/app/run.sh""


"
2061,46982085e43b97b114f9345bb6e9d48c2ad849af,Bumped source to 20200606-cb2d0e8,"Bumped source to 20200606-cb2d0e8
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200606-d6a57a1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
158,cc81f7afb37caa179ef9d08b3e0b8757692f548c,refactor code to improve listing and deletion of quotes,"refactor code to improve listing and deletion of quotes
","FROM gliderlabs/alpine:3.3
MAINTAINER Karim Boumedhel <karimboumedhel@gmail.com>

RUN apk add --no-cache python python-dev py-pip build-base \
  && pip install PyTelegramBotAPI==3.6.2

ADD nickyabbot.py /
VOLUME [""/tmp/troll/db""]

CMD [""python"", ""-u"", ""/nickyabbot.py""]
","FROM gliderlabs/alpine:3.6
MAINTAINER Karim Boumedhel <karimboumedhel@gmail.com>

RUN apk add --no-cache python python-dev py-pip build-base \
  && pip install PyTelegramBotAPI==3.6.2

ADD nickyabbot.py /

CMD [""python"", ""-u"", ""/nickyabbot.py""]
"
2162,adfb715575c4f3c6b75e3cc0d7484af8e4220f15,Bumped source to 20210403-4680f5e,"Bumped source to 20210403-4680f5e
","FROM docker.pkg.github.com/dock0/service/service:20210403-6c16aa2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
92,468a0d314718ec5c75ef338ef2603778be62dfc1,Update Dockerfile,"Update Dockerfile

expose Chateau's port","# BDH-admin 
# Uses Chateau to administer the ReThinkDB behind members.browncoats.info
# Based on toscanini node.js image: github.com/toscanini/docker-nodejs

FROM pshouse/nodejs-base

MAINTAINER Patrick Shouse <shouse.patrick@gmail.com>

RUN echo ""deb http://archive.ubuntu.com/ubuntu precise main universe"" > /etc/apt/sources.list
RUN apt-get update
RUN apt-get upgrade -y

# Install Chateau
RUN npm install -g chateau

# Configure Chateau
RUN echo ""exports.host = '172.17.0.1'; exports.port = 49154; exports.authKey = ''; exports.expressPort = 3000;exports.debug = true; exports.network = '127.0.0.1'  // Network the node app will run on"" > /usr/lib/node_modules/chateau/config.js

ENTRYPOINT [""chateau""]

CMD [""-h""]
","# BDH-admin 
# Uses Chateau to administer the ReThinkDB behind members.browncoats.info
# Based on toscanini node.js image: github.com/toscanini/docker-nodejs

FROM pshouse/nodejs-base

MAINTAINER Patrick Shouse <shouse.patrick@gmail.com>

RUN echo ""deb http://archive.ubuntu.com/ubuntu precise main universe"" > /etc/apt/sources.list
RUN apt-get update
RUN apt-get upgrade -y

# Install Chateau
RUN npm install -g chateau

# Configure Chateau
RUN echo ""exports.host = '172.17.0.1'; exports.port = 49154; exports.authKey = ''; exports.expressPort = 3000;exports.debug = true; exports.network = '127.0.0.1'  // Network the node app will run on"" > /usr/lib/node_modules/chateau/config.js

EXPOSE 3000

ENTRYPOINT [""chateau""]

CMD [""-h""]
"
39,151d21c3937c7400b853e3e156444fc5e5166a42,Bumped source to 20210326-18e993d,"Bumped source to 20210326-18e993d
","FROM docker.pkg.github.com/dock0/arch/arch:20210326-9a3ae13
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210326-18e993d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
46,013ceb661772825cbca1b1dbfe6ea8bf75a6f836,fix,"fix

Signed-off-by: Jess Frazelle <e0d1a862d8f31af605ecef8c92857b8938ba622e@microsoft.com>
","FROM docker

RUN apk install --no-cache \
bash \
ca-certificates \
curl \
tar

COPY build.sh /usr/local/bin/build

ENTRYPOINT [""build""]
","FROM docker:latest

RUN apk add --no-cache \
bash \
ca-certificates \
curl \
tar

COPY build.sh /usr/local/bin/build

ENTRYPOINT [""build""]
"
2245,83f06999768fd33189b074f69cecb71ec73b5a30,Bumped source to 20220714-249350b,"Bumped source to 20220714-249350b
","FROM ghcr.io/dock0/arch:20220714-c994ea3
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
264,c3a166534289b96c410a0cafcf261e4a9860284c,Bumped source to 20200413-8442c8f,"Bumped source to 20200413-8442c8f
","FROM docker.pkg.github.com/dock0/service/service:20200413-d96418c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200413-8442c8f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2112,e06be915973de2c27445baaf1ac116be4a251a26,Bumped source to 20201016-2a8b256,"Bumped source to 20201016-2a8b256
","FROM docker.pkg.github.com/dock0/arch/arch:20201016-5c009b1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
189,3c4daa59cf6b47ed4a0a1f39bd3e5f2d3748995c,Fix issue of symbols not displaying in Linux,"Fix issue of symbols not displaying in Linux

The symbols would not display in the status bar due to missing
fonts by default in the Docker container. This fix adds the
dependency described in #505

Fixes #505
","FROM       ubuntu:20.04

LABEL      app.name=""WAIL"" \
           app.description=""Web Archiving Integration Layer: One-Click User Instigated Preservation"" \
           app.license=""MIT License"" \
           app.license.url=""https://github.com/machawk1/wail/blob/osagnostic/LICENSE"" \
           app.repo.url=""https://github.com/machawk1/wail""

#TZdata will interactively ask for this info
ENV        TZ=Europe/Minsk
RUN        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# VNC
ENV        DISPLAY :20
EXPOSE     5920

RUN        apt update && apt install -y \
             apt-file \
             git \
             libgtk-3-0 \
             libnotify4 \
             libsdl2-2.0-0 \
             libsm6 \
             libxxf86vm1 \
             python3 \
             python3-pip \
             x11vnc \
             xvfb \
             language-pack-en \
       &&  rm -rf /var/lib/apt/lists/*

RUN        pip3 install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython==4.1.1 \
       &&  pip3 install pyinstaller==4.3

WORKDIR    /wail
COPY       requirements.txt ./
RUN        pip3 install -r requirements.txt
COPY       . ./

RUN        pyinstaller -p bundledApps ./bundledApps/WAIL.py --onefile --windowed --clean \
       &&  mv /wail/dist/WAIL /wail/WAIL

RUN        chmod a+x /wail/WAIL /wail/entrypoint.sh

ENTRYPOINT [""/wail/entrypoint.sh""]
","FROM       ubuntu:20.04

LABEL      app.name=""WAIL"" \
           app.description=""Web Archiving Integration Layer: One-Click User Instigated Preservation"" \
           app.license=""MIT License"" \
           app.license.url=""https://github.com/machawk1/wail/blob/osagnostic/LICENSE"" \
           app.repo.url=""https://github.com/machawk1/wail""

#TZdata will interactively ask for this info
ENV        TZ=Europe/Minsk
RUN        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# VNC
ENV        DISPLAY :20
EXPOSE     5920

RUN        apt update && apt install -y \
             apt-file \
             git \
             libgtk-3-0 \
             libnotify4 \
             libsdl2-2.0-0 \
             libsm6 \
             libxxf86vm1 \
             python3 \
             python3-pip \
             x11vnc \
             xvfb \
             language-pack-en \
             ttf-ancient-fonts \
       &&  rm -rf /var/lib/apt/lists/*

RUN        pip3 install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython==4.1.1 \
       &&  pip3 install pyinstaller==4.3

WORKDIR    /wail
COPY       requirements.txt ./
RUN        pip3 install -r requirements.txt
COPY       . ./

RUN        pyinstaller -p bundledApps ./bundledApps/WAIL.py --onefile --windowed --clean \
       &&  mv /wail/dist/WAIL /wail/WAIL

RUN        chmod a+x /wail/WAIL /wail/entrypoint.sh

ENTRYPOINT [""/wail/entrypoint.sh""]
"
2267,2badc995204953c2bd0a6da02de5b9fa1e68080e,Bumped source to 20201006-e2e3866,"Bumped source to 20201006-e2e3866
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201006-28efb17
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
2067,66feb17cb2ed964dbbf9fccd0b58ba290f714f36,Updated base to xaamin/php-cli:7.0,"Updated base to xaamin/php-cli:7.0
","FROM xaamin/php-cli

MAINTAINER ""Benjamín Martínez Mateos"" <bmxamin@gmail.com>

# Install PHP-FPM
RUN apt-get -y update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
        php7.0-fpm \
        libfcgi0ldbl \

    # Remove temp files
    && apt-get clean \
    && apt-get -y autoremove \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Configure and secure PHP
RUN sed -i 's|;\?date.timezone =.*|date.timezone = ${DATE_TIMEZONE}|' /etc/php/7.0/fpm/php.ini \
    && sed -i 's|;\?date.timezone =.*|date.timezone = ${DATE_TIMEZONE}|' /etc/php/7.0/cli/php.ini \
    && sed -i 's|max_execution_time =.*|max_execution_time = ${REQUEST_TIMEOUT}|' /etc/php/7.0/fpm/php.ini \
    && sed -i 's|;\?request_terminate_timeout =.*|request_terminate_timeout = ${REQUEST_TIMEOUT}|' /etc/php/7.0/fpm/pool.d/www.conf \
    && sed -i 's|max_input_time =.*|max_input_time = ${MAX_INPUT_TIME}|' /etc/php/7.0/fpm/php.ini \
    && sed -i 's|memory_limit =.*|memory_limit = ${MEMORY_LIMIT}|' /etc/php/7.0/fpm/php.ini \
    && sed -i 's|upload_max_filesize =.*|upload_max_filesize = ${POST_MAX_SIZE}|' /etc/php/7.0/fpm/php.ini \
    && sed -i 's|post_max_size =.*|post_max_size = ${POST_MAX_SIZE}|' /etc/php/7.0/fpm/php.ini \
    && sed -i 's|;\?cgi.fix_pathinfo =.*|cgi.fix_pathinfo = 0|' /etc/php/7.0/fpm/php.ini \
    && sed -i 's|short_open_tag =.*|short_open_tag = On|' /etc/php/7.0/fpm/php.ini \
    && sed -i 's|;\?daemonize =.*|daemonize = no|' /etc/php/7.0/fpm/php-fpm.conf \
    && sed -i 's|;\?listen =.*|listen = 0.0.0.0:9000|' /etc/php/7.0/fpm/pool.d/www.conf \
    && sed -i 's|;\?pm.status_path =.*|pm.status_path = /status|' /etc/php/7.0/fpm/pool.d/www.conf \
    && sed -i 's|;\?listen.allowed_clients =.*|;listen.allowed_clients =|' /etc/php/7.0/fpm/pool.d/www.conf \
    && sed -i 's|;\?catch_workers_output =.*|catch_workers_output = yes|' /etc/php/7.0/fpm/pool.d/www.conf 

# Defines the default timezone used by the date functions
ENV DATE_TIMEZONE America/Mexico_City

# Maximum execution time of each script, in seconds (php.ini)

# The timeout for serving a single request after which the worker process will
# be killed. This option should be used when the 'max_execution_time' ini option
# does not stop script execution for some reason. A value of '0' means 'off'.
# Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
# (www.conf)
ENV REQUEST_TIMEOUT 60

# Maximum amount of time each script may spend parsing request data. It's a good
# idea to limit this time on productions servers in order to eliminate unexpectedly
# long running scripts.
ENV MAX_INPUT_TIME 60

# Maximum amount of memory a script may consume (128MB)
ENV MEMORY_LIMIT 128M

# Maximum allowed size for uploaded files.
ENV POST_MAX_SIZE 30M

# Add supervisor config file
ADD supervisord.conf /etc/supervisor/supervisord.conf

# Add bootstrap file
ADD start.sh /start.sh

# Define mountable directories
VOLUME [""/shared""]

# Port 9000 is how Nginx will communicate with PHP-FPM.
EXPOSE 9000

# Define default command.
CMD [""/bin/bash"", ""/start.sh""]",
2113,ffc1869250f653958f555b4b29647d55976d1f0c,Update Dockerfile,"Update Dockerfile

Provide sudo to be able to ad user to sudoers group and run commands from within goland as sudo.","FROM suckowbiz/base-av
LABEL maintainer=""Tobias Suckow <tobias@suckow.biz>""

ENV VERSION_GO=""1.12.9"" \
    VERSION_GOLAND=""2019.2.1"" \
    VERSION_GOLANGCI_LINT=""1.17.1""

# Markdown preview requires javafx (wich requires libxslt).
RUN apt-get install --quiet --quiet --yes --no-install-recommends \
    build-essential \
    chromium-browser \
    docker.io \
    git \
    libxtst6 \
    libxtst-dev \
    libxslt1.1 \
    man \
    openjfx \
 && apt-get clean --quiet \
 && apt-get autoremove --quiet \
 && rm -rf /var/lib/apt/lists/*

COPY context /

# Install the go distribution to provide golang environment.
# Reference: https://golang.org/doc/install#install
RUN curl \
    --fail \
    --location \
    --show-error \
    ""https://dl.google.com/go/go${VERSION_GO}.linux-amd64.tar.gz"" | tar --directory /usr/local --extract --gzip
ENV PATH=""${PATH}:/usr/local/go/bin""

# Run a test to verify that Go is installed correctly.
WORKDIR /root/go/src/hello
RUN go build \
  && ./hello > hello.actual \
  && diff hello.actual hello.expected \
  && test ""$?"" = ""0"" || (echo ""Go installation seems broken""; exit 1) \
  && go clean -i

# Install goland to provide an entrypoint.
WORKDIR /opt
RUN curl \
    --fail \
    --location \
    --remote-name \
    --show-error \
    ""https://download.jetbrains.com/go/goland-${VERSION_GOLAND}.tar.gz{,.sha256}"" \
 && sha256sum --check ""goland-${VERSION_GOLAND}.tar.gz.sha256"" | grep ""OK"" \
 && tar --extract --file ""goland-${VERSION_GOLAND}.tar.gz"" \
 && rm --force ""goland-${VERSION_GOLAND}.tar.gz"" ""goland-${VERSION_GOLAND}.tar.gz.sha256"" \
 && mv GoLand-* goland \
 && sed --in-place ""s/.*idea.config.path=.*/idea.config.path=\~\/\.GoLand\/config\//"" goland/bin/idea.properties \
 && sed --in-place ""s/.*idea.system.path=.*/idea.system.path=\~\/\.GoLand\/system\//"" goland/bin/idea.properties
ENV PATH=""${PATH}:/opt/goland/bin""

# Git completion to ease working with git.
RUN curl \
    --fail \
    --location \
    --show-error \
    https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash \
    --output /git-completion.bash \
  && chmod +x /git-completion.bash

# go bash completion to ease working with the go tool.
RUN go get -u github.com/posener/complete/gocomplete \
 && GOBIN=/usr/local/bin go install github.com/posener/complete/gocomplete \
 && echo ""complete -C gocomplete go"" >> /etc/bash.bashrc

# Install goimports to have it available for configuration as file watcher within GoLand.
RUN go get golang.org/x/tools/cmd/goimports \
 && GOBIN=/usr/local/bin go install golang.org/x/tools/cmd/goimports

# Install golangci-lint to have it available for configuration as file watcher within GoLand.
RUN curl \
    --fail \
    --location \
    --remote-name \
    --show-error \
    https://github.com/golangci/golangci-lint/releases/download/v${VERSION_GOLANGCI_LINT}/golangci-lint-${VERSION_GOLANGCI_LINT}-linux-386.tar.gz \
  && tar --extract --file golangci-lint-${VERSION_GOLANGCI_LINT}-linux-386.tar.gz \
  && chmod +x golangci-lint-${VERSION_GOLANGCI_LINT}-linux-386/golangci-lint \
  && mv golangci-lint-${VERSION_GOLANGCI_LINT}-linux-386/golangci-lint /usr/local/bin/golangci-lint \
  && rm --force --recursive golangci-lint-*

# Prepare user home to link runtime data to persistent directories.
WORKDIR /etc/skel
# In case /volume/gitconfig/.gitconfig is being written by git it will try to create a .gitconfig.lock file which must not fail.
RUN mkdir --parent /volume/gitconfig \
  && chmod 777 /volume/gitconfig
ENV GOPATH=""/volume/go""
ENV GOROOT=""/usr/local/go"" \
    GOBIN=""${GOPATH}/bin"" \
    PATH=""${PATH}:${GOPATH}/bin"" \
    VOL_GIT_CONF=""/volume/gitconfig"" \
    VOL_GO=""${GOPATH}"" \
    VOL_GOLAND_CONF=""/volume/.GoLand"" \
    VOL_JAVA_CONF=""/volume/.java""
RUN for volume in ""${VOL_GIT_CONF}/.gitconfig"" ""${VOL_GO}"" ""${VOL_GOLAND_CONF}"" ""${VOL_JAVA_CONF}""; do ln --symbolic ""${volume}""; done
VOLUME [""${VOL_GIT_CONF}"", ""${VOL_GO}"", ""${VOL_GOLAND_CONF}"", ""${VOL_JAVA_CONF}""]

# Add support for integration of go modules.
ENV GO111MODULE=on

# In case one runs ""go tool tour"" on 3999 the go tour server is listening.
EXPOSE 3999

ENV ENTRYPOINT_GROUPS=""audio,video,docker""
ENTRYPOINT [""/entrypoint.sh"", ""goland.sh""]
",
400,6303ac7b6287630950ff7f2ff1f23a30230a1f0a,artifactory: update to Artifactory 5.11.1,"artifactory: update to Artifactory 5.11.1

Change-Id: Id52d7481d051a09c590e3bdfeee7f9b5d4eabdae
","FROM docker.bintray.io/jfrog/artifactory-pro:5.9.3

# specific to 5.1.46; revisit this when a new driver is released
RUN curl -sL https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz | \
      tar -v --overwrite --directory /opt/jfrog/artifactory/tomcat/lib/ --strip 1 --wildcards -zx '*mysql-connector-java-*-bin.jar'

# 'unhold' packages, upgrade, install less (useful for diags)
RUN dpkg -l|awk '(/^h/){print $2}'|xargs apt-mark unhold && \
    apt-get update && \
    apt-get dist-upgrade -y && \
    apt-get install -y less && \
    find /var/lib/apt/lists/ /var/log/ -type f -size +0 -print0 | xargs -r0 rm -v
","FROM docker.bintray.io/jfrog/artifactory-pro:5.11.1

# specific to 5.1.46; revisit this when a new driver is released
RUN curl -sL https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz | \
      tar -v --overwrite --directory /opt/jfrog/artifactory/tomcat/lib/ --strip 1 --wildcards -zx '*mysql-connector-java-*-bin.jar'

# 'unhold' packages, upgrade, install less (useful for diags)
RUN dpkg -l|awk '(/^h/){print $2}'|xargs apt-mark unhold && \
    apt-get update && \
    apt-get dist-upgrade -y && \
    apt-get install -y less && \
    find /var/lib/apt/lists/ /var/log/ -type f -size +0 -print0 | xargs -r0 rm -v
"
346,fb638b550c71ea7324ad9235854803f3e78c1b71,fixed bugs in docker image,"fixed bugs in docker image
","FROM dit4c/dit4c-container-fsl
MAINTAINER Greg Kiar <gkiar@jhu.edu>
RUN apt-get update && apt-get install -y python-dev python-setuptools python-numpy python-scipy zlib1g-dev python-matplotlib python-nose fsl ia32-libs
RUN easy_install pip
RUN pip install cython numpy coveralls wget nibabel nilearn dipy sklearn networkx && pip install ndmg

# FSL
ENV FSLDIR=/usr/share/fsl/5.0
ENV PATH=${FSLDIR}/bin:${PATH}
ENV POSSUMDIR=$FSLDIR
ENV PATH=/usr/lib/fsl/5.0:$PATH
ENV FSLOUTPUTTYPE=NIFTI_GZ
ENV FSLMULTIFILEQUIT=TRUE
ENV FSLTCLSH=/usr/bin/tclsh
ENV FSLWISH=/usr/bin/wish
ENV FSLBROWSER=/etc/alternatives/x-www-browser
ENV FSLLOCKDIR=
ENV FSLMACHINELIST=
ENV FSLREMOTECALL=
ENV FSLCLUSTER_MAILOPTS=""n""
ENV LD_LIBRARY_PATH=/usr/lib/fsl/5.0${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

#S3
RUN mkdir ${HOME}/.aws
RUN printf ""[default]\nregion = us-east-1"" > ${HOME}/.aws/config
ADD credentials.csv ${HOME}/credentials.csv
RUN printf ""[default]\naws_access_key_id = `tail -n 1 ${HOME}/credentials.csv | cut -d',' -f2`\naws_secret_access_key = `tail -n 1 ${HOME}/credentials.csv | cut -d',' -f3`"" > ${HOME}/.aws/credentials

ENTRYPOINT [""ndmg_bids""]
","FROM dit4c/dit4c-container-fsl
MAINTAINER Greg Kiar <gkiar@jhu.edu>
RUN apt-get update && apt-get install -y python-dev python-setuptools python-numpy python-scipy zlib1g-dev python-matplotlib python-nose fsl
RUN easy_install pip
RUN pip install cython numpy coveralls wget nibabel nilearn dipy sklearn networkx awscli boto3 && pip install ndmg

# FSL
ENV FSLDIR=/usr/share/fsl/5.0
ENV PATH=${FSLDIR}/bin:${PATH}
ENV POSSUMDIR=$FSLDIR
ENV PATH=/usr/lib/fsl/5.0:$PATH
ENV FSLOUTPUTTYPE=NIFTI_GZ
ENV FSLMULTIFILEQUIT=TRUE
ENV FSLTCLSH=/usr/bin/tclsh
ENV FSLWISH=/usr/bin/wish
ENV FSLBROWSER=/etc/alternatives/x-www-browser
ENV FSLLOCKDIR=
ENV FSLMACHINELIST=
ENV FSLREMOTECALL=
ENV FSLCLUSTER_MAILOPTS=""n""
ENV LD_LIBRARY_PATH=/usr/lib/fsl/5.0${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

#S3
RUN mkdir /.aws
RUN printf ""[default]\nregion = us-east-1"" > /.aws/config
ADD credentials.csv /credentials.csv
RUN printf ""[default]\naws_access_key_id = `tail -n 1 /credentials.csv | cut -d',' -f2`\naws_secret_access_key = `tail -n 1 /credentials.csv | cut -d',' -f3`"" > /.aws/credentials
RUN mv /.aws/  ${HOME} && rm /credentials.csv
ENTRYPOINT [""ndmg_bids""]
"
2309,afe6aa074757a4fd2e6f92ce74568919f6d0ce9c,Upgraded Kibana to 4.6.1,"Upgraded Kibana to 4.6.1
","FROM kibana:4.5.4
MAINTAINER PubNative Team <team@pubnative.net>

RUN /opt/kibana/bin/kibana plugin --install kibana/timelion \
    && /opt/kibana/bin/kibana plugin --install elastic/sense \
    && /opt/kibana/bin/kibana plugin -i vectormap -u https://github.com/stormpython/vectormap/archive/master.zip \
    && chown -R kibana:kibana /opt/kibana
",
2069,c21e5a302a53ad7b694d7e5fb929b1a5266d9a29,update dockerfile,"update dockerfile
","########################################################################
# OSMnx Dockerfile
# License: MIT, see full license in LICENSE.txt
# Web: https://github.com/gboeing/osmnx
#
# Build an image from the dockerfile:
# >>> docker build -t gboeing/osmnx .
#
# Push the built image to hub so others can pull/run it:
# >>> docker tag gboeing/osmnx gboeing/osmnx:latest
# >>> docker login
# >>> docker push gboeing/osmnx
#
# Run bash in this container and export final conda environment to a yml file:
# >>> docker run --rm -it -u 0 --name osmnx -v %cd%:/home/jovyan/work gboeing/osmnx /bin/bash
# >>> conda env export -n base > /home/jovyan/work/environment.yml
#
# Run jupyter lab in this container:
# >>> docker run --rm -it --name osmnx -p 8888:8888 -v %cd%:/home/jovyan/work gboeing/osmnx
#
# Stop/delete all local docker containers/images:
# >>> docker stop $(docker ps -aq)
# >>> docker rm $(docker ps -aq)
# >>> docker rmi $(docker images -q)
########################################################################

FROM jupyter/base-notebook
LABEL maintainer=""Geoff Boeing <g.boeing@northeastern.edu>""

# symlink and permissions
USER root
RUN ln -s /opt/conda/bin/jupyter /usr/local/bin
USER $NB_UID

# configure conda and install packages in one RUN to keep image tidy
RUN conda config --set show_channel_urls true && \
    conda config --prepend channels conda-forge && \
    conda update --override-channels -c conda-forge --yes -n base conda && \
    conda update --override-channels -c conda-forge --yes --all && \
    conda install --override-channels -c conda-forge --yes osmnx python-igraph && \
    conda clean --yes --all && \
    conda info --all && \
    conda list

# launch notebook in the local working directory that we mount
WORKDIR /home/jovyan/work

# set default command to launch when container is run
CMD [""jupyter"", ""lab"", ""--no-browser"", ""--NotebookApp.token=''"", ""--NotebookApp.password=''""]
",
232,351cd31bc83f065906f9ce09984a4a33921720a7,Bumped source to 20200326-23b5da1,"Bumped source to 20200326-23b5da1
","FROM docker.pkg.github.com/dock0/service/service:20200326-212bc2c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200326-23b5da1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
206,44f00564355f8bd755b94d6db99f1c2e27492fe4,Bumped source to 20210416-b4928ed,"Bumped source to 20210416-b4928ed
","FROM docker.pkg.github.com/dock0/arch/arch:20210416-72a4d31
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20210416-b4928ed
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2101,26df24a1be125e5f72218531fb39d09c00afaa97,Bumped source to 20210624-c4872e7,"Bumped source to 20210624-c4872e7
","FROM docker.pkg.github.com/dock0/arch/arch:20210624-76084af
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
174,ad488cee4c9bc3cd595a383af423ca46dad9fb67,Fix typo,"Fix typo
","FROM ubuntu:14.04
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -q

# Supervisor
RUN apt-get install -y supervisor && \
  mkdir -p /var/log/supervisor && \
  mkdir -p /etc/supervisor/conf.d


# NGINX
RUN \
  apt-get install -y nginx && \
  echo ""\ndaemon off;"" >> /etc/nginx/nginx.conf && \
  chown -R www-data:www-data /var/lib/nginx

# PHP 5 FPM
RUN \
  apt-get install -y php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-fpm && \
  sed -i -e ""s/;daemonize\s*=\s*yes/daemonize = no/g"" /etc/php5/fpm/php-fpm.conf

EXPOSE 80
EXPOSE 443


# Mounts
VOLUME [""/data"", ""/etc/nginx/sites-enabled"", ""/etc/nginx/conf.d"",""/etc/php5/fpm/pool.d"", /var/log""]

# Define working directory.
WORKDIR /data

# Configs
ADD conf/supervisor /etc/supervisor/conf.d/
ADD conf/fpm-pool /etc/php5/fpm/pool.d/
ADD conf/sites /etc/nginx/sites-enabled/

# Data, htdocs root
ADD data /data

CMD [""supervisord""]
","FROM ubuntu:14.04
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -q

# Supervisor
RUN apt-get install -y supervisor && \
  mkdir -p /var/log/supervisor && \
  mkdir -p /etc/supervisor/conf.d


# NGINX
RUN \
  apt-get install -y nginx && \
  echo ""\ndaemon off;"" >> /etc/nginx/nginx.conf && \
  chown -R www-data:www-data /var/lib/nginx

# PHP 5 FPM
RUN \
  apt-get install -y php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-fpm && \
  sed -i -e ""s/;daemonize\s*=\s*yes/daemonize = no/g"" /etc/php5/fpm/php-fpm.conf

EXPOSE 80
EXPOSE 443


# Mounts
VOLUME [""/data"", ""/etc/nginx/sites-enabled"", ""/etc/nginx/conf.d"",""/etc/php5/fpm/pool.d"", ""/var/log""]

# Define working directory.
WORKDIR /data

# Configs
ADD conf/supervisor /etc/supervisor/conf.d/
ADD conf/fpm-pool /etc/php5/fpm/pool.d/
ADD conf/sites /etc/nginx/sites-enabled/

# Data, htdocs root
ADD data /data

CMD [""supervisord""]
"
126,ec12146e323a9016c42e456af1a2ef7eb4e22dca,Forgot to add the double ampersand.,"Forgot to add the double ampersand.
","FROM ubuntu:14.04
MAINTAINER P. Barrett Little <barrett@barrettlittle.com>

# Download latest package lists & install dependencies
RUN apt-get update \
    DEBIAN_FRONTEND=noninteractive \
    apt-get install -yq \
    openjdk-7-jre-headless \
    wget

# Download version 1.4.2 of logstash
RUN cd /tmp && \
    wget https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.tar.gz && \
    tar -xzvf ./logstash-1.4.2.tar.gz && \
    mv ./logstash-1.4.2 /opt/logstash && \
    rm ./logstash-1.4.2.tar.gz

# Install contrib plugins
RUN /opt/logstash/bin/plugin install contrib

# Copy build files to container root
RUN mkdir /app
ADD . /app

# Elasticsearch HTTP
EXPOSE 9200

# Elasticsearch transport
EXPOSE 9300

# Kibana
EXPOSE 9292

# Start logstash
ENTRYPOINT [""/app/bin/boot""]
","FROM ubuntu:14.04
MAINTAINER P. Barrett Little <barrett@barrettlittle.com>

# Download latest package lists & install dependencies
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive \
    apt-get install -yq \
    openjdk-7-jre-headless \
    wget

# Download version 1.4.2 of logstash
RUN cd /tmp && \
    wget https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.tar.gz && \
    tar -xzvf ./logstash-1.4.2.tar.gz && \
    mv ./logstash-1.4.2 /opt/logstash && \
    rm ./logstash-1.4.2.tar.gz

# Install contrib plugins
RUN /opt/logstash/bin/plugin install contrib

# Copy build files to container root
RUN mkdir /app
ADD . /app

# Elasticsearch HTTP
EXPOSE 9200

# Elasticsearch transport
EXPOSE 9300

# Kibana
EXPOSE 9292

# Start logstash
ENTRYPOINT [""/app/bin/boot""]
"
371,be89e110debdab79992f5050c2eaf1c2cbcf072b,Add package-lock.json to a2png/,"Add package-lock.json to a2png/
","FROM clojure:alpine

RUN mkdir /app
WORKDIR /app

# build vt

COPY vt/project.clj /app/vt/
RUN cd vt && lein deps

COPY vt/src /app/vt/src
COPY vt/resources /app/vt/resources
RUN cd vt && lein cljsbuild once main

# build a2png

COPY a2png/project.clj /app/a2png/
RUN cd a2png && lein deps

COPY a2png/src /app/a2png/src
COPY a2png/asciinema-player /app/a2png/asciinema-player
RUN cd a2png && lein cljsbuild once main && lein cljsbuild once page

FROM ubuntu:16.04

COPY install_pngquant.sh /tmp/
RUN bash /tmp/install_pngquant.sh

FROM ubuntu:16.04

ARG DEBIAN_FRONTEND=noninteractive
ARG NODE_VERSION=node_8.x
ARG DISTRO=xenial

RUN apt-get update && \
    apt-get install -y wget software-properties-common apt-transport-https && \
    add-apt-repository ppa:brightbox/ruby-ng && \
    echo ""deb https://deb.nodesource.com/$NODE_VERSION $DISTRO main"" >/etc/apt/sources.list.d/nodesource.list && \
    echo ""deb https://packages.erlang-solutions.com/ubuntu $DISTRO contrib"" >/etc/apt/sources.list.d/esl.list && \
    wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \
    wget --quiet -O - https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | apt-key add - && \
    apt-get update && \
    apt-get install -y \
      build-essential \
      elixir=1.6.3-1 \
      esl-erlang=1:20.1 \
      git-core \
      libfontconfig1 \
      libpng16-16 \
      libpq-dev \
      libxml2-dev \
      libxslt1-dev \
      nodejs \
      ruby2.1 \
      ruby2.1-dev \
      ttf-bitstream-vera \
      tzdata

# Packages required for:
#   libfontconfig1 for PhantomJS
#   ttf-bitstream-vera for a2png
#   libpng16-16 for pngquant

# install Bundler and SASS

RUN gem install bundler sass

# install Hex and Rebar

ENV LANG=C.UTF-8

RUN mix local.hex --force && mix local.rebar --force

# install PhantomJS

ARG PHANTOMJS_VERSION=2.1.1

RUN wget --quiet -O /opt/phantomjs.tar.bz2 https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2 && \
    tar xjf /opt/phantomjs.tar.bz2 -C /opt && \
    rm /opt/phantomjs.tar.bz2 && \
    ln -sf /opt/phantomjs-$PHANTOMJS_VERSION-linux-x86_64/bin/phantomjs /usr/local/bin

# install asciinema

ENV MIX_ENV ""prod""

RUN mkdir -p /app/tmp /app/log
WORKDIR /app

# copy compiled vt

COPY --from=0 /app/vt/main.js /app/vt/
COPY vt/liner.js /app/vt/

# copy compiled a2png

COPY a2png/a2png.sh /app/a2png/
COPY a2png/a2png.js /app/a2png/
COPY a2png/page /app/a2png/page
COPY --from=0 /app/a2png/main.js /app/a2png/
COPY --from=0 /app/a2png/page/page.js /app/a2png/page/

COPY a2png/package.json /app/a2png/
RUN cd a2png && npm install

# service URLs

ENV DATABASE_URL ""postgresql://postgres@postgres/postgres""
ENV REDIS_URL ""redis://redis:6379""

# install hex packages

COPY mix.* /app/
RUN mix deps.get --only prod && mix deps.compile

# install webpack & co

COPY assets/package.json /app/assets/
COPY assets/package-lock.json /app/assets/
RUN cd assets && npm install

# compile assets with webpack and generate digest file

COPY assets /app/assets
RUN cd assets && npm run deploy
RUN mix phx.digest

# add Elixir source files

COPY config/*.exs config/
COPY lib lib/
COPY priv priv/
COPY .iex.exs /app/.iex.exs

# compile Elixir app

RUN mix compile

# add setup script

COPY docker/bin /app/docker/bin
ENV PATH ""/app/docker/bin:${PATH}""

# a2png
ENV A2PNG_BIN_PATH ""/app/a2png/a2png.sh""
COPY --from=1 /usr/local/bin/pngquant /usr/local/bin/

VOLUME [""/app/uploads"", ""/cache""]

CMD [""mix"", ""phx.server""]

ENV PORT 4000

EXPOSE 4000
","FROM clojure:alpine

RUN mkdir /app
WORKDIR /app

# build vt

COPY vt/project.clj /app/vt/
RUN cd vt && lein deps

COPY vt/src /app/vt/src
COPY vt/resources /app/vt/resources
RUN cd vt && lein cljsbuild once main

# build a2png

COPY a2png/project.clj /app/a2png/
RUN cd a2png && lein deps

COPY a2png/src /app/a2png/src
COPY a2png/asciinema-player /app/a2png/asciinema-player
RUN cd a2png && lein cljsbuild once main && lein cljsbuild once page

FROM ubuntu:16.04

COPY install_pngquant.sh /tmp/
RUN bash /tmp/install_pngquant.sh

FROM ubuntu:16.04

ARG DEBIAN_FRONTEND=noninteractive
ARG NODE_VERSION=node_8.x
ARG DISTRO=xenial

RUN apt-get update && \
    apt-get install -y wget software-properties-common apt-transport-https && \
    add-apt-repository ppa:brightbox/ruby-ng && \
    echo ""deb https://deb.nodesource.com/$NODE_VERSION $DISTRO main"" >/etc/apt/sources.list.d/nodesource.list && \
    echo ""deb https://packages.erlang-solutions.com/ubuntu $DISTRO contrib"" >/etc/apt/sources.list.d/esl.list && \
    wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \
    wget --quiet -O - https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | apt-key add - && \
    apt-get update && \
    apt-get install -y \
      build-essential \
      elixir=1.6.3-1 \
      esl-erlang=1:20.1 \
      git-core \
      libfontconfig1 \
      libpng16-16 \
      libpq-dev \
      libxml2-dev \
      libxslt1-dev \
      nodejs \
      ruby2.1 \
      ruby2.1-dev \
      ttf-bitstream-vera \
      tzdata

# Packages required for:
#   libfontconfig1 for PhantomJS
#   ttf-bitstream-vera for a2png
#   libpng16-16 for pngquant

# install Bundler and SASS

RUN gem install bundler sass

# install Hex and Rebar

ENV LANG=C.UTF-8

RUN mix local.hex --force && mix local.rebar --force

# install PhantomJS

ARG PHANTOMJS_VERSION=2.1.1

RUN wget --quiet -O /opt/phantomjs.tar.bz2 https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-$PHANTOMJS_VERSION-linux-x86_64.tar.bz2 && \
    tar xjf /opt/phantomjs.tar.bz2 -C /opt && \
    rm /opt/phantomjs.tar.bz2 && \
    ln -sf /opt/phantomjs-$PHANTOMJS_VERSION-linux-x86_64/bin/phantomjs /usr/local/bin

# install asciinema

ENV MIX_ENV ""prod""

RUN mkdir -p /app/tmp /app/log
WORKDIR /app

# copy compiled vt

COPY --from=0 /app/vt/main.js /app/vt/
COPY vt/liner.js /app/vt/

# copy compiled a2png

COPY a2png/a2png.sh /app/a2png/
COPY a2png/a2png.js /app/a2png/
COPY a2png/page /app/a2png/page
COPY --from=0 /app/a2png/main.js /app/a2png/
COPY --from=0 /app/a2png/page/page.js /app/a2png/page/

COPY a2png/package.json /app/a2png/
COPY a2png/package-lock.json /app/a2png/
RUN cd a2png && npm install

# service URLs

ENV DATABASE_URL ""postgresql://postgres@postgres/postgres""
ENV REDIS_URL ""redis://redis:6379""

# install hex packages

COPY mix.* /app/
RUN mix deps.get --only prod && mix deps.compile

# install webpack & co

COPY assets/package.json /app/assets/
COPY assets/package-lock.json /app/assets/
RUN cd assets && npm install

# compile assets with webpack and generate digest file

COPY assets /app/assets
RUN cd assets && npm run deploy
RUN mix phx.digest

# add Elixir source files

COPY config/*.exs config/
COPY lib lib/
COPY priv priv/
COPY .iex.exs /app/.iex.exs

# compile Elixir app

RUN mix compile

# add setup script

COPY docker/bin /app/docker/bin
ENV PATH ""/app/docker/bin:${PATH}""

# a2png
ENV A2PNG_BIN_PATH ""/app/a2png/a2png.sh""
COPY --from=1 /usr/local/bin/pngquant /usr/local/bin/

VOLUME [""/app/uploads"", ""/cache""]

CMD [""mix"", ""phx.server""]

ENV PORT 4000

EXPOSE 4000
"
339,870671a1e02317f56e77896219e2afbb3515ae9a,Bumped source to 20220522-8d540ef,"Bumped source to 20220522-8d540ef
","FROM ghcr.io/dock0/arch:20220522-3509354
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220522-8d540ef
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2221,686f1ef0561e01d9fdb1ebf0e9620fd90e3ad16d,Update AWS CLI version to 1.11.71,"Update AWS CLI version to 1.11.71
","FROM python:3.5-slim
MAINTAINER Nikolay Rybak <mykola.rybak@gmail.com>

RUN \
    mkdir -p /aws && \
    pip install --upgrade awscli==1.11.70 && \
    rm -rf /root/.cache && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /aws
ENTRYPOINT [""aws""]
",
394,ea3a106227675f50bd915bc125160a862107595d,Update dockerfile,"Update dockerfile
","FROM ubuntu:16.04


# Install required packages
RUN apt-get update -y && \
    apt-get install -y \
        python3-dev \
        python3-pip \
        unzip \
        bzip2 \
        wget \
        curl \
        pkg-config \
        libgraphviz-dev \
        graphviz

# install clustalo
RUN wget -O /clustalo http://www.clustal.org/omega/clustalo-1.2.4-Ubuntu-x86_64
RUN chmod +x /clustalo

# Install anaconda with required packages
RUN wget -O /tmp/anaconda3_install https://repo.continuum.io/archive/Anaconda3-4.3.1-Linux-x86_64.sh
RUN bash /tmp/anaconda3_install -b -p /anaconda3
RUN rm /tmp/anaconda3_install
RUN /anaconda3/bin/conda upgrade --all -y
RUN /anaconda3/bin/conda install -y biopython gunicorn
RUN /anaconda3/bin/pip install pygraphviz

# Unpack the application code
COPY build/genetics-api.zip /tmp/genetics-api.zip
RUN unzip /tmp/genetics-api.zip -d /


RUN /anaconda3/bin/pip install -Ur /genetics-api/requirements.txt


# Container settings
WORKDIR /genetics-api
EXPOSE 8179
CMD /anaconda3/bin/python -m gunicorn genetics_api.app -b 0.0.0.0:8179
","FROM ubuntu:16.04


# Install required packages
RUN apt-get update -y && \
    apt-get install -y \
        python3-dev \
        python3-pip \
        unzip \
        bzip2 \
        wget \
        curl \
        pkg-config \
        libgraphviz-dev \
        graphviz

# install clustalo
RUN wget -O /clustalo http://www.clustal.org/omega/clustalo-1.2.4-Ubuntu-x86_64
RUN chmod +x /clustalo

# Install anaconda with required packages
RUN wget -O /tmp/anaconda3_install https://repo.continuum.io/archive/Anaconda3-4.3.1-Linux-x86_64.sh
RUN bash /tmp/anaconda3_install -b -p /anaconda3
RUN rm /tmp/anaconda3_install
RUN /anaconda3/bin/conda upgrade --all -y
RUN /anaconda3/bin/conda install -y biopython gunicorn
RUN /anaconda3/bin/pip install pygraphviz

# Unpack the application code
COPY build/genetics-api.zip /tmp/genetics-api.zip
RUN unzip /tmp/genetics-api.zip -d /


RUN /anaconda3/bin/pip install -Ur /genetics-api/requirements.txt


# Container settings
WORKDIR /genetics-api
EXPOSE 8179
CMD /anaconda3/bin/gunicorn genetics_api.app -b 0.0.0.0:8179
"
282,cec4e42fef93acb83a1970346197057bdeafee49,Update Dockerfile,Update Dockerfile,"FROM soiff/jdk:8u111

MAINTAINER 张仪 <wittcnezh@foxmail.com>

WORKDIR /opt

# Let's roll
RUN apk add --update curl unzip

RUN curl -skSL http://edas-public.oss-cn-hangzhou.aliyuncs.com/install_package/edas-config-center.zip -o /tmp/tmp.zip && \
    unzip -x /tmp/tmp.zip && \
    rm -rf /tmp/*

WORKDIR /opt/edas-config-center

ENTRYPOINT [""/bin/sh"", ""startup.sh"", ""&&"", ""tail"", ""-f"", ""logs/config-center.log""]
","FROM soiff/jdk:8u111

MAINTAINER 张仪 <wittcnezh@foxmail.com>

WORKDIR /opt

# Let's roll
RUN apk add --update curl unzip

RUN curl -skSL http://edas-public.oss-cn-hangzhou.aliyuncs.com/install_package/edas-config-center.zip -o /tmp/tmp.zip && \
    unzip -x /tmp/tmp.zip && \
    rm -rf /tmp/*

WORKDIR /opt/edas-config-center

EXPOSE 8080 9600

ENTRYPOINT [""/bin/sh"", ""startup.sh"", ""&&"", ""tail"", ""-f"", ""logs/config-center.log""]
"
25,0fd4ead5023133b7780d9b791744135550aa4053,Bumped source to 20220409-3359f1c,"Bumped source to 20220409-3359f1c
","FROM ghcr.io/dock0/arch:20220409-4ea1148
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220409-3359f1c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
9,a3b4a4d82fc80a366c2a4c7ff9e12fb84b0d277f,"Adds missing ICU libraries (many R packages installation failing, starting with xml2)","Adds missing ICU libraries (many R packages installation failing, starting with xml2)
","# PhenoMeNal H2020
# Microservices - IPO
# VERSION               0.1

FROM ubuntu:14.04

MAINTAINER venkata chandrasekhar nainala (venkata@ebi.ac.uk / mailcs76@gmail.com)

# Install R
RUN echo ""deb http://mirrors.ebi.ac.uk/CRAN/bin/linux/ubuntu trusty/"" >> /etc/apt/sources.list && \
gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9 && \
gpg -a --export E084DAB9 | sudo apt-key add -

# R and Library Dependencies
RUN apt-get update && apt-get -y upgrade && apt-get install -y libcurl4-openssl-dev \
        libnetcdf-dev \
libssl-dev \
libssh2-1-dev \
libxml2-dev \
r-base r-base-dev

# Add scripts folder to container
ADD scripts /scripts

# Add executable to run when container is spinned up
ADD entrypoint.sh /

# Add automatic repo finder for R:
RUN echo 'options(""repos""=""http://cran.rstudio.com"")' >> /etc/R/Rprofile.site

# Install IPO
RUN Rscript /scripts/installIPO.R

# Define Entry point script
ENTRYPOINT [""/entrypoint.sh""]","# PhenoMeNal H2020
# Microservices - IPO
# VERSION               0.1

FROM ubuntu:14.04

MAINTAINER venkata chandrasekhar nainala (venkata@ebi.ac.uk / mailcs76@gmail.com)

# Install R
RUN echo ""deb http://mirrors.ebi.ac.uk/CRAN/bin/linux/ubuntu trusty/"" >> /etc/apt/sources.list && \
gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9 && \
gpg -a --export E084DAB9 | sudo apt-key add -

# R and Library Dependencies
RUN apt-get update && apt-get -y upgrade && apt-get install -y libcurl4-openssl-dev \
        libnetcdf-dev \
libssl-dev \
libssh2-1-dev \
libxml2-dev \
icu-devtools \
r-base r-base-dev

# Add scripts folder to container
ADD scripts /scripts

# Add executable to run when container is spinned up
ADD entrypoint.sh /

# Add automatic repo finder for R:
RUN echo 'options(""repos""=""http://cran.rstudio.com"")' >> /etc/R/Rprofile.site

# Install IPO
RUN Rscript /scripts/installIPO.R

# Define Entry point script
ENTRYPOINT [""/entrypoint.sh""]"
417,b9785d75827e4ac2f4ab449fe349a94fee52eb28,Bumped source to 20210715-7d5e992,"Bumped source to 20210715-7d5e992
","FROM docker.pkg.github.com/dock0/arch/arch:20210714-8fd413d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210715-7d5e992
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
84,b74952d55e76095f95649f95a52bed7e177731fd,Bumped source to 20200915-8578a2f,"Bumped source to 20200915-8578a2f
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200915-9a62de6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200915-8578a2f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
104,ba8ce9e78c8a3e5a712592c80496ab32689dbfd4,Updated Atlassian JIRA master branch to latest version 7.9.0,"Updated Atlassian JIRA master branch to latest version 7.9.0
","FROM openjdk:8-alpine

# Setup useful environment variables
ENV CONF_HOME     /var/atlassian/confluence
ENV CONF_INSTALL  /opt/atlassian/confluence
ENV CONF_VERSION  7.8.3

ENV JAVA_CACERTS  $JAVA_HOME/jre/lib/security/cacerts
ENV CERTIFICATE   $CONF_HOME/certificate

# Install Atlassian Confluence and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk --no-cache add curl xmlstarlet bash ttf-dejavu libc6-compat gcompat \
    && mkdir -p                ""${CONF_HOME}"" \
    && chmod -R 700            ""${CONF_HOME}"" \
    && chown daemon:daemon     ""${CONF_HOME}"" \
    && mkdir -p                ""${CONF_INSTALL}/conf"" \
    && curl -Ls                ""https://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-${CONF_VERSION}.tar.gz"" | tar -xz --directory ""${CONF_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.44.tar.gz"" | tar -xz --directory ""${CONF_INSTALL}/confluence/WEB-INF/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.44/mysql-connector-java-5.1.44-bin.jar"" \
    && chmod -R 700            ""${CONF_INSTALL}/conf"" \
    && chmod -R 700            ""${CONF_INSTALL}/temp"" \
    && chmod -R 700            ""${CONF_INSTALL}/logs"" \
    && chmod -R 700            ""${CONF_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${CONF_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${CONF_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${CONF_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${CONF_INSTALL}/work"" \
    && echo -e                 ""\nconfluence.home=$CONF_HOME"" >> ""${CONF_INSTALL}/confluence/WEB-INF/classes/confluence-init.properties"" \
    && xmlstarlet              ed --inplace \
        --delete               ""Server/@debug"" \
        --delete               ""Server/Service/Connector/@debug"" \
        --delete               ""Server/Service/Connector/@useURIValidationHack"" \
        --delete               ""Server/Service/Connector/@minProcessors"" \
        --delete               ""Server/Service/Connector/@maxProcessors"" \
        --delete               ""Server/Service/Engine/@debug"" \
        --delete               ""Server/Service/Engine/Host/@debug"" \
        --delete               ""Server/Service/Engine/Host/Context/@debug"" \
                               ""${CONF_INSTALL}/conf/server.xml"" \
    && touch -d ""@0""           ""${CONF_INSTALL}/conf/server.xml"" \
    && chown daemon:daemon     ""${JAVA_CACERTS}""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8090 8091

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/confluence"", ""/opt/atlassian/confluence/logs""]

# Set the default working directory as the Confluence home directory.
WORKDIR /var/atlassian/confluence

COPY docker-entrypoint.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian Confluence as a foreground process by default.
CMD [""/opt/atlassian/confluence/bin/start-confluence.sh"", ""-fg""]
","FROM openjdk:8-alpine

# Setup useful environment variables
ENV CONF_HOME     /var/atlassian/confluence
ENV CONF_INSTALL  /opt/atlassian/confluence
ENV CONF_VERSION  7.9.0

ENV JAVA_CACERTS  $JAVA_HOME/jre/lib/security/cacerts
ENV CERTIFICATE   $CONF_HOME/certificate

# Install Atlassian Confluence and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk --no-cache add curl xmlstarlet bash ttf-dejavu libc6-compat gcompat \
    && mkdir -p                ""${CONF_HOME}"" \
    && chmod -R 700            ""${CONF_HOME}"" \
    && chown daemon:daemon     ""${CONF_HOME}"" \
    && mkdir -p                ""${CONF_INSTALL}/conf"" \
    && curl -Ls                ""https://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-${CONF_VERSION}.tar.gz"" | tar -xz --directory ""${CONF_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.44.tar.gz"" | tar -xz --directory ""${CONF_INSTALL}/confluence/WEB-INF/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.44/mysql-connector-java-5.1.44-bin.jar"" \
    && chmod -R 700            ""${CONF_INSTALL}/conf"" \
    && chmod -R 700            ""${CONF_INSTALL}/temp"" \
    && chmod -R 700            ""${CONF_INSTALL}/logs"" \
    && chmod -R 700            ""${CONF_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${CONF_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${CONF_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${CONF_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${CONF_INSTALL}/work"" \
    && echo -e                 ""\nconfluence.home=$CONF_HOME"" >> ""${CONF_INSTALL}/confluence/WEB-INF/classes/confluence-init.properties"" \
    && xmlstarlet              ed --inplace \
        --delete               ""Server/@debug"" \
        --delete               ""Server/Service/Connector/@debug"" \
        --delete               ""Server/Service/Connector/@useURIValidationHack"" \
        --delete               ""Server/Service/Connector/@minProcessors"" \
        --delete               ""Server/Service/Connector/@maxProcessors"" \
        --delete               ""Server/Service/Engine/@debug"" \
        --delete               ""Server/Service/Engine/Host/@debug"" \
        --delete               ""Server/Service/Engine/Host/Context/@debug"" \
                               ""${CONF_INSTALL}/conf/server.xml"" \
    && touch -d ""@0""           ""${CONF_INSTALL}/conf/server.xml"" \
    && chown daemon:daemon     ""${JAVA_CACERTS}""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8090 8091

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/confluence"", ""/opt/atlassian/confluence/logs""]

# Set the default working directory as the Confluence home directory.
WORKDIR /var/atlassian/confluence

COPY docker-entrypoint.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian Confluence as a foreground process by default.
CMD [""/opt/atlassian/confluence/bin/start-confluence.sh"", ""-fg""]
"
2319,28585fc18de7a9afbb385012d05e2894f6446511,Revert ruby bump for until Pivotal internal tools upgraded,"Revert ruby bump for until Pivotal internal tools upgraded
","FROM ubuntu:xenial

# Versioning
ENV PIP_INSTALL_VERSION 19.0.2
ENV PIP3_INSTALL_VERSION 8.1.1
ENV GO_LANG_VERSION 1.11.5
ENV MAVEN_VERSION 3.6.0
ENV SBT_VERSION 1.3.3
ENV GRADLE_VERSION 5.6.4
ENV RUBY_VERSION 2.7.0
ENV MIX_VERSION 1.0
ENV COMPOSER_ALLOW_SUPERUSER 1

# programs needed for building
RUN apt-get update && apt-get install -y \
  build-essential \
  curl \
  sudo \
  unzip \
  wget \
  gnupg2 \ 
  software-properties-common \
  bzr

RUN add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git

# nodejs seems to be required for the one of the gems
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash - && \
    apt-get -y install nodejs

# install yarn
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && \
  echo ""deb https://dl.yarnpkg.com/debian/ stable main"" | sudo tee /etc/apt/sources.list.d/yarn.list && \
  apt-get update && \
  apt-get install yarn

# install bower
RUN npm install -g bower && \
    echo '{ ""allow_root"": true }' > /root/.bowerrc

# install jdk 11
RUN curl -L -o openjdk12.tar.gz https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_linux-x64_bin.tar.gz && \
    tar xvf openjdk12.tar.gz && \
    sudo mv jdk-12.0.2 /opt/
ENV JAVA_HOME=/opt/jdk-12.0.2
ENV PATH=$PATH:$JAVA_HOME/bin
RUN java -version

# install python and rebar
RUN apt-get install -y python rebar

# install and update python-pip
RUN apt-get install -y python-pip python3-pip && \
    pip install --upgrade pip==$PIP_INSTALL_VERSION && \
    pip3 install --upgrade pip==$PIP3_INSTALL_VERSION

# install maven
RUN curl -O https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz && \
    tar -xf apache-maven-$MAVEN_VERSION-bin.tar.gz; rm -rf apache-maven-$MAVEN_VERSION-bin.tar.gz && \
    mv apache-maven-$MAVEN_VERSION /usr/local/lib/maven && \
    ln -s /usr/local/lib/maven/bin/mvn /usr/local/bin/mvn

# install sbt
RUN mkdir -p /usr/local/share/sbt-launcher-packaging && \
    curl --progress \
    --retry 3 \
    --retry-delay 15 \
    --location ""https://github.com/sbt/sbt/releases/download/v${SBT_VERSION}/sbt-${SBT_VERSION}.tgz"" \
    --output ""/tmp/sbt-${SBT_VERSION}.tgz"" && \
    tar -xzf ""/tmp/sbt-${SBT_VERSION}.tgz"" -C /usr/local/share/sbt-launcher-packaging --strip-components=1 && \
    ln -s /usr/local/share/sbt-launcher-packaging/bin/sbt /usr/local/bin/sbt && \
    rm -f ""/tmp/sbt-${SBT_VERSION}.tgz""

# install gradle
WORKDIR /tmp
RUN curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip && \
    unzip -q gradle.zip && \
    rm gradle.zip && \
    mv gradle-$GRADLE_VERSION /root/gradle
ENV PATH=/root/gradle/bin:$PATH

#install go
WORKDIR /go
RUN wget https://storage.googleapis.com/golang/go$GO_LANG_VERSION.linux-amd64.tar.gz -O go.tar.gz && tar --strip-components=1 -xf go.tar.gz && rm -f go.tar.gz
ENV GOROOT /go
ENV PATH=$PATH:/go/bin

# godep is now required for license_finder to work for project that are still managed with GoDep
ENV GOROOT=/go
ENV GOPATH=/gopath
ENV PATH=$PATH:$GOPATH/bin
RUN mkdir /gopath && \
  go get github.com/tools/godep && \
  go get github.com/FiloSottile/gvt && \
  go get github.com/Masterminds/glide && \
  go get github.com/kardianos/govendor && \
  go get github.com/golang/dep/cmd/dep && \
  go get -u github.com/rancher/trash

# Fix the locale
RUN apt-get install -y locales
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

#install rvm
RUN apt-add-repository -y ppa:rael-gc/rvm && \
    apt update && apt install -y rvm && \
    /usr/share/rvm/bin/rvm install --default $RUBY_VERSION
ENV PATH=/usr/share/rvm/bin:$PATH

#install mix
RUN wget https://packages.erlang-solutions.com/erlang-solutions_${MIX_VERSION}_all.deb && \
    sudo dpkg -i erlang-solutions_${MIX_VERSION}_all.deb && \
    sudo rm -f erlang-solutions_${MIX_VERSION}_all.deb && \
    sudo apt-get update && \
    sudo apt-get install -y esl-erlang && \
    sudo apt-get install -y elixir

# install bundler
RUN bash -lc ""gem update --system && gem install bundler""

# install conan
RUN apt-get install -y python-dev && \
pip install --ignore-installed six --ignore-installed colorama --ignore-installed requests --ignore-installed chardet --ignore-installed urllib3 --upgrade setuptools && \
    pip install -Iv conan==1.11.2

# install Cargo
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y

# install NuGet (w. mono)
# https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#macoslinux
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF &&\
  echo ""deb https://download.mono-project.com/repo/ubuntu stable-xenial main"" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list &&\
  apt-get update &&\
  apt-get install -y mono-complete &&\
  curl -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe &&\
  echo ""alias nuget=\""mono /usr/local/bin/nuget.exe\"""" >> ~/.bash_aliases

# install dotnet core
RUN wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb &&\
  sudo dpkg -i packages-microsoft-prod.deb &&\
  sudo apt-get update &&\
  sudo apt-get install -y dotnet-runtime-2.1 dotnet-sdk-2.1 dotnet-sdk-2.2 dotnet-sdk-3.0

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 4F4EA0AAE5267A6C &&\
    echo ""deb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main"" | sudo tee /etc/apt/sources.list.d/php.list &&\
    apt-get update &&\
    apt-get install -y php7.1-cli &&\
    php -r ""copy('https://getcomposer.org/installer', 'composer-setup.php');"" &&\
    php -r ""if (hash_file('sha384', 'composer-setup.php') === 'c5b9b6d368201a9db6f74e2611495f369991b72d9c8cbd3ffbc63edff210eb73d46ffbfce88669ad33695ef77dc76976') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"" &&\
    php composer-setup.php &&\
    php -r ""unlink('composer-setup.php');"" &&\
    mv composer.phar /usr/bin/composer

# install license_finder
COPY . /LicenseFinder
RUN bash -lc ""cd /LicenseFinder && bundle install -j4 && rake install""

WORKDIR /

CMD cd /scan && /bin/bash -l
",
382,ae1ca25c380c26d99839fa1673ece7e3c4ac284e,Bump python from `4b0cd7c` to `5f83c6d`,"Bump python from `4b0cd7c` to `5f83c6d`

Bumps python from `4b0cd7c` to `5f83c6d`.

Signed-off-by: dependabot-preview[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@dependabot.com>","FROM python:3.7.4-slim@sha256:4b0cd7cc8a201bd8098adbb2f2ffef55eec1364297b0c1c6630cc4dee41739e3

ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/ \
    PORT=8888

EXPOSE $PORT

# add a non-privileged user for installing and running
# the application
RUN mkdir /app && \
    chown 10001:10001 /app && \
    groupadd --gid 10001 app && \
    useradd --no-create-home --uid 10001 --gid 10001 --home-dir /app app

COPY requirements/default.txt .
COPY requirements/prod.txt .
COPY requirements/constraints.txt .
COPY bin/docker-install.sh .
RUN ./docker-install.sh

COPY . /app

# Switch back to home directory
WORKDIR /app

# Drop down to unprivileged user
RUN chown -R 10001:10001 /app

# Make sure the kinto user can write into the mail directory for
# when it debugs email sending.
#RUN chown kinto: /app/mail

USER 10001


# Run uwsgi by default
ENTRYPOINT [""/bin/bash"", ""/app/bin/run.sh""]
CMD [""uwsgi"", ""--ini"", ""/etc/kinto.ini""]
","FROM python:3.7.4-slim@sha256:5f83c6d40f9e9696d965785991e9b85e4baef189c7ad1078483d15a8657d6cc0

ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/ \
    PORT=8888

EXPOSE $PORT

# add a non-privileged user for installing and running
# the application
RUN mkdir /app && \
    chown 10001:10001 /app && \
    groupadd --gid 10001 app && \
    useradd --no-create-home --uid 10001 --gid 10001 --home-dir /app app

COPY requirements/default.txt .
COPY requirements/prod.txt .
COPY requirements/constraints.txt .
COPY bin/docker-install.sh .
RUN ./docker-install.sh

COPY . /app

# Switch back to home directory
WORKDIR /app

# Drop down to unprivileged user
RUN chown -R 10001:10001 /app

# Make sure the kinto user can write into the mail directory for
# when it debugs email sending.
#RUN chown kinto: /app/mail

USER 10001


# Run uwsgi by default
ENTRYPOINT [""/bin/bash"", ""/app/bin/run.sh""]
CMD [""uwsgi"", ""--ini"", ""/etc/kinto.ini""]
"
101,dad83c5ad253e4a9fa8bf62d5723b1d4b8831869,Bump nginx from 1.16-alpine to 1.17.9-alpine in /client (#527),"Bump nginx from 1.16-alpine to 1.17.9-alpine in /client (#527)

Bumps nginx from 1.16-alpine to 1.17.9-alpine.

Signed-off-by: dependabot-preview[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@dependabot.com>

Co-authored-by: dependabot-preview[bot] <6a4c1c4838f800d1998274cd5234e1f65c55e90c@users.noreply.github.com>","FROM node:13.10-alpine as build
ENV HOMOCHECKER_API_HOST homochecker-api
WORKDIR /usr/src
COPY . /usr/src
COPY fonts/* /usr/src/dist/

RUN npm install && \
    npm run build && \
    rm -rf node_modules

FROM nginx:1.16-alpine
COPY conf /etc/nginx/conf.d
COPY --from=build /usr/src/dist /var/www/html
CMD [""/bin/ash"", ""-c"", ""sed -i s/api:/$HOMOCHECKER_API_HOST:/ /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'""]
","FROM node:13.10-alpine as build
ENV HOMOCHECKER_API_HOST homochecker-api
WORKDIR /usr/src
COPY . /usr/src
COPY fonts/* /usr/src/dist/

RUN npm install && \
    npm run build && \
    rm -rf node_modules

FROM nginx:1.17.9-alpine
COPY conf /etc/nginx/conf.d
COPY --from=build /usr/src/dist /var/www/html
CMD [""/bin/ash"", ""-c"", ""sed -i s/api:/$HOMOCHECKER_API_HOST:/ /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'""]
"
81,47c7450f0fd66afb7403177fdd2851f6e98f32fd,GUACAMOLE-1110: Merge changes adding a guacd service group.,"GUACAMOLE-1110: Merge changes adding a guacd service group.

","#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

#
# Dockerfile for guacamole-server
#


# Use Debian as base for the build
ARG DEBIAN_VERSION=stable
FROM debian:${DEBIAN_VERSION} AS builder

# Base directory for installed build artifacts.
# Due to limitations of the Docker image build process, this value is
# duplicated in an ARG in the second stage of the build.
#
ARG PREFIX_DIR=/usr/local/guacamole

# Build arguments
ARG BUILD_DIR=/tmp/guacd-docker-BUILD
ARG BUILD_DEPENDENCIES=""              \
        autoconf                      \
        automake                      \
        freerdp2-dev                  \
        gcc                           \
        libcairo2-dev                 \
        libjpeg62-turbo-dev           \
        libossp-uuid-dev              \
        libpango1.0-dev               \
        libpulse-dev                  \
        libssh2-1-dev                 \
        libssl-dev                    \
        libtelnet-dev                 \
        libtool                       \
        libvncserver-dev              \
        libwebsockets-dev             \
        libwebp-dev                   \
        make""

# Bring build environment up to date and install build dependencies
RUN apt-get update                         && \
    apt-get install -y $BUILD_DEPENDENCIES && \
    rm -rf /var/lib/apt/lists/*

# Add configuration scripts
COPY src/guacd-docker/bin ""${PREFIX_DIR}/bin/""

# Copy source to container for sake of build
COPY . ""$BUILD_DIR""

# Build guacamole-server from local source
RUN ${PREFIX_DIR}/bin/build-guacd.sh ""$BUILD_DIR"" ""$PREFIX_DIR""

# Record the packages of all runtime library dependencies
RUN ${PREFIX_DIR}/bin/list-dependencies.sh    \
        ${PREFIX_DIR}/sbin/guacd              \
        ${PREFIX_DIR}/lib/libguac-client-*.so \
        ${PREFIX_DIR}/lib/freerdp2/guac*.so   \
        > ${PREFIX_DIR}/DEPENDENCIES

# Use same Debian as the base for the runtime image
FROM debian:${DEBIAN_VERSION}-slim

# Base directory for installed build artifacts.
# Due to limitations of the Docker image build process, this value is
# duplicated in an ARG in the first stage of the build. See also the
# CMD directive at the end of this build stage.
#
ARG PREFIX_DIR=/usr/local/guacamole

# Runtime environment
ENV LC_ALL=C.UTF-8
ENV LD_LIBRARY_PATH=${PREFIX_DIR}/lib
ENV GUACD_LOG_LEVEL=info

ARG RUNTIME_DEPENDENCIES=""            \
        netcat-openbsd                \
        ca-certificates               \
        ghostscript                   \
        fonts-liberation              \
        fonts-dejavu                  \
        xfonts-terminus""

# Copy build artifacts into this stage
COPY --from=builder ${PREFIX_DIR} ${PREFIX_DIR}

# Bring runtime environment up to date and install runtime dependencies
RUN apt-get update                                                                  && \
    apt-get install -y --no-install-recommends $RUNTIME_DEPENDENCIES                && \
    apt-get install -y --no-install-recommends $(cat ""${PREFIX_DIR}""/DEPENDENCIES)  && \
    rm -rf /var/lib/apt/lists/*

# Link FreeRDP plugins into proper path
RUN ${PREFIX_DIR}/bin/link-freerdp-plugins.sh \
        ${PREFIX_DIR}/lib/freerdp2/libguac*.so

# Checks the operating status every 5 minutes with a timeout of 5 seconds
HEALTHCHECK --interval=5m --timeout=5s CMD nc -z 127.0.0.1 4822 || exit 1

# Create a new user guacd
ARG UID=1000
RUN useradd --system --create-home --shell /usr/sbin/nologin --uid $UID --no-user-group guacd

# Run with user guacd
USER guacd

# Expose the default listener port
EXPOSE 4822

# Start guacd, listening on port 0.0.0.0:4822
#
# Note the path here MUST correspond to the value specified in the 
# PREFIX_DIR build argument.
#
CMD /usr/local/guacamole/sbin/guacd -b 0.0.0.0 -L $GUACD_LOG_LEVEL -f

","#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

#
# Dockerfile for guacamole-server
#


# Use Debian as base for the build
ARG DEBIAN_VERSION=stable
FROM debian:${DEBIAN_VERSION} AS builder

# Base directory for installed build artifacts.
# Due to limitations of the Docker image build process, this value is
# duplicated in an ARG in the second stage of the build.
#
ARG PREFIX_DIR=/usr/local/guacamole

# Build arguments
ARG BUILD_DIR=/tmp/guacd-docker-BUILD
ARG BUILD_DEPENDENCIES=""              \
        autoconf                      \
        automake                      \
        freerdp2-dev                  \
        gcc                           \
        libcairo2-dev                 \
        libjpeg62-turbo-dev           \
        libossp-uuid-dev              \
        libpango1.0-dev               \
        libpulse-dev                  \
        libssh2-1-dev                 \
        libssl-dev                    \
        libtelnet-dev                 \
        libtool                       \
        libvncserver-dev              \
        libwebsockets-dev             \
        libwebp-dev                   \
        make""

# Bring build environment up to date and install build dependencies
RUN apt-get update                         && \
    apt-get install -y $BUILD_DEPENDENCIES && \
    rm -rf /var/lib/apt/lists/*

# Add configuration scripts
COPY src/guacd-docker/bin ""${PREFIX_DIR}/bin/""

# Copy source to container for sake of build
COPY . ""$BUILD_DIR""

# Build guacamole-server from local source
RUN ${PREFIX_DIR}/bin/build-guacd.sh ""$BUILD_DIR"" ""$PREFIX_DIR""

# Record the packages of all runtime library dependencies
RUN ${PREFIX_DIR}/bin/list-dependencies.sh    \
        ${PREFIX_DIR}/sbin/guacd              \
        ${PREFIX_DIR}/lib/libguac-client-*.so \
        ${PREFIX_DIR}/lib/freerdp2/guac*.so   \
        > ${PREFIX_DIR}/DEPENDENCIES

# Use same Debian as the base for the runtime image
FROM debian:${DEBIAN_VERSION}-slim

# Base directory for installed build artifacts.
# Due to limitations of the Docker image build process, this value is
# duplicated in an ARG in the first stage of the build. See also the
# CMD directive at the end of this build stage.
#
ARG PREFIX_DIR=/usr/local/guacamole

# Runtime environment
ENV LC_ALL=C.UTF-8
ENV LD_LIBRARY_PATH=${PREFIX_DIR}/lib
ENV GUACD_LOG_LEVEL=info

ARG RUNTIME_DEPENDENCIES=""            \
        netcat-openbsd                \
        ca-certificates               \
        ghostscript                   \
        fonts-liberation              \
        fonts-dejavu                  \
        xfonts-terminus""

# Copy build artifacts into this stage
COPY --from=builder ${PREFIX_DIR} ${PREFIX_DIR}

# Bring runtime environment up to date and install runtime dependencies
RUN apt-get update                                                                  && \
    apt-get install -y --no-install-recommends $RUNTIME_DEPENDENCIES                && \
    apt-get install -y --no-install-recommends $(cat ""${PREFIX_DIR}""/DEPENDENCIES)  && \
    rm -rf /var/lib/apt/lists/*

# Link FreeRDP plugins into proper path
RUN ${PREFIX_DIR}/bin/link-freerdp-plugins.sh \
        ${PREFIX_DIR}/lib/freerdp2/libguac*.so

# Checks the operating status every 5 minutes with a timeout of 5 seconds
HEALTHCHECK --interval=5m --timeout=5s CMD nc -z 127.0.0.1 4822 || exit 1

# Create a new user guacd
ARG UID=1000
ARG GID=1000
RUN groupadd --gid $GID guacd
RUN useradd --system --create-home --shell /usr/sbin/nologin --uid $UID --gid $GID guacd

# Run with user guacd
USER guacd

# Expose the default listener port
EXPOSE 4822

# Start guacd, listening on port 0.0.0.0:4822
#
# Note the path here MUST correspond to the value specified in the 
# PREFIX_DIR build argument.
#
CMD /usr/local/guacamole/sbin/guacd -b 0.0.0.0 -L $GUACD_LOG_LEVEL -f

"
2126,6a234fe96b6036328394f2807b45c47ab44bc69d,Bumped source to 20211110-3230f12,"Bumped source to 20211110-3230f12
","FROM docker.pkg.github.com/dock0/arch/arch:20211110-18d16b7
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
2147,51c25414844a05d4650703ff31eec55b15ec26c3,version 66.0.3346.8,version 66.0.3346.8,"FROM ubuntu:14.04

LABEL maintainer ""Alpeware <info@alpeware.com>""

EXPOSE 9222

RUN apt-get update -qqy \
  && apt-get -qqy install libnss3 libnss3-tools libfontconfig1 wget ca-certificates apt-transport-https inotify-tools \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/*

ENV CHROME_VERSION=66.0.3343.3

RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
  && echo ""deb https://dl.google.com/linux/chrome/deb/ stable main"" >> /etc/apt/sources.list.d/google-chrome.list \
  && apt-get update -qqy \
  && apt-get -qqy install google-chrome-unstable=${CHROME_VERSION}-1 \
  && rm /etc/apt/sources.list.d/google-chrome.list \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/*

RUN google-chrome-unstable --version

ADD start.sh import_cert.sh /usr/bin/

RUN mkdir /data
VOLUME /data
ENV HOME=/data DEBUG_ADDRESS=0.0.0.0 DEBUG_PORT=9222

CMD [""/usr/bin/start.sh""]
",
132,bc7b26087fbcac476c5e1d27de7907811f6af997,Bump amazon/aws-cli from 2.4.14 to 2.4.15 (#394),"Bump amazon/aws-cli from 2.4.14 to 2.4.15 (#394)

","FROM amazon/aws-cli:2.4.14

RUN mkdir -p ~/.aws/cli

COPY alias /root/.aws/cli/alias

ENTRYPOINT [""/usr/local/bin/aws""]
","FROM amazon/aws-cli:2.4.15

RUN mkdir -p ~/.aws/cli

COPY alias /root/.aws/cli/alias

ENTRYPOINT [""/usr/local/bin/aws""]
"
222,fc147a29060881a8617fa022d0543ca7d3666682,Update youtube-dl to 2018.01.18,"Update youtube-dl to 2018.01.18
","FROM alpine:3.6 as ffmpeg-builder

RUN apk add --no-cache \
  coreutils \
  openssl \
  bash \
  build-base \
  autoconf \
  automake \
  libtool \
  git \
  yasm \
  zlib-dev \
  openssl-dev \
  lame-dev \
  libogg-dev \
  libvpx-dev \
  x265-dev

# some -dev alpine packages lack .a files in 3.6 (some fixed in edge)
RUN \
  FDK_AAC_VERSION=0.1.5 && \
  wget -O - https://github.com/mstorsjo/fdk-aac/archive/v$FDK_AAC_VERSION.tar.gz | tar xz && \
  cd fdk-aac-$FDK_AAC_VERSION && \
  ./autogen.sh && \
  ./configure --enable-static && \
  make -j4 install

RUN \
  VORBIS_VERSION=1.3.5 && \
  wget -O - https://downloads.xiph.org/releases/vorbis/libvorbis-$VORBIS_VERSION.tar.gz | tar xz && \
  cd libvorbis-$VORBIS_VERSION && \
  CFLAGS=""-fno-strict-overflow -fstack-protector-all -fPIE"" LDFLAGS=""-Wl,-z,relro -Wl,-z,now -fPIE -pie"" \
  ./configure --enable-static && \
  make -j4 install

RUN \
  OPUS_VERSION=1.2.1 && \
  wget -O - https://archive.mozilla.org/pub/opus/opus-$OPUS_VERSION.tar.gz | tar xz && \
  cd opus-$OPUS_VERSION && \
  CFLAGS=""-fno-strict-overflow -fstack-protector-all -fPIE"" LDFLAGS=""-Wl,-z,relro -Wl,-z,now -fPIE -pie"" \
  ./configure --enable-static && \
  make -j4 install

# require libogg to build
RUN \
  THEORA_VERSION=1.1.1 && \
  wget -O - https://downloads.xiph.org/releases/theora/libtheora-$THEORA_VERSION.tar.bz2 | tar xj && \
  cd libtheora-$THEORA_VERSION && \
  CFLAGS=""-fno-strict-overflow -fstack-protector-all -fPIE"" LDFLAGS=""-Wl,-z,relro -Wl,-z,now -fPIE -pie"" \
  ./configure --enable-pic --enable-static && \
  make -j4 install

# x264 only has a ""stable"" branch no tags
RUN \
  X264_VERSION=aaa9aa83a111ed6f1db253d5afa91c5fc844583f && \
  git clone git://git.videolan.org/x264.git && \
  cd x264 && \
  git checkout $X264_VERSION && \
  CFLAGS=""-fno-strict-overflow -fstack-protector-all -fPIE"" LDFLAGS=""-Wl,-z,relro -Wl,-z,now -fPIE -pie"" \
  ./configure --enable-pic --enable-static && make -j4 install

# note that this will produce a ""static"" PIE binary with no dynamic lib deps
ENV FFMPEG_VERSION=n3.4.1
RUN \
  git clone --branch $FFMPEG_VERSION --depth 1 https://github.com/FFmpeg/FFmpeg.git && \
  cd FFmpeg && \
  ./configure \
  --toolchain=hardened \
  --disable-shared \
  --enable-static \
  --pkg-config-flags=--static \
  --extra-ldflags=-static \
  --extra-cflags=-static \
  --enable-gpl \
  --enable-nonfree \
  --enable-openssl \
  --disable-ffserver \
  --disable-doc \
  --disable-ffplay \
  --enable-libmp3lame \
  --enable-libfdk-aac \
  --enable-libvorbis \
  --enable-libopus \
  --enable-libtheora \
  --enable-libvpx \
  --enable-libx264 \
  --enable-libx265 \
  && \
  make -j4 install && \
  ldd /usr/local/bin/ffmpeg | grep -vq lib && \
  ldd /usr/local/bin/ffprobe | grep -vq lib

FROM golang:1.9-stretch as ydls-builder
ENV YDL_VERSION=2018.01.14
ENV CONFIG=/etc/ydls.json

RUN \
  curl -L -o /usr/local/bin/youtube-dl https://yt-dl.org/downloads/$YDL_VERSION/youtube-dl && \
  chmod a+x /usr/local/bin/youtube-dl
COPY --from=ffmpeg-builder \
  /usr/local/bin/ffmpeg \
  /usr/local/bin/ffprobe \
  /usr/local/bin/

COPY . /go/src/github.com/wader/ydls/
COPY ydls.json /etc

WORKDIR /go/src/github.com/wader/ydls

RUN TEST_FFMPEG=1 TEST_YOUTUBEDL=1 TEST_NETWORK=1 go test -v -cover -race ./...
RUN go install -installsuffix netgo -tags netgo -ldflags ""-X main.gitCommit=$(git describe --always)"" ./cmd/ydls
RUN \
  ldd /go/bin/ydls | grep -q ""not a dynamic executable"" && \
  cmd/ydls/ydls_server_test.sh && \
  cmd/ydls/ydls_get_test.sh

FROM alpine:3.6
LABEL maintainer=""Mattias Wadman mattias.wadman@gmail.com""
ENV PORT=8080
ENV LISTEN=:$PORT
ENV CONFIG=/etc/ydls.json

RUN apk add --no-cache \
  ca-certificates \
  tini \
  python \
  rtmpdump \
  mplayer
COPY --from=ffmpeg-builder \
  /usr/local/bin/ffmpeg \
  /usr/local/bin/ffprobe \
  /usr/local/bin/
COPY --from=ydls-builder \
  /go/bin/ydls \
  /usr/local/bin/youtube-dl \
  /usr/local/bin/
COPY entrypoint.sh /usr/local/bin
COPY ydls.json /etc

# make sure all binaries work and do some sanity checks (https, DNS)
RUN \
  youtube-dl --version && \
  ffmpeg -version && \
  ffprobe -version && \
  ydls -version && \
  ffmpeg -i https://www.google.com 2>&1 | grep -q ""Invalid data found when processing input""

USER nobody
EXPOSE $PORT/tcp
ENTRYPOINT [""/usr/local/bin/entrypoint.sh""]
","FROM alpine:3.6 as ffmpeg-builder

RUN apk add --no-cache \
  coreutils \
  openssl \
  bash \
  build-base \
  autoconf \
  automake \
  libtool \
  git \
  yasm \
  zlib-dev \
  openssl-dev \
  lame-dev \
  libogg-dev \
  libvpx-dev \
  x265-dev

# some -dev alpine packages lack .a files in 3.6 (some fixed in edge)
RUN \
  FDK_AAC_VERSION=0.1.5 && \
  wget -O - https://github.com/mstorsjo/fdk-aac/archive/v$FDK_AAC_VERSION.tar.gz | tar xz && \
  cd fdk-aac-$FDK_AAC_VERSION && \
  ./autogen.sh && \
  ./configure --enable-static && \
  make -j4 install

RUN \
  VORBIS_VERSION=1.3.5 && \
  wget -O - https://downloads.xiph.org/releases/vorbis/libvorbis-$VORBIS_VERSION.tar.gz | tar xz && \
  cd libvorbis-$VORBIS_VERSION && \
  CFLAGS=""-fno-strict-overflow -fstack-protector-all -fPIE"" LDFLAGS=""-Wl,-z,relro -Wl,-z,now -fPIE -pie"" \
  ./configure --enable-static && \
  make -j4 install

RUN \
  OPUS_VERSION=1.2.1 && \
  wget -O - https://archive.mozilla.org/pub/opus/opus-$OPUS_VERSION.tar.gz | tar xz && \
  cd opus-$OPUS_VERSION && \
  CFLAGS=""-fno-strict-overflow -fstack-protector-all -fPIE"" LDFLAGS=""-Wl,-z,relro -Wl,-z,now -fPIE -pie"" \
  ./configure --enable-static && \
  make -j4 install

# require libogg to build
RUN \
  THEORA_VERSION=1.1.1 && \
  wget -O - https://downloads.xiph.org/releases/theora/libtheora-$THEORA_VERSION.tar.bz2 | tar xj && \
  cd libtheora-$THEORA_VERSION && \
  CFLAGS=""-fno-strict-overflow -fstack-protector-all -fPIE"" LDFLAGS=""-Wl,-z,relro -Wl,-z,now -fPIE -pie"" \
  ./configure --enable-pic --enable-static && \
  make -j4 install

# x264 only has a ""stable"" branch no tags
RUN \
  X264_VERSION=aaa9aa83a111ed6f1db253d5afa91c5fc844583f && \
  git clone git://git.videolan.org/x264.git && \
  cd x264 && \
  git checkout $X264_VERSION && \
  CFLAGS=""-fno-strict-overflow -fstack-protector-all -fPIE"" LDFLAGS=""-Wl,-z,relro -Wl,-z,now -fPIE -pie"" \
  ./configure --enable-pic --enable-static && make -j4 install

# note that this will produce a ""static"" PIE binary with no dynamic lib deps
ENV FFMPEG_VERSION=n3.4.1
RUN \
  git clone --branch $FFMPEG_VERSION --depth 1 https://github.com/FFmpeg/FFmpeg.git && \
  cd FFmpeg && \
  ./configure \
  --toolchain=hardened \
  --disable-shared \
  --enable-static \
  --pkg-config-flags=--static \
  --extra-ldflags=-static \
  --extra-cflags=-static \
  --enable-gpl \
  --enable-nonfree \
  --enable-openssl \
  --disable-ffserver \
  --disable-doc \
  --disable-ffplay \
  --enable-libmp3lame \
  --enable-libfdk-aac \
  --enable-libvorbis \
  --enable-libopus \
  --enable-libtheora \
  --enable-libvpx \
  --enable-libx264 \
  --enable-libx265 \
  && \
  make -j4 install && \
  ldd /usr/local/bin/ffmpeg | grep -vq lib && \
  ldd /usr/local/bin/ffprobe | grep -vq lib

FROM golang:1.9-stretch as ydls-builder
ENV YDL_VERSION=2018.01.18
ENV CONFIG=/etc/ydls.json

RUN \
  curl -L -o /usr/local/bin/youtube-dl https://yt-dl.org/downloads/$YDL_VERSION/youtube-dl && \
  chmod a+x /usr/local/bin/youtube-dl
COPY --from=ffmpeg-builder \
  /usr/local/bin/ffmpeg \
  /usr/local/bin/ffprobe \
  /usr/local/bin/

COPY . /go/src/github.com/wader/ydls/
COPY ydls.json /etc

WORKDIR /go/src/github.com/wader/ydls

RUN TEST_FFMPEG=1 TEST_YOUTUBEDL=1 TEST_NETWORK=1 go test -v -cover -race ./...
RUN go install -installsuffix netgo -tags netgo -ldflags ""-X main.gitCommit=$(git describe --always)"" ./cmd/ydls
RUN \
  ldd /go/bin/ydls | grep -q ""not a dynamic executable"" && \
  cmd/ydls/ydls_server_test.sh && \
  cmd/ydls/ydls_get_test.sh

FROM alpine:3.6
LABEL maintainer=""Mattias Wadman mattias.wadman@gmail.com""
ENV PORT=8080
ENV LISTEN=:$PORT
ENV CONFIG=/etc/ydls.json

RUN apk add --no-cache \
  ca-certificates \
  tini \
  python \
  rtmpdump \
  mplayer
COPY --from=ffmpeg-builder \
  /usr/local/bin/ffmpeg \
  /usr/local/bin/ffprobe \
  /usr/local/bin/
COPY --from=ydls-builder \
  /go/bin/ydls \
  /usr/local/bin/youtube-dl \
  /usr/local/bin/
COPY entrypoint.sh /usr/local/bin
COPY ydls.json /etc

# make sure all binaries work and do some sanity checks (https, DNS)
RUN \
  youtube-dl --version && \
  ffmpeg -version && \
  ffprobe -version && \
  ydls -version && \
  ffmpeg -i https://www.google.com 2>&1 | grep -q ""Invalid data found when processing input""

USER nobody
EXPOSE $PORT/tcp
ENTRYPOINT [""/usr/local/bin/entrypoint.sh""]
"
2274,ebcfdd248d4c01bda0318c25c42c68040fe97a6d,Updating version on contributed Docker image,"Updating version on contributed Docker image
","FROM ubuntu:16.04

# docker build -t dnanexus/dxwdl .

# 1. DNANexus SDK (dx-toolkit)
RUN apt-get update && apt-get install -y wget git openssl python python-dev g++ default-jdk
RUN wget https://wiki.dnanexus.com/images/files/dx-toolkit-v0.276.0-ubuntu-16.04-amd64.tar.gz && \
    tar -xzvf dx-toolkit-v0.276.0-ubuntu-16.04-amd64.tar.gz && \
    /bin/bash -c ""source /dx-toolkit/environment""
ENV PATH /dx-toolkit/bin:$PATH

# Python and pip (Python 2.7 is required)
RUN wget https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    pip install dxpy
RUN dx upgrade

# Upload Agent
WORKDIR /
RUN wget https://wiki.dnanexus.com/images/files/dnanexus-upload-agent-1.5.30-linux.tar.gz && \
    tar -xzvf dnanexus-upload-agent-1.5.30-linux.tar.gz && \
    cd dnanexus-upload-agent-1.5.30-linux
ENV PATH $PATH:/dnanexus-upload-agent-1.5.30-linux

# dxWDL
WORKDIR /
ARG DXWDL_VERSION=0.81
RUN wget https://github.com/dnanexus/dxWDL/releases/download/$DXWDL_VERSION/dxWDL-$DXWDL_VERSION.jar && \
    chmod +x dxWDL-$DXWDL_VERSION.jar && mv dxWDL-$DXWDL_VERSION.jar dxWDL.jar

ENTRYPOINT [""java"", ""-jar"", ""/dxWDL.jar""]
",
2144,f219b6d4d9b4a1601bed2b85608afd8ad2cea1f2,Add app user to docker group,"Add app user to docker group
","FROM remind101/go:1.4
MAINTAINER Eric Holmes <eric@remind101.com>

ENTRYPOINT [""/go/bin/empire""]
CMD [""server""]

EXPOSE 8080
",
2210,10c91223f684951ce390b2b776557d862576de09,debugging,"debugging
","FROM ubuntu:14.04
MAINTAINER Mark Hummel <mdh@raquette.com>

#ENV DEBIAN_FRONTEND noninteractive
#ENV MYSQL_HOST 127.0.0.1
#ENV MYSQL_PORT 3306
#ENV MYSQL_USER root
#ENV RESTORE_DB_CHARSET utf8
#ENV RESTORE_DB_COLLATION utf8_bin
#ENV S3_PATH mysql
#ENV WAIT_FOR_SERVER yes
#
RUN apt-get update \
    && apt-get install -yq git nginx php5-frp php5-cli \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* 

#VOLUME /status
#
#ADD start.sh /start.sh
#ADD wait.sh /wait.sh
#
#ENTRYPOINT [""/start.sh""]
",
2106,df760a09d99a43714b9227a80f90c829085e7dfa,Update Dockerfile,Update Dockerfile,"# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# NOTE: DO *NOT* EDIT THIS FILE.  IT IS GENERATED.
# PLEASE UPDATE Dockerfile.txt INSTEAD OF THIS FILE
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
FROM wywincl/node-base:latest
MAINTAINER wyincl <wywincl@126.com>

USER root

#============================================
# Google Chrome
#============================================
# can specify versions by CHROME_VERSION;
#  e.g. google-chrome-stable=53.0.2785.101-1
#       google-chrome-beta=53.0.2785.92-1
#       google-chrome-unstable=54.0.2840.14-1
#       latest (equivalent to google-chrome-stable)
#       google-chrome-beta  (pull latest beta)
#============================================
ARG CHROME_VERSION=""google-chrome-stable""
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - 

RUN echo ""deb http://dl.google.com/linux/chrome/deb/ stable main"" >> /etc/apt/sources.list.d/google-chrome.list 

RUN apt-get update -qqy \
  && apt-get -qqy install \
    google-chrome-stable \
  && rm /etc/apt/sources.list.d/google-chrome.list \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/*

#==================
# Chrome webdriver
#==================
ARG CHROME_DRIVER_VERSION=2.25
RUN wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip \
  && rm -rf /opt/selenium/chromedriver \
  && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \
  && rm /tmp/chromedriver_linux64.zip \
  && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CHROME_DRIVER_VERSION \
  && chmod 755 /opt/selenium/chromedriver-$CHROME_DRIVER_VERSION \
  && ln -fs /opt/selenium/chromedriver-$CHROME_DRIVER_VERSION /usr/bin/chromedriver

#========================
# Selenium Configuration
#========================
ENV NODE_MAX_INSTANCES 1
ENV NODE_MAX_SESSION 1
ENV NODE_REGISTER_CYCLE 5000
COPY generate_config /opt/selenium/generate_config
RUN chmod +x /opt/selenium/generate_config

#=================================
# Chrome Launch Script Modication
#=================================
COPY chrome_launcher.sh /opt/google/chrome/google-chrome
RUN chmod +x /opt/google/chrome/google-chrome

RUN chown -R seluser:seluser /opt/selenium

USER seluser
# Following line fixes
# https://github.com/SeleniumHQ/docker-selenium/issues/87
ENV DBUS_SESSION_BUS_ADDRESS=/dev/null
",
2293,4b1493cd957bb1fafbd455a74c86feff77ffa092,chore(deps): update telemark/docker-node-unoconv docker tag to v10.20.1,"chore(deps): update telemark/docker-node-unoconv docker tag to v10.20.1
","FROM telemark/docker-node-unoconv:10.14.0

#### Begin setup ####

# Bundle app source
COPY . /src

# Change working directory
WORKDIR /src

# Install dependencies
RUN npm install --production

# Env variables
ENV SERVER_PORT 3000
ENV PAYLOAD_MAX_SIZE 1048576
ENV PAYLOAD_TIMEOUT 120000
ENV TIMEOUT_SERVER 120000
ENV TIMEOUT_SOCKET 140000

# Expose 3000
EXPOSE 3000

# Startup
ENTRYPOINT /usr/bin/unoconv --listener --server=0.0.0.0 --port=2002 & node standalone.js",
180,982bbb0d767fca8a632c42bc6e67792a2084bfc8,Bumped source to 20220517-6d76d5b,"Bumped source to 20220517-6d76d5b
","FROM ghcr.io/dock0/arch:20220517-0fd01f7
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220517-6d76d5b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2314,fe2e2227f3cf67c19ba640439d7ab68e93d407b3,Build fixes,"Build fixes
","FROM golang:1.7.4

# Dependencies
RUN apt-get update && apt-get install --no-install-recommends -y build-essential \
    zlib1g-dev pkg-config

# Install libturbo-jpeg 
ADD https://sourceforge.net/projects/libjpeg-turbo/files/1.5.1/libjpeg-turbo-official_1.5.1_amd64.deb/download /tmp/libjpeg-turbo-official_1.5.1_amd64.deb
RUN cd /tmp && dpkg -i /tmp/libjpeg-turbo-official_1.5.1_amd64.deb && \
    echo /opt/libjpeg-turbo/lib64 > /etc/ld.so.conf.d/libjpeg-turbo.conf && ldconfig

# Install libpng 
ADD https://downloads.sourceforge.net/project/libpng/libpng16/1.6.26/libpng-1.6.26.tar.gz /tmp/
RUN cd /tmp && tar -zxvf libpng-1.6.26.tar.gz && cd libpng-1.6.26 && \
    ./configure --prefix=/usr && make && make install && ldconfig

# Install ImageMagick v7
ADD https://www.imagemagick.org/download/ImageMagick-7.0.3-9.tar.xz /tmp/
RUN cd /tmp && tar -xvf ImageMagick-7.0.3-9.tar.xz && cd ImageMagick-7.0.3-9 && \
    ./configure --prefix=/usr \
                --enable-shared \
                --disable-openmp \
                --disable-opencl \
                --without-x \
                --with-quantum-depth=8 \
                --with-magick-plus-plus=no \
                --with-jpeg=yes \
                --with-png=yes \
                --with-jp2=yes \
                LIBS=""-ljpeg -lturbojpeg"" \
                LDFLAGS=""-L/opt/libjpeg-turbo/lib64"" \
                CFLAGS=""-I/opt/libjpeg-turbo/include"" \
                CPPFLAGS=""-I/opt/libjpeg-turbo/include"" \
    && make && make install && ldconfig

# Imgry
ADD . /go/src/github.com/pressly/imgry
WORKDIR /go/src/github.com/pressly/imgry
RUN make dist
RUN mv bin/imgry-server /bin/imgry-server

EXPOSE 4446

CMD [""/bin/imgry-server"", ""-config=/etc/imgry.conf""]
",
173,92b65e2462958ca7e184988255033873c670cfd9,fix slack,"fix slack

Signed-off-by: Jessica Frazelle <e0d1a862d8f31af605ecef8c92857b8938ba622e@docker.com>
","# Run slack desktop app in a container
#
# docker run --rm -it \
#-v /etc/localtime:/etc/localtime:ro \
#-v /tmp/.X11-unix:/tmp/.X11-unix \
#-e DISPLAY=unix$DISPLAY \
#--device /dev/snd:/dev/snd \
#--name slack \
#jess/slack

FROM debian:sid
MAINTAINER Jessie Frazelle <jess@linux.com>

RUN apt-get update && apt-get install -y \
apt-transport-https \
ca-certificates \
curl \
gconf2 \
gconf-service \
gvfs-bin \
libasound2 \
libgtk2.0-0 \
libnotify4 \
libnss3 \
libxss1 \
libxtst6 \
locales \
python-minimal \
xdg-utils \
--no-install-recommends \
&& echo ""en_US.UTF-8 UTF-8"" >> /etc/locale.gen \
&& locale-gen en_US.utf8 \
&& /usr/sbin/update-locale LANG=en_US.UTF-8 \
&& curl -sSL https://slack-ssb-updates.global.ssl.fastly.net/linux_releases/slack-desktop-1.2.2-amd64.deb > /tmp/slack-desktop.deb \
&& dpkg -i /tmp/slack-desktop.deb \
&& rm -rf /var/lib/apt/lists/* \
&& rm -rf /tmp/slack-desktop.deb

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV HOME /home/user
RUN useradd --create-home --home-dir $HOME user \
&& chown -R user:user $HOME

USER user

ENTRYPOINT [""slack""]
","# Run slack desktop app in a container
#
# docker run --rm -it \
#-v /etc/localtime:/etc/localtime:ro \
#-v /tmp/.X11-unix:/tmp/.X11-unix \
#-e DISPLAY=unix$DISPLAY \
#--device /dev/snd:/dev/snd \
#--name slack \
#jess/slack

FROM debian:sid
MAINTAINER Jessie Frazelle <jess@linux.com>

RUN apt-get update && apt-get install -y \
apt-transport-https \
ca-certificates \
curl \
gconf2 \
gconf-service \
gvfs-bin \
hunspell-en-us \
libasound2 \
libgtk2.0-0 \
libnotify4 \
libnss3 \
libxss1 \
libxtst6 \
locales \
python-minimal \
xdg-utils \
--no-install-recommends \
&& echo ""en_US.UTF-8 UTF-8"" >> /etc/locale.gen \
&& locale-gen en_US.utf8 \
&& /usr/sbin/update-locale LANG=en_US.UTF-8 \
&& curl -sSL https://slack-ssb-updates.global.ssl.fastly.net/linux_releases/slack-desktop-1.2.2-amd64.deb > /tmp/slack-desktop.deb \
&& dpkg -i /tmp/slack-desktop.deb \
&& rm -rf /var/lib/apt/lists/* \
&& rm -rf /tmp/slack-desktop.deb

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV HOME /home/user
RUN useradd --create-home --home-dir $HOME user \
&& chown -R user:user $HOME

USER user

ENTRYPOINT [""slack""]
"
2236,b05d85ff52200f905593cd186ad8264ef54cca2e,Fixed tabs/spaces and added comment,"Fixed tabs/spaces and added comment
","ARG BASE_TAG=latest
ARG TENSORFLOW_VERSION=2.1.0

FROM gcr.io/kaggle-images/python-tensorflow-whl:${TENSORFLOW_VERSION}-py37-2 as tensorflow_whl
FROM gcr.io/deeplearning-platform-release/base-cpu:${BASE_TAG}

ADD clean-layer.sh  /tmp/clean-layer.sh
ADD patches/nbconvert-extensions.tpl /opt/kaggle/nbconvert-extensions.tpl

# This is necessary for apt to access HTTPS sources
RUN apt-get update && \
    apt-get install apt-transport-https && \
    /tmp/clean-layer.sh

    # Use a fixed apt-get repo to stop intermittent failures due to flaky httpredir connections,
    # as described by Lionel Chan at http://stackoverflow.com/a/37426929/5881346
RUN sed -i ""s/httpredir.debian.org/debian.uchicago.edu/"" /etc/apt/sources.list && \
    apt-get update && \
    # Needed by vowpalwabbit & lightGBM (GPU build).
    # https://github.com/VowpalWabbit/vowpal_wabbit/wiki/Python#installing
    # https://lightgbm.readthedocs.io/en/latest/GPU-Tutorial.html#build-lightgbm
    apt-get install -y build-essential unzip cmake && \
    apt-get install -y libboost-dev libboost-program-options-dev libboost-system-dev libboost-thread-dev libboost-math-dev libboost-test-dev libboost-python-dev libboost-filesystem-dev zlib1g-dev && \
    pip install --upgrade pip && \
    # enum34 is a backport of the Python 3.4 enum class to Python < 3.4.
    # No need since we are using Python 3.7. This is causing errors for packages
    # expecting the 3.7 version of enum. e.g. AttributeError: module 'enum' has no attribute 'IntFlag'
    pip uninstall -y enum34 && \
    /tmp/clean-layer.sh

# Make sure the dynamic linker finds the right libstdc++
ENV LD_LIBRARY_PATH=/opt/conda/lib
# b/128333086: Set PROJ_LIB to points to the proj4 cartographic library.
ENV PROJ_LIB=/opt/conda/share/proj

# Install conda packages not available on pip.
# When using pip in a conda environment, conda commands should be ran first and then
# the remaining pip commands: https://www.anaconda.com/using-pip-in-a-conda-environment/
RUN conda install -c conda-forge matplotlib basemap cartopy python-igraph imagemagick pysal && \
    # b/142337634#comment22 pin required to avoid torchaudio downgrade.
    conda install -c pytorch pytorch torchvision ""torchaudio>=0.4.0"" cpuonly && \
conda install -c conda-forge --no-deps pixman==0.34 && \
    /tmp/clean-layer.sh

# The anaconda base image includes outdated versions of these packages. Update them to include the latest version.
# b/150498764 distributed 2.11.0 fails at import while trying to reach out to 8.8.8.8 since the network is disabled in our hermetic tests.
RUN pip install distributed==2.10.0 && \
    pip install seaborn python-dateutil dask && \
    pip install pyyaml joblib pytagcloud husl geopy ml_metrics mne pyshp && \
    pip install pandas && \
    # Install h2o from source.
    # Use `conda install -c h2oai h2o` once Python 3.7 version is released to conda.
    apt-get install -y default-jre-headless && \
    pip install -f https://h2o-release.s3.amazonaws.com/h2o/latest_stable_Py.html h2o && \
    /tmp/clean-layer.sh

# Install tensorflow from a pre-built wheel
COPY --from=tensorflow_whl /tmp/tensorflow_cpu/*.whl /tmp/tensorflow_cpu/
RUN pip install /tmp/tensorflow_cpu/tensorflow*.whl && \
    rm -rf /tmp/tensorflow_cpu && \
    /tmp/clean-layer.sh

RUN apt-get install -y libfreetype6-dev && \
    apt-get install -y libglib2.0-0 libxext6 libsm6 libxrender1 libfontconfig1 --fix-missing && \
    pip install gensim && \
    pip install textblob && \
    pip install wordcloud && \
    pip install xgboost && \
    # Pinned to match GPU version. Update version together.
    pip install lightgbm==2.3.1 && \
    pip install git+git://github.com/Lasagne/Lasagne.git && \
    pip install keras && \
    pip install flake8 && \
    #neon
    cd /usr/local/src && \
    git clone --depth 1 https://github.com/NervanaSystems/neon.git && \
    cd neon && pip install . && \
    #nolearn
    pip install nolearn && \
    pip install Theano && \
    pip install pybrain && \
    pip install python-Levenshtein && \
    pip install hep_ml && \
    # chainer
    pip install chainer && \
    # NLTK Project datasets
    mkdir -p /usr/share/nltk_data && \
    # NLTK Downloader no longer continues smoothly after an error, so we explicitly list
    # the corpuses that work
    # ""yes | ..."" answers yes to the retry prompt in case of an error. See b/133762095.
    yes | python -m nltk.downloader -d /usr/share/nltk_data abc alpino averaged_perceptron_tagger \
    basque_grammars biocreative_ppi bllip_wsj_no_aux \
    book_grammars brown brown_tei cess_cat cess_esp chat80 city_database cmudict \
    comtrans conll2000 conll2002 conll2007 crubadan dependency_treebank \
    europarl_raw floresta gazetteers genesis gutenberg \
    ieer inaugural indian jeita kimmo knbc large_grammars lin_thesaurus mac_morpho machado \
    masc_tagged maxent_ne_chunker maxent_treebank_pos_tagger moses_sample movie_reviews \
    mte_teip5 names nps_chat omw opinion_lexicon paradigms \
    pil pl196x porter_test ppattach problem_reports product_reviews_1 product_reviews_2 propbank \
    pros_cons ptb punkt qc reuters rslp rte sample_grammars semcor senseval sentence_polarity \
    sentiwordnet shakespeare sinica_treebank smultron snowball_data spanish_grammars \
    state_union stopwords subjectivity swadesh switchboard tagsets timit toolbox treebank \
    twitter_samples udhr2 udhr unicode_samples universal_tagset universal_treebanks_v20 \
    vader_lexicon verbnet webtext word2vec_sample wordnet wordnet_ic words ycoe && \
    # Stop-words
    pip install stop-words && \
    pip install scikit-image && \
    /tmp/clean-layer.sh

RUN pip install ibis-framework && \
    pip install mxnet && \
    pip install gluonnlp && \
    pip install gluoncv && \    
    /tmp/clean-layer.sh

# scikit-learn dependencies
RUN pip install scipy && \
    pip install scikit-learn && \
    # HDF5 support
    pip install h5py && \
    pip install biopython && \
    # PUDB, for local debugging convenience
    pip install pudb && \
    pip install imbalanced-learn && \
    # Convex Optimization library
    # Latest version fails to install, see https://github.com/cvxopt/cvxopt/issues/77
    #    and https://github.com/cvxopt/cvxopt/issues/80
    # pip install cvxopt && \
    # Profiling and other utilities
    pip install line_profiler && \
    pip install orderedmultidict && \
    pip install smhasher && \
    pip install bokeh && \
    pip install numba && \
    pip install datashader && \
    # Boruta (python implementation)
    pip install Boruta && \
    apt-get install -y graphviz && pip install graphviz && \
    # Pandoc is a dependency of deap
    apt-get install -y pandoc && \
    pip install git+git://github.com/scikit-learn-contrib/py-earth.git@issue191 && \
    pip install essentia && \
    /tmp/clean-layer.sh

# vtk with dependencies
RUN apt-get install -y libgl1-mesa-glx && \
    pip install vtk && \
    # xvfbwrapper with dependencies
    apt-get install -y xvfb && \
    pip install xvfbwrapper && \
    /tmp/clean-layer.sh

RUN pip install mpld3 && \
    pip install mplleaflet && \
    pip install gpxpy && \
    pip install arrow && \
    pip install nilearn && \
    pip install nibabel && \
    pip install pronouncing && \
    pip install markovify && \
    pip install imgaug && \
    pip install preprocessing && \
    pip install Baker && \
    pip install path.py && \
    pip install Geohash && \
    # https://github.com/vinsci/geohash/issues/4
    sed -i -- 's/geohash/.geohash/g' /opt/conda/lib/python3.7/site-packages/Geohash/__init__.py && \
    pip install deap && \
    pip install tpot && \
    pip install scikit-optimize && \
    pip install haversine && \
    pip install toolz cytoolz && \
    pip install sacred && \
    pip install plotly && \
    pip install hyperopt && \
    pip install fitter && \
    pip install langid && \
    # Delorean. Useful for dealing with datetime
    pip install delorean && \
    pip install trueskill && \
    pip install heamy && \
    # Useful data exploration libraries (for missing data and generating reports)
    pip install missingno && \
    pip install pandas-profiling && \
    pip install s2sphere && \
    pip install git+https://github.com/fmfn/BayesianOptimization.git && \
    pip install matplotlib-venn && \
    pip install pyldavis && \
    pip install mlxtend && \
    pip install altair && \
    pip install pystan && \
    pip install ImageHash && \
    pip install ecos && \
    pip install CVXcanon && \
    pip install fancyimpute && \
    pip install pymc3 && \
    pip install tifffile && \
    pip install spectral && \
    pip install descartes && \
    pip install geojson && \
    pip install terminalplot && \
    pip install pydicom && \
    pip install wavio && \
    pip install SimpleITK && \
    pip install hmmlearn && \
    pip install bayespy && \
    pip install gplearn && \
    pip install PyAstronomy && \
    pip install squarify && \
    pip install fuzzywuzzy && \
    pip install python-louvain && \
    pip install pyexcel-ods && \
    pip install sklearn-pandas && \
    pip install stemming && \
    # b/148383434 remove pip install for holidays once fbprophet is compatible with latest version of holidays.
    pip install holidays==0.9.12 && \
    pip install fbprophet && \
    pip install holoviews && \
    # 1.6.2 is not currently supported by the version of matplotlib we are using.
    # See other comments about why matplotlib is pinned.
    pip install geoviews==1.6.1 && \
    pip install hypertools && \
    pip install py_stringsimjoin && \
    pip install nibabel && \
    pip install mlens && \
    pip install scikit-multilearn && \
    pip install cleverhans && \
    pip install leven && \
    pip install catboost && \
    # fastFM doesn't support Python 3.7 yet: https://github.com/ibayer/fastFM/issues/151
    # pip install fastFM && \
    pip install lightfm && \
    pip install folium && \
    pip install scikit-plot && \
    # dipy requires the optional fury dependency for visualizations.
    pip install fury dipy && \
    # plotnine 0.5 is depending on matplotlib >= 3.0 which is not compatible with basemap.
    # once basemap support matplotlib, we can unpin this package.
    pip install plotnine==0.4.0 && \
    pip install scikit-surprise && \
    pip install pymongo && \
    pip install geoplot && \
    pip install eli5 && \
    pip install implicit && \
    pip install dask-ml[xgboost] && \
    /tmp/clean-layer.sh

RUN pip install kmeans-smote --no-dependencies && \
    # Add google PAIR-code Facets
    cd /opt/ && git clone https://github.com/PAIR-code/facets && cd facets/ && jupyter nbextension install facets-dist/ --user && \
    export PYTHONPATH=$PYTHONPATH:/opt/facets/facets_overview/python/ && \
    pip install tensorpack && \
    pip install pycountry && pip install iso3166 && \
    pip install pydash && \
    pip install kmodes --no-dependencies && \
    pip install librosa && \
    pip install polyglot && \
    pip install mmh3 && \
    pip install fbpca && \
    pip install sentencepiece && \
    pip install cufflinks && \
    pip install lime && \
    pip install memory_profiler && \
    /tmp/clean-layer.sh

# install cython & cysignals before pyfasttext
RUN pip install --upgrade cython && \
    pip install --upgrade cysignals && \
    pip install pyfasttext && \
    # ktext has an explicit dependency on Keras 2.2.4 which is not
    # compatible with TensorFlow 2.0 (support was added in Keras 2.3.0).
    # Add the package back once it is fixed upstream.
    # pip install ktext && \
    pip install fasttext && \
    apt-get install -y libhunspell-dev && pip install hunspell && \
    pip install annoy && \
    # Need to use CountEncoder from category_encoders before it's officially released
    pip install git+https://github.com/scikit-learn-contrib/categorical-encoding.git && \
    pip install google-cloud-automl && \
    # Newer version crashes (latest = 1.14.0) when running tensorflow.
    # python -c ""from google.cloud import bigquery; import tensorflow"". This flow is common because bigquery is imported in kaggle_gcp.py
    # which is loaded at startup.
    pip install google-cloud-bigquery==1.12.1 && \
    pip install google-cloud-storage && \
    pip install ortools && \
    pip install scattertext && \
    # Pandas data reader
    pip install pandas-datareader && \
    pip install wordsegment && \
    pip install pyahocorasick && \
    pip install wordbatch && \
    pip install emoji && \
    # Add Japanese morphological analysis engine
    pip install janome && \
    pip install wfdb && \
    pip install vecstack && \
    # Doesn't support Python 3.7 yet. Last release on pypi is from 2017.
    # Add back once this PR is released: https://github.com/scikit-learn-contrib/lightning/pull/133
    # pip install sklearn-contrib-lightning && \
    # yellowbrick machine learning visualization library
    pip install yellowbrick && \
    pip install mlcrate && \
    /tmp/clean-layer.sh

RUN pip install bcolz && \
    pip install bleach && \
    pip install certifi && \
    pip install cycler && \
    pip install decorator && \
    pip install entrypoints && \
    pip install html5lib && \
    # Latest version breaks nbconvert: https://github.com/ipython/ipykernel/issues/422
    pip install ipykernel==5.1.1 && \
    pip install ipython && \
    pip install ipython-genutils && \
    pip install ipywidgets && \
    pip install isoweek && \
    pip install jedi && \
    pip install Jinja2 && \
    pip install jsonschema && \
    pip install jupyter && \
    pip install jupyter-client && \
    pip install jupyter-console && \
    pip install jupyter-core && \
    pip install MarkupSafe && \
    pip install mistune && \
    pip install nbconvert && \
    pip install nbformat && \
    pip install notebook==5.5.0 && \
    pip install olefile && \
    pip install opencv-python && \
    pip install pandas_summary && \
    pip install pandocfilters && \
    pip install pexpect && \
    pip install pickleshare && \
    pip install Pillow && \
    # Install openslide and its python binding
    apt-get install -y openslide-tools && \
    # b/152402322 install latest from pip once is in: https://github.com/openslide/openslide-python/pull/76
    pip install git+git://github.com/rosbo/openslide-python.git@fix-setup && \
    pip install ptyprocess && \
    pip install Pygments && \
    pip install pyparsing && \
    pip install pytz && \
    pip install PyYAML && \
    pip install pyzmq && \
    pip install qtconsole && \
    pip install six && \
    pip install terminado && \
    # Latest version (6.0) of tornado breaks Jupyter notebook:
    # https://github.com/jupyter/notebook/issues/4439
    pip install tornado==5.0.2 && \
    pip install tqdm && \
    pip install traitlets && \
    pip install wcwidth && \
    pip install webencodings && \
    pip install widgetsnbextension && \
    pip install pyarrow && \
    pip install feather-format && \
    pip install fastai && \
    pip install torchtext && \
    pip install allennlp && \
    # b/149359379 remove once allennlp 1.0 is released which won't cause a spacy downgrade.
    pip install spacy==2.2.3 && python -m spacy download en && python -m spacy download en_core_web_lg && \
    /tmp/clean-layer.sh

    ###########
    #
    #      NEW CONTRIBUTORS:
    # Please add new pip/apt installs in this block. Don't forget a ""&& \"" at the end
    # of all non-final lines. Thanks!
    #
    ###########

RUN pip install flashtext && \
    pip install wandb && \
    pip install marisa-trie && \
    pip install pyemd && \
    pip install pyupset && \
    pip install pympler && \
    pip install s3fs && \
    pip install featuretools && \
    pip install -e git+https://github.com/SohierDane/BigQuery_Helper#egg=bq_helper && \
    pip install hpsklearn && \
    pip install git+https://github.com/Kaggle/learntools && \
    pip install kmapper && \
    pip install shap && \
    pip install ray && \
    pip install gym && \
    pip install tensorforce && \
    pip install pyarabic && \
    pip install conx && \
    pip install pandasql && \
    pip install tensorflow_hub && \
    pip install jieba  && \
    pip install git+https://github.com/SauceCat/PDPbox && \
    pip install ggplot && \
    pip install cesium && \
    pip install rgf_python && \
    # b/145404107: latest version force specific version of numpy and torch.
    pip install pytext-nlp==0.1.2 && \
    pip install tsfresh && \
    pip install pykalman && \
    pip install optuna && \
    pip install chainercv && \
    pip install chainer-chemistry && \
    pip install plotly_express && \
    pip install albumentations && \
    pip install catalyst && \
    # b/145133331: latest version is causing issue with gcloud.
    pip install rtree==0.8.3 && \
    # b/145133331 osmnx 0.11 requires rtree >= 0.9 which is causing issue with gcloud.
    pip install osmnx==0.10 && \
    apt-get -y install libspatialindex-dev && \
    pip install pytorch-ignite && \
    pip install qgrid && \
    pip install bqplot && \
    pip install earthengine-api && \
    pip install transformers && \
    pip install dlib && \
    pip install kaggle-environments && \
    # b/149905611 The geopandas tests are broken with the version 0.7.0
    pip install geopandas==0.6.3 && \
    pip install nnabla && \
    pip install vowpalwabbit && \
    /tmp/clean-layer.sh

# Tesseract and some associated utility packages
RUN apt-get install tesseract-ocr -y && \
    pip install pytesseract && \
    pip install wand==0.5.3 && \
    pip install pdf2image && \
    pip install PyPDF && \
    pip install pyocr && \
    /tmp/clean-layer.sh
ENV TESSERACT_PATH=/usr/bin/tesseract

# For Facets
ENV PYTHONPATH=$PYTHONPATH:/opt/facets/facets_overview/python/
# For Theano with MKL
ENV MKL_THREADING_LAYER=GNU

# Temporary fixes and patches
    # Temporary patch for Dask getting downgraded, which breaks Keras
RUN pip install --upgrade dask && \
    # Stop jupyter nbconvert trying to rewrite its folder hierarchy
    mkdir -p /root/.jupyter && touch /root/.jupyter/jupyter_nbconvert_config.py && touch /root/.jupyter/migrated && \
    mkdir -p /.jupyter && touch /.jupyter/jupyter_nbconvert_config.py && touch /.jupyter/migrated && \
    # Stop Matplotlib printing junk to the console on first load
    sed -i ""s/^.*Matplotlib is building the font cache using fc-list.*$/# Warning removed by Kaggle/g"" /opt/conda/lib/python3.7/site-packages/matplotlib/font_manager.py && \
    # Make matplotlib output in Jupyter notebooks display correctly
    mkdir -p /etc/ipython/ && echo ""c = get_config(); c.IPKernelApp.matplotlib = 'inline'"" > /etc/ipython/ipython_config.py && \
    /tmp/clean-layer.sh

# gcloud SDK https://cloud.google.com/sdk/docs/quickstart-debian-ubuntu
RUN echo ""deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main"" \
    | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
    apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
    apt-get update -y && apt-get install google-cloud-sdk -y && \
    /tmp/clean-layer.sh

# Add BigQuery client proxy settings
ENV PYTHONUSERBASE ""/root/.local""
ADD patches/kaggle_gcp.py /root/.local/lib/python3.7/site-packages/kaggle_gcp.py
ADD patches/kaggle_secrets.py /root/.local/lib/python3.7/site-packages/kaggle_secrets.py
ADD patches/kaggle_web_client.py /root/.local/lib/python3.7/site-packages/kaggle_web_client.py
ADD patches/kaggle_datasets.py /root/.local/lib/python3.7/site-packages/kaggle_datasets.py
ADD patches/log.py /root/.local/lib/python3.7/site-packages/log.py
ADD patches/sitecustomize.py /root/.local/lib/python3.7/site-packages/sitecustomize.py
# Override default imagemagick policies
ADD patches/imagemagick-policy.xml /etc/ImageMagick-6/policy.xml

# TensorBoard Jupyter extension. Should be replaced with TensorBoard's provided magic once we have
# worker tunneling support in place.
# b/139212522 re-enable TensorBoard once solution for slowdown is implemented.
# ENV JUPYTER_CONFIG_DIR ""/root/.jupyter/""
# RUN pip install jupyter_tensorboard && \
#     jupyter serverextension enable jupyter_tensorboard && \
#     jupyter tensorboard enable
# ADD patches/tensorboard/notebook.py /opt/conda/lib/python3.7/site-packages/tensorboard/notebook.py

# Set backend for matplotlib
ENV MPLBACKEND ""agg""

# We need to redefine TENSORFLOW_VERSION here to get the default ARG value defined above the FROM instruction.
# See: https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG TENSORFLOW_VERSION
ARG GIT_COMMIT=unknown
ARG BUILD_DATE=unknown

LABEL git-commit=$GIT_COMMIT
LABEL build-date=$BUILD_DATE
LABEL tensorflow-version=$TENSORFLOW_VERSION
# Used in the Jenkins `Docker GPU Build` step to restrict the images being pruned.
LABEL kaggle-lang=python

# Correlate current release with the git hash inside the kernel editor by running `!cat /etc/git_commit`.
RUN echo ""$GIT_COMMIT"" > /etc/git_commit && echo ""$BUILD_DATE"" > /etc/build_date
",
338,9fa96e9d0b5fc52a8fd49356064c560025e1bb11,remove ADD statement adding a fixed tnsnames.ora,"remove ADD statement adding a fixed tnsnames.ora
","FROM fabrizzio/docker-php:latest
MAINTAINER Dieter Provoost <dieter.provoost@marlon.be>

# Oracle instantclient
ADD oracle/instantclient-basic-linux.x64-11.2.0.4.0.zip /tmp/instantclient-basic-linux.x64-11.2.0.4.0.zip
ADD oracle/instantclient-sdk-linux.x64-11.2.0.4.0.zip /tmp/instantclient-sdk-linux.x64-11.2.0.4.0.zip
ADD oracle/instantclient-sqlplus-linux.x64-11.2.0.4.0.zip /tmp/instantclient-sqlplus-linux.x64-11.2.0.4.0.zip

RUN apt-get install -y unzip

RUN unzip /tmp/instantclient-basic-linux.x64-11.2.0.4.0.zip -d /usr/local/
RUN unzip /tmp/instantclient-sdk-linux.x64-11.2.0.4.0.zip -d /usr/local/
RUN unzip /tmp/instantclient-sqlplus-linux.x64-11.2.0.4.0.zip -d /usr/local/
RUN ln -s /usr/local/instantclient_11_2 /usr/local/instantclient
RUN ln -s /usr/local/instantclient/libclntsh.so.11.1 /usr/local/instantclient/libclntsh.so
RUN ln -s /usr/local/instantclient/sqlplus /usr/bin/sqlplus

RUN apt-get install libaio-dev -y
RUN echo 'instantclient,/usr/local/instantclient' | pecl install oci8

ADD oracle/tnsnames.ora /etc/tnsnames.ora

ADD php/oci8.ini /etc/php5/cli/conf.d/30-oci8.ini

RUN apt-get clean -y
","FROM fabrizzio/docker-php:latest
MAINTAINER Dieter Provoost <dieter.provoost@marlon.be>

# Oracle instantclient
ADD oracle/instantclient-basic-linux.x64-11.2.0.4.0.zip /tmp/instantclient-basic-linux.x64-11.2.0.4.0.zip
ADD oracle/instantclient-sdk-linux.x64-11.2.0.4.0.zip /tmp/instantclient-sdk-linux.x64-11.2.0.4.0.zip
ADD oracle/instantclient-sqlplus-linux.x64-11.2.0.4.0.zip /tmp/instantclient-sqlplus-linux.x64-11.2.0.4.0.zip

RUN apt-get install -y unzip

RUN unzip /tmp/instantclient-basic-linux.x64-11.2.0.4.0.zip -d /usr/local/
RUN unzip /tmp/instantclient-sdk-linux.x64-11.2.0.4.0.zip -d /usr/local/
RUN unzip /tmp/instantclient-sqlplus-linux.x64-11.2.0.4.0.zip -d /usr/local/
RUN ln -s /usr/local/instantclient_11_2 /usr/local/instantclient
RUN ln -s /usr/local/instantclient/libclntsh.so.11.1 /usr/local/instantclient/libclntsh.so
RUN ln -s /usr/local/instantclient/sqlplus /usr/bin/sqlplus

RUN apt-get install libaio-dev -y
RUN echo 'instantclient,/usr/local/instantclient' | pecl install oci8

ADD php/oci8.ini /etc/php5/cli/conf.d/30-oci8.ini

RUN apt-get clean -y
"
2219,0248a6d38985b3648d9add34190d66c9f1071032,Bumped source to 20201026-7fc9518,"Bumped source to 20201026-7fc9518
","FROM docker.pkg.github.com/dock0/arch/arch:20201026-758e489
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
2244,4ef6f70df85a1d477f0a2031d19587d3ed90b9da,Bumped source to 20200429-324843c,"Bumped source to 20200429-324843c
","FROM docker.pkg.github.com/dock0/arch/arch:20200429-730c977
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
2213,7272571e69f7cdbe4d775856736c4e3acad9ae8e,Bumped source to 20201228-749f4f7,"Bumped source to 20201228-749f4f7
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201228-772318f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
256,133a8afa9f4b31c7692959c4650249ab969c10fe,python-nginx: Run upgrades after update,"python-nginx: Run upgrades after update
","# nginx
#
# (See README.md for instructions)

FROM       debian:jessie
MAINTAINER Andrey Petrov ""andrey.petrov@shazow.net""

RUN apt-get update
RUN apt-get install -y \
    ca-certificates \
    nginx \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

COPY conf.d/* /etc/nginx/conf.d/

EXPOSE 80 443
VOLUME  [""/var/cache/nginx"", ""/var/www"", ""/etc/nginx/certs"", ""/etc/nginx/sites-enabled""]
CMD     [""nginx"", ""-g"", ""daemon off;""]
","# nginx
#
# (See README.md for instructions)

FROM       debian:jessie
MAINTAINER Andrey Petrov ""andrey.petrov@shazow.net""

RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y \
    ca-certificates \
    nginx \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

COPY conf.d/* /etc/nginx/conf.d/

EXPOSE 80 443
VOLUME  [""/var/cache/nginx"", ""/var/www"", ""/etc/nginx/certs"", ""/etc/nginx/sites-enabled""]
CMD     [""nginx"", ""-g"", ""daemon off;""]
"
2311,ffafb7c25b749b72940469b9be8ad3737ff34399,Update Dockerfile,"Update Dockerfile

removed an update too much","FROM ubuntu
# Bro 2.4beta 
MAINTAINER Daniel Guerra <daniel.guerra69@gmail.com>

#prequisits
RUN apt-get update && DEBIAN_FRONTEND=noninteractive
#RUN apt-get -y upgrade && DEBIAN_FRONTEND=noninteractive 
RUN apt-get update && apt-get -y  install libclick-0.4-dev ocl-icd-opencl-dev libboost-dev doxygen git libcurl4-gnutls-dev libgoogle-perftools-dev libgeoip-dev geoip-database rsync openssh-server pwgen cmake make gcc g++ flex bison libpcap-dev libssl-dev python-dev swig zlib1g-dev

#prequisits from source

#actor framework caf to enable broker
WORKDIR /tmp
RUN git clone --recursive https://github.com/actor-framework/actor-framework.git
WORKDIR /tmp/actor-framework
RUN ./configure
RUN make
RUN make install

# ipsumdump
WORKDIR /tmp
RUN git clone —recursive https://github.com/kohler/ipsumdump.git
WORKDIR /tmp/ipsumdump
RUN ./configure
RUN make
RUN make install


#rocksdb
WORKDIR /tmp
RUN git clone --recursive https://github.com/facebook/rocksdb.git
WORKDIR /tmp/rocksdb
RUN make
RUN make install

#bro 2.4beta
WORKDIR /tmp
RUN wget https://www.bro.org/downloads/beta/bro-2.4-beta.tar.gz
RUN tar xvf bro-2.4-beta.tar.gz
WORKDIR /tmp/bro-2.4-beta
RUN ./configure --enable-broker
RUN make
RUN make install
WORKDIR /tmp/bro-2.4-beta/aux/plugins/elasticsearch
RUN ./configure
RUN make
RUN make install

#clean the dev packages 
RUN apt-get -y remove ocl-icd-opencl-dev libboost-dev libcurl4-gnutls-dev libgeoip-dev cmake make gcc g++ flex bison libssl-dev python-dev swig zlib1g-dev
RUN apt-get -y autoremove

#cleanup apt & build action
WORKDIR /tmp
RUN rm -rf *

WORKDIR /var/cache/apt
RUN rm -rf *

WORKDIR /var/log
RUN rm -rf *

#prepare ssh dir use -v my-ssh:/root/.ssh
WORKDIR /root
RUN mkdir .ssh
RUN chown 700 .ssh

#set sshd config
RUN mkdir -p /var/run/sshd && sed -i ""s/UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g"" /etc/ssh/sshd_config && sed -i ""s/UsePAM.*/UsePAM no/g"" /etc/ssh/sshd_config && sed -i ""s/PermitRootLogin.*/PermitRootLogin yes/g"" /etc/ssh/sshd_config && sed -i ""s/#AuthorizedKeysFile/AuthorizedKeysFile/g"" /etc/ssh/sshd_config

EXPOSE 22
EXPOSE 47761
EXPOSE 47762

#start sshd
CMD [“exec”,“/usr/sbin/sshd”,“-D”]
",
364,dc142718a7b8ee190e3bb4cfd302c0e127e55266,fix adduser home directory configuration,"fix adduser home directory configuration
","FROM ubuntu:trusty

MAINTAINER Jack Liu jackliu.lab@gmail.com

# setup environment
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8

# setup sources.list
RUN echo ""deb http://packages.ros.org/ros/ubuntu trusty main"" > /etc/apt/sources.list.d/ros-latest.list

# setup keys
RUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net --recv-key 0xB01FA116

# update the repository
RUN apt-get update

# install ros packages
ENV ROS_DISTRO indigo
RUN apt-get install -y ros-indigo-desktop-full=1.1.4-0*

# rosdep init
RUN rosdep init

# enables you to easily download many source trees for ROS packages with one command
RUN apt-get install -y python-rosinstall

# install additional system packages and ros packages
# update gazebo2.2 to gazebo2.2.5
RUN echo ""deb http://packages.osrfoundation.org/gazebo/ubuntu trusty main"" > /etc/apt/sources.list.d/gazebo-latest.list

RUN curl http://packages.osrfoundation.org/gazebo.key |apt-key add -

RUN apt-get update && apt-get upgrade -y gazebo2

# install essential tools
RUN apt-get install -y  bash-completion wget vim git terminator

# install additional build tool
RUN apt-get install -y build-essential gdb

# install IDE
RUN apt-get install -y mesa-common-dev libglu1-mesa-dev libfontconfig1
RUN apt-get install -y qt5-default qtcreator

# download gazebo models
RUN mkdir -p /ros-data/gazebo && cd /ros-data/gazebo
RUN hg clone https://bitbucket.org/osrf/gazebo_models
RUN chmod -R a+rwx /ros-data/gazebo && cd -

# link to root user home directory
RUN mkdir -p /root/.gazebo/ && ln -s /ros-data/gazebo/gazebo_models /root/.gazebo/models

# install ros related components
RUN apt-get install -y ros-indigo-moveit-full \
    ros-indigo-gazebo-ros-control ros-indigo-effort-controllers \
    ros-indigo-joint-state-controller ros-indigo-joint-trajectory-controller \
    ros-indigo-ros-controllers ros-indigo-ur-description


# install ssh
RUN apt-get install -y supervisor openssh-server  sudo

RUN mkdir -p /var/run/sshd
RUN echo ""ForwardX11Trusted yes"" >> /etc/ssh/ssh_config

# copy supervisord.conf file
COPY ./supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# copy entrypoint file
COPY ./ros_entrypoint.sh /

# apt-get autoclean
RUN apt-get autoclean -y \
&& apt-get autoremove -y \
&& rm -rf /var/lib/apt/lists/*


# set user ros and sudo
RUN adduser --gecos ""ROS User"" -d /home/ros --disabled-password ros
RUN usermod -a -G dialout ros
RUN echo ""ros ALL=(ALL) NOPASSWD: ALL"" > /etc/sudoers.d/99_aptget

# use user ros
USER ros

# setup ros env
RUN export HOME=/home/ros && rosdep update
RUN echo ""export QT_X11_NO_MITSHM=1"" >> /home/ros/.bashrc
RUN echo ""export HOME=/home/ros"" >> /home/ros/.bashrc
RUN echo ""source ""/opt/ros/$ROS_DISTRO/setup.bash"" >> /home/ros/.bashrc

# link to root user home directory
RUN mkdir -p /home/ros/.gazebo/ && sudo ln -s /ros-data/gazebo/gazebo_models /home/ros/.gazebo/models

RUN sudo chmod -R a+rwx /ros-data/gazebo/gazebo_models

CMD [""bash""]
ENTRYPOINT [""/ros_entrypoint.sh""]
","FROM ubuntu:trusty

MAINTAINER Jack Liu jackliu.lab@gmail.com

# setup environment
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8

# setup sources.list
RUN echo ""deb http://packages.ros.org/ros/ubuntu trusty main"" > /etc/apt/sources.list.d/ros-latest.list

# setup keys
RUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net --recv-key 0xB01FA116

# update the repository
RUN apt-get update

# install ros packages
ENV ROS_DISTRO indigo
RUN apt-get install -y ros-indigo-desktop-full=1.1.4-0*

# rosdep init
RUN rosdep init

# enables you to easily download many source trees for ROS packages with one command
RUN apt-get install -y python-rosinstall

# install additional system packages and ros packages
# update gazebo2.2 to gazebo2.2.5
RUN echo ""deb http://packages.osrfoundation.org/gazebo/ubuntu trusty main"" > /etc/apt/sources.list.d/gazebo-latest.list

RUN curl http://packages.osrfoundation.org/gazebo.key |apt-key add -

RUN apt-get update && apt-get upgrade -y gazebo2

# install essential tools
RUN apt-get install -y  bash-completion wget vim git terminator

# install additional build tool
RUN apt-get install -y build-essential gdb

# install IDE
RUN apt-get install -y mesa-common-dev libglu1-mesa-dev libfontconfig1
RUN apt-get install -y qt5-default qtcreator

# download gazebo models
RUN mkdir -p /ros-data/gazebo && cd /ros-data/gazebo
RUN hg clone https://bitbucket.org/osrf/gazebo_models
RUN chmod -R a+rwx /ros-data/gazebo && cd -

# link to root user home directory
RUN mkdir -p /root/.gazebo/ && ln -s /ros-data/gazebo/gazebo_models /root/.gazebo/models

# install ros related components
RUN apt-get install -y ros-indigo-moveit-full \
    ros-indigo-gazebo-ros-control ros-indigo-effort-controllers \
    ros-indigo-joint-state-controller ros-indigo-joint-trajectory-controller \
    ros-indigo-ros-controllers ros-indigo-ur-description


# install ssh
RUN apt-get install -y supervisor openssh-server  sudo

RUN mkdir -p /var/run/sshd
RUN echo ""ForwardX11Trusted yes"" >> /etc/ssh/ssh_config

# copy supervisord.conf file
COPY ./supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# copy entrypoint file
COPY ./ros_entrypoint.sh /

# apt-get autoclean
RUN apt-get autoclean -y \
&& apt-get autoremove -y \
&& rm -rf /var/lib/apt/lists/*


# set user ros and sudo
RUN adduser --gecos ""ROS User"" --home /home/ros --disabled-password ros
RUN usermod -a -G dialout ros
RUN echo ""ros ALL=(ALL) NOPASSWD: ALL"" > /etc/sudoers.d/99_aptget

# use user ros
USER ros

# setup ros env
RUN export HOME=/home/ros && rosdep update
RUN echo ""export QT_X11_NO_MITSHM=1"" >> /home/ros/.bashrc
RUN echo ""export HOME=/home/ros"" >> /home/ros/.bashrc
RUN echo ""source ""/opt/ros/$ROS_DISTRO/setup.bash"" >> /home/ros/.bashrc

# link to root user home directory
RUN mkdir -p /home/ros/.gazebo/ && sudo ln -s /ros-data/gazebo/gazebo_models /home/ros/.gazebo/models

RUN sudo chmod -R a+rwx /ros-data/gazebo/gazebo_models

CMD [""bash""]
ENTRYPOINT [""/ros_entrypoint.sh""]
"
352,1e7b06065d00930a5a8ce6f8e8838429a34856c5,Fix: Moved ubuntu:trusty image download to Jenkins config,"Fix: Moved ubuntu:trusty image download to Jenkins config
","FROM cgeoffroy/dockernet

ENV SON_EMU_IN_DOCKER 1

# ensure that we have the latest dockernet code base!
WORKDIR /
RUN rm -rf dockernet
RUN git clone -b dockernet-sonata https://github.com/mpeuster/dockernet.git
WORKDIR /dockernet
RUN python setup.py develop

WORKDIR /son-emu
COPY . /son-emu/

# ensure that we have the right docker image for tests available
RUN docker run --rm ubuntu:trusty

RUN cd /son-emu/ansible \
    && ansible-playbook install.yml \
    && cd /son-emu \
    && python setup.py install \
    && echo 'Done'

ENTRYPOINT [""/son-emu/utils/docker/entrypoint.sh""]
","FROM cgeoffroy/dockernet

ENV SON_EMU_IN_DOCKER 1

# ensure that we have the latest dockernet code base!
WORKDIR /
RUN rm -rf dockernet
RUN git clone -b dockernet-sonata https://github.com/mpeuster/dockernet.git
WORKDIR /dockernet
RUN python setup.py develop

WORKDIR /son-emu
COPY . /son-emu/

RUN cd /son-emu/ansible \
    && ansible-playbook install.yml \
    && cd /son-emu \
    && python setup.py install \
    && echo 'Done'

ENTRYPOINT [""/son-emu/utils/docker/entrypoint.sh""]
"
271,f37d0591f0ca7f72124dd4abb3814f1eb21e6360,Bumped source to 20200218-9526737,"Bumped source to 20200218-9526737
","FROM docker.pkg.github.com/dock0/arch/arch:20200218-c0fa6f8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20200218-9526737
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
287,3daed0466a092a5ce04924588b5ee976aebd175c,Bump alpine from 3.12.2 to 3.12.3 in /dockerfiles-builder,"Bump alpine from 3.12.2 to 3.12.3 in /dockerfiles-builder

Bumps alpine from 3.12.2 to 3.12.3.

Signed-off-by: dependabot[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@github.com>","FROM hairyhenderson/gomplate:v3.8.0-slim AS gomplate
FROM hairyhenderson/bashbrew:latest AS bashbrew
FROM docker:20.10.1 AS docker
FROM mikefarah/yq:3.4.1 AS yq

FROM alpine:3.12.2 AS runtime

LABEL org.opencontainers.image.source https://github.com/hairyhenderson/dockerfiles

RUN apk add --no-cache make bash git curl ca-certificates
COPY --from=gomplate /gomplate /bin/gomplate
COPY --from=bashbrew /bin/bashbrew /bin/bashbrew
COPY --from=docker /usr/local/bin/docker /bin/docker
COPY --from=yq /usr/bin/yq /usr/bin/yq

RUN ln -fs /bin/bash /bin/sh
","FROM hairyhenderson/gomplate:v3.8.0-slim AS gomplate
FROM hairyhenderson/bashbrew:latest AS bashbrew
FROM docker:20.10.1 AS docker
FROM mikefarah/yq:3.4.1 AS yq

FROM alpine:3.12.3 AS runtime

LABEL org.opencontainers.image.source https://github.com/hairyhenderson/dockerfiles

RUN apk add --no-cache make bash git curl ca-certificates
COPY --from=gomplate /gomplate /bin/gomplate
COPY --from=bashbrew /bin/bashbrew /bin/bashbrew
COPY --from=docker /usr/local/bin/docker /bin/docker
COPY --from=yq /usr/bin/yq /usr/bin/yq

RUN ln -fs /bin/bash /bin/sh
"
2323,7633546429f970d49c5925f1b048de48fb7bdff0,Bumped source to 20210320-6411eab,"Bumped source to 20210320-6411eab
","FROM docker.pkg.github.com/dock0/service/service:20210320-162d60a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
263,9e569c83fd152656479790a1bc4a012091bb7549,Bumped source to 20200930-c8ab90a,"Bumped source to 20200930-c8ab90a
","FROM docker.pkg.github.com/dock0/arch/arch:20200930-68d49d0
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20200930-c8ab90a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2083,139180814980d785bd9f297051e091f47bb1b67e,Bump Dockerfile to 0.6.2-375-0bd96df7,"Bump Dockerfile to 0.6.2-375-0bd96df7
","FROM stellar/base:latest

MAINTAINER Mat Schaffer <mat@stellar.org>

ENV STELLAR_CORE_VERSION 0.6.2-374-c43ad535

EXPOSE 11625
EXPOSE 11626

VOLUME /data
VOLUME /postgresql-unix-sockets
VOLUME /heka

ADD install /
RUN /install

ADD heka /heka
ADD confd /etc/confd
ADD utils /utils
ADD start /

CMD [""/start""]
",
122,742d2943c134cd2f7f2976a008c0d38eb213471b,[php5-fpm] Dockerfile CMD fix,"[php5-fpm] Dockerfile CMD fix
","FROM cravler/php5-cli
MAINTAINER Sergei Vizel <http://github.com/cravler>

# Common environment variables
ENV CONF_DIR_PHP5_FPM /etc/php5/fpm

# All our dependencies, in alphabetical order (to ease maintenance)
RUN apt-get update && apt-get install -y --no-install-recommends \
        php5-fpm && \

# Remove cache
    apt-get clean && rm -rf /var/lib/apt/lists/* && \

# Find config files and edit
    find ""$CONF_DIR_PHP5_FPM"" -type f -exec sed -ri ' \
        s|(error_log\s+=).*|\1 /proc/self/fd/2|g; \
        s|\S*(daemonize\s+=).*|\1 no|g; \
    ' '{}' ';'

ADD php5-fpm-set-env.sh /.cravler/php5-fpm-set-env.sh
ADD php5-fpm-config.sh /.cravler/php5-fpm-config.sh
ADD docker-entrypoint.sh /.cravler/entrypoint.sh

EXPOSE 9000
CMD php5-fpm -R","FROM cravler/php5-cli
MAINTAINER Sergei Vizel <http://github.com/cravler>

# Common environment variables
ENV CONF_DIR_PHP5_FPM /etc/php5/fpm

# All our dependencies, in alphabetical order (to ease maintenance)
RUN apt-get update && apt-get install -y --no-install-recommends \
        php5-fpm && \

# Remove cache
    apt-get clean && rm -rf /var/lib/apt/lists/* && \

# Find config files and edit
    find ""$CONF_DIR_PHP5_FPM"" -type f -exec sed -ri ' \
        s|(error_log\s+=).*|\1 /proc/self/fd/2|g; \
        s|\S*(daemonize\s+=).*|\1 no|g; \
    ' '{}' ';'

ADD php5-fpm-set-env.sh /.cravler/php5-fpm-set-env.sh
ADD php5-fpm-config.sh /.cravler/php5-fpm-config.sh
ADD docker-entrypoint.sh /.cravler/entrypoint.sh

EXPOSE 9000
CMD [""php5-fpm"", ""-R""]"
37,622d4c7472b7e952af30b7bab15bed8971cd0c74,Bumped source to 20200408-4392a9c,"Bumped source to 20200408-4392a9c
","FROM docker.pkg.github.com/dock0/arch/arch:20200408-c9c0516
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20200408-4392a9c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
55,874e4ab883346e599e83e5b35679c8573cc614f0,update gosu to version 1.10,"update gosu to version 1.10
","FROM datagovsg/python-spark:2.7-1.6
MAINTAINER Chris Sng <chris@data.gov.sg>

# Setup airflow
RUN pip install --no-cache-dir airflow==1.8.0 psycopg2
ENV AIRFLOW_HOME /airflow

WORKDIR ${AIRFLOW_HOME}

# Setup airflow dags path
ENV AIRFLOW_DAG ${AIRFLOW_HOME}/dags

RUN mkdir -p ${AIRFLOW_DAG}

# Install gosu
ENV GOSU_VERSION 1.7
RUN set -x \
    && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \
    && wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
    && wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true \
    && apt-get -y autoremove

ENV USER afpuser
ENV GROUP hadoop
RUN groupadd -r ""${GROUP}"" && useradd -rmg ""${GROUP}"" ""${USER}""

# Number of times the Airflow scheduler will run before it terminates (and restarts)
ENV SCHEDULER_RUNS=5
# parallelism = number of physical python processes the scheduler can run
ENV AIRFLOW_PARALLELISM=8
# dag_concurrency = the number of TIs to be allowed to run PER-dag at once
ENV AIRFLOW_DAG_CONCURRENCY=6

# Airflow uses postgres as its database, following are the examples env vars
ENV POSTGRES_HOST=localhost
ENV POSTGRES_PORT=5999
ENV POSTGRES_USER=fixme
ENV POSTGRES_PASSWORD=fixme
ENV POSTGRES_DB=airflow

# Example HDFS drop point which PySpark can use to access its datasets
ENV PIPELINE_DATA_PATH=hdfs://dsg-cluster-node01:8020/datasets/""${GROUP}""

WORKDIR ${AIRFLOW_HOME}

# Setup pipeline dependencies
COPY requirements.txt ${AIRFLOW_HOME}/requirements.txt
RUN pip install -r ""${AIRFLOW_HOME}/requirements.txt""

VOLUME ${AIRFLOW_HOME}/logs

COPY airflow.cfg ${AIRFLOW_HOME}/airflow.cfg

COPY hadoop/conf/ ${HADOOP_CONF_DIR}/
COPY dags/ ${AIRFLOW_DAG}

COPY setup_auth.py ${AIRFLOW_HOME}/setup_auth.py

COPY install_spark_packages.py ${AIRFLOW_HOME}/install_spark_packages.py
RUN gosu ""${USER}"" python install_spark_packages.py

COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]
","FROM datagovsg/python-spark:2.7-1.6
MAINTAINER Chris Sng <chris@data.gov.sg>

# Setup airflow
RUN pip install --no-cache-dir airflow==1.8.0 psycopg2
ENV AIRFLOW_HOME /airflow

WORKDIR ${AIRFLOW_HOME}

# Setup airflow dags path
ENV AIRFLOW_DAG ${AIRFLOW_HOME}/dags

RUN mkdir -p ${AIRFLOW_DAG}

# Install gosu
ENV GOSU_VERSION 1.10
RUN set -x \
    && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \
    && wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
    && wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true \
    && apt-get -y autoremove

ENV USER afpuser
ENV GROUP hadoop
RUN groupadd -r ""${GROUP}"" && useradd -rmg ""${GROUP}"" ""${USER}""

# Number of times the Airflow scheduler will run before it terminates (and restarts)
ENV SCHEDULER_RUNS=5
# parallelism = number of physical python processes the scheduler can run
ENV AIRFLOW_PARALLELISM=8
# dag_concurrency = the number of TIs to be allowed to run PER-dag at once
ENV AIRFLOW_DAG_CONCURRENCY=6

# Airflow uses postgres as its database, following are the examples env vars
ENV POSTGRES_HOST=localhost
ENV POSTGRES_PORT=5999
ENV POSTGRES_USER=fixme
ENV POSTGRES_PASSWORD=fixme
ENV POSTGRES_DB=airflow

# Example HDFS drop point which PySpark can use to access its datasets
ENV PIPELINE_DATA_PATH=hdfs://dsg-cluster-node01:8020/datasets/""${GROUP}""

WORKDIR ${AIRFLOW_HOME}

# Setup pipeline dependencies
COPY requirements.txt ${AIRFLOW_HOME}/requirements.txt
RUN pip install -r ""${AIRFLOW_HOME}/requirements.txt""

VOLUME ${AIRFLOW_HOME}/logs

COPY airflow.cfg ${AIRFLOW_HOME}/airflow.cfg

COPY hadoop/conf/ ${HADOOP_CONF_DIR}/
COPY dags/ ${AIRFLOW_DAG}

COPY setup_auth.py ${AIRFLOW_HOME}/setup_auth.py

COPY install_spark_packages.py ${AIRFLOW_HOME}/install_spark_packages.py
RUN gosu ""${USER}"" python install_spark_packages.py

COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]
"
245,2cf48478174b138d18a44a9ec777173342c71528,Add Docker File to include NodeJS,"Add Docker File to include NodeJS
","FROM ubuntu


RUN apt-get update
RUN apt-get install -y build-essential python3 python3-pip haskell-platform curl
RUN curl -sSL https://get.haskellstack.org/ | sh
ENV PATH=""/root/.local/bin:${PATH}""
RUN stack setup
RUN cabal update

WORKDIR /testenv
COPY . /testenv

CMD [""make"", ""script_test""]
","FROM ubuntu


RUN apt-get update
RUN apt-get install -y \
build-essential \
python3 \
python3-pip \
haskell-platform \
curl \
nodejs
RUN curl -sSL https://get.haskellstack.org/ | sh
ENV PATH=""/root/.local/bin:${PATH}""
RUN stack setup
RUN cabal update

WORKDIR /testenv
COPY . /testenv

CMD [""make"", ""script_test""]
"
23,47b6dd1ec4fb18078f91bf36bbafc2bf55863fbc,Bumped source to 20201219-dae2feb,"Bumped source to 20201219-dae2feb
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201219-b59f33b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201219-dae2feb
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
6,0239ef660c899e25bd2745fb887b82d8234dd043,Update R version,"Update R version
","FROM r-base:3.4.1
LABEL maintainer=""joelnbarnham@gmail.com""

RUN \
Rscript -e ""install.packages('ggplot2')"" && \
Rscript -e ""install.packages('randomForest')"" && \
:
","FROM r-base:4.1.3
LABEL maintainer=""joelnbarnham@gmail.com""

RUN \
Rscript -e ""install.packages('ggplot2')"" && \
Rscript -e ""install.packages('randomForest')"" && \
:
"
107,8a9fdf43aef2224165fd5515ac13ea20a9b2fb23,Change Dockerfile to install dependencies last. Part of fixing multiple plugins support.,"Change Dockerfile to install dependencies last. Part of fixing multiple plugins support.
","FROM ramsproject/sideboard
MAINTAINER RAMS Project ""code@magfest.org""
LABEL version.rams-core =""0.1""

# install the requirements specified.
# this will be a bit slow on first run but subsequently will be cached.
COPY bower.json ./
RUN bower install --config.interactive=false --allow-root
COPY requirements.txt ./
RUN pip install -r requirements.txt

# add our code - do this last, since it changes the most often
COPY . plugins/uber/
","FROM ramsproject/sideboard
MAINTAINER RAMS Project ""code@magfest.org""
LABEL version.rams-core =""0.1""

# add our code
COPY . plugins/uber/
# go ahead and install base dependencies
RUN paver install_deps
"
121,b221aa7b1344abf043a7d8e79defb08d27b4a421,Added docker support for running worker or Web process by environment,"Added docker support for running worker or Web process by environment
","FROM ubuntu:trusty
MAINTAINER ODL DevOps <mitx-devops@mit.edu>


# Add package files
ADD requirements.txt /tmp/requirements.txt
ADD test_requirements.txt /tmp/test_requirements.txt
ADD doc_requirements.txt /tmp/doc_requirements.txt
ADD apt.txt /tmp/apt.txt
WORKDIR /tmp

# Install base packages
RUN apt-get update
RUN apt-get install -y $(grep -vE ""^\s*#"" apt.txt  | tr ""\n"" "" "")
RUN pip install pip --upgrade

# Install project packages
RUN pip install -r requirements.txt
RUN pip install -r test_requirements.txt
RUN pip install -r doc_requirements.txt
RUN pip3 install -r requirements.txt
RUN pip3 install -r test_requirements.txt

# Add, and run as, non-root user.
RUN adduser --disabled-password --gecos """" mitodl

# Add project
ADD . /src
WORKDIR /src
RUN chown -R mitodl:mitodl /src

# Link nodejs to node since npm expects node
RUN ln -s /usr/bin/nodejs /usr/bin/node

# Install development packages globally for things like
# bower.
RUN mkdir /node
ADD package.json /node/package.json
RUN cd /node && npm install

# Install productions deps for runtime items like jsx
RUN npm install --production
ENV PATH /src/node_modules/.bin:/node/node_modules/.bin:$PATH

# Set pip cache folder, as it is breaking pip when it is on a shared volume
ENV XDG_CACHE_HOME /tmp/.cache

EXPOSE 8070

USER mitodl
CMD uwsgi uwsgi.ini
","FROM ubuntu:trusty
MAINTAINER ODL DevOps <mitx-devops@mit.edu>


# Add package files
ADD requirements.txt /tmp/requirements.txt
ADD test_requirements.txt /tmp/test_requirements.txt
ADD doc_requirements.txt /tmp/doc_requirements.txt
ADD apt.txt /tmp/apt.txt
WORKDIR /tmp

# Install base packages
RUN apt-get update
RUN apt-get install -y $(grep -vE ""^\s*#"" apt.txt  | tr ""\n"" "" "")
RUN pip install pip --upgrade

# Install project packages
RUN pip install -r requirements.txt
RUN pip install -r test_requirements.txt
RUN pip install -r doc_requirements.txt
RUN pip3 install -r requirements.txt
RUN pip3 install -r test_requirements.txt

# Add, and run as, non-root user.
RUN adduser --disabled-password --gecos """" mitodl

# Add project
ADD . /src
WORKDIR /src
RUN chown -R mitodl:mitodl /src

# Link nodejs to node since npm expects node
RUN ln -s /usr/bin/nodejs /usr/bin/node

# Install development packages globally for things like
# bower.
RUN mkdir /node
ADD package.json /node/package.json
RUN cd /node && npm install

# Install productions deps for runtime items like jsx
RUN npm install --production
ENV PATH /src/node_modules/.bin:/node/node_modules/.bin:$PATH

# Set pip cache folder, as it is breaking pip when it is on a shared volume
ENV XDG_CACHE_HOME /tmp/.cache

# Gather static
RUN ./manage.py collectstatic --noinput

USER mitodl

# Set and expose port for uwsgi config
EXPOSE 8070
ENV PORT 8070
CMD if [ -n ""$WORKER"" ]; then celery -A lore worker; else uwsgi uwsgi.ini; fi
"
2235,b4a25a3630c6201d320b87c33fa2e3cbabf4a33a,Update Dockerfile,"Update Dockerfile

adding missing cryptography  and requests modules required for testing","FROM ubuntu:20.04

# Supresses unwanted user interaction (like ""Please select the geographic area"" when installing tzdata)
ENV DEBIAN_FRONTEND=noninteractive

ADD ./ /ccxt
WORKDIR /ccxt

# Update packages (use us.archive.ubuntu.com instead of archive.ubuntu.com — solves the painfully slow apt-get update)
RUN sed -i 's/archive\.ubuntu\.com/us\.archive\.ubuntu\.com/' /etc/apt/sources.list

# Miscellaneous deps
RUN apt-get update && apt-get install -y --no-install-recommends curl gnupg git ca-certificates
# PHP
RUN apt-get update && apt-get install -y --no-install-recommends php php-curl php-iconv php-mbstring php-bcmath php-gmp
# Node
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash -
RUN apt-get update && apt-get install -y nodejs
# Python 3
RUN apt-get update && apt-get install -y --no-install-recommends python3 python3-pip
RUN pip3 install 'idna==2.9' --force-reinstall
RUN pip3 install --upgrade setuptools
RUN pip3 install tox
RUN pip3 install aiohttp
# Installs as a local Node & Python module, so that `require ('ccxt')` and `import ccxt` should work after that
RUN npm install
RUN ln -s /ccxt /usr/lib/node_modules/
RUN echo ""export NODE_PATH=/usr/lib/node_modules"" >> $HOME/.bashrc
RUN cd python \
    && python3 setup.py develop \
    && cd ..
## Install composer and everything else that it needs and manages
RUN /ccxt/composer-install.sh
RUN apt-get update && apt-get install -y --no-install-recommends zip unzip php-zip
RUN mv /ccxt/composer.phar /usr/local/bin/composer
RUN composer install
## Remove apt sources
RUN apt-get -y autoremove && apt-get clean && apt-get autoclean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

",
2280,925122b51a89b1c581929a31b4378178c136fb56,Add the Azure CLI (#4816),"Add the Azure CLI (#4816)

","# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

ARG BASE_IMAGE=tensorflow/tensorflow:1.13.2-py3-jupyter

FROM $BASE_IMAGE

ARG TF_SERVING_VERSION=0.0.0
ARG NB_USER=jovyan

# TODO: User should be refactored instead of hard coded jovyan

USER root

ENV DEBIAN_FRONTEND noninteractive

ENV NB_USER $NB_USER

ENV NB_UID 1000
ENV HOME /home/$NB_USER
ENV NB_PREFIX /


# Use bash instead of sh
SHELL [""/bin/bash"", ""-c""]

RUN apt-get update && apt-get install -yq --no-install-recommends \
  apt-transport-https \
  build-essential \
  bzip2 \
  ca-certificates \
  curl \
  g++ \
  git \
  gnupg \
  graphviz \
  locales \
  lsb-release \
  openssh-client \
  sudo \
  unzip \
  vim \
  wget \
  zip \
  emacs \
  python3-pip \
  python3-dev \
  python3-setuptools \
  && apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# Install Nodejs for jupyterlab-manager
RUN curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
RUN apt-get update && apt-get install -yq --no-install-recommends \
  nodejs \
  && apt-get clean && \
  rm -rf /var/lib/apt/lists/*

ENV DOCKER_CREDENTIAL_GCR_VERSION=1.4.3
RUN curl -LO https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${DOCKER_CREDENTIAL_GCR_VERSION}/docker-credential-gcr_linux_amd64-${DOCKER_CREDENTIAL_GCR_VERSION}.tar.gz && \
    tar -zxvf docker-credential-gcr_linux_amd64-${DOCKER_CREDENTIAL_GCR_VERSION}.tar.gz && \
    mv docker-credential-gcr /usr/local/bin/docker-credential-gcr && \
    rm docker-credential-gcr_linux_amd64-${DOCKER_CREDENTIAL_GCR_VERSION}.tar.gz && \
    chmod +x /usr/local/bin/docker-credential-gcr

# Install AWS CLI
RUN curl ""https://s3.amazonaws.com/aws-cli/awscli-bundle.zip"" -o ""/tmp/awscli-bundle.zip"" && \
    unzip /tmp/awscli-bundle.zip && ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws && \
    rm -rf ./awscli-bundle

RUN echo ""en_US.UTF-8 UTF-8"" > /etc/locale.gen && \
    locale-gen

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8

# Create NB_USER user with UID=1000 and in the 'users' group
# but allow for non-initial launches of the notebook to have
# $HOME provided by the contents of a PV
RUN useradd -M -s /bin/bash -N -u $NB_UID $NB_USER && \
    chown -R ${NB_USER}:users /usr/local/bin && \
    mkdir -p $HOME

RUN export CLOUD_SDK_REPO=""cloud-sdk-$(lsb_release -c -s)"" && \
    echo ""deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main"" > /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
    apt-get update && \
    apt-get install -y google-cloud-sdk kubectl

# Install Tini - used as entrypoint for container
RUN cd /tmp && \
    wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini && \
    echo ""12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 *tini"" | sha256sum -c - && \
    mv tini /usr/local/bin/tini && \
    chmod +x /usr/local/bin/tini

# NOTE: Beyond this point be careful of breaking out
# or otherwise adding new layers with RUN, chown, etc.
# The image size can grow significantly.

# Install base python3 packages
RUN pip3 --no-cache-dir install \
    jupyter-console==6.0.0 \
    jupyterlab \
    xgboost \
    kubeflow-fairing==0.7.1

COPY --chown=jovyan:users requirements.txt /tmp

RUN docker-credential-gcr configure-docker && chown ${NB_USER}:users $HOME/.docker/config.json

# Configure container startup
EXPOSE 8888
USER jovyan
ENTRYPOINT [""tini"", ""--""]
CMD [""sh"",""-c"", ""jupyter notebook --notebook-dir=/home/${NB_USER} --ip=0.0.0.0 --no-browser --allow-root --port=8888 --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.allow_origin='*' --NotebookApp.base_url=${NB_PREFIX}""]

",
162,770c08a2cb4ff8833a2d08df500100e5ad68cdb7,add expose port,"add expose port
","FROM java:8
VOLUME /tmp
ADD ulock-server-0.0.1-SNAPSHOT.war app.war
RUN bash -c 'touch /app.jar'
ENTRYPOINT [""java"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.war""]
","FROM java:8
VOLUME /tmp
EXPOSE 8080
ADD ulock-server-0.0.1-SNAPSHOT.war app.war
RUN bash -c 'touch /app.jar'
ENTRYPOINT [""java"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.war""]
"
399,59d72ea8e4fe4070d31a6de7457d96d3616f30fc,Bumped source to 20200618-45a041c,"Bumped source to 20200618-45a041c
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200618-e717779
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200618-45a041c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
2318,c8fac762f4544ae3b2167100ca212acd0887535a,Upgrade PG base dockerfile to 9.5 (#9),Upgrade PG base dockerfile to 9.5 (#9),"FROM ubuntu:15.10

# This is a common docker file for flow that is used to create
# containers running specific versions of an applications schema. This
# container will be running postgresql with the application's schema
# applied.

# We make an assumption that there is a file named 'install.sh' in the
# same directory as this Dockerfile that contains the instructions for
# creating the application database, user, etc.

# Each schema is intended to be in its own git repository so that we
# can link that repository to docker hub to automatically build the
# docker images following a tag of the repository.

# Example from command line:
#
#  docker build -t flowcommerce/splashpage-postgresql:0.1.2 .
#
#  docker run -d -p 5100:5432 flowcommerce/splashpage-postgresql:0.1.2
#
#  psql -U api -h 192.168.99.100 -p 5100 splashpagedb
#

MAINTAINER tech@flow.io

RUN apt-get update
RUN apt-get install -y --no-install-recommends ca-certificates postgresql-9.4

RUN apt-get install -y --no-install-recommends ca-certificates git
RUN apt-get install -y --no-install-recommends ca-certificates ruby

WORKDIR /opt
RUN git clone git://github.com/mbryzek/schema-evolution-manager.git
WORKDIR /opt/schema-evolution-manager
RUN ls
RUN git checkout 0.9.24
RUN ruby ./configure.rb --prefix /usr/local
RUN ./install.rb

RUN sed -i 's/peer/trust/' /etc/postgresql/9.4/main/pg_hba.conf
RUN sed -i 's/md5/trust/' /etc/postgresql/9.4/main/pg_hba.conf
RUN sed -i 's/127.0.0.1\/32/0.0.0.0\/0/' /etc/postgresql/9.4/main/pg_hba.conf
RUN cat /etc/postgresql/9.4/main/pg_hba.conf

RUN cat ""/etc/init.d/postgresql""

RUN mkdir -p /var/run/postgresql && chown -R postgres /var/run/postgresql

WORKDIR /var/lib/postgresql/9.4/main
RUN ln -s /etc/postgresql/9.4/main/postgresql.conf

VOLUME /var/lib/postgresql/9.4/base
EXPOSE 5432
",
2287,4e2b6a8209626ccdd506cee2b897ff97ee9397a6,"reverted, unexpected error on docker hub","reverted, unexpected error on docker hub
","FROM ubuntu:16.04

ENV DEBIAN_FRONTEND noninteractive

# install dependencies
RUN apt-get update && \
    apt-get install -y sudo wget unzip openjdk-8-jdk git maven ecryptfs-utils mhddfs samba samba-common-bin && \
    apt-get clean

# install chrome
RUN wget https://dl.google.com/linux/linux_signing_key.pub
RUN apt-key add linux_signing_key.pub
RUN echo ""deb http://dl.google.com/linux/chrome/deb/ stable main"" > /etc/apt/sources.list.d/google.list
RUN apt-get update && \
    apt-get install -y google-chrome-stable && \
    apt-get clean

# setup permissions
RUN echo ""root ALL=(ALL) NOPASSWD:/usr/bin/sudo,/usr/sbin/adduser,/usr/sbin/useradd,/usr/sbin/deluser,/usr/sbin/addgroup,/usr/sbin/delgroup,/bin/chown,/usr/bin/passwd,/bin/mount,/bin/umount,/usr/bin/mhddfs,/etc/init.d/samba"" >> /etc/sudoers.d/urchin

# Get project
RUN mkdir /workspace && \
    git clone https://github.com/anhem/urchin /workspace

# install
WORKDIR /workspace
RUN mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

ADD entrypoint.sh /entrypoint.sh

ENTRYPOINT [""/entrypoint.sh""]

EXPOSE 8080

",
2143,65e12bf9cddaa54f7a8fde8e3710cf5c2b1ee5b4,Added screen utility to the base image.,"Added screen utility to the base image.
","# jobber service base image
FROM debian:wheezy
MAINTAINER Mark Betz <betz.mark@gmail.com>

# disable annoying warnings from installers
ENV DEBIAN_FRONTEND noninteractive

# install prerequisites and utils
RUN apt-get update &&\
 apt-get install -y\
 build-essential\
 checkinstall\
 rsyslog\
 curl\
 wget\
 git\
 nano\
 vim\
 python-dev\
 python-pip

# install and configure redis
RUN cd /home &&\
 wget -q http://download.redis.io/redis-stable.tar.gz &&\
 tar xvzf redis-stable.tar.gz &&\
 cd redis-stable &&\
 make &&\
 cp src/redis-server /usr/local/bin/ &&\
 cp src/redis-cli /usr/local/bin/ &&\
 cp src/redis-benchmark /usr/local/bin/ &&\
 cp src/redis-check-aof /usr/local/bin/ &&\
 cp src/redis-check-dump /usr/local/bin/ &&\
 cd .. &&\
 rm -rf redis-stable &&\
 rm redis-stable.tar.gz &&\
 mkdir /etc/redis &&\
 mkdir -p /var/redis/6379

ADD 6379.conf /etc/redis/6379.conf
ADD rsyslog.conf /etc/rsyslog.conf
ADD 50-default.conf /etc/rsyslog.d/50-default.conf

RUN chmod 644 /etc/rsyslog.conf &&\
 chmod 644 /etc/rsyslog.d/50-default.conf &&\
 pip install supervisor
",
2136,f9ff4dda7c1730109c7fb2bdc51c0d1f2108205e,Version 4.4.13.1 added,"Version 4.4.13.1 added
","FROM dnhsoft/phpmyadmin-base:4.x

ENV PMA_VERSION ""4.4.13""
RUN /install-pma.sh
",
377,f7686f581ba49536f247c87e3bed67eed6959186,Bumped source to 20200704-4564ae1,"Bumped source to 20200704-4564ae1
","FROM docker.pkg.github.com/dock0/arch/arch:20200704-9afb8c6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200704-4564ae1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
168,470fd4cd049744614ac31ede7531d94a0db8e63b,Bumped source to 20211103-04550ce,"Bumped source to 20211103-04550ce
","FROM docker.pkg.github.com/dock0/arch/arch:20211103-74d018e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20211103-04550ce
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2298,6d6524eae9219d832d27dc79ee043baec9422d9a,Added gsutil,"Added gsutil

","FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04
MAINTAINER nejumi <dr_jingles@mac.com>

ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:git-core/ppa && \
    apt-get update && \
    apt-get install -y git build-essential cmake && \
    git --version

RUN apt-get update && \
apt-get install -y \
curl \
wget \
bzip2 \
ca-certificates \
libglib2.0-0 \
libxext6 \
libsm6 \
libxrender1 \
git \
vim \
mercurial \
subversion \
cmake \
libboost-dev \
libboost-system-dev \
libboost-filesystem-dev \
gcc \
g++

# Add OpenCL ICD files for LightGBM
RUN mkdir -p /etc/OpenCL/vendors && \
echo ""libnvidia-opencl.so.1"" > /etc/OpenCL/vendors/nvidia.icd

##############################################################################
# TINI
##############################################################################

# Install tini
ENV TINI_VERSION v0.14.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini

           
##############################################################################
# Miniconda python
##############################################################################
RUN apt-get update && \
    apt-get install -y wget bzip2 ca-certificates && \
    rm -rf /var/lib/apt/lists/*

RUN wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.3-Linux-x86_64.sh && \
    /bin/bash Miniconda3-py37_4.8.3-Linux-x86_64.sh -b -p /opt/conda && \
    rm Miniconda3-py37_4.8.3-Linux-x86_64.sh

ENV PATH /opt/conda/bin:$PATH
RUN pip install --upgrade pip

RUN apt-get update && \
    # Miniconda's build of gcc is way out of date; monkey-patch some linking problems that affect
    # packages like xgboost and Shapely
    rm /opt/conda/lib/libstdc++* && rm /opt/conda/lib/libgomp.* && \
    ln -s /usr/lib/x86_64-linux-gnu/libgomp.so.1 /opt/conda/lib/libgomp.so.1 && \
    ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /opt/conda/lib/libstdc++.so.6
    
RUN cd /usr/local/src && pip install scikit-learn tables
RUN cd /usr/local/src && conda install lxml h5py hdf5 html5lib beautifulsoup4

##############################################################################
# LightGBM-GPU
##############################################################################

RUN cd /usr/local/src && mkdir lightgbm && cd lightgbm && \
git clone -b v2.3.1 https://github.com/microsoft/LightGBM && \
cd LightGBM && mkdir build && cd build && \
cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && \ 
 make OPENCL_HEADERS=/usr/local/cuda/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda/targets/x86_64-linux/lib

ENV PATH /usr/local/src/lightgbm/LightGBM:${PATH}

RUN /bin/bash -c ""cd /usr/local/src/lightgbm/LightGBM/python-package && python setup.py install --precompile""

##############################################################################
# XGBoost-GPU
##############################################################################
RUN cd /usr/local/src && pip install xgboost

##############################################################################
# tensorflow
##############################################################################
RUN cd /usr/local/src && pip --no-cache-dir install -I -U tensorflow==2.2.0
RUN cd /usr/local/src && pip install keras

##############################################################################
# rapidsai
##############################################################################
RUN cd /usr/local/src && conda install -c rapidsai -c nvidia -c conda-forge -c defaults rapids=0.14 python=3.7 cudatoolkit=10.1
RUN conda install -y -c conda-forge ipywidgets && jupyter nbextension enable --py widgetsnbextension

##############################################################################
# xfeat
##############################################################################
RUN cd /usr/local/src && git clone --recursive https://github.com/pfnet-research/xfeat && \
cd xfeat && python setup.py install

##############################################################################
# other libraries
##############################################################################
RUN cd /usr/local/src && pip install albumentations seaborn pyarrow fastparquet catboost kaggle \
category_encoders optuna opencv-python image-classifiers tsfresh librosa
RUN cd /usr/local/src && conda install pytorch torchvision cudatoolkit=10.1 -c pytorch
RUN cd /usr/local/src && pip install git+https://github.com/hyperopt/hyperopt.git
",
5,c708551d2329b5cfc37a6b10455c168e1f3e50db,fix dirs,"fix dirs
","FROM ubuntu
LABEL maintainer=""sboulema@gmail.com""

ENV PHP_VERSION=8.0
ENV DEBIAN_FRONTEND=noninteractive 

RUN useradd ttrss

# add PHP repository
RUN apt-get update && \
  apt-get install -y software-properties-common && \
  add-apt-repository ppa:ondrej/php

# install PHP and extensions
RUN apt-get update && apt-get install -y \
  git nginx supervisor php${PHP_VERSION}-fpm php${PHP_VERSION}-cli php${PHP_VERSION}-curl php${PHP_VERSION}-gd \
  php${PHP_VERSION}-pgsql php${PHP_VERSION}-mysql php${PHP_VERSION}-mbstring php${PHP_VERSION}-xml php${PHP_VERSION}-intl \
  && apt-get clean && rm -rf /var/lib/apt/lists/* && mkdir -p /var/run/php

# enable mbstring modules
RUN phpenmod -v ${PHP_VERSION} mbstring && phpenmod -v ${PHP_VERSION} xml

# add ttrss as the only nginx site
ADD ttrss.nginx.conf /etc/nginx/sites-available/ttrss
RUN sed -i ""s/PHP_VERSION/${PHP_VERSION}/"" /etc/nginx/sites-available/ttrss
RUN ln -s /etc/nginx/sites-available/ttrss /etc/nginx/sites-enabled/ttrss
RUN rm /etc/nginx/sites-enabled/default

# install ttrss
WORKDIR /var/www
RUN rm -rf *
RUN git clone https://git.tt-rss.org/fox/tt-rss.git .

# expose only nginx HTTP port
EXPOSE 80

# set configuration to look at Docker ENV variables
ADD config.docker.php config.php

# set default settings
ENV TTRSS_SELF_URL_PATH http://localhost
ENV TTRSS_DB_NAME ttrss
ENV TTRSS_DB_USER ttrss
ENV TTRSS_DB_PASS ttrss
ENV TTRSS_SESSION_COOKIE_LIFETIME 86400000
ENV TTRSS_ICONS_DIR feed-icons
ENV TTRSS_LOCK_DIRECTORY lock
ENV TTRSS_PLUGINS auth_internal
ENV TTRSS_CONFIG_VERSION 26

# set permissions on directories
RUN chown www-data:www-data -R /var/www && \ 
    chmod -R 777 images && \
    chmod -R 777 upload && \
    chmod -R 777 export && \
    chmod -R 777 feed-icons && \
    chmod -R 777 lock

# always re-configure database with current ENV when RUNning container, then monitor all services
ADD configure-db.php /configure-db.php
ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf
RUN sed -i ""s/PHP_VERSION/${PHP_VERSION}/"" /etc/supervisor/conf.d/supervisord.conf
CMD php /configure-db.php && supervisord -c /etc/supervisor/conf.d/supervisord.conf
","FROM ubuntu
LABEL maintainer=""sboulema@gmail.com""

ENV PHP_VERSION=8.0
ENV DEBIAN_FRONTEND=noninteractive 

RUN useradd ttrss

# add PHP repository
RUN apt-get update && \
  apt-get install -y software-properties-common && \
  add-apt-repository ppa:ondrej/php

# install PHP and extensions
RUN apt-get update && apt-get install -y \
  git nginx supervisor php${PHP_VERSION}-fpm php${PHP_VERSION}-cli php${PHP_VERSION}-curl php${PHP_VERSION}-gd \
  php${PHP_VERSION}-pgsql php${PHP_VERSION}-mysql php${PHP_VERSION}-mbstring php${PHP_VERSION}-xml php${PHP_VERSION}-intl \
  && apt-get clean && rm -rf /var/lib/apt/lists/* && mkdir -p /var/run/php

# enable mbstring modules
RUN phpenmod -v ${PHP_VERSION} mbstring && phpenmod -v ${PHP_VERSION} xml

# add ttrss as the only nginx site
ADD ttrss.nginx.conf /etc/nginx/sites-available/ttrss
RUN sed -i ""s/PHP_VERSION/${PHP_VERSION}/"" /etc/nginx/sites-available/ttrss
RUN ln -s /etc/nginx/sites-available/ttrss /etc/nginx/sites-enabled/ttrss
RUN rm /etc/nginx/sites-enabled/default

# install ttrss
WORKDIR /var/www
RUN rm -rf *
RUN git clone https://git.tt-rss.org/fox/tt-rss.git .

# expose only nginx HTTP port
EXPOSE 80

# set configuration to look at Docker ENV variables
ADD config.docker.php config.php

# set default settings
ENV TTRSS_SELF_URL_PATH http://localhost
ENV TTRSS_DB_NAME ttrss
ENV TTRSS_DB_USER ttrss
ENV TTRSS_DB_PASS ttrss
ENV TTRSS_SESSION_COOKIE_LIFETIME 86400000
ENV TTRSS_CACHE_DIR cache
ENV TTRSS_ICONS_DIR feed-icons
ENV TTRSS_LOCK_DIRECTORY lock
ENV TTRSS_PLUGINS auth_internal
ENV TTRSS_CONFIG_VERSION 26

# set permissions on directories
RUN chown www-data:www-data -R /var/www && \ 
    chmod -R 777 ${TTRSS_CACHE_DIR}/images && \
    chmod -R 777 ${TTRSS_CACHE_DIR}/upload && \
    chmod -R 777 ${TTRSS_CACHE_DIR}/export && \
    chmod -R 777 feed-icons && \
    chmod -R 777 lock

# always re-configure database with current ENV when RUNning container, then monitor all services
ADD configure-db.php /configure-db.php
ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf
RUN sed -i ""s/PHP_VERSION/${PHP_VERSION}/"" /etc/supervisor/conf.d/supervisord.conf
CMD php /configure-db.php && supervisord -c /etc/supervisor/conf.d/supervisord.conf
"
353,e9cf413cb44d32b1934826c194d597f02075d48a,Updated Dockerfile. Try to fix error by adding key --unsafe-perm when npm install work.,"Updated Dockerfile. Try to fix error by adding key --unsafe-perm when npm install work.
","# Create image based on the official Node 6 image from dockerhub
FROM ubuntu:14.04

# Create a directory where our app will be placed
RUN mkdir -p /usr/src/app/docker

# Change directory so that our commands run inside this new directory
WORKDIR /usr/src/app

# Copy dependency definitions
COPY package.json /usr/src/app
COPY docker/bootstrap.sh /usr/src/app/docker

RUN apt-get update
RUN apt-get install -y curl
RUN apt-get install -y nano
RUN apt-get install -y nodejs
RUN apt-get install -y npm
RUN apt-get install -y git
RUN apt-get install -y g++
RUN apt-get install -y libkrb5-dev
RUN apt-get install -y dos2unix
RUN apt-get install -y nginx

# Install dependecies & nginx
RUN /bin/bash -c ""dos2unix ./docker/bootstrap.sh""
RUN /bin/bash -c ""source ./docker/bootstrap.sh""

# Get all the code needed to run the app
COPY . /usr/src/app

# Install dependecies
RUN npm install
RUN gulp

# Serve the app
ENTRYPOINT service nginx start && /bin/bash","# Create image based on the official Node 6 image from dockerhub
FROM ubuntu:14.04

# Create a directory where our app will be placed
RUN mkdir -p /usr/src/app/docker

# Change directory so that our commands run inside this new directory
WORKDIR /usr/src/app

# Copy dependency definitions
COPY package.json /usr/src/app
COPY docker/bootstrap.sh /usr/src/app/docker

RUN apt-get update
RUN apt-get install -y curl
RUN apt-get install -y nano
RUN apt-get install -y nodejs
RUN apt-get install -y npm
RUN apt-get install -y git
RUN apt-get install -y g++
RUN apt-get install -y libkrb5-dev
RUN apt-get install -y dos2unix
RUN apt-get install -y nginx

# Install dependecies & nginx
RUN /bin/bash -c ""dos2unix ./docker/bootstrap.sh""
RUN /bin/bash -c ""source ./docker/bootstrap.sh""

# Get all the code needed to run the app
COPY . /usr/src/app

# Install dependecies
RUN npm install --unsafe-perm
RUN gulp

# Serve the app
ENTRYPOINT service nginx start && /bin/bash"
110,98773482dcedb2aefca60cb0bac01a8c01f2f028,Fix syntax error with single quote,"Fix syntax error with single quote
","FROM ubuntu:latest

MAINTAINER Oleg Khryptul <okreptul@yahoo.com> 

RUN apt-get update
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get install -y vim git python-pip wget openjdk-7-jre
RUN pip install flake8

RUN useradd dev
RUN echo ""ALL            ALL = (ALL) NOPASSWD: ALL"" >> /etc/sudoers
RUN cp /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
RUN dpkg-reconfigure locales
RUN locale-gen en_US.UTF-8
RUN /usr/sbin/update-locale LANG=en_US.UTF-8

WORKDIR /home/dev
ENV HOME /home/dev
ENV LC_ALL en_US.UTF-8

RUN chown -R dev:dev $HOME/
USER dev

# setup pathogen vim plugin manager
RUN mkdir -p $HOME/.vim/autoload $HOME/.vim/bundle
RUN wget -P $HOME/.vim/autoload https://tpo.pe/pathogen.vim
RUN echo 'execute pathogen#infect()' >> $HOME/.vimrc && \
    echo 'syntax on'                 >> $HOME/.vimrc && \
    echo 'filetype plugin indent on' >> $HOME/.vimrc

# Powerline fonts
RUN mkdir -p $HOME/.fonts $HOME/.config/fontconfig/conf.d
RUN wget -P $HOME/.fonts                     https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf
RUN wget -P $HOME/.config/fontconfig/conf.d/ https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf
RUN fc-cache -vf $HOME/.fonts/

# Vim plugins

# Sensible
RUN git clone git://github.com/tpope/vim-sensible.git $HOME/.vim/bundle

# Dockerfile syntax & snippet plugin
RUN git clone https://github.com/ekalinin/Dockerfile.vim.git $HOME/.vim/bundle/Dockerfile

# Vim airline
RUN git clone https://github.com/bling/vim-airline $HOME/.vim/bundle/vim-airline
RUN echo 'set laststatus=2'                                     >> $HOME/.vimrc && \
    echo 'let g:airline#extensions#tabline#enabled = 1'         >> $HOME/.vimrc && \
    echo 'let g:airline#extensions#tabline#left_sep = \' \''    >> $HOME/.vimrc && \
    echo 'let g:airline#extensions#tabline#left_alt_sep = \'|\' >> $HOME/.vimrc

# CtrlP
RUN git clone https://github.com/kien/ctrlp.vim.git $HOME/.vim/bundle/ctrlp.vim

#RUN vim -u $HOME/.vim/bundles.vim +PluginInstall +qall

ENTRYPOINT [""vim""]
","FROM ubuntu:latest

MAINTAINER Oleg Khryptul <okreptul@yahoo.com> 

RUN apt-get update
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get install -y vim git python-pip wget openjdk-7-jre
RUN pip install flake8

RUN useradd dev
RUN echo ""ALL            ALL = (ALL) NOPASSWD: ALL"" >> /etc/sudoers
RUN cp /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
RUN dpkg-reconfigure locales
RUN locale-gen en_US.UTF-8
RUN /usr/sbin/update-locale LANG=en_US.UTF-8

WORKDIR /home/dev
ENV HOME /home/dev
ENV LC_ALL en_US.UTF-8

RUN chown -R dev:dev $HOME/
USER dev

# setup pathogen vim plugin manager
RUN mkdir -p $HOME/.vim/autoload $HOME/.vim/bundle
RUN wget -P $HOME/.vim/autoload https://tpo.pe/pathogen.vim
RUN echo 'execute pathogen#infect()' >> $HOME/.vimrc && \
    echo 'syntax on'                 >> $HOME/.vimrc && \
    echo 'filetype plugin indent on' >> $HOME/.vimrc

# Powerline fonts
RUN mkdir -p $HOME/.fonts $HOME/.config/fontconfig/conf.d
RUN wget -P $HOME/.fonts                     https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf
RUN wget -P $HOME/.config/fontconfig/conf.d/ https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf
RUN fc-cache -vf $HOME/.fonts/

# Vim plugins

# Sensible
RUN git clone git://github.com/tpope/vim-sensible.git $HOME/.vim/bundle

# Dockerfile syntax & snippet plugin
RUN git clone https://github.com/ekalinin/Dockerfile.vim.git $HOME/.vim/bundle/Dockerfile

# Vim airline
RUN git clone https://github.com/bling/vim-airline $HOME/.vim/bundle/vim-airline
RUN echo 'set laststatus=2'                                      >> $HOME/.vimrc && \
    echo 'let g:airline#extensions#tabline#enabled = 1'          >> $HOME/.vimrc && \
    echo 'let g:airline#extensions#tabline#left_sep = \' \''     >> $HOME/.vimrc && \
    echo 'let g:airline#extensions#tabline#left_alt_sep = \'|\'' >> $HOME/.vimrc

# CtrlP
RUN git clone https://github.com/kien/ctrlp.vim.git $HOME/.vim/bundle/ctrlp.vim

#RUN vim -u $HOME/.vim/bundles.vim +PluginInstall +qall

ENTRYPOINT [""vim""]
"
2155,0f3f46a355170ee64bdba76fcb5fd422afc5ea2d,update to crystal 0.23.1,"update to crystal 0.23.1
","FROM drujensen/crystal:0.23.0

WORKDIR /app/user

ADD . /app/user

RUN crystal deps

CMD [""crystal"", ""spec""]

",
314,85fd660f031ee1021845bb419fa1a41359d6b984,Update Dockerfile for launch.sh script,"Update Dockerfile for launch.sh script
","FROM gliderlabs/alpine

MAINTAINER Steven Borrelli <steve@aster.is>

ENV CONSUL_TEMPLATE_VERSION=0.7.0

RUN apk-install haproxy

ADD https://github.com/hashicorp/consul-template/releases/download/v${CONSUL_TEMPLATE_VERSION}/consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.tar.gz /

RUN tar zxvf consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.tar.gz && \
    mv consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64/consul-template /usr/local/bin/consul-template && \
    rm -rf /consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.tar.gz && \
    rm -rf /consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64

RUN mkdir -p /haproxy /consul-template/config.d /consul-template/template.d

ADD config/ /consul-template/config.d/
ADD template/ /consul-template/template.d/

CMD [""/usr/local/bin/consul-template"", ""-config"", ""/consul-template/config.d""]
","FROM gliderlabs/alpine

MAINTAINER Steven Borrelli <steve@aster.is>

ENV CONSUL_TEMPLATE_VERSION=0.7.0

RUN apk-install bash haproxy

ADD https://github.com/hashicorp/consul-template/releases/download/v${CONSUL_TEMPLATE_VERSION}/consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.tar.gz /

RUN tar zxvf consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.tar.gz && \
    mv consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64/consul-template /usr/local/bin/consul-template && \
    rm -rf /consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.tar.gz && \
    rm -rf /consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64

RUN mkdir -p /haproxy /consul-template/config.d /consul-template/template.d

ADD config/ /consul-template/config.d/
ADD template/ /consul-template/template.d/
ADD launch.sh /launch.sh

CMD [""/launch.sh""]
"
239,b055f7b72c69b37e7f5fe29d58b18406f3f9531f,bug: missing ping,"bug: missing ping

added to enable icmp checks","# Cabot Dockerfile
#
# https://github.com/shoonoise/cabot-docker
#
# VERSION 1.0

FROM ubuntu:14.04
MAINTAINER Alexander Kushnarev <avkushnarev@gmail.com>

# Prepare
RUN apt-get update
RUN apt-get install -y build-essential nodejs libpq-dev python-dev npm nginx git curl libldap2-dev libsasl2-dev

RUN curl -OL https://raw.github.com/pypa/pip/master/contrib/get-pip.py
RUN python get-pip.py

# Deploy cabot
RUN git clone https://github.com/arachnys/cabot.git /cabot
ADD fixture.json /cabot/
ADD run.sh /cabot/
ADD nginx.conf /etc/nginx/nginx.conf
ADD migrate.sh /cabot/

# Install dependencies
RUN pip install -e /cabot/
RUN npm install --no-color -g coffee-script less@1.3 --registry http://registry.npmjs.org/

# Set env var
ENV PATH $PATH:/cabot/
ENV PYTHONPATH $PYTHONPATH:/cabot/

# Cabot settings
ENV DJANGO_SETTINGS_MODULE cabot.settings
ENV HIPCHAT_URL https://api.hipchat.com/v1/rooms/message
ENV LOG_FILE /var/log/cabot
ENV PORT 5000
ENV ADMIN_EMAIL you@example.com
ENV CABOT_FROM_EMAIL noreply@example.com
ENV DEBUG t

# URL of calendar to synchronise rota with
ENV CALENDAR_ICAL_URL http://www.google.com/calendar/ical/example.ics

ENV DJANGO_SECRET_KEY 2FL6ORhHwr5eX34pP9mMugnIOd3jzVuT45f7w430Mt5PnEwbcJgma0q8zUXNZ68A

# Hostname of your Graphite server instance
ENV GRAPHITE_API http://graphite.example.com/
ENV GRAPHITE_USER username
ENV GRAPHITE_PASS password

# Hipchat integration
ENV HIPCHAT_ALERT_ROOM 48052
ENV HIPCHAT_API_KEY your_hipchat_api_key

# Jenkins integration
ENV JENKINS_API https://jenkins.example.com/
ENV JENKINS_USER username
ENV JENKINS_PASS password

# SMTP settings
ENV SES_HOST email-smtp.us-east-1.amazonaws.com
ENV SES_USER username
ENV SES_PASS password
ENV SES_PORT 465

# Twilio integration for SMS and telephone alerts
ENV TWILIO_ACCOUNT_SID your_account_sid
ENV TWILIO_AUTH_TOKEN your_auth_token
ENV TWILIO_OUTGOING_NUMBER +14155551234

# Used for pointing links back in alerts etc.
ENV WWW_HTTP_HOST cabot.example.com
ENV WWW_SCHEME http
RUN [""ln"",""-s"",""/usr/bin/nodejs"",""/usr/bin/node""]

WORKDIR /cabot/
CMD . /cabot/migrate.sh && /cabot/run.sh


","# Cabot Dockerfile
#
# https://github.com/shoonoise/cabot-docker
#
# VERSION 1.0

FROM ubuntu:14.04
MAINTAINER Alexander Kushnarev <avkushnarev@gmail.com>

# Prepare
RUN apt-get update
RUN apt-get install -y build-essential nodejs libpq-dev python-dev npm nginx git curl libldap2-dev libsasl2-dev iputils-ping

RUN curl -OL https://raw.github.com/pypa/pip/master/contrib/get-pip.py
RUN python get-pip.py

# Deploy cabot
RUN git clone https://github.com/arachnys/cabot.git /cabot
ADD fixture.json /cabot/
ADD run.sh /cabot/
ADD nginx.conf /etc/nginx/nginx.conf
ADD migrate.sh /cabot/

# Install dependencies
RUN pip install -e /cabot/
RUN npm install --no-color -g coffee-script less@1.3 --registry http://registry.npmjs.org/

# Set env var
ENV PATH $PATH:/cabot/
ENV PYTHONPATH $PYTHONPATH:/cabot/

# Cabot settings
ENV DJANGO_SETTINGS_MODULE cabot.settings
ENV HIPCHAT_URL https://api.hipchat.com/v1/rooms/message
ENV LOG_FILE /var/log/cabot
ENV PORT 5000
ENV ADMIN_EMAIL you@example.com
ENV CABOT_FROM_EMAIL noreply@example.com
ENV DEBUG t

# URL of calendar to synchronise rota with
ENV CALENDAR_ICAL_URL http://www.google.com/calendar/ical/example.ics

ENV DJANGO_SECRET_KEY 2FL6ORhHwr5eX34pP9mMugnIOd3jzVuT45f7w430Mt5PnEwbcJgma0q8zUXNZ68A

# Hostname of your Graphite server instance
ENV GRAPHITE_API http://graphite.example.com/
ENV GRAPHITE_USER username
ENV GRAPHITE_PASS password

# Hipchat integration
ENV HIPCHAT_ALERT_ROOM 48052
ENV HIPCHAT_API_KEY your_hipchat_api_key

# Jenkins integration
ENV JENKINS_API https://jenkins.example.com/
ENV JENKINS_USER username
ENV JENKINS_PASS password

# SMTP settings
ENV SES_HOST email-smtp.us-east-1.amazonaws.com
ENV SES_USER username
ENV SES_PASS password
ENV SES_PORT 465

# Twilio integration for SMS and telephone alerts
ENV TWILIO_ACCOUNT_SID your_account_sid
ENV TWILIO_AUTH_TOKEN your_auth_token
ENV TWILIO_OUTGOING_NUMBER +14155551234

# Used for pointing links back in alerts etc.
ENV WWW_HTTP_HOST cabot.example.com
ENV WWW_SCHEME http
RUN [""ln"",""-s"",""/usr/bin/nodejs"",""/usr/bin/node""]

WORKDIR /cabot/
CMD . /cabot/migrate.sh && /cabot/run.sh


"
2111,565c12a49385e7a2780acb0226b2d06719ed940e,Update certbot and lexicon,"Update certbot and lexicon
","FROM python:alpine3.8
LABEL maintainer=""Adrien Ferrand <ferrand.ad@gmail.com>""

# Scripts in /scripts are required to be in the PATH to run properly as certbot's hooks
ENV PATH /scripts:$PATH

# Versioning
ENV LEXICON_VERSION 3.0.8
ENV CERTBOT_VERSION 0.30.0

# Let's Encrypt configuration
ENV LETSENCRYPT_STAGING false
ENV LETSENCRYPT_USER_MAIL noreply@example.com
ENV LETSENCRYPT_ACME_V1 false

# Lexicon configuration
ENV LEXICON_OPTIONS """"
ENV LEXICON_PROVIDER cloudflare
ENV LEXICON_PROVIDER_OPTIONS """"

# Container specific configuration
ENV PFX_EXPORT false
ENV PFX_EXPORT_PASSPHRASE """"
ENV CERTS_DIRS_MODE 0750
ENV CERTS_FILES_MODE 0640
ENV CERTS_USER_OWNER root
ENV CERTS_GROUP_OWNER root

# Install dependencies, certbot, lexicon, prepare for first start and clean
RUN apk --no-cache --update add rsyslog git libffi libxml2 libxslt libstdc++ openssl docker ethtool \
 && apk --no-cache --update --virtual build-dependencies add libffi-dev libxml2-dev libxslt-dev openssl-dev build-base linux-headers \
 && pip install ""certbot==$CERTBOT_VERSION"" \
 && pip install ""dns-lexicon==$LEXICON_VERSION"" \
 && pip install ""dns-lexicon[namecheap]==$LEXICON_VERSION"" \
 && pip install ""dns-lexicon[route53]==$LEXICON_VERSION"" \
 && pip install ""dns-lexicon[softlayer]==$LEXICON_VERSION"" \
 && pip install ""dns-lexicon[subreg]==$LEXICON_VERSION"" \
 && pip install ""dns-lexicon[transip]==$LEXICON_VERSION"" \
 && pip install circus \
 && mkdir -p /var/lib/letsencrypt/hooks \
 && mkdir -p /etc/circus.d \
 && apk del build-dependencies

# Copy configuration files
COPY files/run.sh /scripts/run.sh
COPY files/watch-domains.sh /scripts/watch-domains.sh
COPY files/autorestart-containers.sh /scripts/autorestart-containers.sh
COPY files/autocmd-containers.sh /scripts/autocmd-containers.sh
COPY files/crontab /etc/crontab
COPY files/circus.ini /etc/circus.ini
COPY files/letsencrypt-dns.ini /etc/circus.d/letsencrypt-dns.ini
COPY files/authenticator.sh /var/lib/letsencrypt/hooks/authenticator.sh
COPY files/cleanup.sh /var/lib/letsencrypt/hooks/cleanup.sh
COPY files/deploy-hook.sh /scripts/deploy-hook.sh
COPY files/renew.sh /scripts/renew.sh

RUN chmod +x /scripts/*

VOLUME [""/etc/letsencrypt""]

CMD [""/scripts/run.sh""]
",
2120,1542e5110d1c5e27cecc5e5e8522a69690978d08,Bumped source to 20210810-8833a2b,"Bumped source to 20210810-8833a2b
","FROM docker.pkg.github.com/dock0/service/service:20210810-9bb62fc
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
14,633ebc58e10cb19dcb4bb2d4f9235c68a9eaa750,Adding RSYNC user. Adding no-install-recommends...,"Adding RSYNC user. Adding no-install-recommends...

to apt-get, and moved things around.","FROM phusion/baseimage:0.9.10

MAINTAINER github.com/jasonswindle

# https://github.com/dotcloud/docker/issues/4846 and move SSH to a different port
RUN sed -i 's/session    required     pam_loginuid.so/#session    required     pam_loginuid.so/' /etc/pam.d/sshd

# Set root's password
RUN echo ""root:changeme"" | chpasswd

# Set correct environment variables.
ENV HOME /root

# Update apt's cache
RUN apt-get update

## Install what we need
RUN apt-get install -y \
            python-pip \
            man \
            wget \
            sudo \
            software-properties-common \
            locales \
            ntp

# Ensure UTF-8
RUN locale-gen en_US.UTF-8 && update-locale

# Install Salt Master (of Masters)
RUN add-apt-repository ppa:saltstack/salt

# Update the apt database
RUN apt-get update

# Install Salt Master
RUN apt-get install -y salt-master

# Make this Salt Master, Master of Masters
RUN echo ""order_masters: True"" > /etc/salt/master.d/syndic.conf

# Set the timezone
RUN echo ""US/Central"" > /etc/timezone; dpkg-reconfigure tzdata

# Add runit scripts
ADD ./files/runit/ /etc/service/

# Correct the perms, so RUNIT can run...
RUN chmod 0755 -Rv /etc/service/

# SSH Config
ADD ./files/ssh/sshd_config /etc/ssh/sshd_config

# Clean up APT when done.
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Use baseimage-docker's init system.
CMD [""/sbin/my_init""]
","FROM phusion/baseimage:0.9.10

MAINTAINER github.com/jasonswindle

# Set correct environment variables.
ENV HOME /root

# Set root's password
RUN echo ""root:changeme"" | chpasswd

# Add the user rsync, touch the authorized_keys file, chown
RUN useradd rsync_user --create-home
RUN touch /home/rsync_user/.ssh/authorized_keys
RUN chown rsync_user:rsync_user -R /home/rsync_user/.ssh \
            && chmod 0700 /home/rsync_user/.ssh \
            && chmod 0644 /home/rsync_user/.ssh/authorized_keys

# Update apt's cache
RUN apt-get update

## Install what we need
RUN apt-get install -y -q --no-install-recommends \
            python-pip \
            man \
            wget \
            sudo \
            software-properties-common \
            locales \
            ca-certificates \
            ntp

# Ensure UTF-8
RUN locale-gen en_US.UTF-8 && update-locale

# Set the timezone
RUN echo ""US/Central"" > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata

# Install Salt Master (of Masters)
RUN add-apt-repository ppa:saltstack/salt

# Update the apt database
RUN apt-get update

# Install Salt Master
RUN apt-get install -y -q --no-install-recommends \
            salt-master

# Make this Salt Master, Master of Masters
RUN echo ""order_masters: True"" > /etc/salt/master.d/syndic.conf

# Add runit scripts
ADD ./files/runit/ /etc/service/

# Correct the perms, so RUNIT can run...
RUN chmod 0755 -Rv /etc/service/

# SSH Config
ADD ./files/ssh/sshd_config /etc/ssh/

# Use baseimage-docker's init system.
CMD [""/sbin/my_init""]
"
226,11781f913e26cae0eb4f714731cc7fed333bdbcb,fix paths,"fix paths
","# Use an official Python runtime as a parent image
FROM python:3.6-slim

ENV PYTHONUNBUFFERED 1

ENV NODE_ENV production

# add our user and group first to make sure their IDs get assigned consistently
RUN groupadd -r zeus && useradd -r -m -g zeus zeus

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

RUN set -x \
    && apt-get -qy update \
    && apt-get -qy install -y --no-install-recommends \
        gcc git python3-all python3-all-dev python3-pip \
        libxml2-dev libxslt1-dev libpq-dev libffi-dev

# grab gosu for easy step-down from root
RUN set -x \
    && export GOSU_VERSION=1.10 \
    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \
    && wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
    && wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true \
    && apt-get purge -y --auto-remove wget

# grab tini for signal processing and zombie killing
RUN set -x \
    && export TINI_VERSION=0.14.0 \
    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \
    && wget -O /usr/local/bin/tini ""https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini"" \
    && wget -O /usr/local/bin/tini.asc ""https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc"" \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 \
    && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \
    && rm -r ""$GNUPGHOME"" /usr/local/bin/tini.asc \
    && chmod +x /usr/local/bin/tini \
    && tini -h \
    && apt-get purge -y --auto-remove wget

RUN set -x \
    && export NODE_VERSION=8.1.4 \
    && export GNUPGHOME=""$(mktemp -d)"" \
    # gpg keys listed at https://github.com/nodejs/node
    && for key in \
      9554F04D7259F04124DE6B476D5A82AC7E37093B \
      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
      0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
      FD3A5288F042B6850C66B31F09FE44734EB7990E \
      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
      B9AE9905FFD7803F25714661B63B535A4C206CA9 \
      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    ; do \
      gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
    done \
    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \
    && wget ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"" \
    && wget ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
    && gpg --verify SHASUMS256.txt.asc \
    && grep "" node-v$NODE_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt.asc | sha256sum -c - \
    && tar -xzf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
    && rm -r ""$GNUPGHOME"" ""node-v$NODE_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc \
    && apt-get purge -y --auto-remove wget

RUN npm install -g yarn

COPY yarn.lock /usr/src/app/
COPY package.json /usr/src/app/
RUN yarn install

COPY requirements-base.txt /usr/src/app/
RUN pip install -r requirements-base.txt

COPY requirements-dev.txt /usr/src/app/
RUN pip install -r requirements-dev.txt

COPY requirements-test.txt /usr/src/app/
RUN pip install -r requirements-test.txt

COPY . /usr/src/app
RUN pip install -e .
RUN node_modules/.bin/webpack --config=config/webpack.config.dev.js

ENV REPO_ROOT /workspace/repos
RUN mkdir -p $REPO_ROOT

ENV PATH /usr/src/app/bin:$PATH

# Make port 8080 available to the world outside this container
EXPOSE 5000

VOLUME /workspace

ENTRYPOINT [""/usr/src/app/bin/docker-entrypoint""]

# Run Zeus
CMD [""run"", ""-p 5000""]
","# Use an official Python runtime as a parent image
FROM python:3.6-slim

ENV PYTHONUNBUFFERED 1

ENV NODE_ENV production

# add our user and group first to make sure their IDs get assigned consistently
RUN groupadd -r zeus && useradd -r -m -g zeus zeus

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

RUN set -x \
    && apt-get -qy update \
    && apt-get -qy install -y --no-install-recommends \
        gcc git python3-all python3-all-dev python3-pip \
        libxml2-dev libxslt1-dev libpq-dev libffi-dev

# grab gosu for easy step-down from root
RUN set -x \
    && export GOSU_VERSION=1.10 \
    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \
    && wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
    && wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true \
    && apt-get purge -y --auto-remove wget

# grab tini for signal processing and zombie killing
RUN set -x \
    && export TINI_VERSION=0.14.0 \
    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \
    && wget -O /usr/local/bin/tini ""https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini"" \
    && wget -O /usr/local/bin/tini.asc ""https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc"" \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 \
    && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \
    && rm -r ""$GNUPGHOME"" /usr/local/bin/tini.asc \
    && chmod +x /usr/local/bin/tini \
    && tini -h \
    && apt-get purge -y --auto-remove wget

RUN set -x \
    && export NODE_VERSION=8.1.4 \
    && export GNUPGHOME=""$(mktemp -d)"" \
    # gpg keys listed at https://github.com/nodejs/node
    && for key in \
      9554F04D7259F04124DE6B476D5A82AC7E37093B \
      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
      0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
      FD3A5288F042B6850C66B31F09FE44734EB7990E \
      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
      B9AE9905FFD7803F25714661B63B535A4C206CA9 \
      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    ; do \
      gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
    done \
    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \
    && wget ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"" \
    && wget ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
    && gpg --verify SHASUMS256.txt.asc \
    && grep "" node-v$NODE_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt.asc | sha256sum -c - \
    && tar -xzf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
    && rm -r ""$GNUPGHOME"" ""node-v$NODE_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc \
    && apt-get purge -y --auto-remove wget

RUN npm install -g yarn

COPY yarn.lock /usr/src/app/
COPY package.json /usr/src/app/
RUN yarn install

COPY requirements-base.txt /usr/src/app/
RUN pip install -r requirements-base.txt

COPY requirements-dev.txt /usr/src/app/
RUN pip install -r requirements-dev.txt

COPY requirements-test.txt /usr/src/app/
RUN pip install -r requirements-test.txt

COPY . /usr/src/app
RUN pip install -e .
RUN node_modules/.bin/webpack --config=config/webpack.config.dev.js

ENV REPO_ROOT /workspace/repos
RUN mkdir -p $REPO_ROOT

ENV PATH /usr/src/app/bin:$PATH

# Make port 8080 available to the world outside this container
EXPOSE 5000

VOLUME /workspace

ENTRYPOINT [""/usr/src/app/bin/docker-entrypoint""]

# Run Zeus
CMD [""zeus"", ""run"", ""-p 5000""]
"
2124,29adf4b74b1dd6194a49756b70ce860bd294c9b2,[Wen Hao] - update dockerfile.,"[Wen Hao] - update dockerfile.
","FROM centos:centos7

MAINTAINER Wen Hao (https://github.com/wenhao)

# Jenkins LTS packages from
# https://pkg.jenkins.io/redhat-stable/

LABEL version=v1.0.0 \
      k8s.io.description=""Jenkins is a continuous integration server"" \
      k8s.io.display-name=""Jenkins 2.60.2"" \
      openshift.io.expose-services=""8080:http"" \
      openshift.io.tags=""jenkins,jenkins2,ci""

# install java 8
RUN yum install -y git wget zip unzip

ENV JAVA_VERSION=8u144 \
    BUILD_VERSION=b01

RUN wget --no-cookies --no-check-certificate --header ""Cookie: oraclelicense=accept-securebackup-cookie"" ""http://download.oracle.com/otn-pub/java/jdk/$JAVA_VERSION-$BUILD_VERSION/090f390dda5b47b9b721c7dfaa008135/jdk-$JAVA_VERSION-linux-x64.rpm"" -O /tmp/jdk-8-linux-x64.rpm && \
    yum -y install /tmp/jdk-8-linux-x64.rpm && \
    alternatives --install /usr/bin/java java /usr/java/latest/bin/java 20000 && \
    alternatives --install /usr/bin/jar jar /usr/java/latest/bin/jar 20000 && \
    alternatives --install /usr/bin/javaws javaws /usr/java/latest/bin/javaws 20000 && \
    alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 20000

ENV JAVA_HOME /usr/java/latest

# install jenkins
ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=1000
ARG http_port=8080
ARG agent_port=50000
ARG JENKINS_VERSION=2.60.2

ENV HOME=/var/jenkins_home \
    JENKINS_HOME=/var/jenkins_home \
    JENKINS_ADMIN_USERNAME=admin \
    JENKINS_ADMIN_PASSWORD=admin \
    JENKINS_SLAVE_AGENT_PORT=${agent_port} \
    JENKINS_VERSION=${JENKINS_VERSION:-2.60.2}

# Jenkins is run with user `jenkins`, uid = 1000
# If you bind mount a volume from the host or a data container,
# ensure you use the same uid
RUN groupadd -g ${gid} ${group} \
    && useradd -d ""$JENKINS_HOME"" -u ${uid} -g ${gid} -m -s /bin/bash ${user}

# Jenkins home directory is a volume, so configuration and build history
# can be persisted and survive image upgrades
VOLUME /var/jenkins_home

# `/usr/share/jenkins/ref/` contains all reference configuration we want
# to set on a fresh new installation. Use it to bundle additional plugins
# or config file with your custom jenkins Docker image.
RUN mkdir -p /usr/share/jenkins/ref/init.groovy.d

ENV TINI_VERSION v0.14.0
ENV TINI_SHA 6c41ec7d33e857d4779f14d9c74924cab0c7973485d2972419a3b7c7620ff5fd

# Use tini as subreaper in Docker container to adopt zombie processes
RUN curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-amd64 -o /bin/tini && chmod +x /bin/tini \
  && echo ""$TINI_SHA  /bin/tini"" | sha256sum -c -

COPY ./scripts/init.groovy /usr/share/jenkins/ref/init.groovy.d/init.groovy

# jenkins.war checksum, download will be validated using it
ARG JENKINS_SHA=14d0788d89be82958a46965de039a55813f9727bd4d0592dc77905976483ba95

# Can be used to customize where jenkins.war get downloaded from
ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war

# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum
# see https://github.com/docker/docker/issues/8331
RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \
  && echo ""${JENKINS_SHA}  /usr/share/jenkins/jenkins.war"" | sha256sum -c -

ENV JENKINS_UC http://archives.jenkins-ci.org
ENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental

# for main web interface:
EXPOSE ${http_port}

# will be used by attached slave agents:
EXPOSE ${agent_port}

ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log

COPY ./scripts/jenkins-support /usr/local/bin/jenkins-support

# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle
COPY ./scripts/install-plugins.sh /usr/local/bin/install-plugins.sh

# curl -sSL ""http://username:password@myhost.com:port/pluginManager/api/xml?depth=1&xpath=/*/*/shortName|/*/*/version&wrapper=plugins"" | perl -pe 's/.*?<shortName>([\w-]+).*?<version>([^<]+)()(<\/\w+>)+/\1 \2\n/g'|sed 's/ /:/'
COPY ./scripts/plugins.txt /usr/share/jenkins/ref/plugins.txt

# avoid banner
RUN echo -n ${JENKINS_VERSION:-2.60.2} > /usr/share/jenkins/ref/jenkins.install.UpgradeWizard.state && \
    echo -n ${JENKINS_VERSION:-2.60.2} > /usr/share/jenkins/ref/jenkins.install.InstallUtil.lastExecVersion

COPY ./scripts/jenkins.sh /usr/local/bin/jenkins.sh

RUN chmod +x /usr/local/bin/install-plugins.sh /usr/local/bin/jenkins.sh && \
    /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt && \
    chown -R ${user} $JENKINS_HOME /usr/share/jenkins/ref /usr/local/bin && \
    touch ""${COPY_REFERENCE_FILE_LOG}""

# install docker
RUN yum install -y yum-utils device-mapper-persistent-data lvm2 && \
    yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo && \
    yum makecache fast && \
    yum install -y docker-ce && \
    systemctl start docker

USER ${user}
ENTRYPOINT [""/bin/tini"", ""--"", ""/usr/local/bin/jenkins.sh""]
",
79,5451996d9263390cbf34ada2c22252d9a0b15594,Bumped source to 20201201-cae139e,"Bumped source to 20201201-cae139e
","FROM docker.pkg.github.com/dock0/arch/arch:20201201-b0a7036
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20201201-cae139e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
105,e28a824971ee6773d4f9f85a41d0f13e0351e648,Update Node.js to v18 (#7643),"Update Node.js to v18 (#7643)

Co-authored-by: Renovate Bot <c71e7261d37a4f6ae4cfb0cbd79081310a237e67@renovateapp.com>","FROM node:14

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y xorg xvfb libxss-dev libgtk-3-0 gconf2 libnss3 libasound2 libsecret-1-0

ENV CXX=""g++-4.9""
ENV CC=""gcc-4.9""
ENV DISPLAY=:99.0

WORKDIR /app

ENTRYPOINT [""sh"", ""-c"", ""(Xvfb $DISPLAY -screen 0 1024x768x16 &) && npm run test""]
","FROM node:18

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y xorg xvfb libxss-dev libgtk-3-0 gconf2 libnss3 libasound2 libsecret-1-0

ENV CXX=""g++-4.9""
ENV CC=""gcc-4.9""
ENV DISPLAY=:99.0

WORKDIR /app

ENTRYPOINT [""sh"", ""-c"", ""(Xvfb $DISPLAY -screen 0 1024x768x16 &) && npm run test""]
"
2276,272513f0e73daa13231b4b35b1fc270788c2b427,Update Dockerfile,Update Dockerfile,"FROM postgres:11-alpine

RUN apk add --no-cache curl jq

ENV DB_NAME=""""
ENV DB_SCHEMA=""""
ENV DB_CRUD_USER=""""
ENV DB_CRUD_PASS=""""
ENV DB_R_USER=""""
ENV DB_R_PASS=""""

COPY ./users.sql                         /docker-entrypoint-initdb.d/01.sql
COPY ./database.sql                      /docker-entrypoint-initdb.d/02.sql
COPY ./functions/row_inserted.sql        /docker-entrypoint-initdb.d/03.sql
COPY ./functions/row_updated.sql         /docker-entrypoint-initdb.d/04.sql
COPY ./tables/api.taxonomy.sql           /docker-entrypoint-initdb.d/05.sql
COPY ./tables/api.statuses.sql           /docker-entrypoint-initdb.d/06.sql
COPY ./tables/api.scopes.sql             /docker-entrypoint-initdb.d/07.sql
COPY ./tables/api.components.sql         /docker-entrypoint-initdb.d/08.sql
COPY ./tables/api.comments.sql           /docker-entrypoint-initdb.d/09.sql
COPY ./tables/api.links.sql              /docker-entrypoint-initdb.d/10.sql
COPY ./tables/api.usecases.sql           /docker-entrypoint-initdb.d/11.sql
COPY ./tables/api.component_taxonomy.sql /docker-entrypoint-initdb.d/12.sql
COPY ./views/api.w_usecases.sql          /docker-entrypoint-initdb.d/13.sql
COPY ./views/api.w_components.sql        /docker-entrypoint-initdb.d/14.sql
COPY ./views/api.w_taxonomy.sql          /docker-entrypoint-initdb.d/15.sql

ENTRYPOINT [""entrypoint.sh""]
",
407,833ac22b7a805cee6e4e11c15a7a61201c26e118,Bumped source to 20220514-b2fe335,"Bumped source to 20220514-b2fe335
","FROM ghcr.io/dock0/arch:20220514-1763649
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220514-b2fe335
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
268,9ca96efee277bfc1148f512dcc087636f7cf8ec1,Debugging.,"Debugging.
","# DOCKER-VERSION 0.3.4
# image olafradicke/fedora20-icinga2-check_km
# Install based on Doku http://docs.icinga.org/icinga2/latest/doc/module/icinga2/chapter/getting-started

FROM fedora:20
MAINTAINER Olaf Raicke <olaf@atix.de>

ENV ICINGA2_USER icinga
ENV ICINGA2_GROUP icingacmd
ENV ICINGA2_CONFIG_FILE /etc/icinga2/icinga.cfg
ENV ICINGA2_ERROR_LOG /var/log/icinga2/error.log

ENV BUILD_DIR /tmp

RUN yum -y update
RUN yum -y --setopt=tsflags=nodocs install wget
#tar gzip cmake make bison flex gcc-c++ boost-devel
RUN yum -y --setopt=tsflags=nodocs install httpd gcc glibc glibc-common gd gd-devel
RUN yum -y --setopt=tsflags=nodocs install libjpeg libjpeg-devel libpng libpng-devel
RUN yum -y --setopt=tsflags=nodocs install net-snmp net-snmp-devel net-snmp-utils
RUN yum clean all

RUN wget http://packages.icinga.org/fedora/ICINGA-release.repo -O /etc/yum.repos.d/ICINGA-release.repo
RUN yum makecache
RUN yum -y --setopt=tsflags=nodocs install icinga2 nagios-plugins-all

RUN echo ""/usr/sbin/icinga2 -d -e $ICINGA2_ERROR_LOG -u $ICINGA2_USER  -g $ICINGA2_GROUP $ICINGA2_CONFIG_FILE && echo icinga is started... > /tmp/icinga.out"" > /opt/icinga2_start.sh

# /usr/sbin/icinga2 -d /usr/local/icinga/etc/icinga.cfg
RUN chmod 770 /opt/icinga2_start.sh
RUN mkdir /var/run/icinga2/
RUN chown $ICINGA2_USER.$ICINGA2_GROUP /var/run/icinga2/

#############################

# check_mk
RUN  yum -y install --nogpgcheck  https://mathias-kettner.de/download/check_mk-agent-1.2.4p5-1.noarch.rpm

###################################################

# for password less logins
VOLUME [""/root/.ssh:/var/docker-container/root-ssh""]
EXPOSE 22

############################################
# ENTRYPOINT  [""/opt/icinga2_start.sh""]

ENTRYPOINT  [""/usr/sbin/icinga2""]
CMD [""--daemonize"",""--errorlog"",""/var/log/icinga2/error.log"",""--user"",""icinga"",""--group"",""icingacmd"",""/etc/icinga2/icinga.cfg"",""&""]







","# DOCKER-VERSION 0.3.4
# image olafradicke/fedora20-icinga2-check_km
# Install based on Doku http://docs.icinga.org/icinga2/latest/doc/module/icinga2/chapter/getting-started

FROM fedora:20
MAINTAINER Olaf Raicke <olaf@atix.de>

ENV ICINGA2_USER icinga
ENV ICINGA2_GROUP icingacmd
ENV ICINGA2_CONFIG_FILE /etc/icinga2/icinga.cfg
ENV ICINGA2_ERROR_LOG /var/log/icinga2/error.log

ENV BUILD_DIR /tmp

RUN yum -y update
RUN yum -y --setopt=tsflags=nodocs install wget
#tar gzip cmake make bison flex gcc-c++ boost-devel
RUN yum -y --setopt=tsflags=nodocs install httpd gcc glibc glibc-common gd gd-devel
RUN yum -y --setopt=tsflags=nodocs install libjpeg libjpeg-devel libpng libpng-devel
RUN yum -y --setopt=tsflags=nodocs install net-snmp net-snmp-devel net-snmp-utils
RUN yum clean all

RUN wget http://packages.icinga.org/fedora/ICINGA-release.repo -O /etc/yum.repos.d/ICINGA-release.repo
RUN yum makecache
RUN yum -y --setopt=tsflags=nodocs install icinga2 nagios-plugins-all

RUN echo ""/usr/sbin/icinga2 -d -e $ICINGA2_ERROR_LOG -u $ICINGA2_USER  -g $ICINGA2_GROUP $ICINGA2_CONFIG_FILE && echo icinga is started... > /tmp/icinga.out"" > /opt/icinga2_start.sh

# /usr/sbin/icinga2 -d /usr/local/icinga/etc/icinga.cfg
RUN chmod 770 /opt/icinga2_start.sh
RUN mkdir /var/run/icinga2/
RUN chown $ICINGA2_USER.$ICINGA2_GROUP /var/run/icinga2/

#############################

# check_mk
RUN  yum -y install --nogpgcheck  https://mathias-kettner.de/download/check_mk-agent-1.2.4p5-1.noarch.rpm

###################################################

# for password less logins
VOLUME [""/root/.ssh:/var/docker-container/root-ssh""]
EXPOSE 22

############################################
# ENTRYPOINT  [""/opt/icinga2_start.sh""]

ENTRYPOINT  [""/usr/sbin/icinga2""]
CMD [""--daemonize"",""--errorlog"",""/var/log/icinga2/error.log"",""--user"",""icinga"",""--group"",""icingacmd"",""/etc/icinga2/icinga.cfg""]







"
67,47ef33928f5b668a93061406e4d400d6e75f16e6,Bumped source to 20200328-c42f720,"Bumped source to 20200328-c42f720
","FROM docker.pkg.github.com/dock0/service/service:20200328-ecbb6dc
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200328-c42f720
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
27,8d47ced7d134f032c395c67a61351ba07c999b24,fix bug in Dockerfile,"fix bug in Dockerfile
","# to build the image
#
#   sudo docker build -t simonsdave/cloudfeaster .
#
# for testing/debugging
#
#   sudo docker run -i -t simonsdave/cloudfeaster /bin/bash
#
# to push to dockerhub
#
#   sudo docker push simonsdave/cloudfeaster
#

FROM ubuntu:14.04

MAINTAINER Dave Simons

RUN apt-get update -y

# was getting ""chfn: PAM: System error"" messages during install
# and advice from following page was to do the ""ln -s""
# http://stackoverflow.com/questions/25193161/chfn-pam-system-error-intermittently-in-docker-hub-builds/25267015#25267015
RUN ln -s -f /bin/true /usr/bin/chfn

RUN apt-get install -y curl
RUN curl https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
RUN sh -c 'echo ""deb http://dl.google.com/linux/chrome/deb/ stable main"" >> /etc/apt/sources.list.d/google.list'
RUN apt-get update
RUN apt-get install -y google-chrome-stable

RUN apt-get install -y xvfb

RUN apt-get install -y unzip
RUN curl -s --output chromedriver.zip http://chromedriver.storage.googleapis.com/2.19/chromedriver_linux64.zip
RUN unzip chromedriver.zip
RUN rm chromedriver.zip
RUN mv chromedriver /usr/bin/.
RUN chown root.root /usr/bin/chromedriver
RUN chmod a+wrx /usr/bin/chromedriver

RUN apt-get install -y python
RUN apt-get install -y python-pip
RUN pip install pip==1.5.6

RUN mkdir /tmp/clf
ADD bin /tmp/clf/bin
ADD cloudfeaster /tmp/clf/cloudfeaster
COPY setup.py /tmp/clf/setup.py
COPY MANIFEST.in /tmp/clf/MANIFEST.in

RUN cd /tmp/clf; python setup.py sdist --formats=gztar

RUN pip install --process-dependency-links /tmp/clf/dist/cloudfeaster-*.*.*.tar.gz

RUN rm -rf /tmp/clf
","# to build the image
#
#   sudo docker build -t simonsdave/cloudfeaster .
#
# for testing/debugging
#
#   sudo docker run -i -t simonsdave/cloudfeaster /bin/bash
#
# to push to dockerhub
#
#   sudo docker push simonsdave/cloudfeaster
#

FROM ubuntu:14.04

MAINTAINER Dave Simons

RUN apt-get update -y

# was getting ""chfn: PAM: System error"" messages during install
# and advice from following page was to do the ""ln -s""
# http://stackoverflow.com/questions/25193161/chfn-pam-system-error-intermittently-in-docker-hub-builds/25267015#25267015
RUN ln -s -f /bin/true /usr/bin/chfn

RUN apt-get install -y curl
RUN curl https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
RUN sh -c 'echo ""deb http://dl.google.com/linux/chrome/deb/ stable main"" >> /etc/apt/sources.list.d/google.list'
RUN apt-get update
RUN apt-get install -y google-chrome-stable

RUN apt-get install -y xvfb

RUN apt-get install -y unzip
RUN curl -s --output chromedriver.zip http://chromedriver.storage.googleapis.com/2.19/chromedriver_linux64.zip
RUN unzip chromedriver.zip
RUN rm chromedriver.zip
RUN mv chromedriver /usr/bin/.
RUN chown root.root /usr/bin/chromedriver
RUN chmod a+wrx /usr/bin/chromedriver

RUN apt-get install -y python
RUN apt-get install -y python-pip
RUN pip install pip==1.5.6

COPY cloudfeaster.tar.gz /tmp/cloudfeaster.tar.gz

RUN pip install --process-dependency-links /tmp/cloudfeaster.tar.gz

RUN rm -rf /tmp/cloudfeaster.tar.gz
"
64,74065d913dec2ed7603f87e440a05bc207ec2551,Bump ruby version to 2.2.3,"Bump ruby version to 2.2.3
","FROM ruby:2.2.2-onbuild

MAINTAINER Issei Naruta <mimitako@gmail.com>

ENV LANG C.UTF-8

ENTRYPOINT [""fav2reblog""]
CMD [""-c"", ""fav2reblog.yml"", ""-i"", ""60""]
","FROM ruby:2.2.3-onbuild

MAINTAINER Issei Naruta <mimitako@gmail.com>

ENV LANG C.UTF-8

ENTRYPOINT [""fav2reblog""]
CMD [""-c"", ""fav2reblog.yml"", ""-i"", ""60""]
"
2234,27c2dc317c3ce0f5b4eb02f8a4820afbddd2343f,Upgrade,Upgrade,,
2317,129bf3a6958778ec7da4cb752eb7d2474a9a1074,bump template,"bump template

Should fix the issue with using default allowed groups in combination with the login service","FROM semtech/mu-ruby-template:2.11.0

MAINTAINER Erika Pauwels <erika.pauwels@gmail.com>

ENV MU_APPLICATION_SALT ''
ENV USERS_GRAPH 'http://mu.semte.ch/application'
ENV SESSIONS_GRAPH 'http://mu.semte.ch/application'
",
211,587c28716217c0655b0abb9a8e9b417d2e21967f,Bumped source to 20201008-5afda63,"Bumped source to 20201008-5afda63
","FROM docker.pkg.github.com/dock0/service/service:20201008-6d6c2be
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20201008-5afda63
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
321,14cad570ad73905ba73be83fbcaa548b511f2e1d,change ADD to COPY,"change ADD to COPY
","FROM python:3.8-slim as app
ENV PYTHONUNBUFFERED 1
RUN pip install --upgrade pipenv gunicorn
WORKDIR /app
COPY Pipfile /app/
RUN pipenv lock
RUN pipenv install --deploy --system
ADD manage.py /app/
ADD api /app/api
ADD babybuddy /app/babybuddy
ADD core /app/core
ADD dashboard /app/dashboard
ADD locale /app/locale
ADD reports /app/reports
ADD static /app/static
ADD etc/gunicorn.py /app/
","FROM python:3.8-slim as app
ENV PYTHONUNBUFFERED 1
RUN pip install --upgrade pipenv gunicorn
WORKDIR /app
COPY Pipfile /app/
RUN pipenv lock
RUN pipenv install --deploy --system
COPY manage.py /app/
COPY api /app/api
COPY babybuddy /app/babybuddy
COPY core /app/core
COPY dashboard /app/dashboard
COPY locale /app/locale
COPY reports /app/reports
COPY static /app/static
COPY etc/gunicorn.py /app/
"
139,08d7719eb074c3d393a33306e645bb01b2b234c1,Bumped source to 20200730-62b8ab8,"Bumped source to 20200730-62b8ab8
","FROM docker.pkg.github.com/dock0/arch/arch:20200730-cec5f17
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20200730-62b8ab8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
249,f849f6690811669d05e64ab623598d788ee39b9f,Add debugging information to Dockerfile,"Add debugging information to Dockerfile
","FROM golang:1.9
MAINTAINER The Stripe Observability Team <support@stripe.com>

RUN mkdir -p /build
ENV GOPATH=/go
RUN apt-get update
RUN apt-get install -y zip
RUN go get -u -v github.com/ChimeraCoder/gojson/gojson
RUN go get -u -v github.com/golang/protobuf/protoc-gen-go
RUN go get -u -v github.com/gogo/protobuf/protoc-gen-gofast
RUN go get -u github.com/golang/dep/cmd/dep
RUN wget https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip
RUN unzip protoc-3.1.0-linux-x86_64.zip
RUN cp bin/protoc /usr/bin/protoc
RUN chmod 777 /usr/bin/protoc

WORKDIR /go/src/github.com/stripe/veneur
ADD . /go/src/github.com/stripe/veneur


# If running locally, ignore any changes since
# the last commit
RUN git reset --hard HEAD && git status

# Unlike the travis build file, we do NOT need to
# ignore changes to protobuf-generated output
# because we are guaranteed only one version of Go
# used to build protoc-gen-go
RUN go generate
RUN dep ensure -v
RUN gofmt -w .

# Stage any changes caused by go generate and gofmt,
# then confirm that there are no staged changes.
#
# If `go generate` or `gofmt` yielded any changes,
# this will fail with an error message like ""too many arguments""
# or ""M: binary operator expected""
# Due to overlayfs peculiarities, running git diff-index without --cached
# won't work, because it'll compare the mtimes (which have changed), and
# therefore reports that the file may have changed (ie, a series of 0s)
# See https://github.com/stripe/veneur/pull/110#discussion_r92843581
RUN git add .
RUN git diff-index --cached --exit-code HEAD


RUN go test -race -v -timeout 60s ./...
CMD cp -r henson /build/ && env GOBIN=/build go install -a -v -ldflags ""-X github.com/stripe/veneur.VERSION=$(git rev-parse HEAD)"" ./cmd/...
","FROM golang:1.9
MAINTAINER The Stripe Observability Team <support@stripe.com>

RUN mkdir -p /build
ENV GOPATH=/go
RUN apt-get update
RUN apt-get install -y zip
RUN go get -u -v github.com/ChimeraCoder/gojson/gojson
RUN go get -u -v github.com/golang/protobuf/protoc-gen-go
RUN go get -u -v github.com/gogo/protobuf/protoc-gen-gofast
RUN go get -u github.com/golang/dep/cmd/dep
RUN wget https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip
RUN unzip protoc-3.1.0-linux-x86_64.zip
RUN cp bin/protoc /usr/bin/protoc
RUN chmod 777 /usr/bin/protoc

WORKDIR /go/src/github.com/stripe/veneur
ADD . /go/src/github.com/stripe/veneur


# If running locally, ignore any changes since
# the last commit
RUN git reset --hard HEAD && git status

# Unlike the travis build file, we do NOT need to
# ignore changes to protobuf-generated output
# because we are guaranteed only one version of Go
# used to build protoc-gen-go
RUN go generate
RUN dep ensure -v
RUN gofmt -w .

# Stage any changes caused by go generate and gofmt,
# then confirm that there are no staged changes.
#
# If `go generate` or `gofmt` yielded any changes,
# this will fail with an error message like ""too many arguments""
# or ""M: binary operator expected""
# Due to overlayfs peculiarities, running git diff-index without --cached
# won't work, because it'll compare the mtimes (which have changed), and
# therefore reports that the file may have changed (ie, a series of 0s)
# See https://github.com/stripe/veneur/pull/110#discussion_r92843581
RUN git add .
# The output will be empty unless the build fails, in which case this
# information is helpful in debugging
RUN git diff --cached
RUN git diff-index --cached --exit-code HEAD


RUN go test -race -v -timeout 60s ./...
CMD cp -r henson /build/ && env GOBIN=/build go install -a -v -ldflags ""-X github.com/stripe/veneur.VERSION=$(git rev-parse HEAD)"" ./cmd/...
"
293,77e838bdbfe70624a878d63d207e0c5e7744c2f7,Bumped source to 20200218-0cb8337,"Bumped source to 20200218-0cb8337
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200218-b41fa16
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200218-0cb8337
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
171,03313769a60a57650d6f037deea10dab730372af,Bumped source to 20200214-c47b88c,"Bumped source to 20200214-c47b88c
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200214-54a8d1a
MAINTAINER akerl <me@lesaker.org>
RUN yes | pacman -Syu --force --needed --nodeps \
    curl-amylum \
    gmp-amylum \
    gnupg-amylum \
    gpgme-amylum \
    krb5-amylum \
    libarchive-amylum \
    libassuan-amylum \
    libgcrypt-amylum \
    libgpg-error-amylum \
    libtasn1-amylum \
    libunistring-amylum \
    musl-amylum \
    nettle-amylum \
    openssh-amylum \
    openssl-amylum \
    p11-kit-amylum \
    pacman-amylum \
    pacman-mirrorlist-amylum \
    sqlite-amylum
RUN mv /etc/pacman.conf.pacsave /etc/pacman.conf && \
    mv /etc/pacman.d/mirrorlist.pacsave /etc/pacman.d/mirrorlist
RUN cp /usr/bin/xz /usr/local/bin/ && \
    cp -a /usr/lib/liblzma* /usr/local/lib && \
    echo ""/usr/local/lib"" > /etc/ld.so.conf.d/local.conf && \
    ldconfig && \
    yes | pacman -S xz-amylum && \
    rm -f /usr/local/bin/xz /usr/local/lib/liblzma* /etc/ld.so.conf.d/local.conf && \
    ldconfig
RUN yes | pacman -S --needed \
    bash-amylum \
    coreutils-amylum \
    git-amylum \
    gzip-amylum \
    iproute2-amylum \
    iputils-amylum \
    procps-ng-amylum \
    shadow-amylum \
    tar-amylum \
    util-linux-amylum \
    which-amylum \
    zlib-amylum
RUN pacman -R --noconfirm \
    libldap \
    e2fsprogs
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200214-c47b88c
MAINTAINER akerl <me@lesaker.org>
RUN yes | pacman -Syu --force --needed --nodeps \
    curl-amylum \
    gmp-amylum \
    gnupg-amylum \
    gpgme-amylum \
    krb5-amylum \
    libarchive-amylum \
    libassuan-amylum \
    libgcrypt-amylum \
    libgpg-error-amylum \
    libtasn1-amylum \
    libunistring-amylum \
    musl-amylum \
    nettle-amylum \
    openssh-amylum \
    openssl-amylum \
    p11-kit-amylum \
    pacman-amylum \
    pacman-mirrorlist-amylum \
    sqlite-amylum
RUN mv /etc/pacman.conf.pacsave /etc/pacman.conf && \
    mv /etc/pacman.d/mirrorlist.pacsave /etc/pacman.d/mirrorlist
RUN cp /usr/bin/xz /usr/local/bin/ && \
    cp -a /usr/lib/liblzma* /usr/local/lib && \
    echo ""/usr/local/lib"" > /etc/ld.so.conf.d/local.conf && \
    ldconfig && \
    yes | pacman -S xz-amylum && \
    rm -f /usr/local/bin/xz /usr/local/lib/liblzma* /etc/ld.so.conf.d/local.conf && \
    ldconfig
RUN yes | pacman -S --needed \
    bash-amylum \
    coreutils-amylum \
    git-amylum \
    gzip-amylum \
    iproute2-amylum \
    iputils-amylum \
    procps-ng-amylum \
    shadow-amylum \
    tar-amylum \
    util-linux-amylum \
    which-amylum \
    zlib-amylum
RUN pacman -R --noconfirm \
    libldap \
    e2fsprogs
"
2263,876fe93570b4e03df76f102b028223c4839e5b0d,Bumped source to 20210905-c1ef314,"Bumped source to 20210905-c1ef314
","FROM docker.pkg.github.com/dock0/arch/arch:20210905-f4f3473
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
2292,c5408b9b7636958d1156f1939e4079ad683b98df,Fix permissions of `app/cache` dir,"Fix permissions of `app/cache` dir
","FROM debian:wheezy
MAINTAINER William Durand <william.durand1@gmail.com>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -y
RUN apt-get install -y nginx php5-fpm php5-sqlite php5-cli supervisor curl git-core

# Install composer
RUN curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer

# Install NodeJS
RUN curl -sL https://deb.nodesource.com/setup | bash -
RUN apt-get install -y nodejs

# We do two things here. First, configuring php5-fpm and nginx to run in the
# foreground so supervisord can keep track of them later. Then we configure
# php5-fpm to run with the user as the web server, to avoid a few issues with
# file permissions.
RUN sed -e 's/;daemonize = yes/daemonize = no/' -i /etc/php5/fpm/php-fpm.conf
RUN sed -e 's/;listen\.owner/listen.owner/' -i /etc/php5/fpm/pool.d/www.conf
RUN sed -e 's/;listen\.group/listen.group/' -i /etc/php5/fpm/pool.d/www.conf
RUN echo ""\ndaemon off;"" >> /etc/nginx/nginx.conf

# Install a couple of configuration files.
ADD app/config/docker/vhost.conf /etc/nginx/sites-available/default
ADD app/config/docker/supervisor.conf /etc/supervisor/conf.d/supervisor.conf

# Install Propilex
ADD . /srv/propilex
WORKDIR /srv/propilex

RUN composer install --prefer-dist --no-dev
RUN npm install
RUN ./node_modules/.bin/bower install --allow-root
RUN cp app/config/propel/runtime-conf.xml.dist app/config/propel/runtime-conf.xml
RUN cp app/config/propel/build.properties.dist app/config/propel/build.properties
RUN chmod +x vendor/propel/propel1/generator/bin/phing.php
RUN bin/bootstrap
RUN chown www-data:www-data app/cache/database.db

# Forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log
RUN ln -sf /dev/stderr /var/log/nginx/error.log

EXPOSE 80

CMD [""/usr/bin/supervisord""]
",
198,10bcb6184ca7779766289104193bb5f567c648e5,Bumped source to 20211221-3af6661,"Bumped source to 20211221-3af6661
","FROM docker.pkg.github.com/dock0/arch/arch:20211221-b0cfb87
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20211221-3af6661
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
134,ea78adaf6321fce0ddd63f388b49801a4426a881,Bumped source to 20210803-f1e279c,"Bumped source to 20210803-f1e279c
","FROM docker.pkg.github.com/dock0/service/service:20210803-2386ccc
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20210803-f1e279c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2258,cf90b840d3ac7eecee1bdf570aad657b5d939c6c,Bumped source to 20201115-1030562,"Bumped source to 20201115-1030562
","FROM docker.pkg.github.com/dock0/arch/arch:20201115-2d39c60
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2199,92ff18294d65e48487242b325db2986bed8fdc7f,Updated to 10.1.3-ce.0,"Updated to 10.1.3-ce.0
","FROM gitlab/gitlab-ce:10.1.2-ce.0

RUN \
  apt-get update && \
  apt-get install cron && \
  apt-get clean all

ENV BACKUP_TIME=""0 12 * * *""

COPY container-files /
",
2264,ab4e14c8f6445ec4d856134d9bbda3387a8a288f,Upgrade node and npm versions in docker image,"Upgrade node and npm versions in docker image

Change-Id: I0005623ee10b643bd639a8b674cc1522591f276c
","FROM    ubuntu
# Author / Maintainer
MAINTAINER Silkroad Team <support-silkroad@bq.com>

# Update repository
RUN apt-get update

# Install dependencies
RUN apt-get -y install curl
RUN curl -sL https://deb.nodesource.com/setup | sudo bash -

# Install nodejs
RUN apt-get -y install nodejs git git-core

# Copy app source
COPY . /src

# Install dev dependencies
RUN cd /src; npm install

# Expose port
EXPOSE  3000

# Enable corbel-composer
CMD cd /src; npm start",
2197,a0056b1a88014533e8addc6021e106e2877aa1f8,should fix build inconsistencies for razor,"should fix build inconsistencies for razor

","FROM docker.io/debian:buster-slim

ARG VCS_VER
ARG VCS_REF
ARG DEBIAN_FRONTEND=noninteractive

LABEL org.opencontainers.image.version=${VCS_VER}
LABEL org.opencontainers.image.revision=${VCS_REF}
LABEL org.opencontainers.image.title=""docker-mailserver""
LABEL org.opencontainers.image.vendor=""The Docker Mailserver Organization""
LABEL org.opencontainers.image.authors=""The Docker Mailserver Organization on GitHub""
LABEL org.opencontainers.image.licenses=""MIT""
LABEL org.opencontainers.image.description=""A fullstack but simple mail server (SMTP, IMAP, LDAP, Antispam, Antivirus, etc.). Only configuration files, no SQL database.""
LABEL org.opencontainers.image.url=""https://github.com/docker-mailserver""
LABEL org.opencontainers.image.documentation=""https://github.com/docker-mailserver/docker-mailserver/blob/master/README.md""
LABEL org.opencontainers.image.source=""https://github.com/docker-mailserver/docker-mailserver""

ENV ENABLE_POSTGREY=0
ENV FETCHMAIL_POLL=300
ENV ONE_DIR=0
ENV POSTGREY_AUTO_WHITELIST_CLIENTS=5
ENV POSTGREY_DELAY=300
ENV POSTGREY_MAX_AGE=35
ENV POSTGREY_TEXT=""Delayed by Postgrey""
ENV SASLAUTHD_MECHANISMS=pam
ENV SASLAUTHD_MECH_OPTIONS=""""
ENV VIRUSMAILS_DELETE_DELAY=7

SHELL [""/bin/bash"", ""-o"", ""pipefail"", ""-c""]

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– Install Basic Software ––––––––––––––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

RUN \
  apt-get -qq --fix-missing update && \
  apt-get -y dist-upgrade >/dev/null && \
  apt-get -y install apt-utils &>/dev/null && \
  apt-get -y install postfix >/dev/null && \
  apt-get -y --no-install-recommends install \
  # A - D
  altermime amavisd-new apt-transport-https arj binutils bzip2 \
  dovecot-core dovecot-imapd dovecot-ldap dovecot-lmtpd \
  dovecot-managesieved dovecot-pop3d dovecot-sieve dovecot-solr \
  dumb-init ca-certificates cabextract clamav clamav-daemon cpio curl \
  # E - O
  ed fail2ban fetchmail file gamin gnupg gzip iproute2 iptables \
  locales logwatch lhasa libdate-manip-perl liblz4-tool \
  libmail-spf-perl libnet-dns-perl libsasl2-modules lrzip lzop \
  netcat-openbsd nomarch opendkim opendkim-tools opendmarc \
  # P - Z
  pax pflogsumm postgrey p7zip-full postfix-ldap postfix-pcre \
  postfix-policyd-spf-python postsrsd pyzor \
  razor rpm2cpio rsyslog sasl2-bin spamassassin supervisor \
  unrar-free unzip whois xz-utils >/dev/null && \
  # cleanup
  apt-get -qq autoclean && \
  apt-get -qq clean && \
  rm -rf /var/lib/apt/lists/* && \
  c_rehash 2>/dev/null

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– ClamAV & FeshClam –––––––––––––––––––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

RUN \
  echo '0 */6 * * * clamav /usr/bin/freshclam --quiet' > /etc/cron.d/clamav-freshclam && \
  chmod 644 /etc/clamav/freshclam.conf && \
  freshclam && \
  sed -i 's/Foreground false/Foreground true/g' /etc/clamav/clamd.conf && \
  mkdir /var/run/clamav && \
  chown -R clamav:root /var/run/clamav && \
  rm -rf /var/log/clamav/

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– Dovecot & MkCert ––––––––––––––––––––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

COPY target/dovecot/auth-passwdfile.inc target/dovecot/??-*.conf /etc/dovecot/conf.d/
COPY target/dovecot/sieve/ /etc/dovecot/sieve/
COPY target/dovecot/dovecot-purge.cron /etc/cron.d/dovecot-purge.disabled
RUN chmod 0 /etc/cron.d/dovecot-purge.disabled
WORKDIR /usr/share/dovecot

# hadolint ignore=SC2016,SC2086,SC2069
RUN \
  sed -i -e 's/include_try \/usr\/share\/dovecot\/protocols\.d/include_try \/etc\/dovecot\/protocols\.d/g' /etc/dovecot/dovecot.conf && \
  sed -i -e 's/#mail_plugins = \$mail_plugins/mail_plugins = \$mail_plugins sieve/g' /etc/dovecot/conf.d/15-lda.conf && \
  sed -i -e 's/^.*lda_mailbox_autocreate.*/lda_mailbox_autocreate = yes/g' /etc/dovecot/conf.d/15-lda.conf && \
  sed -i -e 's/^.*lda_mailbox_autosubscribe.*/lda_mailbox_autosubscribe = yes/g' /etc/dovecot/conf.d/15-lda.conf && \
  sed -i -e 's/^.*postmaster_address.*/postmaster_address = '${POSTMASTER_ADDRESS:=""postmaster@domain.com""}'/g' /etc/dovecot/conf.d/15-lda.conf && \
  sed -i 's/#imap_idle_notify_interval = 2 mins/imap_idle_notify_interval = 29 mins/' /etc/dovecot/conf.d/20-imap.conf && \
  # adapt mkcert for Dovecot community repo
  sed -i 's/CERTDIR=.*/CERTDIR=\/etc\/dovecot\/ssl/g' /usr/share/dovecot/mkcert.sh && \
  sed -i 's/KEYDIR=.*/KEYDIR=\/etc\/dovecot\/ssl/g' /usr/share/dovecot/mkcert.sh && \
  sed -i 's/KEYFILE=.*/KEYFILE=\$KEYDIR\/dovecot.key/g' /usr/share/dovecot/mkcert.sh && \
  sed -i 's/RANDFILE.*//g' /usr/share/dovecot/dovecot-openssl.cnf && \
  mkdir /etc/dovecot/ssl && \
  chmod 755 /etc/dovecot/ssl && \
  ./mkcert.sh 2>&1 >/dev/null && \
  mkdir -p /usr/lib/dovecot/sieve-pipe /usr/lib/dovecot/sieve-filter /usr/lib/dovecot/sieve-global && \
  chmod 755 -R /usr/lib/dovecot/sieve-pipe /usr/lib/dovecot/sieve-filter /usr/lib/dovecot/sieve-global

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– LDAP & Spamassassin's Cron ––––––––––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

COPY target/dovecot/dovecot-ldap.conf.ext /etc/dovecot
COPY \
  target/postfix/ldap-users.cf \
  target/postfix/ldap-groups.cf \
  target/postfix/ldap-aliases.cf \
  target/postfix/ldap-domains.cf \
  /etc/postfix/

# hadolint ignore=SC2016
RUN \
  sed -i -r 's/^(CRON)=0/\1=1/g' /etc/default/spamassassin && \
  sed -i -r 's/^\$INIT restart/supervisorctl restart amavis/g' /etc/spamassassin/sa-update-hooks.d/amavisd-new

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– Scripts & Miscellaneous –––––––––––––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

COPY \
  ./target/bin/* \
  ./target/scripts/*.sh \
  ./target/docker-configomat/configomat.sh \
  /usr/local/bin/

RUN \
  chmod +x /usr/local/bin/* && \
  rm -rf /usr/share/locale/* && \
  rm -rf /usr/share/man/* && \
  rm -rf /usr/share/doc/* && \
  touch /var/log/auth.log && \
  update-locale && \
  rm /etc/postsrsd.secret && \
  rm /etc/cron.daily/00logwatch

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– PostSRSD, Postgrey & Amavis –––––––––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

COPY target/postsrsd/postsrsd /etc/default/postsrsd
COPY target/postgrey/postgrey /etc/default/postgrey
COPY target/postgrey/postgrey.init /etc/init.d/postgrey
RUN \
  chmod 755 /etc/init.d/postgrey && \
  mkdir /var/run/postgrey && \
  chown postgrey:postgrey /var/run/postgrey

COPY target/amavis/conf.d/* /etc/amavis/conf.d/
RUN \
  sed -i -r 's/#(@|   \\%)bypass/\1bypass/g' /etc/amavis/conf.d/15-content_filter_mode && \
  adduser clamav amavis >/dev/null && \
  adduser amavis clamav >/dev/null && \
  # no syslog user in Debian compared to Ubuntu
  adduser --system syslog >/dev/null && \
  useradd -u 5000 -d /home/docker -s /bin/bash -p ""$(echo docker | openssl passwd -1 -stdin)"" docker >/dev/null && \
  echo ""0 4 * * * /usr/local/bin/virus-wiper"" | crontab - && \
  chmod 644 /etc/amavis/conf.d/*

RUN su - amavis -c ""razor-admin -create && sleep 3 && razor-admin -register""

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– Fail2Ban, DKIM & DMARC ––––––––––––––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

COPY target/fail2ban/jail.conf /etc/fail2ban/jail.conf
COPY target/fail2ban/filter.d/postfix-sasl.conf /etc/fail2ban/filter.d/postfix-sasl.conf
RUN mkdir /var/run/fail2ban

COPY target/opendkim/opendkim.conf /etc/opendkim.conf
COPY target/opendkim/default-opendkim /etc/default/opendkim

COPY target/opendmarc/opendmarc.conf /etc/opendmarc.conf
COPY target/opendmarc/default-opendmarc /etc/default/opendmarc
COPY target/opendmarc/ignore.hosts /etc/opendmarc/ignore.hosts

RUN \
  # switch iptables and ip6tables to legacy for Fail2Ban
  update-alternatives --set iptables /usr/sbin/iptables-legacy && \
  update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– Fetchmail, Postfix & Let'sEncrypt –––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

COPY target/fetchmail/fetchmailrc /etc/fetchmailrc_general
COPY target/postfix/main.cf target/postfix/master.cf /etc/postfix/
COPY target/shared/ffdhe4096.pem /etc/postfix/shared/ffdhe4096.pem
COPY \
  target/postfix/header_checks.pcre \
  target/postfix/sender_header_filter.pcre \
  target/postfix/sender_login_maps.pcre \
  /etc/postfix/maps/

RUN \
  : >/etc/aliases && \
  sed -i 's/START_DAEMON=no/START_DAEMON=yes/g' /etc/default/fetchmail && \
  mkdir /var/run/fetchmail && chown fetchmail /var/run/fetchmail && \
  curl -s https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem >/etc/ssl/certs/lets-encrypt-x3-cross-signed.pem

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– Logs ––––––––––––––––––––––––––––––––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

RUN \
  sed -i -r ""/^#?compress/c\compress\ncopytruncate"" /etc/logrotate.conf && \
  mkdir -p /var/log/mail && \
  chown syslog:root /var/log/mail && \
  touch /var/log/mail/clamav.log && \
  chown -R clamav:root /var/log/mail/clamav.log && \
  touch /var/log/mail/freshclam.log && \
  chown -R clamav:root /var/log/mail/freshclam.log && \
  sed -i -r 's|/var/log/mail|/var/log/mail/mail|g' /etc/rsyslog.conf && \
  sed -i -r 's|;auth,authpriv.none|;mail.none;mail.error;auth,authpriv.none|g' /etc/rsyslog.conf && \
  sed -i -r 's|LogFile /var/log/clamav/|LogFile /var/log/mail/|g' /etc/clamav/clamd.conf && \
  sed -i -r 's|UpdateLogFile /var/log/clamav/|UpdateLogFile /var/log/mail/|g' /etc/clamav/freshclam.conf && \
  sed -i -r 's|/var/log/clamav|/var/log/mail|g' /etc/logrotate.d/clamav-daemon && \
  sed -i -r 's|invoke-rc.d.*|/usr/bin/supervisorctl signal hup clamav >/dev/null \|\| true|g' /etc/logrotate.d/clamav-daemon && \
  sed -i -r 's|/var/log/clamav|/var/log/mail|g' /etc/logrotate.d/clamav-freshclam && \
  sed -i -r '/postrotate/,/endscript/d' /etc/logrotate.d/clamav-freshclam && \
  sed -i -r 's|/var/log/mail|/var/log/mail/mail|g' /etc/logrotate.d/rsyslog && \
  sed -i -r '/\/var\/log\/mail\/mail.log/d' /etc/logrotate.d/rsyslog && \
  # prevent syslog logrotate warnings
  sed -i -e 's/\(printerror ""could not determine current runlevel""\)/#\1/' /usr/sbin/invoke-rc.d && \
  sed -i -e 's/^\(POLICYHELPER=\).*/\1/' /usr/sbin/invoke-rc.d && \
  # prevent syslog warning about imklog permissions
  sed -i -e 's/^module(load=\""imklog\"")/#module(load=\""imklog\"")/' /etc/rsyslog.conf && \
  # prevent email when /sbin/init or init system is not existing
  sed -i -e 's|invoke-rc.d rsyslog rotate > /dev/null|/usr/bin/supervisorctl signal hup rsyslog >/dev/null|g' /usr/lib/rsyslog/rsyslog-rotate

# –––––––––––––––––––––––––––––––––––––––––––––––
# ––– Supervisord & Start –––––––––––––––––––––––
# –––––––––––––––––––––––––––––––––––––––––––––––

COPY target/supervisor/supervisord.conf /etc/supervisor/supervisord.conf
COPY target/supervisor/conf.d/* /etc/supervisor/conf.d/

WORKDIR /

EXPOSE 25 587 143 465 993 110 995 4190

ENTRYPOINT [""/usr/bin/dumb-init"", ""--""]

CMD [""supervisord"", ""-c"", ""/etc/supervisor/supervisord.conf""]
",
163,e7850bbe2a7e471c9a7664a31aeba7432e3d9d70,Bumped source to 20201019-6f8e9bb,"Bumped source to 20201019-6f8e9bb
","FROM docker.pkg.github.com/dock0/arch/arch:20201019-9fe28a5
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20201019-6f8e9bb
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
252,9843cf6f186dc0c342269592856ac7a117ceb32d,Bumped source to 20200814-ee66659,"Bumped source to 20200814-ee66659
","FROM docker.pkg.github.com/dock0/arch/arch:20200814-af58a04
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20200814-ee66659
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
131,a30de46c33d7bb1fbfaacfa3884cf037941ff9e7,Bumped source to 20201122-db9c881,"Bumped source to 20201122-db9c881
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201122-4168b6f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201122-db9c881
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
397,78192e9fac3e99bd6b07a745d8b13e428c0d8426,Update to 2.2.16,"Update to 2.2.16
","FROM node:argon
MAINTAINER Raul Rodriguez <raul@raulr.net>

ENV PARSE_SERVER_VERSION 2.2.15

RUN npm install -g parse-server@${PARSE_SERVER_VERSION}

COPY docker-entrypoint.sh /entrypoint.sh

EXPOSE 1337

ENTRYPOINT [""/entrypoint.sh""]
CMD [""parse-server""]","FROM node:argon
MAINTAINER Raul Rodriguez <raul@raulr.net>

ENV PARSE_SERVER_VERSION 2.2.16

RUN npm install -g parse-server@${PARSE_SERVER_VERSION}

COPY docker-entrypoint.sh /entrypoint.sh

EXPOSE 1337

ENTRYPOINT [""/entrypoint.sh""]
CMD [""parse-server""]"
123,9a8cef0db85ff70e35a2354bb39ba41178a47853,Bumped source to 20200319-cc2850c,"Bumped source to 20200319-cc2850c
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200319-f5d16c2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200319-cc2850c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
335,59a844bde9a7d99d1ae90dc83f85325e562b81bd,added test data,"added test data
","FROM kbase/kbase:sdkbase.latest
MAINTAINER Dylan Chivian
# -----------------------------------------

# Insert apt-get instructions here to install
# any required dependencies for your module.



# Update Transform (should go away eventually)
RUN \
  . /kb/dev_container/user-env.sh && \
  cd /kb/dev_container/modules && \
  rm -rf transform && \ 
  git clone https://github.com/kbase/transform -b develop

# setup the transform, but ignore errors because sample data cannot be found!
RUN \
  . /kb/dev_container/user-env.sh; \
  cd /kb/dev_container/modules/transform/t/demo; \
  python setup.py; \
  exit 0;



# Install VSEARCH
#
RUN git clone https://github.com/torognes/vsearch
WORKDIR vsearch
RUN ./configure 
RUN make
RUN make install
WORKDIR ../

# RUN apt-get update

# -----------------------------------------

COPY ./ /kb/module
RUN mkdir -p /kb/module/work

WORKDIR /kb/module

RUN make

ENTRYPOINT [ ""./scripts/entrypoint.sh"" ]

CMD [ ]
","FROM kbase/kbase:sdkbase.latest
MAINTAINER Dylan Chivian
# -----------------------------------------

# Insert apt-get instructions here to install
# any required dependencies for your module.



# Update Transform (should go away eventually)
RUN \
  . /kb/dev_container/user-env.sh && \
  cd /kb/dev_container/modules && \
  rm -rf transform && \ 
  git clone https://github.com/kbase/transform -b develop

# setup the transform, but ignore errors because sample data cannot be found!
RUN \
  . /kb/dev_container/user-env.sh; \
  cd /kb/dev_container/modules/transform/t/demo; \
  python setup.py; \
  exit 0;



# Install VSEARCH
#
RUN git clone https://github.com/torognes/vsearch
WORKDIR vsearch
RUN ./configure 
RUN make
RUN make install
RUN git clone https://github.com/dcchivian/kb_vsearch_test_data
WORKDIR ../

# RUN apt-get update

# -----------------------------------------

COPY ./ /kb/module
RUN mkdir -p /kb/module/work

WORKDIR /kb/module

RUN make

ENTRYPOINT [ ""./scripts/entrypoint.sh"" ]

CMD [ ]
"
2282,83d6f7cb75d1bedcb34ed9f32027930f62a433d0,Bumped source to 20201129-a325984,"Bumped source to 20201129-a325984
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201129-4565f3d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
2265,eac773c1d3a14d52159d01f35e4861e042038cfd,Bumped source to 20211013-1e1930d,"Bumped source to 20211013-1e1930d
","FROM docker.pkg.github.com/dock0/arch/arch:20211013-301a6d1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
183,606e10b0fdeec3678306a00214d4fc03346cf783,Bumped source to 20210824-cfcafd0,"Bumped source to 20210824-cfcafd0
","FROM docker.pkg.github.com/dock0/arch/arch:20210824-7560e8d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210824-cfcafd0
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2184,f42f00fac59648b10633dcdf40f8869f9af53f60,Bumped source to 20200704-ce3cbba,"Bumped source to 20200704-ce3cbba
","FROM docker.pkg.github.com/dock0/service/service:20200704-d2525e2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
2320,b7b6b95e1d8aef3d92cf01d97ed1c8bf1def8d93,Added DEBIAN_FRONTEND=noninteractive before apt-get commands,Added DEBIAN_FRONTEND=noninteractive before apt-get commands,"FROM ubuntu

MAINTAINER Justin Plock <justin.plock@ge.com>

RUN sed 's/main$/main universe/' -i /etc/apt/sources.list
RUN apt-get update
RUN apt-get upgrade -y

RUN apt-get install -y -q wget openjdk-7-jre-headless
RUN mkdir -p /opt/snowizard /var/log/snowizard
RUN wget -q -O /opt/snowizard/snowizard.jar http://repo.maven.apache.org/maven2/com/ge/snowizard/snowizard-service/1.0.1/snowizard-service-1.0.1.jar

ADD ./snowizard-service/snowizard.upstart /etc/init/snowizard.conf
ADD ./snowizard-service/snowizard.yml /etc/snowizard.yml
ADD ./snowizard-service/snowizard.jvm.conf /etc/snowizard.jvm.conf

ENV JAVA_HOME /usr/lib/jvm/default-java

# Snowizard port
EXPOSE 8080
# Administration port
EXPOSE 8180

ENTRYPOINT /usr/bin/java -d64 -server -jar /opt/snowizard/snowizard.jar server /etc/snowizard.yml
",
289,424572a3e6180208a721fc38fe3161e64e519f95,Bumped source to 20210109-3d48068,"Bumped source to 20210109-3d48068
","FROM docker.pkg.github.com/dock0/arch/arch:20210109-5485830
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20210109-3d48068
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2077,9a1b94a5ca828f79b93db5605a0ee4832344e61c,Update Dockerfile for nightly build 1.6.2-nightly-a633d766d1763f4f4648e423c4e8a8635b183d03,Update Dockerfile for nightly build 1.6.2-nightly-a633d766d1763f4f4648e423c4e8a8635b183d03,"# latest possible stable go for bootstrapping new go (or just "":latest"")
FROM golang:latest

# SHA of commit to build
ENV GOLANG_BUILD_SHA    b64c7fc6832902acb8eebc67c887d2ef9114f644
# Last stable version prior this commit
ENV GOLANG_BASE_VERSION 1.6.2

ENV GOLANG_BUILD_VERSION $GOLANG_BASE_VERSION-nightly-$GOLANG_BUILD_SHA


# gcc for cgo
RUN apt-get update && apt-get install -y --no-install-recommends \
g++ \
gcc \
libc6-dev \
make \
&& rm -rf /var/lib/apt/lists/*


ENV GOLANG_DOWNLOAD_URL  https://github.com/golang/go/archive/$GOLANG_BUILD_SHA.tar.gz
ENV GOSRC /usr/local/go-$GOLANG_BUILD_SHA

ENV GOROOT $GOSRC
ENV GOPATH /go
ENV GOROOT_BOOTSTRAP /usr/local/go

ENV GOBUILD $GOSRC/src


RUN curl -fsSL ""$GOLANG_DOWNLOAD_URL"" \
| tar -C /usr/local -xz


RUN echo $GOLANG_BUILD_VERSION > ""$GOROOT/VERSION""

WORKDIR $GOBUILD
RUN ./make.bash


# let new built go take precendence over old go used for bootstrapping it
ENV PATH=$GOSRC/bin:$PATH

",
341,3fea5aec737b37c576a1d2ab328e3503c037b60d,Bumped source to 20200911-934b1c5,"Bumped source to 20200911-934b1c5
","FROM docker.pkg.github.com/dock0/arch/arch:20200911-9cb9cec
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200911-934b1c5
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2194,1a394a2b912aba655014a38a8fc384975c66d395,bypass '/dev/tty' gpg bug,"bypass '/dev/tty' gpg bug

https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=913614
","# Use an official Python runtime as a parent image
FROM python:3.7-slim-stretch

# add our user and group first to make sure their IDs get assigned consistently
RUN groupadd -r zeus && useradd -r -m -g zeus zeus

ENV NVM_DIR /usr/local/nvm
ENV NODE_ENV production

ENV PYTHONUNBUFFERED 1

# Sane defaults for pip
ENV PIP_NO_CACHE_DIR off
ENV PIP_DISABLE_PIP_VERSION_CHECK on

RUN mkdir -p /usr/src/zeus
WORKDIR /usr/src/zeus

RUN set -ex \
    && apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        ca-certificates \
        curl \
        gcc \
        git \
        gosu \
        libffi-dev \
        libpq-dev \
        libxml2-dev \
        libxslt-dev \
        openssl \
        ssh \
        wget \
    && rm -rf /var/lib/apt/lists/*

# install nvm, node, and npm
# gpg keys listed at https://github.com/nodejs/node
COPY .nvmrc /usr/src/zeus/
ENV YARN_VERSION 1.7.0
RUN set -x \
    && export NODE_VERSION=$(cat /usr/src/zeus/.nvmrc) \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && apt-get update && apt-get install -y --no-install-recommends dirmngr gnupg && rm -rf /var/lib/apt/lists/* \
    && for key in \
      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
      B9AE9905FFD7803F25714661B63B535A4C206CA9 \
      77984A986EBC2AA786BC0F66B01FBB92821C587A \
      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
      FD3A5288F042B6850C66B31F09FE44734EB7990E \
      8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
      9554F04D7259F04124DE6B476D5A82AC7E37093B \
      93C7E9E91B49E432C2F75674B0A78B0A6C481CF6 \
      56730D5401028683275BD23C23EFEFE93C4CFFFE \
      114F43EE0176B71C7BC219DD50A3051F888C628D \
      7937DFD2AB06298B2293C3187D33FF9D0246406D \
    ; do \
      gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
    done \
    && wget --no-verbose ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"" \
    && wget --no-verbose ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
    && gpg --verify SHASUMS256.txt.asc \
    && grep "" node-v$NODE_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt.asc | sha256sum -c - \
    && tar -xzf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
    && rm -rf ""$GNUPGHOME"" ""node-v$NODE_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc \
    && apt-get purge -y --auto-remove dirmngr gnupg \
    && npm install -g yarn@$YARN_VERSION \
    && npm cache clear --force

COPY requirements-base.txt /usr/src/zeus/
RUN pip install -r requirements-base.txt

COPY requirements-dev.txt /usr/src/zeus/
RUN pip install -r requirements-dev.txt

COPY requirements-test.txt /usr/src/zeus/
RUN pip install -r requirements-test.txt

RUN pip install -e git+https://github.com/pallets/werkzeug.git@8eb665a94aea9d9b56371663075818ca2546e152#egg=werkzeug

COPY yarn.lock /usr/src/zeus/
COPY package.json /usr/src/zeus/
RUN yarn install --production --pure-lockfile --ignore-optional \
    && yarn cache clean

COPY . /usr/src/zeus
RUN pip install -e .
RUN node_modules/.bin/webpack -p

ENV WORKSPACE_ROOT /workspace
ENV REPO_ROOT /workspace/repos
RUN mkdir -p $WORKSPACE_ROOT $REPO_ROOT

ENV PATH /usr/src/zeus/bin:$PATH

# Make port 8080 available to the world outside this container
EXPOSE 8080
EXPOSE 8090

VOLUME /workspace

ENTRYPOINT [""docker-entrypoint""]

# Run Zeus
CMD [""zeus"", ""run"", ""--host=0.0.0.0"", ""--port=8080""]
",
2226,86f2da0f15af77c5922bfa652a35a160b64eee54,Bumped source to 20200906-d943f6a,"Bumped source to 20200906-d943f6a
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200906-52d850a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
307,d66233e2a0aecb6e80a4f802b0dc6a5cd2fa9041,fix: change to static base container (#791),"fix: change to static base container (#791)

In addition, this commits ensures we compile a static binary by
disabling CGO.

Fix #762.","# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest stable golang 1.x to compile to a binary
FROM golang:1 as build

WORKDIR /go/src/cloudsql-proxy
COPY . .

RUN go get ./...
RUN go build -ldflags ""-X main.metadataString=container"" -o cloud_sql_proxy ./cmd/cloud_sql_proxy

# Final Stage
FROM gcr.io/distroless/base-debian10:nonroot
COPY --from=build --chown=nonroot /go/src/cloudsql-proxy/cloud_sql_proxy /cloud_sql_proxy
# set the uid as an integer for compatibility with runAsNonRoot in Kubernetes
USER 65532
","# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest stable golang 1.x to compile to a binary
FROM golang:1 as build

WORKDIR /go/src/cloudsql-proxy
COPY . .

RUN go get ./...
RUN CGO_ENABLED=0 go build -ldflags ""-X main.metadataString=container"" -o cloud_sql_proxy ./cmd/cloud_sql_proxy

# Final Stage
FROM gcr.io/distroless/static:nonroot
COPY --from=build --chown=nonroot /go/src/cloudsql-proxy/cloud_sql_proxy /cloud_sql_proxy
# set the uid as an integer for compatibility with runAsNonRoot in Kubernetes
USER 65532
"
54,4bc9702a755389ec9ed253aea8c8403b565c587a,chore(dockerfile): Add aws cli to container build (#1099),"chore(dockerfile): Add aws cli to container build (#1099)

Per discussion in spinnaker/spinnaker#2394, adding awscli to container
such that the features added in spinnaker/spinnaker#2941 to enable
an external passwordCommand for a docker registry can be utilized by
AWS users wishing to add their ECR-based docker registries.

Signed-off-by: Joe Hohertz <16a9a54ddf4259952e3c118c763138e83693d7fd@viafoura.com>","FROM openjdk:8

MAINTAINER delivery-engineering@netflix.com

ENV KUBECTL_RELEASE=1.10.3
ENV HEPTIO_BINARY_RELEASE_DATE=2018-06-05

COPY . workdir/

WORKDIR workdir

RUN GRADLE_USER_HOME=cache ./gradlew installDist -x test -Prelease.useLastTag=true && \
  cp -r ./halyard-web/build/install/halyard /opt && \
  cd .. && \
  rm -rf workdir

RUN echo '#!/usr/bin/env bash' | tee /usr/local/bin/hal > /dev/null && \
  echo '/opt/halyard/bin/hal ""$@""' | tee /usr/local/bin/hal > /dev/null

RUN chmod +x /usr/local/bin/hal

RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_RELEASE}/bin/linux/amd64/kubectl && \
    chmod +x ./kubectl && \
    mv ./kubectl /usr/local/bin/kubectl

RUN curl -o heptio-authenticator-aws https://amazon-eks.s3-us-west-2.amazonaws.com/${KUBECTL_RELEASE}/${HEPTIO_BINARY_RELEASE_DATE}/bin/linux/amd64/heptio-authenticator-aws && \
  chmod +x ./heptio-authenticator-aws && \
  mv ./heptio-authenticator-aws /usr/local/bin/heptio-authenticator-aws

ENV PATH ""$PATH:/usr/local/bin/heptio-authenticator-aws""

RUN useradd -m spinnaker

USER spinnaker

CMD ""/opt/halyard/bin/halyard""
","FROM openjdk:8

MAINTAINER delivery-engineering@netflix.com

ENV KUBECTL_RELEASE=1.10.3
ENV HEPTIO_BINARY_RELEASE_DATE=2018-06-05

COPY . workdir/

WORKDIR workdir

RUN GRADLE_USER_HOME=cache ./gradlew installDist -x test -Prelease.useLastTag=true && \
  cp -r ./halyard-web/build/install/halyard /opt && \
  cd .. && \
  rm -rf workdir

RUN echo '#!/usr/bin/env bash' | tee /usr/local/bin/hal > /dev/null && \
  echo '/opt/halyard/bin/hal ""$@""' | tee /usr/local/bin/hal > /dev/null

RUN chmod +x /usr/local/bin/hal

RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_RELEASE}/bin/linux/amd64/kubectl && \
    chmod +x ./kubectl && \
    mv ./kubectl /usr/local/bin/kubectl

RUN curl -o heptio-authenticator-aws https://amazon-eks.s3-us-west-2.amazonaws.com/${KUBECTL_RELEASE}/${HEPTIO_BINARY_RELEASE_DATE}/bin/linux/amd64/heptio-authenticator-aws && \
  chmod +x ./heptio-authenticator-aws && \
  mv ./heptio-authenticator-aws /usr/local/bin/heptio-authenticator-aws

ENV PATH ""$PATH:/usr/local/bin/heptio-authenticator-aws""

RUN wget -O /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py && \
    python /tmp/get-pip.py && \
    pip install awscli --upgrade

RUN useradd -m spinnaker

USER spinnaker

CMD ""/opt/halyard/bin/halyard""
"
8,a7f9a5fb4a7081a6633aab094445e84ad24d1283,Bumped source to 20210724-cbc37fa,"Bumped source to 20210724-cbc37fa
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210724-44e8f14
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210724-cbc37fa
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
257,c9f8f307b5ae03dfdde13dbeac8b1c31ab0f0ba3,Updated Dockerfile,"Updated Dockerfile
","FROM ubuntu:trusty
MAINTAINER Werner Maisl <werner@myhomenet.at>

# Install packages
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && \
  apt-get -y install supervisor git apache2 libapache2-mod-php5 mysql-server php5-mysql pwgen php-apc php5-mcrypt curl && \
  echo ""ServerName localhost"" >> /etc/apache2/apache2.conf

# Add image configuration and scripts
ADD start-apache2.sh /start-apache2.sh
ADD start-mysqld.sh /start-mysqld.sh
ADD run.sh /run.sh
RUN chmod 755 /*.sh
ADD my.cnf /etc/mysql/conf.d/my.cnf
ADD supervisord-apache2.conf /etc/supervisor/conf.d/supervisord-apache2.conf
ADD supervisord-mysqld.conf /etc/supervisor/conf.d/supervisord-mysqld.
ADD .env /.env

# Remove pre-installed database
RUN rm -rf /var/lib/mysql/*

# Add MySQL utils
ADD create_mysql_admin_user.sh /create_mysql_admin_user.sh
ADD create_mysql_database.sh /create_mysql_database.sh
RUN chmod 755 /*.sh

# config to enable .htaccess
ADD apache_default /etc/apache2/sites-available/000-default.conf
RUN a2enmod rewrite

# Configure /app folder with sample app
RUN git clone https://github.com/SourceMod-Store/WebPanel-Core.git /app

# Download composer
RUN curl -sS https://getcomposer.org/installer (link is external) | php
RUN mv composer.phar /usr/local/bin/composer

# Link the app to /var/www/html
RUN mkdir -p /app && rm -fr /var/www/html && ln -s /app /var/www/html

# Link .env to /var/www/html
RUN ln -s .env /var/www/html/.env

# Compoer install the WebPanel-Core
RUN cd /app && composer install

#Enviornment variables to configure php
ENV PHP_UPLOAD_MAX_FILESIZE 10M
ENV PHP_POST_MAX_SIZE 10M

# Add volumes for MySQL 
VOLUME  [""/etc/mysql"", ""/var/lib/mysql"" ]

EXPOSE 80 3306
CMD [""/run.sh""]
","FROM ubuntu:trusty
MAINTAINER Werner Maisl <werner@myhomenet.at>

# Install packages
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && \
  apt-get -y install supervisor git apache2 libapache2-mod-php5 mysql-server php5-mysql pwgen php-apc php5-mcrypt curl && \
  echo ""ServerName localhost"" >> /etc/apache2/apache2.conf

# Add image configuration and scripts
ADD start-apache2.sh /start-apache2.sh
ADD start-mysqld.sh /start-mysqld.sh
ADD run.sh /run.sh
RUN chmod 755 /*.sh
ADD my.cnf /etc/mysql/conf.d/my.cnf
ADD supervisord-apache2.conf /etc/supervisor/conf.d/supervisord-apache2.conf
ADD supervisord-mysqld.conf /etc/supervisor/conf.d/supervisord-mysqld.
ADD .env /.env

# Remove pre-installed database
RUN rm -rf /var/lib/mysql/*

# Add MySQL utils
ADD create_mysql_admin_user.sh /create_mysql_admin_user.sh
ADD create_mysql_database.sh /create_mysql_database.sh
RUN chmod 755 /*.sh

# config to enable .htaccess
ADD apache_default /etc/apache2/sites-available/000-default.conf
RUN a2enmod rewrite

# Configure /app folder with sample app
RUN git clone https://github.com/SourceMod-Store/WebPanel-Core.git /app

# Download composer
RUN curl -sS https://getcomposer.org/installer | php
RUN mv composer.phar /usr/local/bin/composer

# Link the app to /var/www/html
RUN mkdir -p /app && rm -fr /var/www/html && ln -s /app /var/www/html

# Link .env to /var/www/html
RUN ln -s .env /var/www/html/.env

# Compoer install the WebPanel-Core
RUN cd /app && composer install

#Enviornment variables to configure php
ENV PHP_UPLOAD_MAX_FILESIZE 10M
ENV PHP_POST_MAX_SIZE 10M

# Add volumes for MySQL 
VOLUME  [""/etc/mysql"", ""/var/lib/mysql"" ]

EXPOSE 80 3306
CMD [""/run.sh""]
"
2220,1e66b4b34b80cb26ae59106cf32cb12250ccf4f6,Bumped source to 20200523-57dd44e,"Bumped source to 20200523-57dd44e
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200523-bcffc57
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
2211,aeb2f6b956f3600ed748270881cee6bd1d83cc1d,Fix sqlite3 benchmark (#1289),"Fix sqlite3 benchmark (#1289)

","# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

FROM gcr.io/oss-fuzz-base/base-builder@sha256:1b6a6993690fa947df74ceabbf6a1f89a46d7e4277492addcd45a8525e34be5a
RUN apt-get update && apt-get install -y make autoconf automake libtool curl tcl zlib1g-dev

RUN mkdir $SRC/sqlite3 && \
    cd $SRC/sqlite3 && \
    curl 'https://sqlite.org/src/tarball/sqlite.tar.gz?r=c78cbf2e86850cc6' -o sqlite3.tar.gz && \
        tar xzf sqlite3.tar.gz --strip-components 1

RUN find $SRC/sqlite3 -name ""*.test"" | xargs zip $SRC/ossfuzz_seed_corpus.zip

WORKDIR sqlite3
COPY build.sh *.dict $SRC/
",
372,624c0ce52b90ca9ce61a97185908b605c3f8535b,Bumped source to 20220430-92b305d,"Bumped source to 20220430-92b305d
","FROM ghcr.io/dock0/arch:20220430-c44361f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220430-92b305d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
74,0bec062ec7c124fc378005bffaa94952bf308b3e,Update to v0.5.17,Update to v0.5.17,"FROM learninglayers/ror
MAINTAINER Jukka Purma <jukka.purma ÄT aalto.fi>

# Doing the bundle install with local files so that its result gets cached.
# If these are not up to date with the github version of achrails, it spells trouble,
# but couldn't get COPY or ADD working with files downloaded from the Dockerfile.  
WORKDIR /tmp
COPY Gemfile Gemfile
COPY Gemfile.lock Gemfile.lock
RUN bundle install

RUN mkdir /achrails

RUN curl -SL https://github.com/learning-layers/achrails/archive/v0.5.16.tar.gz \
    | tar -zxC /achrails --strip-components=1
RUN echo ls
ADD . /achrails
COPY database.yml /achrails/config/database.yml

WORKDIR /achrails
VOLUME /achrails
COPY start-achrails.sh start-achrails.sh

CMD [""bash"", ""start-achrails.sh""]
","FROM learninglayers/ror
MAINTAINER Jukka Purma <jukka.purma ÄT aalto.fi>

# Doing the bundle install with local files so that its result gets cached.
# If these are not up to date with the github version of achrails, it spells trouble,
# but couldn't get COPY or ADD working with files downloaded from the Dockerfile.  
WORKDIR /tmp
COPY Gemfile Gemfile
COPY Gemfile.lock Gemfile.lock
RUN bundle install

RUN mkdir /achrails

RUN curl -SL https://github.com/learning-layers/achrails/archive/v0.5.17.tar.gz \
    | tar -zxC /achrails --strip-components=1
RUN echo ls
ADD . /achrails
COPY database.yml /achrails/config/database.yml

WORKDIR /achrails
VOLUME /achrails
COPY start-achrails.sh start-achrails.sh

CMD [""bash"", ""start-achrails.sh""]
"
2096,eb98c66e7534f34af47180359b67b9403efb5562,add install-geschichte script,"add install-geschichte script
","FROM ubuntu:latest

# Update the APT cache
RUN apt-get   update

# Install and setup project dependencies
RUN apt-get install -y curl git wget unzip

# prepare for Java download
RUN apt-get install -y software-properties-common
RUN apt-get -y install openjdk-7-jre-headless
RUN apt-get install -y mongodb-clients
ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64

# fix wget
RUN export HTTP_CLIENT=""wget --no-check-certificate -O""

# grab leiningen
RUN wget https://raw.github.com/technomancy/leiningen/stable/bin/lein -O /usr/local/bin/lein
RUN chmod +x /usr/local/bin/lein
ENV LEIN_ROOT yes
RUN lein

# grab geschichte

# add scripts
ADD ./resources /opt

# grab project
RUN git clone https://github.com/kordano/ceres-geschichte.git /opt/ceres-geschichte

# retrieve dependencies
RUN /opt/retrieve-deps

CMD [""/opt/start-ceres""]
",
143,98b63c912d4f07b6ad9f20e41f2dc6214df8a154,Bumped source to 20200916-9110dd6,"Bumped source to 20200916-9110dd6
","FROM docker.pkg.github.com/dock0/arch/arch:20200916-e08c9f6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20200916-9110dd6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
35,31f8b3a2952edf76d3eb3e2991867309b5ab59ed,Bumped source to 20200309-d3b09fb,"Bumped source to 20200309-d3b09fb
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200309-1f429df
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200309-d3b09fb
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
100,08326236d2772b8cffa54c1080074993ee6166e6,Bumped source to 20201011-9ed8a5c,"Bumped source to 20201011-9ed8a5c
","FROM docker.pkg.github.com/dock0/service/service:20201011-35fda10
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20201011-9ed8a5c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
317,0daab36ea584572dd313bc56468e14458f7c6be9,Bumped source to 20210817-14c11c7,"Bumped source to 20210817-14c11c7
","FROM docker.pkg.github.com/dock0/arch/arch:20210817-e52d23a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210817-14c11c7
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2133,f9066a76dade410c5f9d873b491bc4bdbf734723,Bumped source to 20210406-b04420a,"Bumped source to 20210406-b04420a
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210406-f4c4501
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
66,aab7d78d3d9fb341a1cab310cce9cfa1a4e76c36,Update Dockerfile,Update Dockerfile,"FROM ubuntu:16.04

RUN apt-get update -y && \
    apt-get install -y openjdk-8-jre openjdk-8-jdk lib32stdc++6 lib32z1 wget git
RUN cd && wget https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz && tar -zxvf android-sdk_r24.4.1-linux.tgz && \
    /root/android-sdk-linux/tools/android list sdk -a -e && \
    echo y | /root/android-sdk-linux/tools/android update sdk -a -u -t build-tools-24.0.0,android-24,extra-android-support,extra-android-m2repository,extra-google-m2repository,extra-google-google_play_services
ENV ANDROID_HOME /root/android-sdk-linux
COPY app-build.sh /root/
COPY netrc /root/.netrc
CMD [""sh"", ""/root/app-build.sh""]
","FROM ubuntu:16.04

RUN apt-get update -y && \
    apt-get install -y openjdk-8-jre openjdk-8-jdk lib32stdc++6 lib32z1 wget git
RUN cd && wget https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz && tar -zxvf android-sdk_r24.4.1-linux.tgz && \
    /root/android-sdk-linux/tools/android list sdk -a -e && \
    echo y | /root/android-sdk-linux/tools/android update sdk -a -u -t build-tools-24.0.0,android-24,extra-android-support,extra-android-m2repository,extra-google-m2repository,extra-google-google_play_services
RUN echo y | /root/android-sdk-linux/tools/android update sdk -a -u -t 4    
ENV ANDROID_HOME /root/android-sdk-linux
COPY app-build.sh /root/
COPY netrc /root/.netrc
CMD [""sh"", ""/root/app-build.sh""]
"
78,73229c1a57f90c98acf63f66312e836ca1ba546e,"added missing packages to Dockerfile, bison and flex","added missing packages to Dockerfile, bison and flex
","
## Use a base ubuntu install
FROM ubuntu:14.04
MAINTAINER vgteam

## Download dependencies for vg, pretty standard fare
#RUN sed 's/main$/main universe/' -i /etc/apt/sources.list
RUN apt-get update && apt-get install -y software-properties-common \
    gcc-4.9-base \
    g++ \
    ncurses-dev \
    pkg-config \
    build-essential \
    libjansson-dev \
    automake \
    libevent-2.0-5 \
    libevent-pthreads-2.0-5 \
    libpomp-dev \
    libtool \
    curl \
    unzip \
    wget \
    libbz2-dev \
    gzip \
    git \
    cmake \
    libsnappy-dev \
    libgflags-dev \
    zlib1g-dev

    #python-dev \
    #protobuf-compiler \
    #libprotoc-dev \
    
    #RUN apt-get update

## Set CXXFLAGS and CFLAGS for gcc to use SSE4.1
#ENV CXXFLAGS ""-O2 -g march=corei7 -mavx -fopenmp -std=c++11""
#ENV CXXFLAGS ""$CXXFLAGS -march=corei7 -mavx""

## Download VG and its git dependencies
RUN git clone --recursive https://github.com/edawson/vg.git /home/vg
RUN cd /home/vg && . ./source_me.sh && make
#RUN cd /home/vg; make
#RUN cp -r /home/vg/include/* /usr/local/include/
ENV LIBRARY_PATH /home/vg/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH /home/vg/lib:$LD_LIBRARY_PATH
ENV LD_INCLUDE_PATH /home/vg/include:$LD_INCLUDE_PATH
ENV C_INCLUDE_PATH /home/vg/include:$C_INCLUDE_PATH
ENV CPLUS_INCLUDE_PATH /home/vg/include:$CPLUS_INCLUDE_PATH
ENV INCLUDE_PATH /home/vg/include:$INCLUDE_PATH
ENV PATH /home/vg/bin:$PATH
#RUN cp -r /home/vg/lib/* /usr/local/lib
#RUN ln -s ""/home/vg/bin/vg"" ""/usr/bin/vg""
#CMD cd /home/vg/ && . ./source_me.sh && vg
#ENTRYPOINT vg
","
## Use a base ubuntu install
FROM ubuntu:14.04
MAINTAINER vgteam

## Download dependencies for vg, pretty standard fare
#RUN sed 's/main$/main universe/' -i /etc/apt/sources.list
RUN apt-get update && apt-get install -y software-properties-common \
    gcc-4.9-base \
    g++ \
    ncurses-dev \
    pkg-config \
    build-essential \
    libjansson-dev \
    automake \
    libevent-2.0-5 \
    libevent-pthreads-2.0-5 \
    libpomp-dev \
    libtool \
    curl \
    unzip \
    wget \
    libbz2-dev \
    gzip \
    git \
    cmake \
    libsnappy-dev \
    libgflags-dev \
    zlib1g-dev \
    bison \
    flex

    #python-dev \
    #protobuf-compiler \
    #libprotoc-dev \
    
    #RUN apt-get update

## Set CXXFLAGS and CFLAGS for gcc to use SSE4.1
#ENV CXXFLAGS ""-O2 -g march=corei7 -mavx -fopenmp -std=c++11""
#ENV CXXFLAGS ""$CXXFLAGS -march=corei7 -mavx""

## Download VG and its git dependencies
RUN git clone --recursive https://github.com/edawson/vg.git /home/vg
RUN cd /home/vg && . ./source_me.sh && make
#RUN cd /home/vg; make
#RUN cp -r /home/vg/include/* /usr/local/include/
ENV LIBRARY_PATH /home/vg/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH /home/vg/lib:$LD_LIBRARY_PATH
ENV LD_INCLUDE_PATH /home/vg/include:$LD_INCLUDE_PATH
ENV C_INCLUDE_PATH /home/vg/include:$C_INCLUDE_PATH
ENV CPLUS_INCLUDE_PATH /home/vg/include:$CPLUS_INCLUDE_PATH
ENV INCLUDE_PATH /home/vg/include:$INCLUDE_PATH
ENV PATH /home/vg/bin:$PATH
#RUN cp -r /home/vg/lib/* /usr/local/lib
#RUN ln -s ""/home/vg/bin/vg"" ""/usr/bin/vg""
#CMD cd /home/vg/ && . ./source_me.sh && vg
#ENTRYPOINT vg
"
192,a81427bd440186278b2faf5ff6786f2ace99ab3f,Bumped source to 20210806-700d370,"Bumped source to 20210806-700d370
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210806-757af97
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210806-700d370
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
2110,45f1cb3f7c0099d7d952ad22cba2cb0146c66636,"Added a symlink from python3 to python, and added PATH to include iquery","Added a symlink from python3 to python, and added PATH to include iquery
","FROM ubuntu:latest
MAINTAINER Cerbo IO <support@cerbo.io>

ENV DEBIAN_FRONTEND noninteractive
ENV PATH=$PATH:/usr/local/scidb/bin
RUN apt-get update ; \
apt-get -y install python3 python3-pip libopenjpeg-dev python3-grib python3-netcdf4 openssh-server wget screen vim-nox ; \
ln -s /usr/local/bin/python3 /usr/local/bin/python ; \
pip3 install --upgrade pip ;\
pip3 install scidb-py ; \
sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config ; \
echo ""root:scidb"" | chpasswd ; \
mkdir -p /usr/local/scidb/bin /usr/local/scidb/lib ; \
mkdir -p /opt/scidb/15.12/3rdparty/cityhash/lib/

COPY iquery /usr/local/scidb/bin/
COPY usr-local-scidb-lib/* /usr/local/scidb/lib/
COPY lib-x86_64-linux-gnu/* /lib/x86_64-linux-gnu/
COPY libcityhash.so.0 /opt/scidb/15.12/3rdparty/cityhash/lib/
COPY start-ssh /

EXPOSE 22
CMD [""/bin/bash""]
",
380,a0e71692f0aedcff1ad2f47538c407cf22e19218,Dockerfile version bump,"Dockerfile version bump
","FROM alpine
MAINTAINER David Personette <dperson@gmail.com>

# Install emby
RUN export LANG=C.UTF-8 && \
    ff_url='http://johnvansickle.com/ffmpeg/releases' && \
    glib_url='https://github.com/sgerrand/alpine-pkg-glibc/releases/download'&&\
    glib_version=2.31-r0 && \
    glibc_base=glibc-${glib_version}.apk && \
    glibc_bin=glibc-bin-${glib_version}.apk && \
    glibc_i18n=glibc-i18n-${glib_version}.apk && \
    monourl='https://archive.archlinux.org/packages/m/mono' && \
    mono_version=6.4.0.198-2 && \
    key=/etc/apk/keys/sgerrand.rsa.pub && \
    url='https://github.com/MediaBrowser/Emby.Releases/releases/download' && \
    version=4.4.2.0 && \
    apk --no-cache --no-progress upgrade && \
    apk --no-cache --no-progress add bash curl shadow sqlite-libs tini tzdata \
                zstd &&\
    curl -LSs https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o $key && \
    curl -LOSs $glib_url/$glib_version/$glibc_base && \
    curl -LOSs $glib_url/$glib_version/$glibc_bin && \
    curl -LOSs $glib_url/$glib_version/$glibc_i18n && \
    apk --no-cache --no-progress add $glibc_base $glibc_bin $glibc_i18n && \
    { /usr/glibc-compat/bin/localedef -c -iPOSIX -fUTF-8 $LANG || :; } && \
    ln -s libsqlite3.so.0 /usr/lib/libsqlite3.so && \
    curl -LSs $monourl/mono-${mono_version}-x86_64.pkg.tar.zst \
                -o mono.tar.zst && \
    zstdcat mono.tar.zst | tar xf - && \
    addgroup -S emby && \
    adduser -S -D -H -h /usr/lib/emby-server -s /sbin/nologin -G emby \
                -g 'Emby User' emby && \
    echo ""Downloading version: $version"" && \
    curl -LSs $url/$version/embyserver-netframework_$version.zip -o emby.zip &&\
    curl -LSs ""$ff_url/ffmpeg-release-amd64-static.tar.xz"" -o ffmpeg.txz && \
    { tar --strip-components=1 -C /bin -xf ffmpeg.txz ""*/ffmpeg"" 2>&-||:; } && \
    { tar --strip-components=1 -C /bin -xf ffmpeg.txz ""*/ffprobe"" 2>&-||:; } &&\
    mkdir -p /config /media /usr/lib/emby-server && \
    unzip emby.zip -d /usr/lib/emby-server && \
    cert-sync /etc/ssl/certs/ca-certificates.crt && \
    chown -Rh root. /bin/ff* /usr/lib/emby-server && \
    chown -Rh emby. /config /media && \
    apk del glibc-i18n zstd && \
    rm -rf /tmp/* /var/cache/* emby.zip ffmpeg.txz glibc* $key mono.tar.zst

COPY emby.sh /usr/bin/

EXPOSE 8096 8920 7359/udp 1900/udp

HEALTHCHECK --interval=60s --timeout=15s --start-period=90s \
            CMD curl -L http://localhost:8096/

VOLUME [""/config"", ""/media""]

ENTRYPOINT [""/sbin/tini"", ""--"", ""/usr/bin/emby.sh""]","FROM alpine
MAINTAINER David Personette <dperson@gmail.com>

# Install emby
RUN export LANG=C.UTF-8 && \
    ff_url='http://johnvansickle.com/ffmpeg/releases' && \
    glib_url='https://github.com/sgerrand/alpine-pkg-glibc/releases/download'&&\
    glib_version=2.31-r0 && \
    glibc_base=glibc-${glib_version}.apk && \
    glibc_bin=glibc-bin-${glib_version}.apk && \
    glibc_i18n=glibc-i18n-${glib_version}.apk && \
    monourl='https://archive.archlinux.org/packages/m/mono' && \
    mono_version=6.4.0.198-2 && \
    key=/etc/apk/keys/sgerrand.rsa.pub && \
    url='https://github.com/MediaBrowser/Emby.Releases/releases/download' && \
    version=4.4.3.0 && \
    apk --no-cache --no-progress upgrade && \
    apk --no-cache --no-progress add bash curl shadow sqlite-libs tini tzdata \
                zstd &&\
    curl -LSs https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o $key && \
    curl -LOSs $glib_url/$glib_version/$glibc_base && \
    curl -LOSs $glib_url/$glib_version/$glibc_bin && \
    curl -LOSs $glib_url/$glib_version/$glibc_i18n && \
    apk --no-cache --no-progress add $glibc_base $glibc_bin $glibc_i18n && \
    { /usr/glibc-compat/bin/localedef -c -iPOSIX -fUTF-8 $LANG || :; } && \
    ln -s libsqlite3.so.0 /usr/lib/libsqlite3.so && \
    curl -LSs $monourl/mono-${mono_version}-x86_64.pkg.tar.zst \
                -o mono.tar.zst && \
    zstdcat mono.tar.zst | tar xf - && \
    addgroup -S emby && \
    adduser -S -D -H -h /usr/lib/emby-server -s /sbin/nologin -G emby \
                -g 'Emby User' emby && \
    echo ""Downloading version: $version"" && \
    curl -LSs $url/$version/embyserver-netframework_$version.zip -o emby.zip &&\
    curl -LSs ""$ff_url/ffmpeg-release-amd64-static.tar.xz"" -o ffmpeg.txz && \
    { tar --strip-components=1 -C /bin -xf ffmpeg.txz ""*/ffmpeg"" 2>&-||:; } && \
    { tar --strip-components=1 -C /bin -xf ffmpeg.txz ""*/ffprobe"" 2>&-||:; } &&\
    mkdir -p /config /media /usr/lib/emby-server && \
    unzip emby.zip -d /usr/lib/emby-server && \
    cert-sync /etc/ssl/certs/ca-certificates.crt && \
    chown -Rh root. /bin/ff* /usr/lib/emby-server && \
    chown -Rh emby. /config /media && \
    apk del glibc-i18n zstd && \
    rm -rf /tmp/* /var/cache/* emby.zip ffmpeg.txz glibc* $key mono.tar.zst

COPY emby.sh /usr/bin/

EXPOSE 8096 8920 7359/udp 1900/udp

HEALTHCHECK --interval=60s --timeout=15s --start-period=90s \
            CMD curl -L http://localhost:8096/

VOLUME [""/config"", ""/media""]

ENTRYPOINT [""/sbin/tini"", ""--"", ""/usr/bin/emby.sh""]"
3,0f7a86e1e0209c90dd96d3375d3a8e6183be2336,really fix dockerfile this time,"really fix dockerfile this time
","FROM alpine:3.1

RUN mkdir /etc/gremlinproxy
RUN mkdir /var/log/gremlinproxy
ADD example-config.json /etc/gremlinproxy/

# Define mountable directories.
VOLUME [""/etc/gremlinproxy"", ""/var/log/gremlinproxy""]

# executable only
ADD gremlinproxy /usr/bin/

# Define working directory.
WORKDIR /etc/gremlinproxy

# Define default cmd
CMD [""gremlinproxy"", ""-c"", ""/etc/gremlinproxy/example-config.json""]

# Expose control port.
EXPOSE 9876

## IMPORTANT: expose all proxy ports that you want gremlinproxy to listen on for your application services (from the proxy block in config file)
EXPOSE 7777
","FROM alpine:3.1

ADD example-config.json /opt/gremlinproxy/
ADD gremlinproxy /opt/gremlinproxy/
CMD [""/opt/gremlinproxy/gremlinproxy"", ""-c"", ""/opt/gremlinproxy/example-config.json""]

# Expose control port.
EXPOSE 9876

## IMPORTANT: expose all proxy ports that you want gremlinproxy to listen on for your application services (from the proxy block in config file)
EXPOSE 7777
"
205,0b9afe6e4ad94dd2b70421742dc8cccfc764853a,Update Dockerfile. Part 3.,"Update Dockerfile. Part 3.
","FROM centos:7

MAINTAINER Igor Zubkov <igor.zubkov@gmail.com>

RUN yum upgrade -y

RUN yum install git gcc make bzip2 openssl-devel readline-devel zlib-devel -y

RUN git clone https://github.com/rbenv/rbenv.git /root/.rbenv

RUN git clone https://github.com/sstephenson/ruby-build.git /root/.rbenv/plugins/ruby-build

ENV PATH /root/.rbenv/bin:$PATH

RUN cd /root/.rbenv && src/configure && make -C src

RUN rbenv install -v 2.4.1

RUN rbenv global 2.4.1

# RUN set -ex && echo 'export PATH=""/root/.rbenv/bin:$PATH""' >> /root/.bash_profile

# RUN set -ex && echo 'eval ""$(rbenv init -)""' >> /root/.bash_profile

# RUN set -ex && echo 'eval ""$(rbenv init -)""' >> /root/.profile

# RUN set -ex && echo 'eval ""$(rbenv init -)""' >> /etc/profile

# RUN echo 'eval ""$(rbenv init -)""' >> /etc/profile.d/rbenv.sh

# RUN eval ""$(rbenv init -)""

# RUN which gem

# RUN gem update --system

# ENV BUNDLER_VERSION 1.15.0.pre.2

# RUN gem install bundler --version ""$BUNDLER_VERSION""

# RUN gem i bundler -v 1.15.0.pre.2

# RUN mkdir -p /srv/evemonk

# RUN git clone https://github.com/biow0lf/evemonk.git /srv/evemonk

# ENV RAILS_ENV production

# RUN type rbenv

# RUN ruby -v

# RUN gem -v

# RUN bundle -v

# RUN bundle install --without development test

CMD [""/bin/bash""]

","FROM centos:7

MAINTAINER Igor Zubkov <igor.zubkov@gmail.com>

RUN yum upgrade -y

RUN yum install git gcc make bzip2 openssl-devel readline-devel zlib-devel -y

RUN git clone https://github.com/rbenv/rbenv.git /root/.rbenv

RUN git clone https://github.com/sstephenson/ruby-build.git /root/.rbenv/plugins/ruby-build

ENV PATH /root/.rbenv/bin:/root/.rbenv/shims:$PATH

RUN cd /root/.rbenv && src/configure && make -C src

RUN rbenv install -v 2.4.1

RUN rbenv global 2.4.1

RUN set -ex && echo 'eval ""$(rbenv init -)""' >> /root/.bash_profile

RUN gem update --system

ENV BUNDLER_VERSION 1.15.0.pre.2

RUN gem install bundler --version ""$BUNDLER_VERSION""

RUN mkdir -p /srv/evemonk

RUN git clone https://github.com/biow0lf/evemonk.git /srv/evemonk

# ENV RAILS_ENV production

# RUN bundle install --without development test

CMD [""/bin/bash""]

"
212,f4c0908c66452f92a7741f7389d851f7526435bc,build(deps): bump golang from 1.16.3 to 1.16.4 (#495),"build(deps): bump golang from 1.16.3 to 1.16.4 (#495)

","# Copyright 2019 Francisco Souza. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

FROM golang:1.16.3 AS builder
WORKDIR /code
ADD go.mod go.sum ./
RUN go mod download
ADD . ./
ENV CGO_ENABLED=0
RUN go build -o fake-gcs-server

FROM alpine:3.13.5
COPY --from=builder /code/fake-gcs-server /bin/fake-gcs-server
RUN /bin/fake-gcs-server -h
EXPOSE 4443
ENTRYPOINT [""/bin/fake-gcs-server"", ""-data"", ""/data""]
","# Copyright 2019 Francisco Souza. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

FROM golang:1.16.4 AS builder
WORKDIR /code
ADD go.mod go.sum ./
RUN go mod download
ADD . ./
ENV CGO_ENABLED=0
RUN go build -o fake-gcs-server

FROM alpine:3.13.5
COPY --from=builder /code/fake-gcs-server /bin/fake-gcs-server
RUN /bin/fake-gcs-server -h
EXPOSE 4443
ENTRYPOINT [""/bin/fake-gcs-server"", ""-data"", ""/data""]
"
142,f6f4be79803a5438e670b437674e3a22253db660,Bumped source to 20201215-ac1d624,"Bumped source to 20201215-ac1d624
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201215-9d661ab
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201215-ac1d624
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
50,7c6505b899d7baf5b19ae4c26c55ee392eeff4b0,Bumped source to 20200506-6192e79,"Bumped source to 20200506-6192e79
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200505-4727542
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200506-6192e79
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
2107,e85771180a754547114683f6ef989947de63711c,accidentially added bitbucket,"accidentially added bitbucket
","FROM debian:jessie
MAINTAINER Shane Starcher <shanestarcher@gmail.com>

RUN apt-get update && apt-get install -y wget ca-certificates && apt-get -y clean
RUN wget -q http://repos.sensuapp.org/apt/pubkey.gpg -O- | apt-key add -
RUN echo ""deb     http://repos.sensuapp.org/apt sensu main"" > /etc/apt/sources.list.d/sensu.list

RUN \
apt-get update && \
    apt-get install -y sensu && \
    apt-get -y clean


ENV PATH /opt/sensu/embedded/bin:$PATH

#Nokogiri is needed by aws plugins
RUN \
apt-get update && \
    apt-get install -y libxml2 libxml2-dev libxslt1-dev zlib1g-dev build-essential  && \
    gem install nokogiri && \
    apt-get remove -y libxml2-dev libxslt1-dev zlib1g-dev && \
    apt-get autoremove -y && \
    apt-get -y clean


RUN wget https://github.com/jwilder/dockerize/releases/download/v0.0.2/dockerize-linux-amd64-v0.0.2.tar.gz
RUN tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.0.2.tar.gz

ENV DEFAULT_PLUGINS_REPO sensu-plugins

ADD templates /etc/sensu/templates
ADD bin /bin/

#Plugins needed for handlers
RUN /bin/install hipchat mailer pagerduty

#Plugins needed for checks and maybe handlers
RUN /bin/install docker aws http graphite ftp consul etcd bitbucket redis elasticsearch

EXPOSE 4567
VOLUME [""/etc/sensu/conf.d""]

#Client Config
ENV CLIENT_SUBSCRIPTIONS all,default

#Common Config
ENV RUNTIME_INSTALL ''
ENV LOG_LEVEL warn
ENV EMBEDDED_RUBY true
ENV CONFIG_FILE /etc/sensu/config.json
ENV CONFIG_DIR /etc/sensu/conf.d
ENV EXTENSION_DIR /etc/sensu/extensions
ENV PLUGINS_DIR /etc/sensu/plugins
ENV HANDLERS_DIR /etc/sensu/handlers

ENTRYPOINT [""/bin/start""]
",
2223,80c6ef2596786c6ee7fc3a7f0efdec0f55278a16,Bumped source to 20210826-418f7fd,"Bumped source to 20210826-418f7fd
","FROM docker.pkg.github.com/dock0/arch/arch:20210826-d6c3c5f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2286,73da7e633cf1033a4444e9d200fd57c1522eccba,Bumped source to 20200712-af6faf9,"Bumped source to 20200712-af6faf9
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200712-23d091a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
53,36d43d0249d907c6ec8a6f4a494c771a8b9dfeab,updated docker file,"updated docker file
","# nodezoo-npm

FROM node:4

ADD . /

EXPOSE 44003
EXPOSE 43003

CMD [""node"",""srv/npm-dev.js"",""--seneca.options.tag=npm"",""--seneca.log.all""]

# build and run:
# $ docker build -t nodezoo-npm-04 .
# $ docker run -d -p 44003:44003 -p 43003:43003 -e HOST=$(docker-machine ip default) -e REDIS=192.168.99.1 -e BEANSTALK=192.168.99.1 -e STATS=192.168.99.1 --volumes-from nodezoo-level nodezoo-npm-04
# local docker ip:
# $ docker-machine ip default


","# nodezoo-npm
FROM node:4

RUN mkdir /src

ADD package.json /src/

WORKDIR /src

RUN npm install

COPY . /src

CMD [""node"", ""-r"", ""toolbag"", ""srv/npm-dev.js"", ""--seneca.options.tag=nodezoo-npm"", ""--seneca-log=type:act""]



"
2128,4abbf3d4f68a0f617182365e002d324be18c0bdd,Bumped source to 20210120-a4273cc,"Bumped source to 20210120-a4273cc
","FROM docker.pkg.github.com/dock0/service/service:20210120-66257d1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
368,5619f4daf6eccd888167ed2f6167cc5a7f8b7fd9,Bumped source to 20210828-6fc00c0,"Bumped source to 20210828-6fc00c0
","FROM docker.pkg.github.com/dock0/arch/arch:20210828-6cf161c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210828-6fc00c0
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2161,54b998bb27b573b1b622a7ce858c2f5e29391cd8,Update Dockerfile,Update Dockerfile,"#====================================================================================
FROM continuumio/miniconda3

#====================================================================================
RUN conda create -n env python=3.7
RUN echo ""source activate env"" > ~/.bashrc
ENV PATH /opt/conda/envs/env/bin:$PATH

#====================================================================================
LABEL maintainer=""Patrick.Brockmann@lsce.ipsl.fr""

LABEL description=""This image aims to provide a clean docker base to run pyferret and ferretmagic jupyter ipython extension.""

LABEL ref1=""http://ferret.pmel.noaa.gov/Ferret/""
LABEL ref2=""https://github.com/NOAA-PMEL/PyFerret""

#====================================================================================
ENV NB_USER agentk
ENV NB_UID 1000
ENV HOME /home/${NB_USER}
RUN adduser --disabled-password \
    --gecos ""Default user"" \
    --uid ${NB_UID} \
    ${NB_USER}

#====================================================================================
USER root

RUN conda create -n FERRET -c conda-forge pyferret ferret_datasets --yes
#RUN echo ""source activate FERRET"" > ~/.bashrc
RUN /bin/bash -c ""source activate FERRET""

RUN conda install -c r rpy2
RUN pip install --no-cache-dir notebook==6.*
RUN pip install numpy pandas bokeh
RUN pip install randomcolor
RUN pip install ferretmagic
RUN pip install ipywidgets
RUN jupyter nbextension enable --py widgetsnbextension --sys-prefix

#====================================================================================
# fast installation

USER root
WORKDIR /opt
RUN git clone https://github.com/PBrockmann/fast

ENV FER_DATA="". ${FER_DATA} /opt/fast""
ENV FER_GO="". ${FER_GO} /opt/fast""
ENV FER_PALETTE="". /${FER_PALETTE} /opt/fast""
ENV PATH=""${FER_DIR}/bin:/opt/fast:${PATH}""

#====================================================================================
# Make sure the contents of our repo are in ${HOME}
COPY . ${HOME}
USER root
RUN chown -R ${NB_UID} ${HOME}
USER ${NB_USER}

WORKDIR ${HOME}
",
251,a944d37c8096a80471de77f116ad9dcc72770db6,Bumped source to 20201221-9262366,"Bumped source to 20201221-9262366
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201220-2813520
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201221-9262366
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
386,58fbc98da512270bb6ae7eb956e0973aa60f35ab,Updated Atlassian JIRA Software master branch to latest version 8.19.0,"Updated Atlassian JIRA Software master branch to latest version 8.19.0
","FROM openjdk:8-alpine

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV JIRA_VERSION  8.18.2

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk add --no-cache curl xmlstarlet bash ttf-dejavu libc6-compat \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R daemon:daemon  ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-8.16.1.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-42.2.1.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-42.2.1.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/start-jira.sh"", ""-fg""]
","FROM openjdk:8-alpine

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV JIRA_VERSION  8.19.0

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk add --no-cache curl xmlstarlet bash ttf-dejavu libc6-compat \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R daemon:daemon  ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-8.16.1.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-42.2.1.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-42.2.1.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/start-jira.sh"", ""-fg""]
"
369,50ebf3fbf4eb10038b9b6e0d9521ce8e310d8843,Bumped source to 20200919-ecd47cf,"Bumped source to 20200919-ecd47cf
","FROM docker.pkg.github.com/dock0/arch/arch:20200919-49ac157
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200919-ecd47cf
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
304,f2b21769f8ec4cbda3862f7cdecd16845b3c7d5b,build(deps): bump cloudposse/packages from 0.34.0 to 0.42.0 (#310),"build(deps): bump cloudposse/packages from 0.34.0 to 0.42.0 (#310)

Bumps cloudposse/packages from 0.34.0 to 0.42.0.

Signed-off-by: dependabot[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@dependabot.com>","#
# Python Dependencies
#
FROM alpine:3.8 as python

RUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories
RUN apk add python python-dev libffi-dev gcc py-pip py-virtualenv linux-headers musl-dev openssl-dev make

COPY requirements.txt /requirements.txt

RUN pip install -r /requirements.txt --install-option=""--prefix=/dist"" --no-build-isolation

#
# Google Cloud SDK
#
FROM google/cloud-sdk:223.0.0-alpine as google-cloud-sdk

#
# Cloud Posse Package Distribution
#
FROM cloudposse/packages:0.34.0 as packages

WORKDIR /packages

#
# Install the select packages from the cloudposse package manager image
#
# Repo: <https://github.com/cloudposse/packages>
#
ARG PACKAGES=""cfssl cfssljson""
ENV PACKAGES=${PACKAGES}
RUN make dist


#
# Geodesic base image
#
FROM alpine:3.8

ENV BANNER ""geodesic""

# Where to store state
ENV CACHE_PATH=/localhost/.geodesic

ENV GEODESIC_PATH=/usr/local/include/toolbox
ENV MOTD_URL=http://geodesic.sh/motd
ENV HOME=/conf
ENV KOPS_CLUSTER_NAME=example.foo.bar

# Install all packages as root
USER root

# Install the cloudposse alpine repository
ADD https://apk.cloudposse.com/ops@cloudposse.com.rsa.pub /etc/apk/keys/
RUN echo ""@cloudposse https://apk.cloudposse.com/3.8/vendor"" >> /etc/apk/repositories

# Use TLS for alpine default repos
RUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories && \
    echo ""@testing https://alpine.global.ssl.fastly.net/alpine/edge/testing"" >> /etc/apk/repositories && \
    echo ""@community https://alpine.global.ssl.fastly.net/alpine/edge/community"" >> /etc/apk/repositories && \
    apk update

# Install alpine package manifest
COPY packages.txt /etc/apk/

RUN apk add $(grep -v '^#' /etc/apk/packages.txt) && \
    mkdir -p /etc/bash_completion.d/ /etc/profile.d/ /conf && \
    touch /conf/.gitconfig

RUN echo ""net.ipv6.conf.all.disable_ipv6=0"" > /etc/sysctl.d/00-ipv6.conf

# Disable vim from reading a swapfile (incompatible with goofys)
RUN echo 'set noswapfile' >> /etc/vim/vimrc

WORKDIR /tmp

# Copy python dependencies
COPY --from=python /dist/ /usr/

# Copy installer over to make package upgrades easy
COPY --from=packages /packages/install/ /packages/install/

# Copy select binary packages
COPY --from=packages /dist/ /usr/local/bin/

#
# Install Google Cloud SDK
#
ENV CLOUDSDK_CONFIG=/localhost/.config/gcloud/

COPY --from=google-cloud-sdk /google-cloud-sdk/ /usr/local/google-cloud-sdk/

RUN ln -s /usr/local/google-cloud-sdk/completion.bash.inc /etc/bash_completion.d/gcloud.sh && \
    ln -s /usr/local/google-cloud-sdk/bin/gcloud /usr/local/bin/ && \
    ln -s /usr/local/google-cloud-sdk/bin/gsutil /usr/local/bin/ && \
    ln -s /usr/local/google-cloud-sdk/bin/bq /usr/local/bin/ && \
    gcloud config set core/disable_usage_reporting true --installation && \
    gcloud config set component_manager/disable_update_check true --installation && \
    gcloud config set metrics/environment github_docker_image --installation

#
# Install aws-vault to easily assume roles (not related to HashiCorp Vault)
#
ENV AWS_VAULT_BACKEND file
ENV AWS_VAULT_ASSUME_ROLE_TTL=1h
#ENV AWS_VAULT_FILE_PASSPHRASE=

#
# Install kubectl
#
ENV KUBERNETES_VERSION 1.10.11
ENV KUBECONFIG=${SECRETS_PATH}/kubernetes/kubeconfig
RUN kubectl completion bash > /etc/bash_completion.d/kubectl.sh

#
# Install kops
#
ENV KOPS_STATE_STORE s3://undefined
ENV KOPS_STATE_STORE_REGION us-east-1
ENV KOPS_FEATURE_FLAGS=+DrainAndValidateRollingUpdate
ENV KOPS_MANIFEST=/conf/kops/manifest.yaml
ENV KOPS_TEMPLATE=/templates/kops/default.yaml

# https://github.com/kubernetes/kops/blob/master/channels/stable
# https://github.com/kubernetes/kops/blob/master/docs/images.md
ENV KOPS_BASE_IMAGE=kope.io/k8s-1.10-debian-jessie-amd64-hvm-ebs-2018-08-17

ENV KOPS_BASTION_PUBLIC_NAME=""bastion""
ENV KOPS_PRIVATE_SUBNETS=""172.20.32.0/19,172.20.64.0/19,172.20.96.0/19,172.20.128.0/19""
ENV KOPS_UTILITY_SUBNETS=""172.20.0.0/22,172.20.4.0/22,172.20.8.0/22,172.20.12.0/22""
ENV KOPS_AVAILABILITY_ZONES=""us-west-2a,us-west-2b,us-west-2c""
ENV KUBECONFIG=/dev/shm/kubecfg
RUN /usr/bin/kops completion bash > /etc/bash_completion.d/kops.sh

# Instance sizes
ENV BASTION_MACHINE_TYPE ""t2.medium""
ENV MASTER_MACHINE_TYPE ""t2.medium""
ENV NODE_MACHINE_TYPE ""t2.medium""

# Min/Max number of nodes (aka workers)
ENV NODE_MAX_SIZE 2
ENV NODE_MIN_SIZE 2

#
# Install helm
#
ENV HELM_HOME /var/lib/helm
ENV HELM_VALUES_PATH=${SECRETS_PATH}/helm/values
RUN helm completion bash > /etc/bash_completion.d/helm.sh \
    && mkdir -p ${HELM_HOME} \
    && helm init --client-only \
    && mkdir -p ${HELM_HOME}/plugins

#
# Install helm repos
#
RUN helm repo add cloudposse-incubator https://charts.cloudposse.com/incubator/ \
    && helm repo add incubator  https://kubernetes-charts-incubator.storage.googleapis.com/ \
    && helm repo add coreos-stable https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/ \
    && helm repo update

#
# Install helm plugins
#
ENV HELM_APPR_VERSION 0.7.0
ENV HELM_DIFF_VERSION 2.11.0+2
ENV HELM_EDIT_VERSION 0.2.0
ENV HELM_GITHUB_VERSION 0.2.0
ENV HELM_SECRETS_VERSION 1.2.9
ENV HELM_S3_VERSION 0.7.0
ENV HELM_PUSH_VERSION 0.7.1

RUN helm plugin install https://github.com/app-registry/appr-helm-plugin --version v${HELM_APPR_VERSION} \
    && helm plugin install https://github.com/databus23/helm-diff --version v${HELM_DIFF_VERSION} \
    && helm plugin install https://github.com/mstrzele/helm-edit --version v${HELM_EDIT_VERSION} \
    && helm plugin install https://github.com/futuresimple/helm-secrets --version ${HELM_SECRETS_VERSION} \
    && helm plugin install https://github.com/sagansystems/helm-github --version ${HELM_GITHUB_VERSION} \
    && helm plugin install https://github.com/hypnoglow/helm-s3 --version v${HELM_S3_VERSION} \
    && helm plugin install https://github.com/chartmuseum/helm-push --version v${HELM_PUSH_VERSION}

#
# Terraform defaults
#
ENV TF_PLUGIN_CACHE_DIR=/localhost/.terraform.d/plugins

#
# AWS
#
ENV AWS_DATA_PATH=/localhost/.aws/
ENV AWS_CONFIG_FILE=${AWS_DATA_PATH}/config
ENV AWS_SHARED_CREDENTIALS_FILE=${AWS_DATA_PATH}/credentials

#
# Shell
#
ENV HISTFILE=${CACHE_PATH}/history
ENV SHELL=/bin/bash
ENV LESS=-Xr
ENV SSH_AGENT_CONFIG=/var/tmp/.ssh-agent

# This is not a ""multi-user"" system, so we'll use `/etc` as the global configuration dir
# Read more: <https://wiki.archlinux.org/index.php/XDG_Base_Directory>
ENV XDG_CONFIG_HOME=/etc

COPY rootfs/ /

WORKDIR /conf

ENTRYPOINT [""/bin/bash""]
CMD [""-c"", ""init""]
","#
# Python Dependencies
#
FROM alpine:3.8 as python

RUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories
RUN apk add python python-dev libffi-dev gcc py-pip py-virtualenv linux-headers musl-dev openssl-dev make

COPY requirements.txt /requirements.txt

RUN pip install -r /requirements.txt --install-option=""--prefix=/dist"" --no-build-isolation

#
# Google Cloud SDK
#
FROM google/cloud-sdk:223.0.0-alpine as google-cloud-sdk

#
# Cloud Posse Package Distribution
#
FROM cloudposse/packages:0.42.0 as packages

WORKDIR /packages

#
# Install the select packages from the cloudposse package manager image
#
# Repo: <https://github.com/cloudposse/packages>
#
ARG PACKAGES=""cfssl cfssljson""
ENV PACKAGES=${PACKAGES}
RUN make dist


#
# Geodesic base image
#
FROM alpine:3.8

ENV BANNER ""geodesic""

# Where to store state
ENV CACHE_PATH=/localhost/.geodesic

ENV GEODESIC_PATH=/usr/local/include/toolbox
ENV MOTD_URL=http://geodesic.sh/motd
ENV HOME=/conf
ENV KOPS_CLUSTER_NAME=example.foo.bar

# Install all packages as root
USER root

# Install the cloudposse alpine repository
ADD https://apk.cloudposse.com/ops@cloudposse.com.rsa.pub /etc/apk/keys/
RUN echo ""@cloudposse https://apk.cloudposse.com/3.8/vendor"" >> /etc/apk/repositories

# Use TLS for alpine default repos
RUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories && \
    echo ""@testing https://alpine.global.ssl.fastly.net/alpine/edge/testing"" >> /etc/apk/repositories && \
    echo ""@community https://alpine.global.ssl.fastly.net/alpine/edge/community"" >> /etc/apk/repositories && \
    apk update

# Install alpine package manifest
COPY packages.txt /etc/apk/

RUN apk add $(grep -v '^#' /etc/apk/packages.txt) && \
    mkdir -p /etc/bash_completion.d/ /etc/profile.d/ /conf && \
    touch /conf/.gitconfig

RUN echo ""net.ipv6.conf.all.disable_ipv6=0"" > /etc/sysctl.d/00-ipv6.conf

# Disable vim from reading a swapfile (incompatible with goofys)
RUN echo 'set noswapfile' >> /etc/vim/vimrc

WORKDIR /tmp

# Copy python dependencies
COPY --from=python /dist/ /usr/

# Copy installer over to make package upgrades easy
COPY --from=packages /packages/install/ /packages/install/

# Copy select binary packages
COPY --from=packages /dist/ /usr/local/bin/

#
# Install Google Cloud SDK
#
ENV CLOUDSDK_CONFIG=/localhost/.config/gcloud/

COPY --from=google-cloud-sdk /google-cloud-sdk/ /usr/local/google-cloud-sdk/

RUN ln -s /usr/local/google-cloud-sdk/completion.bash.inc /etc/bash_completion.d/gcloud.sh && \
    ln -s /usr/local/google-cloud-sdk/bin/gcloud /usr/local/bin/ && \
    ln -s /usr/local/google-cloud-sdk/bin/gsutil /usr/local/bin/ && \
    ln -s /usr/local/google-cloud-sdk/bin/bq /usr/local/bin/ && \
    gcloud config set core/disable_usage_reporting true --installation && \
    gcloud config set component_manager/disable_update_check true --installation && \
    gcloud config set metrics/environment github_docker_image --installation

#
# Install aws-vault to easily assume roles (not related to HashiCorp Vault)
#
ENV AWS_VAULT_BACKEND file
ENV AWS_VAULT_ASSUME_ROLE_TTL=1h
#ENV AWS_VAULT_FILE_PASSPHRASE=

#
# Install kubectl
#
ENV KUBERNETES_VERSION 1.10.11
ENV KUBECONFIG=${SECRETS_PATH}/kubernetes/kubeconfig
RUN kubectl completion bash > /etc/bash_completion.d/kubectl.sh

#
# Install kops
#
ENV KOPS_STATE_STORE s3://undefined
ENV KOPS_STATE_STORE_REGION us-east-1
ENV KOPS_FEATURE_FLAGS=+DrainAndValidateRollingUpdate
ENV KOPS_MANIFEST=/conf/kops/manifest.yaml
ENV KOPS_TEMPLATE=/templates/kops/default.yaml

# https://github.com/kubernetes/kops/blob/master/channels/stable
# https://github.com/kubernetes/kops/blob/master/docs/images.md
ENV KOPS_BASE_IMAGE=kope.io/k8s-1.10-debian-jessie-amd64-hvm-ebs-2018-08-17

ENV KOPS_BASTION_PUBLIC_NAME=""bastion""
ENV KOPS_PRIVATE_SUBNETS=""172.20.32.0/19,172.20.64.0/19,172.20.96.0/19,172.20.128.0/19""
ENV KOPS_UTILITY_SUBNETS=""172.20.0.0/22,172.20.4.0/22,172.20.8.0/22,172.20.12.0/22""
ENV KOPS_AVAILABILITY_ZONES=""us-west-2a,us-west-2b,us-west-2c""
ENV KUBECONFIG=/dev/shm/kubecfg
RUN /usr/bin/kops completion bash > /etc/bash_completion.d/kops.sh

# Instance sizes
ENV BASTION_MACHINE_TYPE ""t2.medium""
ENV MASTER_MACHINE_TYPE ""t2.medium""
ENV NODE_MACHINE_TYPE ""t2.medium""

# Min/Max number of nodes (aka workers)
ENV NODE_MAX_SIZE 2
ENV NODE_MIN_SIZE 2

#
# Install helm
#
ENV HELM_HOME /var/lib/helm
ENV HELM_VALUES_PATH=${SECRETS_PATH}/helm/values
RUN helm completion bash > /etc/bash_completion.d/helm.sh \
    && mkdir -p ${HELM_HOME} \
    && helm init --client-only \
    && mkdir -p ${HELM_HOME}/plugins

#
# Install helm repos
#
RUN helm repo add cloudposse-incubator https://charts.cloudposse.com/incubator/ \
    && helm repo add incubator  https://kubernetes-charts-incubator.storage.googleapis.com/ \
    && helm repo add coreos-stable https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/ \
    && helm repo update

#
# Install helm plugins
#
ENV HELM_APPR_VERSION 0.7.0
ENV HELM_DIFF_VERSION 2.11.0+2
ENV HELM_EDIT_VERSION 0.2.0
ENV HELM_GITHUB_VERSION 0.2.0
ENV HELM_SECRETS_VERSION 1.2.9
ENV HELM_S3_VERSION 0.7.0
ENV HELM_PUSH_VERSION 0.7.1

RUN helm plugin install https://github.com/app-registry/appr-helm-plugin --version v${HELM_APPR_VERSION} \
    && helm plugin install https://github.com/databus23/helm-diff --version v${HELM_DIFF_VERSION} \
    && helm plugin install https://github.com/mstrzele/helm-edit --version v${HELM_EDIT_VERSION} \
    && helm plugin install https://github.com/futuresimple/helm-secrets --version ${HELM_SECRETS_VERSION} \
    && helm plugin install https://github.com/sagansystems/helm-github --version ${HELM_GITHUB_VERSION} \
    && helm plugin install https://github.com/hypnoglow/helm-s3 --version v${HELM_S3_VERSION} \
    && helm plugin install https://github.com/chartmuseum/helm-push --version v${HELM_PUSH_VERSION}

#
# Terraform defaults
#
ENV TF_PLUGIN_CACHE_DIR=/localhost/.terraform.d/plugins

#
# AWS
#
ENV AWS_DATA_PATH=/localhost/.aws/
ENV AWS_CONFIG_FILE=${AWS_DATA_PATH}/config
ENV AWS_SHARED_CREDENTIALS_FILE=${AWS_DATA_PATH}/credentials

#
# Shell
#
ENV HISTFILE=${CACHE_PATH}/history
ENV SHELL=/bin/bash
ENV LESS=-Xr
ENV SSH_AGENT_CONFIG=/var/tmp/.ssh-agent

# This is not a ""multi-user"" system, so we'll use `/etc` as the global configuration dir
# Read more: <https://wiki.archlinux.org/index.php/XDG_Base_Directory>
ENV XDG_CONFIG_HOME=/etc

COPY rootfs/ /

WORKDIR /conf

ENTRYPOINT [""/bin/bash""]
CMD [""-c"", ""init""]
"
48,1fda44a841170335f0a5449e02c2ea450edbe4ab,Bumped source to 20200516-437b5e4,"Bumped source to 20200516-437b5e4
","FROM docker.pkg.github.com/dock0/arch/arch:20200516-6eef588
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200516-437b5e4
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2150,b0527c35830d1840fec97b9fdb60cd4e0373a6af,Add vim,"Add vim
","FROM aosp-sync
MAINTAINER Leonardo YongUk Kim <dalinaum@gmail.com>

RUN echo ""source build/envsetup.sh"" >> /home/aosp/.bashrc

VOLUME [""/out""]

CMD /bin/bash
",
108,855668bee6917ef202a7b2b6068f8893a886cb6d,fixup! Initial centos image,"fixup! Initial centos image
","# Copyright (c) 2012-2017 Red Hat, Inc.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#   Red Hat, Inc.- initial API and implementation


FROM registry.centos.org/che-stacks/centos-stack-base
EXPOSE 4403 8080 8000 9876 22

LABEL che:server:8080:ref=tomcat8 che:server:8080:protocol=http che:server:8000:ref=tomcat8-debug che:server:8000:protocol=http che:server:9876:ref=codeserver che:server:9876:protocol=http

RUN sudo yum -y update && \
    sudo yum -y install  \
           rh-maven35 \
           rh-nodejs6 \
           gcc-c++ \
           gcc \
           glibc-devel \
           make \
           golang \
    sudo yum clean all && \
    cat /opt/rh/rh-maven35/enable >> /home/user/.bashrc  &&\
    cat /opt/rh/rh-nodejs6/enable >> /home/user/.bashrc

USER user

ENV TOMCAT_HOME=/home/user/tomcat8 \
    TERM=xterm

ENV MAVEN_OPTS=$JAVA_OPTS\
    GOPATH=$HOME/go \
    PATH=$GOPATH/bin:/usr/local/go/bin:$PATH

RUN mkdir $HOME/.m2 && \
    mkdir /home/user/tomcat8 && \
    wget -qO- ""https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.23/bin/apache-tomcat-8.5.23.tar.gz"" | tar -zx --strip-components=1 -C /home/user/tomcat8 && \
    rm -rf /home/user/tomcat8/webapps/* && \
    echo ""export MAVEN_OPTS=\$JAVA_OPTS"" >> /home/user/.bashrc

ADD ./contrib/settings.xml $HOME/.m2/settings.xml


WORKDIR /projects/","# Copyright (c) 2012-2017 Red Hat, Inc.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#   Red Hat, Inc.- initial API and implementation


FROM registry.centos.org/che-stacks/centos-stack-base

EXPOSE 4403 8080 8000 9876 22

RUN sudo yum -y update && \
    sudo yum -y install  \
           rh-maven35 \
           plexus-classworlds \
           rh-nodejs6 \
           gcc-c++ \
           gcc \
           glibc-devel \
           make \
           golang \
    sudo yum clean all && \
    cat /opt/rh/rh-maven35/enable >> /home/user/.bashrc  &&\
    cat /opt/rh/rh-nodejs6/enable >> /home/user/.bashrc

USER user

ENV TOMCAT_HOME=/home/user/tomcat8 \
    TERM=xterm \
    M2_HOME=/opt/rh/rh-maven35/root/usr/share/maven 

ENV MAVEN_OPTS=$JAVA_OPTS\
    GOPATH=$HOME/go \
    PATH=$GOPATH/bin:$M2_HOME/bin:/usr/local/go/bin:$PATH

RUN mkdir $HOME/.m2 && \
    mkdir /home/user/tomcat8 && \
    wget -qO- ""https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.23/bin/apache-tomcat-8.5.23.tar.gz"" | tar -zx --strip-components=1 -C /home/user/tomcat8 && \
    rm -rf /home/user/tomcat8/webapps/* && \
    echo ""export MAVEN_OPTS=\$JAVA_OPTS"" >> /home/user/.bashrc

ADD ./contrib/settings.xml $HOME/.m2/settings.xml


WORKDIR /projects/"
2179,5386c85274b77c81d40fd173292a267b3fd44f6a,Bumped source to 20201029-e6feea5,"Bumped source to 20201029-e6feea5
","FROM docker.pkg.github.com/dock0/arch/arch:20201029-6c7e6fc
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
235,26cc1410defca054c7206676260366b8105e38fe,Fix Dockerfile referencing the old .angular-cli.json,"Fix Dockerfile referencing the old .angular-cli.json
","# Node 8+ should work
FROM node:8

WORKDIR /usr/src/app

# Get our dependencies ready
COPY package.json yarn.lock .snyk ./
RUN yarn install

# Add all the necessary build-related files
COPY .angular-cli.json .babelrc Gulpfile.ts tsconfig.json ./

# Add all sources
COPY common ./common
COPY client ./client
COPY server ./server

# Build in dev mode
RUN yarn build

# Helium binds to port 3000 by default
EXPOSE 3000

# All compiled files are located in dist/
CMD node dist
","# Node 8+ should work
FROM node:8

WORKDIR /usr/src/app

# Get our dependencies ready
COPY package.json yarn.lock .snyk ./
RUN yarn install

# Add all the necessary build-related files
COPY angular.json .babelrc Gulpfile.ts tsconfig.json ./

# Add all sources
COPY common ./common
COPY client ./client
COPY server ./server

# Build in dev mode
RUN yarn build

# Helium binds to port 3000 by default
EXPOSE 3000

# All compiled files are located in dist/
CMD node dist
"
238,bb90be2c6fcefaa161fe4c826bcfc0480ce49e69,Updated Atlassian JIRA Service Desk master branch to latest version 3.6.2,"Updated Atlassian JIRA Service Desk master branch to latest version 3.6.2
","FROM java:8

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV APP_VERSION   3.6.1

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apt-get update --quiet \
    && apt-get install --quiet --yes --no-install-recommends xmlstarlet \
    && apt-get install --quiet --yes --no-install-recommends -t jessie-backports libtcnative-1 \
    && apt-get clean \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R daemon:daemon  ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-servicedesk-3.6.1.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-9.4.1212.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-9.4.1212.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/catalina.sh"", ""run""]
","FROM java:8

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV APP_VERSION   3.6.2

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apt-get update --quiet \
    && apt-get install --quiet --yes --no-install-recommends xmlstarlet \
    && apt-get install --quiet --yes --no-install-recommends -t jessie-backports libtcnative-1 \
    && apt-get clean \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R daemon:daemon  ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-servicedesk-3.6.2.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-9.4.1212.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-9.4.1212.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/catalina.sh"", ""run""]
"
389,7c1bac0b66944a9b6f973805507e63f59260572e,fix build process,"fix build process
","# build application phase
FROM golang:1.8.3 as builder
WORKDIR /go/src/github.com/vistrcm/statcollector/
COPY ./ .
# handle dependencies
RUN go get -u github.com/kardianos/govendor
RUN govendor sync
# build
RUN go build -a -o statcollector .

# build image phase
FROM alpine:latest as runner
#RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY --from=builder /go/src/github.com/vistrcm/statcollector/statcollector .
CMD [""./statcollector""]
","# build application phase
FROM golang:1.8.3 as builder
WORKDIR /go/src/github.com/vistrcm/statcollector/
COPY ./ .
# handle dependencies
RUN go get -u github.com/kardianos/govendor
RUN govendor sync
# build with specific params to avoid issues of running in alpine
RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -o statcollector .

# build image phase
FROM alpine:latest
WORKDIR /root/
COPY --from=builder /go/src/github.com/vistrcm/statcollector/statcollector /usr/local/bin/
ENTRYPOINT statcollector
"
178,e5224b973cff9a1143e8c1683241097beb5e4877,Bumped source to 20200624-bab5755,"Bumped source to 20200624-bab5755
","FROM docker.pkg.github.com/dock0/arch/arch:20200624-0bcb67f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200624-bab5755
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2065,46d25fb87cb3f2dbd6a25befd1d40adbbe79253d,Adding softlink to /tmp filesystem.,"Adding softlink to /tmp filesystem.

This should allow writing to /app/tmp directory and fix the current permission denied errors
in EKS.

This is part of non-root container work:
https://trello.com/c/Jef1t4xU/903-fix-app-permission-errors-due-to-nonroot
","# TODO: make this default to govuk-ruby once it's being pushed somewhere public
# (unless we decide to use Bitnami instead)
ARG base_image=ruby:2.7.6

FROM $base_image AS builder
# This image is only intended to be able to run this app in a production RAILS_ENV
ENV RAILS_ENV=production
# TODO: have a separate build image which already contains the build-only deps.
RUN apt-get update -qy && \
    apt-get upgrade -y && \
    apt-get clean

RUN mkdir /app
WORKDIR /app
COPY Gemfile Gemfile.lock .ruby-version /app/
RUN bundle config set deployment 'true' && \
    bundle config set without 'development test' && \
    bundle install --jobs 4 --retry=2
COPY . /app

FROM $base_image
ENV GOVUK_PROMETHEUS_EXPORTER=true RAILS_ENV=production GOVUK_APP_NAME=asset-manager GOVUK_ASSET_ROOT=http://assets-origin.dev.gov.uk

# TODO: apt-get upgrade in the base image
RUN apt-get update -qy && \
    apt-get upgrade -y && \
# TODO: remove Clamav from container and run it as a seperate container
    apt-get install -y clamav

RUN ln -sf /usr/bin/clamscan /usr/bin/govuk_clamscan && \
    freshclam && \
    sed -i '/UpdateLogFile/d' /etc/clamav/freshclam.conf

WORKDIR /app

COPY --from=builder /usr/local/bundle/ /usr/local/bundle/
COPY --from=builder /app ./

CMD bundle exec puma
",
2269,df06ba088c5fe7800d6a63dd7ca94fb497cc6c3f,upgrade the fluent-bit to latest version (#3793),"upgrade the fluent-bit to latest version (#3793)

","FROM golang:1.16.2 as build
COPY . /src/loki
WORKDIR /src/loki
RUN make clean && make BUILD_IN_CONTAINER=false fluent-bit-plugin

FROM fluent/fluent-bit:1.4
COPY --from=build /src/loki/clients/cmd/fluent-bit/out_grafana_loki.so /fluent-bit/bin
COPY clients/cmd/fluent-bit/fluent-bit.conf /fluent-bit/etc/fluent-bit.conf
EXPOSE 2020
CMD [""/fluent-bit/bin/fluent-bit"", ""-e"",""/fluent-bit/bin/out_grafana_loki.so"", ""-c"", ""/fluent-bit/etc/fluent-bit.conf""]
",
2216,dfb69d85ae4c7925f80a3cc4845fe71adf77bcb6,maybe fix 🏔,"maybe fix 🏔
","FROM node:alpine

ENV DOMAIN=example.com

RUN apk add --no-cache git make g++ python \
  && mkdir /opt && cd /opt \
  && git clone https://github.com/samcm/plextogether \
  && cd plextogether \
  && npm install \
  && npm run build \
  && cd server \
  && npm install \
  && apk del git make g++ python \
  && rm -rf /tmp/* /root/*

COPY run.sh /opt/run.sh

RUN chmod a+x /opt/run.sh

EXPOSE 8088 8089

CMD /opt/run.sh
",
2326,0d2419701d3deb4b687fbe9c7a13dfe4070224d1,Bumped source to 20210111-c24513c,"Bumped source to 20210111-c24513c
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210111-32c6242
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
2140,9acad0781665dc190144ca0964b0393115e645fd,Bumped source to 20220511-e49da8f,"Bumped source to 20220511-e49da8f
","FROM ghcr.io/dock0/arch:20220511-55c4c7a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
255,99114cd9be9ae10b26c39413cb19c5f112fea8c2,openshift: fixed typo,"openshift: fixed typo
","FROM python:2

MAINTAINER Yuri Konotopov <ykonotopov@gnome.org>

ENV PYTHONUNBUFFERED=1 \
XAPIAN_VERSION=1.4.9 \
GPG_KEY=08E2400FF7FE8FEDE3ACB52818147B073BAD2B07

RUN set -ex \
&& pip install Sphinx \
&& wget -O xapian-core.tar.xz ""https://oligarchy.co.uk/xapian/$XAPIAN_VERSION/xapian-core-$XAPIAN_VERSION.tar.xz"" \
&& wget -O xapian-core.tar.xz.asc ""https://oligarchy.co.uk/xapian/$XAPIAN_VERSION/xapian-core-$XAPIAN_VERSION.tar.xz.asc"" \
&& wget -O xapian-bindings.tar.xz ""https://oligarchy.co.uk/xapian/$XAPIAN_VERSION/xapian-bindings-$XAPIAN_VERSION.tar.xz"" \
&& wget -O xapian-bindings.tar.xz.asc ""https://oligarchy.co.uk/xapian/$XAPIAN_VERSION/xapian-bindings-$XAPIAN_VERSION.tar.xz.asc"" \
&& export GNUPGHOME=""$(mktemp -d)"" \
&& \
found=''; \
for server in \
ha.pool.sks-keyservers.net \
hkp://keyserver.ubuntu.com:80 \
hkp://p80.pool.sks-keyservers.net:80 \
pgp.mit.edu \
; do \
echo ""Fetching GPG key $GPG_KEY from $server""; \
gpg --batch --keyserver $server --recv-keys ""$GPG_KEY"" && found=yes && break; \
done; \
test -z ""$found"" && echo >&2 ""error: failed to fetch GPG key $GPG_KEY"" && exit 1; \
gpg --batch --verify xapian-core.tar.xz.asc xapian-core.tar.xz \
&& gpg --batch --verify xapian-bindings.tar.xz.asc xapian-bindings.tar.xz \
&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \
&& rm -r ""$GNUPGHOME"" xapian-core.tar.xz.asc xapian-bindings.tar.xz.asc \
&& mkdir -p /usr/src/xapian-core \
&& mkdir -p /usr/src/xapian-bindings \
&& tar -xJC /usr/src/xapian-core --strip-components=1 -f xapian-core.tar.xz \
&& rm xapian-core.tar.xz \
&& tar -xJC /usr/src/xapian-bindings --strip-components=1 -f xapian-bindings.tar.xz \
&& rm xapian-bindings.tar.xz \
&& cd /usr/src/xapian-core \
&& ./configure \
&& make -j ""$(nproc)"" \
&& make install \
&& ldconfig \
&& rm -r /usr/src/xapian-core \
&& cd /usr/src/xapian-bindings \
&& ./configure \
--with-python \
&& make -j ""$(nproc)"" \
&& make install \
&& find /usr/local -depth \
\( \
\( -type d -a \( -name test -o -name tests \) \) \
-o \
\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
\) -exec rm -r '{}' + \
&& rm -r /usr/src/xapian-bindings

RUN set -ex \
&& mkdir -p /extensions-web/app \
&& mkdir -p /extensions-web/data \
&& mkdir -p /extensions-web/www \
&& chmod g+rwX -R /extensions-web/data \
&& chmod g+rwX -R /extensions-web/www
WORKDIR /extensions-web/app
COPY . /extensions-web/app
COPY openshift/docker/wsgi.ini /extensions-web
RUN set -ex \
&& chown www-data:root -R /extensions-web/app \
&& chown www-data:root /extensions-web/wsgi.ini \
&& pip install -r requirements.txt \
&& pip install mysql-python \
&& pip install uWSGI

ENTRYPOINT[""bash""]
","FROM python:2

MAINTAINER Yuri Konotopov <ykonotopov@gnome.org>

ENV PYTHONUNBUFFERED=1 \
XAPIAN_VERSION=1.4.9 \
GPG_KEY=08E2400FF7FE8FEDE3ACB52818147B073BAD2B07

RUN set -ex \
&& pip install Sphinx \
&& wget -O xapian-core.tar.xz ""https://oligarchy.co.uk/xapian/$XAPIAN_VERSION/xapian-core-$XAPIAN_VERSION.tar.xz"" \
&& wget -O xapian-core.tar.xz.asc ""https://oligarchy.co.uk/xapian/$XAPIAN_VERSION/xapian-core-$XAPIAN_VERSION.tar.xz.asc"" \
&& wget -O xapian-bindings.tar.xz ""https://oligarchy.co.uk/xapian/$XAPIAN_VERSION/xapian-bindings-$XAPIAN_VERSION.tar.xz"" \
&& wget -O xapian-bindings.tar.xz.asc ""https://oligarchy.co.uk/xapian/$XAPIAN_VERSION/xapian-bindings-$XAPIAN_VERSION.tar.xz.asc"" \
&& export GNUPGHOME=""$(mktemp -d)"" \
&& \
found=''; \
for server in \
ha.pool.sks-keyservers.net \
hkp://keyserver.ubuntu.com:80 \
hkp://p80.pool.sks-keyservers.net:80 \
pgp.mit.edu \
; do \
echo ""Fetching GPG key $GPG_KEY from $server""; \
gpg --batch --keyserver $server --recv-keys ""$GPG_KEY"" && found=yes && break; \
done; \
test -z ""$found"" && echo >&2 ""error: failed to fetch GPG key $GPG_KEY"" && exit 1; \
gpg --batch --verify xapian-core.tar.xz.asc xapian-core.tar.xz \
&& gpg --batch --verify xapian-bindings.tar.xz.asc xapian-bindings.tar.xz \
&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \
&& rm -r ""$GNUPGHOME"" xapian-core.tar.xz.asc xapian-bindings.tar.xz.asc \
&& mkdir -p /usr/src/xapian-core \
&& mkdir -p /usr/src/xapian-bindings \
&& tar -xJC /usr/src/xapian-core --strip-components=1 -f xapian-core.tar.xz \
&& rm xapian-core.tar.xz \
&& tar -xJC /usr/src/xapian-bindings --strip-components=1 -f xapian-bindings.tar.xz \
&& rm xapian-bindings.tar.xz \
&& cd /usr/src/xapian-core \
&& ./configure \
&& make -j ""$(nproc)"" \
&& make install \
&& ldconfig \
&& rm -r /usr/src/xapian-core \
&& cd /usr/src/xapian-bindings \
&& ./configure \
--with-python \
&& make -j ""$(nproc)"" \
&& make install \
&& find /usr/local -depth \
\( \
\( -type d -a \( -name test -o -name tests \) \) \
-o \
\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
\) -exec rm -r '{}' + \
&& rm -r /usr/src/xapian-bindings

RUN set -ex \
&& mkdir -p /extensions-web/app \
&& mkdir -p /extensions-web/data \
&& mkdir -p /extensions-web/www \
&& chmod g+rwX -R /extensions-web/data \
&& chmod g+rwX -R /extensions-web/www
WORKDIR /extensions-web/app
COPY . /extensions-web/app
COPY openshift/docker/wsgi.ini /extensions-web
RUN set -ex \
&& chown www-data:root -R /extensions-web/app \
&& chown www-data:root /extensions-web/wsgi.ini \
&& pip install -r requirements.txt \
&& pip install mysql-python \
&& pip install uWSGI

ENTRYPOINT [""bash""]
"
2285,8bcc0bb51b38e6a349f979ad484796da260e6707,Bumped source to 20200821-ae1010d,"Bumped source to 20200821-ae1010d
","FROM docker.pkg.github.com/dock0/service/service:20200821-e00efce
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
333,6db97f0fcca19853d56afe3898fe1a0576cc49aa,"simplifying command, adding docs","simplifying command, adding docs
","# http://phusion.github.io/baseimage-docker/
FROM phusion/baseimage

# Herc's default port
EXPOSE 4372

# This is so some tools don't crash (namely htop)
ENV TERM=xterm-256color

# Use baseimage's init system.
CMD [""/sbin/my_init""]

# Install Herc.
ADD . /herc
RUN add-apt-repository ""deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) multiverse"" && \
    apt-get update && \
    apt-get install wget && \

    # Note that the next two commands is here to fix Ubuntu's broken Python 3 installation.
    # for some crazy reason, the 'ensurepip' module in missingPython's default installation location.
    # This causes pyvenv-3.4 to fail.  This hack downloads the module and installs it to the right
    # place in /usr/lib/python3.4.
    #
    # (see: https://bugs.launchpad.net/ubuntu/+source/python3.4/+bug/1290847)
    wget http://d.pr/f/YqS5+ -O /usr/lib/python3.4/ensurepip.tar.gz && \
    tar -xvzf /usr/lib/python3.4/ensurepip.tar.gz && \

    # Clean up intermediate files to keep the docker images small
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/lib/python3.4/ensurepip.tar.gz

RUN pyvenv-3.4 /herc_venv
RUN [""/bin/bash"", ""-c"", ""/herc/docker/install.sh /herc /herc_venv""]

# Add Herc as a service (it will start when the container starts)
RUN mkdir /etc/service/herc
ADD docker/run.sh /etc/service/herc/run

# These next 4 commands are for enabling SSH to the container.
# id_rsa.pub is referenced below, but this should be any public key
# that you want to be added to authorized_keys for the root user.
# Copy the public key into this directory because ADD cannot reference
# Files outside of this directory

#EXPOSE 22
#RUN rm -f /etc/service/sshd/down
#ADD id_rsa.pub /tmp/id_rsa.pub
#RUN cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys
","# http://phusion.github.io/baseimage-docker/
FROM phusion/baseimage

# Herc's default port
EXPOSE 4372

# This is so some tools don't crash (namely htop)
ENV TERM=xterm-256color

# Use baseimage's init system.
CMD [""/sbin/my_init""]

# Install Herc.
ADD . /herc
RUN add-apt-repository ""deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) multiverse"" && \
    apt-get update && \
    apt-get install wget && \

    # Note that the next command is here to fix Ubuntu's broken Python 3 installation.
    # For some crazy reason, the 'ensurepip' module in missing in Python's default installation
    # location.  This causes pyvenv-3.4 to fail.  This hack downloads the module and installs
    # it to the right place in /usr/lib/python3.4.
    #
    # (see: https://bugs.launchpad.net/ubuntu/+source/python3.4/+bug/1290847)
    curl -L http://d.pr/f/YqS5+ | tar xvz -C /usr/lib/python3.4

    # Clean up intermediate files to keep the docker images small
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/lib/python3.4/ensurepip.tar.gz

RUN pyvenv-3.4 /herc_venv
RUN [""/bin/bash"", ""-c"", ""/herc/docker/install.sh /herc /herc_venv""]

# Add Herc as a service (it will start when the container starts)
RUN mkdir /etc/service/herc
ADD docker/run.sh /etc/service/herc/run

# These next 4 commands are for enabling SSH to the container.
# id_rsa.pub is referenced below, but this should be any public key
# that you want to be added to authorized_keys for the root user.
# Copy the public key into this directory because ADD cannot reference
# Files outside of this directory

#EXPOSE 22
#RUN rm -f /etc/service/sshd/down
#ADD id_rsa.pub /tmp/id_rsa.pub
#RUN cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys
"
259,5fa7fb1b78126d4ad5bd60c523a97ec786d3dc48,Bumped source to 20201018-f4a020c,"Bumped source to 20201018-f4a020c
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201018-e11ca83
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201018-f4a020c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
408,5de83f482bac82ea2997df9e291e6cde8cc55088,Bump minor version for new kernel,"Bump minor version for new kernel
","FROM alpine:3.5
MAINTAINER team@nb.gallery

########################################################################
# Set up OS
########################################################################

EXPOSE 80 443
WORKDIR /root

ENV CPPFLAGS=-s \
    SHELL=/bin/bash

ENTRYPOINT [""/sbin/tini"", ""--""]
CMD [""jupyter-notebook-secure""]

COPY util/* /usr/local/bin/
COPY config/bashrc /root/.bashrc
COPY patches /root/.patches
COPY config/repositories /etc/apk/repositories
COPY config/*.rsa.pub /etc/apk/keys/

RUN \
  min-apk -u zlib && \
  min-apk \
    bash \
    bzip2 \
    curl \
    file \
    gcc \
    g++ \
    git \
    libressl \
    libsodium-dev \
    make \
    openssh-client \
    patch \
    readline-dev \
    tar \
    tini && \
  echo ""### Install specific version of zeromq from source"" && \
  min-package https://archive.org/download/zeromq_4.0.4/zeromq-4.0.4.tar.gz && \
  ln -s /usr/local/lib/libzmq.so.3 /usr/local/lib/libzmq.so.4 && \
  strip --strip-unneeded --strip-debug /usr/local/bin/curve_keygen && \
  echo ""### Alpine compatibility patch for various packages"" && \
  if [ ! -f /usr/include/xlocale.h ]; then echo '#include <locale.h>' > /usr/include/xlocale.h; fi && \
  echo ""### Cleanup unneeded files"" && \
  clean-terminfo && \
  rm /bin/bashbug && \
  rm /usr/local/share/man/*/zmq* && \
  rm -rf /usr/include/c++/*/java && \
  rm -rf /usr/include/c++/*/javax && \
  rm -rf /usr/include/c++/*/gnu/awt && \
  rm -rf /usr/include/c++/*/gnu/classpath && \
  rm -rf /usr/include/c++/*/gnu/gcj && \
  rm -rf /usr/include/c++/*/gnu/java && \
  rm -rf /usr/include/c++/*/gnu/javax && \
  rm /usr/libexec/gcc/x86_64-alpine-linux-musl/*/cc1obj && \
  rm /usr/bin/gcov* && \
  rm /usr/bin/gprof && \
  rm /usr/bin/*gcj


########################################################################
# Install Python2 & Jupyter
########################################################################

COPY config/jupyter /root/.jupyter/

RUN \
  min-apk \
    libffi-dev \
    py2-pygments \
    py2-cffi \
    py2-cryptography \
    py2-decorator \
    py2-jinja2 \
    py2-openssl \
    py2-pexpect \
    py2-pip \
    py2-tornado \
    python \
    python-dev && \
  pip install --no-cache-dir --upgrade setuptools pip && \
  mkdir -p `python -m site --user-site` && \
  min-pip jupyter ipywidgets jupyterlab jupyter_dashboards && \
  jupyter nbextension enable --py --sys-prefix widgetsnbextension && \
  pip install http://github.com/nbgallery/nbgallery-extensions/tarball/master#egg=jupyter_nbgallery && \
  jupyter serverextension enable --py jupyter_nbgallery && \
  jupyter nbextension install --py jupyter_nbgallery && \
  jupyter nbextension enable jupyter_nbgallery --py && \
  jupyter serverextension enable --py jupyterlab --sys-prefix && \
  jupyter dashboards quick-setup --sys-prefix && \
  echo ""### Cleanup unneeded files"" && \
  rm -rf /usr/lib/python2*/*/tests && \
  rm -rf /usr/lib/python2*/ensurepip && \
  rm -rf /usr/lib/python2*/idlelib && \
  rm /usr/lib/python2*/distutils/command/*exe && \
  rm -rf /usr/share/man/* && \
  clean-pyc-files /usr/lib/python2* && \
  echo ""### Apply patches"" && \
  cd / && \
  sed -i 's/_max_upload_size_mb = [0-9][0-9]/_max_upload_size_mb = 50/g' \
    /usr/lib/python2*/site-packages/notebook/static/tree/js/notebooklist.js \
    /usr/lib/python2*/site-packages/notebook/static/tree/js/main.min.js \
    /usr/lib/python2*/site-packages/notebook/static/tree/js/main.min.js.map && \
  patch -p0 < /root/.patches/ipykernel_displayhook && \
  patch -p0 < /root/.patches/websocket_keepalive && \
  patch --no-backup-if-mismatch -p0 < /root/.patches/notebook_pr2061 && \
  /root/.patches/sed_for_pr2061

########################################################################
# Install ipydeps
########################################################################

RUN \
  pip install http://github.com/nbgallery/pypki2/tarball/master#egg=pypki2 && \
  pip install http://github.com/nbgallery/ipydeps/tarball/master#egg=ipydeps && \
  clean-pyc-files /usr/lib/python2* && \
  echo ""### TODO: applying workaround for https://github.com/nbgallery/ipydeps/issues/7"" && \
  sed -i 's/packages = set(packages)/#packages = set(packages)/' /usr/lib/python2*/site-packages/ipydeps/__init__.py

########################################################################
# Add dynamic kernels
########################################################################

ADD kernels /usr/share/jupyter/kernels/
ENV JAVA_HOME=/usr/lib/jvm/default-jvm \
    SPARK_HOME=/usr/spark \
    GOPATH=/go
ENV PATH=$PATH:$JAVA_HOME/bin:$SPARK_HOME/bin:$GOPATH/bin:/usr/share/jupyter/kernels/installers \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$JAVA_HOME/jre/lib/amd64/server

########################################################################
# Add Bash kernel
########################################################################

RUN \
  min-pip bash_kernel && \
  python -m bash_kernel.install && \
  clean-pyc-files /usr/lib/python2*

########################################################################
# Metadata
########################################################################

ENV NBGALLERY_CLIENT_VERSION=5.5.5

LABEL gallery.nb.version=$NBGALLERY_CLIENT_VERSION \
      gallery.nb.description=""Minimal alpine-based Jupyter notebook server"" \
      gallery.nb.URL=""https://github.com/nbgallery""
","FROM alpine:3.5
MAINTAINER team@nb.gallery

########################################################################
# Set up OS
########################################################################

EXPOSE 80 443
WORKDIR /root

ENV CPPFLAGS=-s \
    SHELL=/bin/bash

ENTRYPOINT [""/sbin/tini"", ""--""]
CMD [""jupyter-notebook-secure""]

COPY util/* /usr/local/bin/
COPY config/bashrc /root/.bashrc
COPY patches /root/.patches
COPY config/repositories /etc/apk/repositories
COPY config/*.rsa.pub /etc/apk/keys/

RUN \
  min-apk -u zlib && \
  min-apk \
    bash \
    bzip2 \
    curl \
    file \
    gcc \
    g++ \
    git \
    libressl \
    libsodium-dev \
    make \
    openssh-client \
    patch \
    readline-dev \
    tar \
    tini && \
  echo ""### Install specific version of zeromq from source"" && \
  min-package https://archive.org/download/zeromq_4.0.4/zeromq-4.0.4.tar.gz && \
  ln -s /usr/local/lib/libzmq.so.3 /usr/local/lib/libzmq.so.4 && \
  strip --strip-unneeded --strip-debug /usr/local/bin/curve_keygen && \
  echo ""### Alpine compatibility patch for various packages"" && \
  if [ ! -f /usr/include/xlocale.h ]; then echo '#include <locale.h>' > /usr/include/xlocale.h; fi && \
  echo ""### Cleanup unneeded files"" && \
  clean-terminfo && \
  rm /bin/bashbug && \
  rm /usr/local/share/man/*/zmq* && \
  rm -rf /usr/include/c++/*/java && \
  rm -rf /usr/include/c++/*/javax && \
  rm -rf /usr/include/c++/*/gnu/awt && \
  rm -rf /usr/include/c++/*/gnu/classpath && \
  rm -rf /usr/include/c++/*/gnu/gcj && \
  rm -rf /usr/include/c++/*/gnu/java && \
  rm -rf /usr/include/c++/*/gnu/javax && \
  rm /usr/libexec/gcc/x86_64-alpine-linux-musl/*/cc1obj && \
  rm /usr/bin/gcov* && \
  rm /usr/bin/gprof && \
  rm /usr/bin/*gcj


########################################################################
# Install Python2 & Jupyter
########################################################################

COPY config/jupyter /root/.jupyter/

RUN \
  min-apk \
    libffi-dev \
    py2-pygments \
    py2-cffi \
    py2-cryptography \
    py2-decorator \
    py2-jinja2 \
    py2-openssl \
    py2-pexpect \
    py2-pip \
    py2-tornado \
    python \
    python-dev && \
  pip install --no-cache-dir --upgrade setuptools pip && \
  mkdir -p `python -m site --user-site` && \
  min-pip jupyter ipywidgets jupyterlab jupyter_dashboards && \
  jupyter nbextension enable --py --sys-prefix widgetsnbextension && \
  pip install http://github.com/nbgallery/nbgallery-extensions/tarball/master#egg=jupyter_nbgallery && \
  jupyter serverextension enable --py jupyter_nbgallery && \
  jupyter nbextension install --py jupyter_nbgallery && \
  jupyter nbextension enable jupyter_nbgallery --py && \
  jupyter serverextension enable --py jupyterlab --sys-prefix && \
  jupyter dashboards quick-setup --sys-prefix && \
  echo ""### Cleanup unneeded files"" && \
  rm -rf /usr/lib/python2*/*/tests && \
  rm -rf /usr/lib/python2*/ensurepip && \
  rm -rf /usr/lib/python2*/idlelib && \
  rm /usr/lib/python2*/distutils/command/*exe && \
  rm -rf /usr/share/man/* && \
  clean-pyc-files /usr/lib/python2* && \
  echo ""### Apply patches"" && \
  cd / && \
  sed -i 's/_max_upload_size_mb = [0-9][0-9]/_max_upload_size_mb = 50/g' \
    /usr/lib/python2*/site-packages/notebook/static/tree/js/notebooklist.js \
    /usr/lib/python2*/site-packages/notebook/static/tree/js/main.min.js \
    /usr/lib/python2*/site-packages/notebook/static/tree/js/main.min.js.map && \
  patch -p0 < /root/.patches/ipykernel_displayhook && \
  patch -p0 < /root/.patches/websocket_keepalive && \
  patch --no-backup-if-mismatch -p0 < /root/.patches/notebook_pr2061 && \
  /root/.patches/sed_for_pr2061

########################################################################
# Install ipydeps
########################################################################

RUN \
  pip install http://github.com/nbgallery/pypki2/tarball/master#egg=pypki2 && \
  pip install http://github.com/nbgallery/ipydeps/tarball/master#egg=ipydeps && \
  clean-pyc-files /usr/lib/python2* && \
  echo ""### TODO: applying workaround for https://github.com/nbgallery/ipydeps/issues/7"" && \
  sed -i 's/packages = set(packages)/#packages = set(packages)/' /usr/lib/python2*/site-packages/ipydeps/__init__.py

########################################################################
# Add dynamic kernels
########################################################################

ADD kernels /usr/share/jupyter/kernels/
ENV JAVA_HOME=/usr/lib/jvm/default-jvm \
    SPARK_HOME=/usr/spark \
    GOPATH=/go
ENV PATH=$PATH:$JAVA_HOME/bin:$SPARK_HOME/bin:$GOPATH/bin:/usr/share/jupyter/kernels/installers \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$JAVA_HOME/jre/lib/amd64/server

########################################################################
# Add Bash kernel
########################################################################

RUN \
  min-pip bash_kernel && \
  python -m bash_kernel.install && \
  clean-pyc-files /usr/lib/python2*

########################################################################
# Metadata
########################################################################

ENV NBGALLERY_CLIENT_VERSION=5.6.0

LABEL gallery.nb.version=$NBGALLERY_CLIENT_VERSION \
      gallery.nb.description=""Minimal alpine-based Jupyter notebook server"" \
      gallery.nb.URL=""https://github.com/nbgallery""
"
2204,f6079760103713461fe88ef9329b70e54b5968a2,Bumped source to 20221031-03ebe17,"Bumped source to 20221031-03ebe17
","FROM ghcr.io/dock0/arch:20221031-a8e8ec9
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
202,34a383097d12f4e5f0b9a34a6f37adea9aceb844,update dockerfile,"update dockerfile
","# Base Image to use
FROM alpine:3.3

# File Author / Maintainer
MAINTAINER Devonte Emokpae

# Install dependencies
RUN apk update && apk upgrade && \
apk add curl wget bash tree && \
rm -rf /var/cache/apk/*

RUN curl -sSL https://releases.hashicorp.com/consul-template/0.14.0/consul-template_0.14.0_linux_amd64.zip > /tmp/consul.zip && \
unzip /tmp/consul.zip -d /tmp && \
mv /tmp/consul-template /usr/bin/consul-template && \
rm -f /tmp/consul.zip

ENTRYPOINT [""/usr/bin/consul-template""]
","# Base Image to use
FROM alpine:3.4

# File Author / Maintainer
MAINTAINER Devonte Emokpae

# Install dependencies
RUN apk update && apk upgrade && \
apk add curl wget bash tree && \
rm -rf /var/cache/apk/*

RUN curl -sSL https://releases.hashicorp.com/consul-template/0.15.0/consul-template_0.15.0_linux_amd64.zip > /tmp/consul.zip && \
unzip /tmp/consul.zip -d /tmp && \
mv /tmp/consul-template /usr/bin/consul-template && \
rm -f /tmp/consul.zip

ENTRYPOINT [""/usr/bin/consul-template""]
"
2171,e52fc40350aa0fa05d712f1c1abf0766f1e20162,Adds dumb-init to avoid any PID 1 issue.,"Adds dumb-init to avoid any PID 1 issue.
","FROM debian:jessie

# Default configuration
COPY mopidy.conf /var/lib/mopidy/.config/mopidy/mopidy.conf

# Start helper script
COPY entrypoint.sh /entrypoint.sh

# Official Mopidy install for Debian/Ubuntu along with some extensions
# (see https://docs.mopidy.com/en/latest/installation/debian/ )
RUN set -ex \
 && apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y \
        curl \
        gcc \
        gstreamer0.10-alsa \
        python-crypto \
 && curl -L https://apt.mopidy.com/mopidy.gpg -o /tmp/mopidy.gpg \
 && curl -L https://apt.mopidy.com/mopidy.list -o /etc/apt/sources.list.d/mopidy.list \
 && apt-key add /tmp/mopidy.gpg \
 && apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y \
        mopidy \
        mopidy-soundcloud \
        mopidy-spotify \
 && curl -L https://bootstrap.pypa.io/get-pip.py | python - \
 && pip install -U six \
 && pip install \
        Mopidy-Moped \
        Mopidy-GMusic \
        Mopidy-YouTube \
        pyasn1==0.1.8 \
 && apt-get purge --auto-remove -y \
        curl \
        gcc \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* ~/.cache \
 && chown mopidy:audio -R /var/lib/mopidy/.config \
 && chown mopidy:audio /entrypoint.sh

# Run as mopidy user
USER mopidy

VOLUME [""/var/lib/mopidy/local"", ""/var/lib/mopidy/media""]

EXPOSE 6600 6680

ENTRYPOINT [""/entrypoint.sh""]
CMD [""/usr/bin/mopidy""]
",
2233,a39bcda1b19d8ee860def9266a918ee245bcd9ac,Bumped source to 20200427-ce4260d,"Bumped source to 20200427-ce4260d
","FROM docker.pkg.github.com/dock0/service/service:20200427-5d81f7f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
312,aa4e5f91ece84029868b5413d4cdd3397cd17d7d,Bumped source to 20210319-ad9d19c,"Bumped source to 20210319-ad9d19c
","FROM docker.pkg.github.com/dock0/service/service:20210319-58a4d70
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20210319-ad9d19c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
406,6228db12baed915f3589a4374efe710a2b986763,fixing docker test run failure by adding missing tests c_api_posit4,"fixing docker test run failure by adding missing tests c_api_posit4
","#
# multi-stage build
# docker build --target builder -t stillwater/universal:builder will just build a builder container
# docker build --target release -t stillwater/universal:release will just build a release container

# BUILDER stage
FROM gcc:7 as builder
MAINTAINER Theodore Omtzigt
# create a cmake build environment
RUN apt-get update && apt-get install -y build-essential apt-utils cmake \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# make certain you have a good .dockerignore file installed so that this layer isn't ginormous
COPY . /usr/src/universal
# print contextual information of the container at this state for validation the process is solid
RUN ls -la /usr/src/universal && cmake -version 

# set up the cmake/make environment to issue the build commands
RUN mkdir build 
WORKDIR /usr/src/universal/build
RUN cmake -DBUILD_CI_CHECK=ON .. && make

# actual command 'make test' is run as part of the test pipeline

# add a command that when you run the container without a command, it produces something meaningful
CMD [""echo"", ""Universal Numbers Library Version 2.0.0""]


# RELEASE stage
#FROM alpine:latest as release    # hitting a segfault during startup of some playground programs
FROM debian:latest as release
MAINTAINER Theodore Omtzigt

#RUN apk add --no-cache libc6-compat libstdc++ make cmake bash gawk sed grep bc coreutils
RUN apt-get update && apt-get install -y make cmake

# after building, the test executables are organized in the build directory under root
# ctest gets its configuration for CTestTestfile.cmake files. There is one at the root of the build tree
# and one for each directory that contains test executables.
COPY --from=builder /usr/src/universal/build/tools/cmd/cmd_*             /usr/src/universal/build/tools/cmd/
COPY --from=builder /usr/src/universal/build/tools/cmd/*.cmake           /usr/src/universal/build/tools/cmd/
COPY --from=builder /usr/src/universal/build/tests/posit/posit_*         /usr/src/universal/build/tests/posit/
COPY --from=builder /usr/src/universal/build/tests/posit/*.cmake         /usr/src/universal/build/tests/posit/
COPY --from=builder /usr/src/universal/build/perf/perf_*                 /usr/src/universal/build/perf/
COPY --from=builder /usr/src/universal/build/perf/*.cmake                /usr/src/universal/build/perf/
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit8      /usr/src/universal/build/c_api/test/posit/c_api_posit8
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit16     /usr/src/universal/build/c_api/test/posit/c_api_posit16
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit32     /usr/src/universal/build/c_api/test/posit/c_api_posit32
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit64     /usr/src/universal/build/c_api/test/posit/c_api_posit64
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit128    /usr/src/universal/build/c_api/test/posit/c_api_posit128
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit256    /usr/src/universal/build/c_api/test/posit/c_api_posit256
COPY --from=builder /usr/src/universal/build/c_api/test/posit/*.cmake    /usr/src/universal/build/c_api/test/posit/
COPY --from=builder /usr/src/universal/build/examples/blas/blas_*        /usr/src/universal/build/examples/blas/
COPY --from=builder /usr/src/universal/build/examples/blas/*.cmake       /usr/src/universal/build/examples/blas/
COPY --from=builder /usr/src/universal/build/examples/dsp/dsp_*          /usr/src/universal/build/examples/dsp/
COPY --from=builder /usr/src/universal/build/examples/dsp/*.cmake        /usr/src/universal/build/examples/dsp/
COPY --from=builder /usr/src/universal/build/education/posit/edu_*       /usr/src/universal/build/education/posit/
COPY --from=builder /usr/src/universal/build/education/posit/*.cmake     /usr/src/universal/build/education/posit/
COPY --from=builder /usr/src/universal/build/examples/playground/playgr* /usr/src/universal/build/examples/playground/
COPY --from=builder /usr/src/universal/build/examples/playground/*.cmake /usr/src/universal/build/examples/playground/
# the ctest configuration root and Makefile so we can execute _make test_ in the test stage of the CI/CD pipeline
COPY --from=builder /usr/src/universal/build/Makefile              /usr/src/universal/build/
COPY --from=builder /usr/src/universal/build/CTestTestfile.cmake   /usr/src/universal/build/

WORKDIR /usr/src/universal/build
# double check we have all the executables of interest
RUN find .

#CMD [""/usr/src/universal/tools/cmd/cmd_numeric_limits""]
CMD [""echo"", ""Universal Numbers Library Version 2.0.0""]
","#
# multi-stage build
# docker build --target builder -t stillwater/universal:builder will just build a builder container
# docker build --target release -t stillwater/universal:release will just build a release container

# BUILDER stage
FROM gcc:7 as builder
MAINTAINER Theodore Omtzigt
# create a cmake build environment
RUN apt-get update && apt-get install -y build-essential apt-utils cmake \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# make certain you have a good .dockerignore file installed so that this layer isn't ginormous
COPY . /usr/src/universal
# print contextual information of the container at this state for validation the process is solid
RUN ls -la /usr/src/universal && cmake -version 

# set up the cmake/make environment to issue the build commands
RUN mkdir build 
WORKDIR /usr/src/universal/build
RUN cmake -DBUILD_CI_CHECK=ON .. && make

# actual command 'make test' is run as part of the test pipeline

# add a command that when you run the container without a command, it produces something meaningful
CMD [""echo"", ""Universal Numbers Library Version 2.0.0""]


# RELEASE stage
#FROM alpine:latest as release    # hitting a segfault during startup of some playground programs
FROM debian:latest as release
MAINTAINER Theodore Omtzigt

#RUN apk add --no-cache libc6-compat libstdc++ make cmake bash gawk sed grep bc coreutils
RUN apt-get update && apt-get install -y make cmake

# after building, the test executables are organized in the build directory under root
# ctest gets its configuration for CTestTestfile.cmake files. There is one at the root of the build tree
# and one for each directory that contains test executables.
COPY --from=builder /usr/src/universal/build/tools/cmd/cmd_*             /usr/src/universal/build/tools/cmd/
COPY --from=builder /usr/src/universal/build/tools/cmd/*.cmake           /usr/src/universal/build/tools/cmd/
COPY --from=builder /usr/src/universal/build/tests/posit/posit_*         /usr/src/universal/build/tests/posit/
COPY --from=builder /usr/src/universal/build/tests/posit/*.cmake         /usr/src/universal/build/tests/posit/
COPY --from=builder /usr/src/universal/build/perf/perf_*                 /usr/src/universal/build/perf/
COPY --from=builder /usr/src/universal/build/perf/*.cmake                /usr/src/universal/build/perf/
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit4      /usr/src/universal/build/c_api/test/posit/c_api_posit4
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit8      /usr/src/universal/build/c_api/test/posit/c_api_posit8
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit16     /usr/src/universal/build/c_api/test/posit/c_api_posit16
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit32     /usr/src/universal/build/c_api/test/posit/c_api_posit32
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit64     /usr/src/universal/build/c_api/test/posit/c_api_posit64
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit128    /usr/src/universal/build/c_api/test/posit/c_api_posit128
COPY --from=builder /usr/src/universal/build/c_api/test/posit/c_api_posit256    /usr/src/universal/build/c_api/test/posit/c_api_posit256
COPY --from=builder /usr/src/universal/build/c_api/test/posit/*.cmake    /usr/src/universal/build/c_api/test/posit/
COPY --from=builder /usr/src/universal/build/examples/blas/blas_*        /usr/src/universal/build/examples/blas/
COPY --from=builder /usr/src/universal/build/examples/blas/*.cmake       /usr/src/universal/build/examples/blas/
COPY --from=builder /usr/src/universal/build/examples/dsp/dsp_*          /usr/src/universal/build/examples/dsp/
COPY --from=builder /usr/src/universal/build/examples/dsp/*.cmake        /usr/src/universal/build/examples/dsp/
COPY --from=builder /usr/src/universal/build/education/posit/edu_*       /usr/src/universal/build/education/posit/
COPY --from=builder /usr/src/universal/build/education/posit/*.cmake     /usr/src/universal/build/education/posit/
COPY --from=builder /usr/src/universal/build/examples/playground/playgr* /usr/src/universal/build/examples/playground/
COPY --from=builder /usr/src/universal/build/examples/playground/*.cmake /usr/src/universal/build/examples/playground/
# the ctest configuration root and Makefile so we can execute _make test_ in the test stage of the CI/CD pipeline
COPY --from=builder /usr/src/universal/build/Makefile              /usr/src/universal/build/
COPY --from=builder /usr/src/universal/build/CTestTestfile.cmake   /usr/src/universal/build/

WORKDIR /usr/src/universal/build
# double check we have all the executables of interest
RUN find .

#CMD [""/usr/src/universal/tools/cmd/cmd_numeric_limits""]
CMD [""echo"", ""Universal Numbers Library Version 2.0.0""]
"
334,465ccaa70f35f8d9cd0012e35add4f735e98b3b3,feat(atlassian-confluence): update to 7.1.2,"feat(atlassian-confluence): update to 7.1.2

update to 7.1.2

Signed-off-by: mritd <20a5c9dfd7e2f1d7346a1353e464a9eddf6e84d5@linux.com>
","FROM atlassian/confluence-server:7.0.4

LABEL maintainer=""mritd <mritd@linux.com>""

ARG TZ=""Asia/Shanghai""

ENV TZ ${TZ}
ENV AGENT_PATH /opt/atlassian-agent.jar

COPY atlassian-agent.jar ${AGENT_PATH}
COPY hijack.sh /hijack.sh

RUN set -x \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt update \
    && apt upgrade -y \
    && apt install tzdata -y \
    && chown ${RUN_USER}:${RUN_GROUP} ${AGENT_PATH} \
    && ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime \
    && echo ${TZ} > /etc/timezone \
    && dpkg-reconfigure --frontend noninteractive tzdata \
    && apt autoremove -y \
    && apt autoclean -y

CMD [""/hijack.sh""]
","FROM atlassian/confluence-server:7.1.2

LABEL maintainer=""mritd <mritd@linux.com>""

ARG TZ=""Asia/Shanghai""

ENV TZ ${TZ}
ENV AGENT_PATH /opt/atlassian-agent.jar

COPY atlassian-agent.jar ${AGENT_PATH}
COPY hijack.sh /hijack.sh

RUN set -x \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt update \
    && apt upgrade -y \
    && apt install tzdata -y \
    && chown ${RUN_USER}:${RUN_GROUP} ${AGENT_PATH} \
    && ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime \
    && echo ${TZ} > /etc/timezone \
    && dpkg-reconfigure --frontend noninteractive tzdata \
    && apt autoremove -y \
    && apt autoclean -y

CMD [""/hijack.sh""]
"
2115,22e0f9040b3973120fd257433eddcd05e601e5b8,Update build environment with new toolchain.,"Update build environment with new toolchain.
",,
2131,6c2b0578c66944a4efa46b2b7e4e7c499b98711a,Bumped source to 20211113-3747862,"Bumped source to 20211113-3747862
","FROM docker.pkg.github.com/dock0/arch/arch:20211112-fc8e3f8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2173,623e37ca77526cdb3d65b23900549e6f170d64fc,version 81.0.4021.2,version 81.0.4021.2,"FROM ubuntu:14.04

LABEL maintainer ""Alpeware <info@alpeware.com>""

EXPOSE 9222

RUN apt-get update -qqy \
  && apt-get -qqy install libnss3 libnss3-tools libfontconfig1 wget ca-certificates apt-transport-https inotify-tools \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/*

ENV CHROME_VERSION=81.0.4000.3

RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
  && echo ""deb https://dl.google.com/linux/chrome/deb/ stable main"" >> /etc/apt/sources.list.d/google-chrome.list \
  && apt-get update -qqy \
  && apt-get -qqy install google-chrome-unstable=${CHROME_VERSION}-1 \
  && rm /etc/apt/sources.list.d/google-chrome.list \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/*

RUN google-chrome-unstable --version

ADD start.sh import_cert.sh /usr/bin/

RUN mkdir /data
VOLUME /data
ENV HOME=/data DEBUG_ADDRESS=0.0.0.0 DEBUG_PORT=9222

CMD [""/usr/bin/start.sh""]
",
2169,285ff0a8be491e4e42fab75eaf5113af45c10b99,version 4.6.6,version 4.6.6,"FROM marvambass/nginx-ssl-php
MAINTAINER MarvAmBass

ENV DH_SIZE 1024

RUN apt-get -q -y update && \
    apt-get -q -y install mysql-client \
                          php5-mysql \
                          php5-gd \
                          php5-mcrypt \
                          wget \
                          unzip && \
    apt-get -q -y clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*;

RUN php5enmod mcrypt; \
    sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 2000M/g' \
           /etc/php5/fpm/php.ini; \
    \
    echo ""clean http directory""; \
    rm -rf /usr/share/nginx/html/*; \
    \
    wget ""https://files.phpmyadmin.net/phpMyAdmin/4.6.5.2/phpMyAdmin-4.6.5.2-all-languages.zip"" -O phpMyAdmin.zip && \
    unzip phpMyAdmin.zip && \
    rm phpMyAdmin.zip; \
    mv phpMyAdmin-*-languages /phpmyadmin; \
    \
    echo ""delete phpmyadmin config folder""; \
    rm -rf /phpmyadmin/config;

# install nginx phpmyadmin config
ADD nginx-phpmyadmin.conf /etc/nginx/conf.d/nginx-phpmyadmin.conf

# install personal phpmyadmin config
ADD config.inc.php /phpmyadmin/config.inc.php

# add startup.sh
ADD startup-phpmyadmin.sh /opt/startup-phpmyadmin.sh

COPY docker-healthcheck /usr/local/bin/
HEALTHCHECK CMD [""docker-healthcheck""]

# add '/opt/startup-phpmyadmin.sh' to entrypoint.sh
RUN sed -i 's/#!\/bin\/bash/#!\/bin\/bash\n\/opt\/startup-phpmyadmin.sh/g' /opt/entrypoint.sh
",
2164,0c813a8cffc596896bf8fa59f1cec33f655ee916,Update to Trusty,Update to Trusty,,
2196,f4e6919b45d9b48641cfc324f7e2367b9f6b116d,docker file fix,"docker file fix
","FROM node:latest

COPY . /repo
#COPY dist/ /usr/share/nginx/html
WORKDIR /repo
RUN npm install --unsafe-perm
RUN npm run build:prod
WORKDIR /dist
COPY ./repo/dist .
",
2072,590faeb3eb60a6094d9eb24b754ec6e63d33fcea,update rundeck-ec2-nodes-plugin,"update rundeck-ec2-nodes-plugin
","FROM java:8

RUN apt-get update \
    && apt-get install -y uuid-runtime

# install rundeck
ENV RUNDECK_VERSION=2.6.3-1-GA
RUN wget ""http://dl.bintray.com/rundeck/rundeck-deb/rundeck-${RUNDECK_VERSION}.deb"" &&\
    dpkg -i rundeck-${RUNDECK_VERSION}.deb &&\
    rm -f rundeck-${RUNDECK_VERSION}.deb &&\
    ln -sf /dev/null /var/log/rundeck/rundeck.access.log &&\
    ln -sf /dev/null /var/log/rundeck/rundeck.api.log &&\
    ln -sf /dev/null /var/log/rundeck/rundeck.audit.log &&\
    ln -sf /dev/null /var/log/rundeck/rundeck.executions.log &&\
    ln -sf /dev/null /var/log/rundeck/rundeck.jobs.log &&\
    ln -sf /dev/null /var/log/rundeck/rundeck.log &&\
    ln -sf /dev/null /var/log/rundeck/rundeck.options.log &&\
    ln -sf /dev/null /var/log/rundeck/rundeck.storage.log

# install rundeck plugins
WORKDIR /var/lib/rundeck/libext
RUN wget ""https://github.com/rundeck-plugins/rundeck-ec2-nodes-plugin/releases/download/v1.5.1/rundeck-ec2-nodes-plugin-1.5.1.jar"" &&\
    wget ""https://github.com/rundeck-plugins/rundeck-s3-log-plugin/releases/download/v1.0.0/rundeck-s3-log-plugin-1.0.0.jar"" &&\
    wget ""https://github.com/higanworks/rundeck-slack-incoming-webhook-plugin/releases/download/v0.5.dev/rundeck-slack-incoming-webhook-plugin-0.5.jar""

WORKDIR /var/lib/rundeck

COPY profile.sh /etc/rundeck/profile

ENV TZ=Asia/Tokyo \
    RUNDECK_PORT=4440 \
    RUNDECK_MYSQL_DATABASE=rundeck \
    RUNDECK_MYSQL_USERNAME=rundeck \
    RUNDECK_MYSQL_PASSWORD=rundeck \
    RUNDECK_S3_REGION=ap-northeast-1

CMD . /etc/rundeck/profile &&\
    java ${RDECK_JVM} -cp ${BOOTSTRAP_CP} com.dtolabs.rundeck.RunServer /var/lib/rundeck ${RUNDECK_PORT}",
199,757e4a73421996d76425ee4dbe836440adc3da6e,Updated to Slurm 17.11.3,"Updated to Slurm 17.11.3
","FROM centos:7

LABEL org.label-schema.vcs-url=""https://github.com/giovtorres/docker-centos7-slurm"" \
      org.label-schema.docker.cmd=""docker run -it -h ernie giovtorres/docker-centos7-slurm:latest"" \
      org.label-schema.name=""docker-centos7-slurm"" \
      org.label-schema.description=""Slurm All-in-one Docker container on CentOS 7"" \
      maintainer=""Giovanni Torres""

ARG SLURM_VERSION=17.11.2
ARG SLURM_DOWNLOAD_MD5=9c8dcc1737a36ab859612d64ec389847
ARG SLURM_DOWNLOAD_URL=https://download.schedmd.com/slurm/slurm-""$SLURM_VERSION"".tar.bz2

RUN yum makecache fast \
    && yum -y install epel-release \
    && yum -y install \
        wget \
        bzip2 \
        perl \
        gcc \
        gcc-c++\
        vim-enhanced \
        git \
        make \
        munge \
        munge-devel \
        supervisor \
        python-devel \
        python-pip \
        python34 \
        python34-devel \
        python34-pip \
        mariadb-server \
        mariadb-devel \
        psmisc \
        bash-completion \
    && yum clean all \
    && rm -rf /var/cache/yum

RUN pip install Cython nose \
    && pip3 install Cython nose

RUN groupadd -r slurm && useradd -r -g slurm slurm

RUN set -x \
    && wget -O slurm.tar.bz2 ""$SLURM_DOWNLOAD_URL"" \
    && echo ""$SLURM_DOWNLOAD_MD5"" slurm.tar.bz2 | md5sum -c - \
    && mkdir /usr/local/src/slurm \
    && tar jxf slurm.tar.bz2 -C /usr/local/src/slurm --strip-components=1 \
    && rm slurm.tar.bz2 \
    && cd /usr/local/src/slurm \
    && ./configure --enable-debug --enable-front-end --prefix=/usr \
       --sysconfdir=/etc/slurm --with-mysql_config=/usr/bin \
       --libdir=/usr/lib64 \
    && make install \
    && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
    && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
    && install -D -m644 etc/slurm.epilog.clean /etc/slurm/slurm.epilog.clean \
    && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
    && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
    && cd \
    && rm -rf /usr/local/src/slurm \
    && mkdir /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/lib/slurmd \
        /var/log/slurm \
    && /sbin/create-munge-key

COPY slurm.conf /etc/slurm/slurm.conf
COPY slurmdbd.conf /etc/slurm/slurmdbd.conf
COPY supervisord.conf /etc/

VOLUME [""/var/lib/mysql"", ""/var/lib/slurmd"", ""/var/spool/slurmd"", ""/var/log/slurm""]

COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT [""/usr/local/bin/docker-entrypoint.sh""]
CMD [""/bin/bash""]
","FROM centos:7

LABEL org.label-schema.vcs-url=""https://github.com/giovtorres/docker-centos7-slurm"" \
      org.label-schema.docker.cmd=""docker run -it -h ernie giovtorres/docker-centos7-slurm:latest"" \
      org.label-schema.name=""docker-centos7-slurm"" \
      org.label-schema.description=""Slurm All-in-one Docker container on CentOS 7"" \
      maintainer=""Giovanni Torres""

ARG SLURM_VERSION=17.11.3
ARG SLURM_DOWNLOAD_MD5=30cb15ae222a142107919383387abbeb
ARG SLURM_DOWNLOAD_URL=https://download.schedmd.com/slurm/slurm-""$SLURM_VERSION"".tar.bz2

RUN yum makecache fast \
    && yum -y install epel-release \
    && yum -y install \
        wget \
        bzip2 \
        perl \
        gcc \
        gcc-c++\
        vim-enhanced \
        git \
        make \
        munge \
        munge-devel \
        supervisor \
        python-devel \
        python-pip \
        python34 \
        python34-devel \
        python34-pip \
        mariadb-server \
        mariadb-devel \
        psmisc \
        bash-completion \
    && yum clean all \
    && rm -rf /var/cache/yum

RUN pip install Cython nose \
    && pip3 install Cython nose

RUN groupadd -r slurm && useradd -r -g slurm slurm

RUN set -x \
    && wget -O slurm.tar.bz2 ""$SLURM_DOWNLOAD_URL"" \
    && echo ""$SLURM_DOWNLOAD_MD5"" slurm.tar.bz2 | md5sum -c - \
    && mkdir /usr/local/src/slurm \
    && tar jxf slurm.tar.bz2 -C /usr/local/src/slurm --strip-components=1 \
    && rm slurm.tar.bz2 \
    && cd /usr/local/src/slurm \
    && ./configure --enable-debug --enable-front-end --prefix=/usr \
       --sysconfdir=/etc/slurm --with-mysql_config=/usr/bin \
       --libdir=/usr/lib64 \
    && make install \
    && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
    && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
    && install -D -m644 etc/slurm.epilog.clean /etc/slurm/slurm.epilog.clean \
    && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
    && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
    && cd \
    && rm -rf /usr/local/src/slurm \
    && mkdir /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/lib/slurmd \
        /var/log/slurm \
    && /sbin/create-munge-key

COPY slurm.conf /etc/slurm/slurm.conf
COPY slurmdbd.conf /etc/slurm/slurmdbd.conf
COPY supervisord.conf /etc/

VOLUME [""/var/lib/mysql"", ""/var/lib/slurmd"", ""/var/spool/slurmd"", ""/var/log/slurm""]

COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT [""/usr/local/bin/docker-entrypoint.sh""]
CMD [""/bin/bash""]
"
2239,fce5eea42a59e4adf5af00645c8f9f461dbaf9e5,Upgrade to current application,"Upgrade to current application
","FROM kurron/docker-newrelic-jvm-8-agent:latest 

MAINTAINER Ron Kurr <kurr@jvmguy.com>

ADD https://bintray.com/artifact/download/kurron/maven/org/kurron/example/monitor-mysql/1.1.0.RELEASE/monitor-mysql-1.1.0.RELEASE.jar /opt/example/application.jar

EXPOSE 8300

ENTRYPOINT [""java"", ""-server"", ""-javaagent:/opt/example/newrelic/newrelic.jar"", ""-Xmx512m"", ""-Dsun.net.inetaddr.ttl=60"", ""-jar"", ""/opt/example/application.jar""]
",
10,e51e0bb534194cf804d975d81c3a1a0762db5fc6,specify pip and setuptool version,"specify pip and setuptool version
","FROM ubuntu:18.04
LABEL maintainer=""stevenmi - Steven Mi <s0558366@htw-berlin.de>""

# POSTGRES need to be injected
ARG POSTGRES_USER
ARG POSTGRES_PASS
ARG POSTGRES_IP

# Python
ARG PYTHON_VERSION=3.6

# TFX Version
ARG TENSORFLOW_VERSION=1.15.0
ARG TFX_VERSION=0.15.0

# NewsCrawler version
ARG NEWSCRAWLER_VERSION=0.1.9

# Airflow
ARG AIRFLOW_HOME=/airflow
ARG AIRFLOW_VERSION=1.10.12
ARG AIRFLOW_PORT=8080

# Set enviroment variables
ENV AIRFLOW_HOME=${AIRFLOW_HOME}
ENV LANG=C.UTF-8
ENV POSTGRES_USER=${POSTGRES_USER}
ENV POSTGRES_PASS=${POSTGRES_PASS}
ENV POSTGRES_IP=${POSTGRES_IP}

# Install python and pip
RUN apt-get update \
    && apt-get install -y \
            git \
            nano \
            python${PYTHON_VERSION} \
            python3-pip \
    && apt-get autoremove -yqq --purge \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install python packages
RUN pip3 install --upgrade pip \
    && pip install --upgrade setuptools \
    && pip install apache-airflow==${AIRFLOW_VERSION} \
    && pip install NewsCrawler3==${NEWSCRAWLER_VERSION} \
    && pip install tensorflow==${TENSORFLOW_VERSION} \
    && pip install tensorflow-serving-api==${TENSORFLOW_VERSION} \
    && pip install tfx==${TFX_VERSION} \
    && pip install SQLAlchemy==1.3.15 \
    && pip install --upgrade six==1.13.0 \
    && pip install flask-bcrypt \
    && pip install psycopg2-binary \
    && pip install pyarrow==0.14.0

# Setup Airflow
RUN airflow initdb

# Change default settings
#RUN sed -i'.orig' 's/dag_dir_list_interval = 300/dag_dir_list_interval = 600/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/job_heartbeat_sec = 5/job_heartbeat_sec = 1/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/scheduler_heartbeat_sec = 5/scheduler_heartbeat_sec = 1/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/dag_default_view = tree/dag_default_view = graph/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/load_examples = True/load_examples = False/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/parallelism = 32/parallelism = 2/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/max_active_runs_per_dag = 16/max_active_runs_per_dag = 1/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/dagbag_import_timeout = 30/dagbag_import_timeout = 600/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/load_examples = True/load_examples = False/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/max_threads = 2/max_threads = 1/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/authenticate = False/authenticate = True\nauth_backend = airflow.contrib.auth.backends.password_auth/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' ""s|sql_alchemy_conn = sqlite:////airflow/airflow.db|sql_alchemy_conn = postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASS}@${POSTGRES_IP}:5432/airflow|g"" ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/executor = SequentialExecutor/executor = LocalExecutor/g' ${AIRFLOW_HOME}/airflow.cfg
#RUN cat /airflow/airflow.cfg | grep sql_alchemy_conn

# Start inside airflow folder
WORKDIR ${AIRFLOW_HOME}

# Copy scripts into container
COPY scripts /scripts

# Start Airflow and Scheduler
RUN chmod u+x /scripts/startup.sh
CMD /scripts/startup.sh
","FROM ubuntu:18.04
LABEL maintainer=""stevenmi - Steven Mi <s0558366@htw-berlin.de>""

# POSTGRES need to be injected
ARG POSTGRES_USER
ARG POSTGRES_PASS
ARG POSTGRES_IP

# Python
ARG PYTHON_VERSION=3.6

# TFX Version
ARG TENSORFLOW_VERSION=1.15.0
ARG TFX_VERSION=0.15.0

# NewsCrawler version
ARG NEWSCRAWLER_VERSION=0.1.9

# Airflow
ARG AIRFLOW_HOME=/airflow
ARG AIRFLOW_VERSION=1.10.12
ARG AIRFLOW_PORT=8080

# Set enviroment variables
ENV AIRFLOW_HOME=${AIRFLOW_HOME}
ENV LANG=C.UTF-8
ENV POSTGRES_USER=${POSTGRES_USER}
ENV POSTGRES_PASS=${POSTGRES_PASS}
ENV POSTGRES_IP=${POSTGRES_IP}

# Install python and pip
RUN apt-get update \
    && apt-get install -y \
            git \
            nano \
            python${PYTHON_VERSION} \
            python3-pip \
    && apt-get autoremove -yqq --purge \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install python packages
RUN pip3 install --upgrade pip==19.3.1 \
    && pip install --upgrade setuptools==50.3.2 \
    && pip install apache-airflow==${AIRFLOW_VERSION} \
    && pip install NewsCrawler3==${NEWSCRAWLER_VERSION} \
    && pip install tensorflow==${TENSORFLOW_VERSION} \
    && pip install tensorflow-serving-api==${TENSORFLOW_VERSION} \
    && pip install tfx==${TFX_VERSION} \
    && pip install SQLAlchemy==1.3.15 \
    && pip install --upgrade six==1.13.0 \
    && pip install flask-bcrypt \
    && pip install psycopg2-binary \
    && pip install pyarrow==0.14.0

# Setup Airflow
RUN airflow initdb

# Change default settings
#RUN sed -i'.orig' 's/dag_dir_list_interval = 300/dag_dir_list_interval = 600/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/job_heartbeat_sec = 5/job_heartbeat_sec = 1/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/scheduler_heartbeat_sec = 5/scheduler_heartbeat_sec = 1/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/dag_default_view = tree/dag_default_view = graph/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/load_examples = True/load_examples = False/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/parallelism = 32/parallelism = 2/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/max_active_runs_per_dag = 16/max_active_runs_per_dag = 1/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/dagbag_import_timeout = 30/dagbag_import_timeout = 600/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/load_examples = True/load_examples = False/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/max_threads = 2/max_threads = 1/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/authenticate = False/authenticate = True\nauth_backend = airflow.contrib.auth.backends.password_auth/g' ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' ""s|sql_alchemy_conn = sqlite:////airflow/airflow.db|sql_alchemy_conn = postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASS}@${POSTGRES_IP}:5432/airflow|g"" ${AIRFLOW_HOME}/airflow.cfg \
#    && sed -i'.orig' 's/executor = SequentialExecutor/executor = LocalExecutor/g' ${AIRFLOW_HOME}/airflow.cfg
#RUN cat /airflow/airflow.cfg | grep sql_alchemy_conn

# Start inside airflow folder
WORKDIR ${AIRFLOW_HOME}

# Copy scripts into container
COPY scripts /scripts

# Start Airflow and Scheduler
RUN chmod u+x /scripts/startup.sh
CMD /scripts/startup.sh
"
2145,514e289c5c6e969d74dc91cadb80df1005a8f899,updated Centos image,updated Centos image,"FROM centos7:latest
 
ENV MAVEN_VERSION 3.3.3
 
RUN yum install -y \
    tar unzip bc which lsof java-1.8.0-openjdk java-1.8.0-openjdk-devel openssl wget curl && \
    yum clean all -y && \
    (curl -0 http://www.eu.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | \
    tar -zx -C /usr/local) && \
    mv /usr/local/apache-maven-$MAVEN_VERSION /usr/local/maven && \
    ln -sf /usr/local/maven/bin/mvn /usr/local/bin/mvn && \
    mkdir -p /opt/openshift && \
    mkdir -p /opt/app-root/source && chmod -R a+rwX /opt/app-root/source && \
    mkdir -p /opt/s2i/destination && chmod -R a+rwX /opt/s2i/destination && \
    mkdir -p /opt/app-root/src && chmod -R a+rwX /opt/app-root/src
 
ENV PATH=/opt/maven/bin/:$PATH
 
ENV JAVA_HOME=/etc/alternatives/java_sdk_openjdk/
ENV BUILDER_VERSION 1.0
 
LABEL io.k8s.description=""Platform for building Spring Boot applications, layer contains java8 maven""
LABEL io.openshift.s2i.scripts-url=image:///usr/local/sti

COPY ./.sti/bin/ /usr/local/sti
RUN chmod -R a+x /usr/local/sti/*
 
#COPY settings.xml /usr/local/maven/conf/
 
RUN chown -R 1001:1001 /opt/openshift
 
CMD [""usage""]
",
354,9d112a2bff077221af4884cffe90aa5b6dc0ee7d,Bumped source to 20220710-236e6af,"Bumped source to 20220710-236e6af
","FROM ghcr.io/dock0/arch:20220710-86469a7
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220710-236e6af
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
383,65445f3c4962c96b8eeb1d00d5b333e6e00e47f4,Bumped source to 20210921-fa0fd96,"Bumped source to 20210921-fa0fd96
","FROM docker.pkg.github.com/dock0/arch/arch:20210921-1f208e2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210921-fa0fd96
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
31,e59ba565ad61b5e9d3fd9aedb4c8efd56f92da9f,update,"update
","#
# Dockerfile for jenkins
#

FROM alpine
MAINTAINER kev <noreply@datageek.info>

ENV JENKINS_HOME /var/jenkins_home

RUN set -xe \
    && apk add -U curl openjdk8 ttf-dejavu \
    && adduser -h $JENKINS_HOME -u 1000 -s /bin/sh -D jenkins \
    && mkdir -p /usr/share/jenkins \
    && curl -fL http://mirrors.jenkins-ci.org/war/latest/jenkins.war -o /usr/share/jenkins/jenkins.war \
    && rm -rf /var/cache/apk/*

VOLUME $JENKINS_HOME
WORKDIR $JENKINS_HOME

USER jenkins

EXPOSE 8080

CMD [""java"", ""-Djava.awt.headless=true"", ""-jar"", ""/usr/share/jenkins/jenkins.war""]
","#
# Dockerfile for jenkins
#

FROM alpine
MAINTAINER kev <noreply@datageek.info>

ENV JENKINS_HOME /var/jenkins_home

RUN set -xe \
    && apk add -U curl \
                  openjdk8 \
                  openssh-client \
                  ttf-dejavu \
    && adduser -h $JENKINS_HOME -u 1000 -s /bin/sh -D jenkins \
    && mkdir -p /usr/share/jenkins \
    && cd /usr/share/jenkins \
    && wget http://mirrors.jenkins-ci.org/war/latest/jenkins.war \
    && rm -rf /var/cache/apk/*

VOLUME $JENKINS_HOME
WORKDIR $JENKINS_HOME

USER jenkins

EXPOSE 8080

CMD [""java"", ""-Djava.awt.headless=true"", ""-jar"", ""/usr/share/jenkins/jenkins.war""]
"
2142,c2515b343597ac40e6f79d991f951bb30a7e04a8,Bumped source to 20201225-2501b05,"Bumped source to 20201225-2501b05
","FROM docker.pkg.github.com/dock0/arch/arch:20201225-5ccf536
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
242,18d0b2ec7d5a9089d09c752f4ae8fb75115214bc,Updates Alpine to 3.8,"Updates Alpine to 3.8
","FROM python:alpine3.7

MAINTAINER Frank Sachsenheim <funkyfuture@riseup.net>

ARG VERSION
ARG SOURCE_COMMIT
ARG BUILD_DATE

LABEL org.label-schema.schema-version=""1.0"" \
      org.label-schema.description=""Job scheduler for Docker containers, configured via labels."" \
      org.label-schema.name=""deck-chores"" \
      org.label-schema.version=$VERSION \
      org.label-schema.usage=""/src/docs/usage.rst"" \
      org.label-schema.url=""http://deck-chores.rtfd.io"" \
      org.label-schema.docker.cmd=""docker run --rm -d -v /var/run/docker.sock:/var/run/docker.sock funkyfuture/deck-chores"" \
      org.label-schema.docker.cmd.debug=""docker run --rm -d -e DEBUG=on -v /var/run/docker.sock:/var/run/docker.sock funkyfuture/deck-chores"" \
      org.label-schema.vcs-url=""https://github.com/funkyfuture/deck-chores"" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.vcs-ref=$SOURCE_COMMIT

ENTRYPOINT [""/sbin/tini"", ""--""]
CMD [""deck-chores""]

COPY . /src

RUN apk upgrade --no-cache \
 && apk add --no-cache --virtual .build-deps ca-certificates \
 && apk add --no-cache tini tzdata \
 && /src/setup.py install \
 && rm -Rf /root/.cache \
 && apk del .build-deps
","FROM python:alpine3.8

MAINTAINER Frank Sachsenheim <funkyfuture@riseup.net>

ARG VERSION
ARG SOURCE_COMMIT
ARG BUILD_DATE

LABEL org.label-schema.schema-version=""1.0"" \
      org.label-schema.description=""Job scheduler for Docker containers, configured via labels."" \
      org.label-schema.name=""deck-chores"" \
      org.label-schema.version=$VERSION \
      org.label-schema.usage=""/src/docs/usage.rst"" \
      org.label-schema.url=""http://deck-chores.rtfd.io"" \
      org.label-schema.docker.cmd=""docker run --rm -d -v /var/run/docker.sock:/var/run/docker.sock funkyfuture/deck-chores"" \
      org.label-schema.docker.cmd.debug=""docker run --rm -d -e DEBUG=on -v /var/run/docker.sock:/var/run/docker.sock funkyfuture/deck-chores"" \
      org.label-schema.vcs-url=""https://github.com/funkyfuture/deck-chores"" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.vcs-ref=$SOURCE_COMMIT

ENTRYPOINT [""/sbin/tini"", ""--""]
CMD [""deck-chores""]

COPY . /src

RUN apk upgrade --no-cache \
 && apk add --no-cache --virtual .build-deps ca-certificates \
 && apk add --no-cache tini tzdata \
 && /src/setup.py install \
 && rm -Rf /root/.cache \
 && apk del .build-deps
"
281,6ce0caf269b70eb65566914ecb0c7eeac0a11b29,update Dockerfile with metadata labels and additional build arguments,"update Dockerfile with metadata labels and additional build arguments

Signed-off-by: Daniel Nurmi <fdebf2174dd81b443340a1b87c16a0d53605a1f3@anchore.com>
","FROM ubuntu:18.04 as wheelbuilder
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV GOPATH=/go
ENV SKOPEO_VERSION=v0.1.32

RUN set -ex && \
    mkdir -p /go && \
    apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y install vim curl psmisc git rpm python3 python3-pip golang btrfs-tools git-core libdevmapper-dev libgpgme11-dev go-md2man libglib2.0-dev libostree-dev libssl-dev && \
    git clone --branch ""$SKOPEO_VERSION"" https://github.com/containers/skopeo ${GOPATH}/src/github.com/containers/skopeo && \
    cd ${GOPATH}/src/github.com/containers/skopeo && \
    make binary-local && \
    make install
COPY ./requirements.txt /requirements.txt

# Build the wheels from the requirements
RUN pip3 wheel --wheel-dir=/wheels -r /requirements.txt

# Do the final build
FROM ubuntu:18.04
ARG CLI_COMMIT
ARG ANCHORE_COMMIT
LABEL anchore_cli_commit=$CLI_COMMIT
LABEL anchore_commit=$ANCHORE_COMMIT
ENV LANG=en_US.UTF-8 LC_ALL=C.UTF-8

#VOLUME /analysis_scratch

# Default values overrideable at runtime of the container
ENV ANCHORE_CONFIG_DIR=/config \
    ANCHORE_SERVICE_DIR=/anchore_service \
    ANCHORE_LOG_LEVEL=INFO \
    ANCHORE_ENABLE_METRICS=false \
    ANCHORE_INTERNAL_SSL_VERIFY=false \
    ANCHORE_WEBHOOK_DESTINATION_URL=null \
    ANCHORE_FEEDS_ENABLED=true \
    ANCHORE_FEEDS_SELECTIVE_ENABLED=true \
    ANCHORE_FEEDS_SSL_VERIFY=true \
    ANCHORE_ENDPOINT_HOSTNAME=localhost \
    ANCHORE_EVENTS_NOTIFICATIONS_ENABLED=false \
    ANCHORE_FEED_SYNC_INTERVAL_SEC=21600 \
    ANCHORE_EXTERNAL_PORT=null \
    ANCHORE_EXTERNAL_TLS=false \
    ANCHORE_AUTHZ_HANDLER=native \
    ANCHORE_EXTERNAL_AUTHZ_ENDPOINT=null \
    ANCHORE_ADMIN_PASSWORD=foobar \
    ANCHORE_ADMIN_EMAIL=admin@myanchore \
    ANCHORE_HOST_ID=""anchore-quickstart"" \
    ANCHORE_DB_PORT=5432 \
    ANCHORE_DB_NAME=postgres \
    ANCHORE_DB_USER=postgres \
    SET_HOSTID_TO_HOSTNAME=false \
    ANCHORE_CLI_USER=admin \
    ANCHORE_CLI_PASS=foobar \
    ANCHORE_SERVICE_PORT=8228 \
    ANCHORE_CLI_URL=""http://localhost:8228"" \
    ANCHORE_FEEDS_URL=""https://ancho.re/v1/service/feeds"" \
    ANCHORE_FEEDS_CLIENT_URL=""https://ancho.re/v1/account/users"" \
    ANCHORE_FEEDS_TOKEN_URL=""https://ancho.re/oauth/token""


EXPOSE ${ANCHORE_SERVICE_PORT}

RUN set -ex && \
    apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y install git curl psmisc rpm python3-minimal python3-pip libgpgme11 libdevmapper1.02.1 libostree-1-1 && \
    pip3 install -e git+git://github.com/anchore/anchore-cli.git@$CLI_COMMIT\#egg=anchorecli && \
    apt-get -y remove git && \
    apt-get clean && \
    apt-get -y autoremove

# Skopeo stuff
COPY --from=wheelbuilder /usr/bin/skopeo /usr/bin/skopeo
COPY --from=wheelbuilder /etc/containers/policy.json /etc/containers/policy.json

# Anchore Stuff
COPY --from=wheelbuilder /wheels /wheels
COPY . /anchore-engine

WORKDIR /anchore-engine
RUN set -ex && \
    mkdir ${ANCHORE_SERVICE_DIR} && \
    mkdir /config && \
    cp conf/default_config.yaml /config/config.yaml && \
    md5sum /config/config.yaml > /config/build_installed && \
    cp docker-compose.yaml /docker-compose.yaml && \
    cp docker-compose-dev.yaml /docker-compose-dev.yaml && \
    cp docker-entrypoint.sh /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

RUN set -ex && \
    pip3 install --no-index --find-links=/wheels -r requirements.txt && \
    pip3 install . && \
    rm -rf /anchore-engine /root/.cache /wheels

RUN set -ex && \
    groupadd --gid 1000 anchore && \
    useradd --uid 1000 --gid anchore --shell /bin/bash --create-home anchore && \
    mkdir -p /var/log/anchore && chown -R anchore:anchore /var/log/anchore && \
    mkdir -p /var/run/anchore && chown -R anchore:anchore /var/run/anchore && \
    mkdir -p /analysis_scratch && chown -R anchore:anchore /analysis_scratch && \
    mkdir -p ${ANCHORE_SERVICE_DIR} && chown -R anchore:anchore /anchore_service

HEALTHCHECK --start-period=20s \
    CMD curl -f http://localhost:8228/health || exit 1

USER anchore:anchore

ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""anchore-manager"", ""service"", ""start"", ""--all""]
","FROM ubuntu:18.04 as wheelbuilder
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV GOPATH=/go
ENV SKOPEO_VERSION=v0.1.32

RUN set -ex && \
    mkdir -p /go && \
    apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y install vim curl psmisc git rpm python3 python3-pip golang btrfs-tools git-core libdevmapper-dev libgpgme11-dev go-md2man libglib2.0-dev libostree-dev libssl-dev && \
    git clone --branch ""$SKOPEO_VERSION"" https://github.com/containers/skopeo ${GOPATH}/src/github.com/containers/skopeo && \
    cd ${GOPATH}/src/github.com/containers/skopeo && \
    make binary-local && \
    make install

COPY ./requirements.txt /requirements.txt

# Build the wheels from the requirements
RUN pip3 wheel --wheel-dir=/wheels -r /requirements.txt

# Do the final build
FROM ubuntu:18.04

ARG CLI_COMMIT
ARG ANCHORE_COMMIT
ARG ANCHORE_ENGINE_VERSION=""0.4.0""
ARG ANCHORE_ENGINE_RELEASE=""dev""

# Container metadata section

MAINTAINER dev@anchore.com

LABEL anchore_cli_commit=$CLI_COMMIT \
      anchore_commit=$ANCHORE_COMMIT \
      name=""anchore-engine"" \
      maintainer=""dev@anchore.com"" \
      vendor=""Anchore Inc."" \
      version=$ANCHORE_ENGINE_VERSION \
      release=$ANCHORE_ENGINE_RELEASE \
      summary=""Anchore Engine - container image scanning service for policy-based security, best-practice and compliance enforcement."" \
      description=""Anchore is an open platform for container security and compliance that allows developers, operations, and security teams to discover, analyze, and certify container images on-premises or in the cloud. Anchore Engine is the on-prem, OSS, API accessible service that allows ops and developers to perform detailed analysis, run queries, produce reports and define policies on container images that can be used in CI/CD pipelines to ensure that only containers that meet your organization’s requirements are deployed into production.""

# Environment variables to be present in running environment
ENV LANG=en_US.UTF-8 LC_ALL=C.UTF-8

# Default values overrideable at runtime of the container
ENV ANCHORE_CONFIG_DIR=/config \
    ANCHORE_SERVICE_DIR=/anchore_service \
    ANCHORE_LOG_LEVEL=INFO \
    ANCHORE_ENABLE_METRICS=false \
    ANCHORE_INTERNAL_SSL_VERIFY=false \
    ANCHORE_WEBHOOK_DESTINATION_URL=null \
    ANCHORE_FEEDS_ENABLED=true \
    ANCHORE_FEEDS_SELECTIVE_ENABLED=true \
    ANCHORE_FEEDS_SSL_VERIFY=true \
    ANCHORE_ENDPOINT_HOSTNAME=localhost \
    ANCHORE_EVENTS_NOTIFICATIONS_ENABLED=false \
    ANCHORE_FEED_SYNC_INTERVAL_SEC=21600 \
    ANCHORE_EXTERNAL_PORT=null \
    ANCHORE_EXTERNAL_TLS=false \
    ANCHORE_AUTHZ_HANDLER=native \
    ANCHORE_EXTERNAL_AUTHZ_ENDPOINT=null \
    ANCHORE_ADMIN_PASSWORD=foobar \
    ANCHORE_ADMIN_EMAIL=admin@myanchore \
    ANCHORE_HOST_ID=""anchore-quickstart"" \
    ANCHORE_DB_PORT=5432 \
    ANCHORE_DB_NAME=postgres \
    ANCHORE_DB_USER=postgres \
    SET_HOSTID_TO_HOSTNAME=false \
    ANCHORE_CLI_USER=admin \
    ANCHORE_CLI_PASS=foobar \
    ANCHORE_SERVICE_PORT=8228 \
    ANCHORE_CLI_URL=""http://localhost:8228"" \
    ANCHORE_FEEDS_URL=""https://ancho.re/v1/service/feeds"" \
    ANCHORE_FEEDS_CLIENT_URL=""https://ancho.re/v1/account/users"" \
    ANCHORE_FEEDS_TOKEN_URL=""https://ancho.re/oauth/token""

# Container run environment settings

#VOLUME /analysis_scratch
EXPOSE ${ANCHORE_SERVICE_PORT}

# Build dependencies

RUN set -ex && \
    apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y install git curl psmisc rpm python3-minimal python3-pip libgpgme11 libdevmapper1.02.1 libostree-1-1 && \
    pip3 install -e git+git://github.com/anchore/anchore-cli.git@$CLI_COMMIT\#egg=anchorecli && \
    apt-get -y remove git && \
    apt-get clean && \
    apt-get -y autoremove

# Copy skopeo artifacts from build step
COPY --from=wheelbuilder /usr/bin/skopeo /usr/bin/skopeo
COPY --from=wheelbuilder /etc/containers/policy.json /etc/containers/policy.json

# Copy python artifacts from build step
COPY --from=wheelbuilder /wheels /wheels
COPY . /anchore-engine

# Setup container default configs and directories

WORKDIR /anchore-engine

RUN set -ex && \
    mkdir ${ANCHORE_SERVICE_DIR} && \
    mkdir /config && \
    mkdir /licenses && \
    cp LICENSE /licenses/ && \
    cp conf/default_config.yaml /config/config.yaml && \
    md5sum /config/config.yaml > /config/build_installed && \
    cp docker-compose.yaml /docker-compose.yaml && \
    cp docker-compose-dev.yaml /docker-compose-dev.yaml && \
    cp docker-entrypoint.sh /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Perform the anchore-engine build and install

RUN set -ex && \
    pip3 install --no-index --find-links=/wheels -r requirements.txt && \
    pip3 install . && \
    rm -rf /anchore-engine /root/.cache /wheels

# Setup anchore user and permissions

RUN set -ex && \
    groupadd --gid 1000 anchore && \
    useradd --uid 1000 --gid anchore --shell /bin/bash --create-home anchore && \
    mkdir -p /var/log/anchore && chown -R anchore:anchore /var/log/anchore && \
    mkdir -p /var/run/anchore && chown -R anchore:anchore /var/run/anchore && \
    mkdir -p /analysis_scratch && chown -R anchore:anchore /analysis_scratch && \
    mkdir -p /workspace && chown -R anchore:anchore /workspace && \
    mkdir -p ${ANCHORE_SERVICE_DIR} && chown -R anchore:anchore /anchore_service

# Container runtime instructions

HEALTHCHECK --start-period=20s \
    CMD curl -f http://localhost:8228/health || exit 1

USER anchore:anchore

ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""anchore-manager"", ""service"", ""start"", ""--all""]
"
296,4be1f3b57c9c407fe69e513821215695997859a8,Bumped source to 20210416-840ef00,"Bumped source to 20210416-840ef00
","FROM docker.pkg.github.com/dock0/service/service:20210416-caa430b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20210416-840ef00
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2240,6071142c30c72276955805a33003e92c7a13f72b,Update maven version to 3.6.1 in base dockerfile,"Update maven version to 3.6.1 in base dockerfile

Signed-off-by: Pol Alvarez Vecino <fc69c70bc0ae3e9754a54708f23bac12e8d3afe1@gmail.com>
","FROM ubuntu:16.04
MAINTAINER COMPSs Support <support-compss@bsc.es>

# =============================================================================
# Configuration required to use the image for jenkins testing
# =============================================================================

# Install Essentials
RUN apt-get update && \
# Install Packages
    apt-get install -y --no-install-recommends \
git  \
    vim \
    wget \
    openssh-server \
    sudo && \
# Create Jenkins User
    useradd jenkins -m -s /bin/bash && \
# Add the jenkins user to sudoers
    echo ""jenkins  ALL=(ALL)  NOPASSWD:ALL"" >> /etc/sudoers && \
# Enable ssh to localhost for user root & jenkins
    yes yes | ssh-keygen -f /root/.ssh/id_rsa -t rsa -N '' > /dev/null && \
    cat /root/.ssh/id_rsa.pub > /root/.ssh/authorized_keys && \
    cp -r /root/.ssh /home/jenkins && \
# Make sure jenkins owns his files
    chown -R jenkins /home/jenkins/ && \
    chgrp -R jenkins /home/jenkins/ && \
# Enable repo compression
    git config --global core.compression 9 && \
# =============================================================================
# Dependencies for building COMPSs
# =============================================================================
# Build dependencies
    apt-get install -y --no-install-recommends maven \
# Runtime dependencies
    openjdk-8-jdk graphviz xdg-utils \
# Bindings-common-dependencies
    libtool automake build-essential \
# C-binding dependencies
    libboost-all-dev libxml2-dev csh \
# Extrae dependencies
    libxml2 gfortran libpapi-dev papi-tools \
# Misc. dependencies
    openmpi-bin openmpi-doc libopenmpi-dev uuid-runtime curl bc \
# Python-binding dependencies
    python-setuptools python3-setuptools python-dev python3-dev libpython2.7 python-pip python3-pip && \
    python2 -m pip install --upgrade pip && \
    python3 -m pip install --upgrade pip && \
    pip2 install wheel numpy==1.15.4 dill guppy decorator mpi4py==1.3.1 && \
    pip3 install wheel numpy==1.15.4 dill decorator mpi4py==3.0.1 && \
# Python-redis dependencies
    pip2 install redis==2.10.6 redis-py-cluster && \
    pip3 install redis==2.10.6 redis-py-cluster && \
# pycompsslib dependencies
    pip2 install scipy==1.0.0 scikit-learn==0.19.1 pandas==0.23.1 && \
    pip3 install scipy==1.0.0 scikit-learn==0.19.1 pandas==0.23.1 && \
# AutoParallel dependencies
    apt-get install -y --no-install-recommends libgmp3-dev flex bison libbison-dev texinfo libffi-dev && \
    pip2 install astor sympy enum34 islpy && \
# Streaming dependencies
    apt-get install -y --no-install-recommends unzip && \
    wget https://services.gradle.org/distributions/gradle-5.4.1-bin.zip && \
    unzip -d /opt gradle-5.4.1-bin.zip && \
    rm gradle-5.4.1-bin.zip && \
    ln -s /opt/gradle-5.4.1 /opt/gradle && \
    echo ""GRADLE_HOME=/opt/gradle"" >> /etc/environment && \
    echo ""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:${GRADLE_HOME}/bin"" >> /etc/environment && \
# Testing dependencies
    pip3 install enum34 tabulate && \
# Configure user environment
# =============================================================================
# System configuration
# =============================================================================
# Add environment variables
    echo ""JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/"" >> /etc/environment && \
    echo ""MPI_HOME=/usr/lib/openmpi"" >> /etc/environment && \
    echo ""LD_LIBRARY_PATH=/usr/lib/openmpi/lib"" >> /etc/environment && \
    mkdir /run/sshd && \
    rm -rf /var/lib/apt/lists/*
",
361,50a74e51933441315065970a0f029c9e97e53846,Bumped source to 20201017-3682bee,"Bumped source to 20201017-3682bee
","FROM docker.pkg.github.com/dock0/service/service:20201017-4e9aa53
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20201017-3682bee
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
332,67cf30f7951a5a920ec58528973490881b1a17ed,Fix filename fail on my part,"Fix filename fail on my part
","FROM phusion/baseimage:0.9.15
MAINTAINER needo <needo@superhero.org>
#Based on the work of Eric Schultz <eric@startuperic.com>
#Thanks to Tim Haak <tim@haak.co.uk>
ENV DEBIAN_FRONTEND noninteractive

# Set correct environment variables
ENV HOME /root

# Use baseimage-docker's init system
CMD [""/sbin/my_init""]

# chfn workaround - Known issue within Dockers
RUN ln -s -f /bin/true /usr/bin/chfn

# Install Plex
RUN apt-get -q update
RUN apt-get install -qy gdebi-core wget
ADD install_plex.sh /
RUN bash /install_plex.sh

# Fix a Debianism of plex's uid being 101
RUN usermod -u 999 plex
RUN usermod -g 100 plex

VOLUME /config
VOLUME /data

EXPOSE 32400

# Define /config in the configuration file not using environment variables
ADD plexmediaserver /etc/default/plexmediaserver

# Add firstrun.sh to execute during container startup
RUN mkdir -p /etc/my_init.d
ADD firstrun.sh /etc/my_init.d/firstrun.sh
RUN chmod +x /etc/my_init.d/firstrun.sh

# Add Plex to runit
RUN mkdir /etc/service/plex
ADD plex.sh /etc/service/plex/run
RUN chmod +x /etc/service/plex/run
","FROM phusion/baseimage:0.9.15
MAINTAINER needo <needo@superhero.org>
#Based on the work of Eric Schultz <eric@startuperic.com>
#Thanks to Tim Haak <tim@haak.co.uk>
ENV DEBIAN_FRONTEND noninteractive

# Set correct environment variables
ENV HOME /root

# Use baseimage-docker's init system
CMD [""/sbin/my_init""]

# chfn workaround - Known issue within Dockers
RUN ln -s -f /bin/true /usr/bin/chfn

# Install Plex
RUN apt-get -q update
RUN apt-get install -qy gdebi-core wget
ADD installplex.sh /
RUN bash /installplex.sh

# Fix a Debianism of plex's uid being 101
RUN usermod -u 999 plex
RUN usermod -g 100 plex

VOLUME /config
VOLUME /data

EXPOSE 32400

# Define /config in the configuration file not using environment variables
ADD plexmediaserver /etc/default/plexmediaserver

# Add firstrun.sh to execute during container startup
RUN mkdir -p /etc/my_init.d
ADD firstrun.sh /etc/my_init.d/firstrun.sh
RUN chmod +x /etc/my_init.d/firstrun.sh

# Add Plex to runit
RUN mkdir /etc/service/plex
ADD plex.sh /etc/service/plex/run
RUN chmod +x /etc/service/plex/run
"
329,82ddf0a17c5bca2266b4c5eec042bbd5c167490a,Add `tini` back to mongodb image,"Add `tini` back to mongodb image
","ARG IMAGE_REPO
FROM ${IMAGE_REPO:-lagoon}/commons as commons
FROM alpine:edge

MAINTAINER amazee.io
ENV LAGOON=mongo


COPY --from=commons /lagoon /lagoon
COPY --from=commons /bin/fix-permissions /bin/ep /bin/docker-sleep /bin/
COPY --from=commons /home /home

# When Bash is invoked via `sh` it behaves like the old Bourne Shell and sources a file that is given in `ENV`
# When Bash is invoked as non-interactive (like `bash -c command`) it sources a file that is given in `BASH_ENV`
ENV TMPDIR=/tmp TMP=/tmp HOME=/home ENV=/home/.bashrc BASH_ENV=/home/.bashrc

RUN apk --no-cache add mongodb

RUN mkdir -p /data/db /data/configdb && \
    fix-permissions /data/db && \
    fix-permissions /data/configdb

VOLUME /data/db
EXPOSE 27017 28017

ENTRYPOINT [""/lagoon/entrypoints.sh""]
CMD [ ""mongod"", ""--bind_ip"", ""0.0.0.0"" ]
","ARG IMAGE_REPO
FROM ${IMAGE_REPO:-lagoon}/commons as commons
FROM alpine:edge

MAINTAINER amazee.io
ENV LAGOON=mongo


COPY --from=commons /lagoon /lagoon
COPY --from=commons /bin/fix-permissions /bin/ep /bin/docker-sleep /bin/
COPY --from=commons /sbin/tini /sbin/
COPY --from=commons /home /home

# When Bash is invoked via `sh` it behaves like the old Bourne Shell and sources a file that is given in `ENV`
# When Bash is invoked as non-interactive (like `bash -c command`) it sources a file that is given in `BASH_ENV`
ENV TMPDIR=/tmp TMP=/tmp HOME=/home ENV=/home/.bashrc BASH_ENV=/home/.bashrc

RUN apk --no-cache add mongodb

RUN mkdir -p /data/db /data/configdb && \
    fix-permissions /data/db && \
    fix-permissions /data/configdb

VOLUME /data/db
EXPOSE 27017 28017

ENTRYPOINT [""/sbin/tini"", ""--"", ""/lagoon/entrypoints.sh""]
CMD [ ""mongod"", ""--bind_ip"", ""0.0.0.0"" ]
"
2192,ff333b3d253b950eb8b0c62f713da784c5b992e8,Update to Apache Spark 2.3.0; align with https://github.com/archivesunleashed/aut/commit/fc8f4bf0d5d5bbd28459f2330dfbac0b9d2c226f,"Update to Apache Spark 2.3.0; align with https://github.com/archivesunleashed/aut/commit/fc8f4bf0d5d5bbd28459f2330dfbac0b9d2c226f
","# Base Alpine Linux based image with OpenJDK and Maven
FROM maven:3-jdk-8-alpine

# Metadata
LABEL maintainer=""Nick Ruest <ruestn@gmail.com>""
LABEL description=""Docker image for the Archives Unleashed Toolkit.""
LABEL website=""http://archivesunleashed.org/""

## Build variables
#######################
ARG SPARK_VERSION=2.1.1

# Git and Wget
RUN apk add --update \
    git \
    wget

# Sample resources
RUN git clone https://github.com/archivesunleashed/aut-resources.git

# Archives Unleashed Toolkit
RUN git clone https://github.com/archivesunleashed/aut.git /aut \
    && cd /aut \
    && export JAVA_OPTS=-Xmx512m \
    && mvn clean install

# Spark shell
RUN mkdir /spark \
    && cd /tmp \
    && wget -q ""https://archive.apache.org/dist/spark/spark-$SPARK_VERSION/spark-$SPARK_VERSION-bin-hadoop2.7.tgz"" \
    && tar -xf ""/tmp/spark-$SPARK_VERSION-bin-hadoop2.7.tgz"" -C /spark --strip-components=1 \
    && rm ""/tmp/spark-$SPARK_VERSION-bin-hadoop2.7.tgz""

CMD /spark/bin/spark-shell --packages ""io.archivesunleashed:aut:0.16.1-SNAPSHOT""
",
344,e0ccdf6bab494dbe5459d566e1c968566d872a27,Bumped source to 20211201-26e14dc,"Bumped source to 20211201-26e14dc
","FROM docker.pkg.github.com/dock0/arch/arch:20211201-de045cc
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20211201-26e14dc
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
355,097c13464c6160896820965eda91b091f387ed9c,Bumped source to 20200303-a417f49,"Bumped source to 20200303-a417f49
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200302-26d6516
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200303-a417f49
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
2305,5206d7ad153a3c36109722de16dd402e3800a4e2,add bash-history,"add bash-history
","FROM ubuntu:15.10
MAINTAINER ""Christian Kniep <christian@qnib.org>""

RUN echo ""2015-10-14.1"";apt-get update && \
     apt-get install -y supervisor && \
     echo ""supervisord -c /etc/supervisord.conf"" >> /root/.bash_history && \
     echo ""supervisorctl status"" >> /root/.bash_history && \
     echo ""tail -f /var/log/supervisor/"" >> /root/.bash_history 
ADD etc/supervisord.conf /etc/supervisord.conf

CMD [""supervisord"", ""-n"", ""-c"", ""/etc/supervisord.conf""]

",
308,483f7ef8dbee1741bf8b948611b74fa4452a3bb5,Bumped source to 20200302-f01d1ca,"Bumped source to 20200302-f01d1ca
","FROM docker.pkg.github.com/dock0/arch/arch:20200302-474bc73
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20200302-f01d1ca
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
373,1e3e0109e1740112a74503ed967423e8f94a1021,Fix broken CSS (#13),"Fix broken CSS (#13)

","FROM alpine:3.4

# Install nginx and tooling we need
RUN apk update && \
    apk add nginx curl unzip && \
    rm -rf /var/cache/apk/*

# Use consul-template to re-write our Nginx virtualhost config
RUN curl -Lo /tmp/consul_template_0.15.0_linux_amd64.zip https://releases.hashicorp.com/consul-template/0.15.0/consul-template_0.15.0_linux_amd64.zip && \
    unzip /tmp/consul_template_0.15.0_linux_amd64.zip && \
    mv consul-template /bin

# Get ContainerPilot release
ENV CONTAINERPILOT_VERSION 2.4.1
RUN export CP_SHA1=198d96c8d7bfafb1ab6df96653c29701510b833c && \
    curl -Lso /tmp/containerpilot.tar.gz ""https://github.com/joyent/containerpilot/releases/download/${CONTAINERPILOT_VERSION}/containerpilot-${CONTAINERPILOT_VERSION}.tar.gz"" && \
    echo ""${CP_SHA1}  /tmp/containerpilot.tar.gz"" | sha1sum -c && \
    tar zxf /tmp/containerpilot.tar.gz -C /bin && \
    rm /tmp/containerpilot.tar.gz

COPY containerpilot.json /etc/containerpilot.json
ENV CONTAINERPILOT=file:///etc/containerpilot.json
COPY reload-nginx.sh /bin/
COPY index.html /usr/share/nginx/html/
COPY nginx.conf /etc/nginx/nginx.conf
COPY nginx.conf.ctmpl /etc/containerpilot/


EXPOSE 80
CMD [""/bin/containerpilot"", ""nginx""]
","FROM alpine:3.4

# Install nginx and tooling we need
RUN apk update && \
    apk add nginx curl unzip && \
    rm -rf /var/cache/apk/*

# Use consul-template to re-write our Nginx virtualhost config
RUN curl -Lo /tmp/consul_template_0.15.0_linux_amd64.zip https://releases.hashicorp.com/consul-template/0.15.0/consul-template_0.15.0_linux_amd64.zip && \
    unzip /tmp/consul_template_0.15.0_linux_amd64.zip && \
    mv consul-template /bin

# Get ContainerPilot release
ENV CONTAINERPILOT_VERSION 2.4.1
RUN export CP_SHA1=198d96c8d7bfafb1ab6df96653c29701510b833c && \
    curl -Lso /tmp/containerpilot.tar.gz ""https://github.com/joyent/containerpilot/releases/download/${CONTAINERPILOT_VERSION}/containerpilot-${CONTAINERPILOT_VERSION}.tar.gz"" && \
    echo ""${CP_SHA1}  /tmp/containerpilot.tar.gz"" | sha1sum -c && \
    tar zxf /tmp/containerpilot.tar.gz -C /bin && \
    rm /tmp/containerpilot.tar.gz

COPY containerpilot.json /etc/containerpilot.json
ENV CONTAINERPILOT=file:///etc/containerpilot.json
COPY reload-nginx.sh /bin/
COPY index.html /usr/share/nginx/html/
COPY style.css /usr/share/nginx/html/
COPY nginx.conf /etc/nginx/nginx.conf
COPY nginx.conf.ctmpl /etc/containerpilot/


EXPOSE 80
CMD [""/bin/containerpilot"", ""nginx""]
"
391,00aac3cc7597bbc4fc22ceba2e70cbfc0b74e57f,Bumped source to 20210421-4ce94b8,"Bumped source to 20210421-4ce94b8
","FROM docker.pkg.github.com/dock0/arch/arch:20210421-42c13f8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20210421-4ce94b8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2159,e06befcf20566795231d8e4cde21a27efcda2b6d,Bumped source to 20210411-cae9883,"Bumped source to 20210411-cae9883
","FROM docker.pkg.github.com/dock0/arch/arch:20210411-d90d621
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
2281,c341a495d108259d891c638664d6d89010815542,Bumped source to 20200920-bdcf0d9,"Bumped source to 20200920-bdcf0d9
","FROM docker.pkg.github.com/dock0/arch/arch:20200920-555a91e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
326,e447acae90e9926c91a35763696f86ed024ccd31,Pin alpine version to match Pipfile,"Pin alpine version to match Pipfile

Currently running the docker image fails with 'ImportError: cannot import name 'Mapping' from 'collections'' due to pulling down the latest version of Python from alpine. 

If we pinning to the version specified in the Pipfile, it resolves it.","FROM python:3-alpine
RUN pip install pipenv

ADD ./Pipfile ./Pipfile
ADD ./Pipfile.lock ./Pipfile.lock

RUN pipenv install --deploy --system

ADD ./hostthedocs/ ./hostthedocs/
ADD ./runserver.py ./runserver.py

ENV HTD_HOST ""0.0.0.0""
ENV HTD_PORT 5000

EXPOSE 5000

CMD [ ""python"", ""runserver.py"" ]
","FROM python:3.6-alpine
RUN pip install pipenv

ADD ./Pipfile ./Pipfile
ADD ./Pipfile.lock ./Pipfile.lock

RUN pipenv install --deploy --system

ADD ./hostthedocs/ ./hostthedocs/
ADD ./runserver.py ./runserver.py

ENV HTD_HOST ""0.0.0.0""
ENV HTD_PORT 5000

EXPOSE 5000

CMD [ ""python"", ""runserver.py"" ]
"
254,8ce9a2b2da3e0645a08da8bdc814534e437d3001,Fix base image,"Fix base image
","FROM bizeps/jenkinsuser
MAINTAINER Dominik Ebert <doe@zuehlke.com>

# Modified official Jenkins Dockerfile
# See: https://github.com/jenkinsci/docker

# install java
RUN apt-get update && apt-get install -y \
    curl \
    default-jre \
    git \
    zip \
    && rm -rf /var/lib/apt/lists/*

# Definition of jenkins user
ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=1000
ENV JENKINS_HOME /var/jenkins_home

# Jenkins runs with user `jenkins:jenkins`, uid = 1000, gid = 1000
# If you bind mount a volume from the host or a data container, 
# ensure you use the same uid
RUN groupadd -g ${gid} ${group} \
    && useradd -d ""$JENKINS_HOME"" -u ${uid} -g ${gid} -m -s /bin/bash ${user}

# `/usr/share/jenkins/ref/` contains all reference configuration we want 
# to set on a fresh new installation. Use it to bundle additional plugins 
# or config file with your custom jenkins Docker image.
RUN mkdir -p /usr/share/jenkins/ref/init.groovy.d

ENV TINI_SHA 066ad710107dc7ee05d3aa6e4974f01dc98f3888

# Use tini as subreaper in Docker container to adopt zombie processes 
RUN curl -fsSL https://github.com/krallin/tini/releases/download/v0.5.0/tini-static -o /bin/tini && chmod +x /bin/tini \
  && echo ""$TINI_SHA  /bin/tini"" | sha1sum -c -

COPY ./resources/init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy

ARG JENKINS_VERSION
ENV JENKINS_VERSION ${JENKINS_VERSION:-2.46.2}

ARG JENKINS_SHA=aa7f243a4c84d3d6cfb99a218950b8f7b926af7aa2570b0e1707279d464472c7

# Can be used to customize where jenkins.war get downloaded from
ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war

# could use ADD but this one does not check Last-Modified header 
# see https://github.com/docker/docker/issues/8331
RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \
  && echo ""${JENKINS_SHA}  /usr/share/jenkins/jenkins.war"" | sha256sum -c -

ENV JENKINS_UC https://updates.jenkins.io
RUN chown -R ${user} ""$JENKINS_HOME"" /usr/share/jenkins/ref

# for main web interface:
EXPOSE 8080

# will be used by attached slave agents:
EXPOSE 50000

ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log

# Jenkins home directory is a volume, so configuration and build history 
# can be persisted and survive image upgrades
VOLUME $JENKINS_HOME

USER ${user}

COPY ./resources/jenkins.sh /usr/local/bin/jenkins.sh
ENTRYPOINT [""/bin/tini"", ""--"", ""/usr/local/bin/jenkins.sh""]

# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle
COPY ./resources/plugins.sh /usr/local/bin/plugins.sh
COPY ./resources/plugins.txt /usr/share/jenkins/plugins.txt
RUN bash /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt
","FROM debian:jessie
MAINTAINER Dominik Ebert <doe@zuehlke.com>

# Modified official Jenkins Dockerfile
# See: https://github.com/jenkinsci/docker

# install java
RUN apt-get update && apt-get install -y \
    curl \
    default-jre \
    git \
    zip \
    && rm -rf /var/lib/apt/lists/*

# Definition of jenkins user
ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=1000
ENV JENKINS_HOME /var/jenkins_home

# Jenkins runs with user `jenkins:jenkins`, uid = 1000, gid = 1000
# If you bind mount a volume from the host or a data container, 
# ensure you use the same uid
RUN groupadd -g ${gid} ${group} \
    && useradd -d ""$JENKINS_HOME"" -u ${uid} -g ${gid} -m -s /bin/bash ${user}

# `/usr/share/jenkins/ref/` contains all reference configuration we want 
# to set on a fresh new installation. Use it to bundle additional plugins 
# or config file with your custom jenkins Docker image.
RUN mkdir -p /usr/share/jenkins/ref/init.groovy.d

ENV TINI_SHA 066ad710107dc7ee05d3aa6e4974f01dc98f3888

# Use tini as subreaper in Docker container to adopt zombie processes 
RUN curl -fsSL https://github.com/krallin/tini/releases/download/v0.5.0/tini-static -o /bin/tini && chmod +x /bin/tini \
  && echo ""$TINI_SHA  /bin/tini"" | sha1sum -c -

COPY ./resources/init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy

ARG JENKINS_VERSION
ENV JENKINS_VERSION ${JENKINS_VERSION:-2.46.2}

ARG JENKINS_SHA=aa7f243a4c84d3d6cfb99a218950b8f7b926af7aa2570b0e1707279d464472c7

# Can be used to customize where jenkins.war get downloaded from
ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war

# could use ADD but this one does not check Last-Modified header 
# see https://github.com/docker/docker/issues/8331
RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \
  && echo ""${JENKINS_SHA}  /usr/share/jenkins/jenkins.war"" | sha256sum -c -

ENV JENKINS_UC https://updates.jenkins.io
RUN chown -R ${user} ""$JENKINS_HOME"" /usr/share/jenkins/ref

# for main web interface:
EXPOSE 8080

# will be used by attached slave agents:
EXPOSE 50000

ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log

# Jenkins home directory is a volume, so configuration and build history 
# can be persisted and survive image upgrades
VOLUME $JENKINS_HOME

USER ${user}

COPY ./resources/jenkins.sh /usr/local/bin/jenkins.sh
ENTRYPOINT [""/bin/tini"", ""--"", ""/usr/local/bin/jenkins.sh""]

# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle
COPY ./resources/plugins.sh /usr/local/bin/plugins.sh
COPY ./resources/plugins.txt /usr/share/jenkins/plugins.txt
RUN bash /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt
"
291,bd7cc48a023a6a6e18e51717d6a8a93acc7d3a96,Bumped source to 20210706-c0daff4,"Bumped source to 20210706-c0daff4
","FROM docker.pkg.github.com/dock0/service/service:20210706-be0056a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20210706-c0daff4
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
261,fb53cfbd0f6982ec4e7a9981cb21a27bcdeff0fd,Bumped source to 20210126-d9ce23a,"Bumped source to 20210126-d9ce23a
","FROM docker.pkg.github.com/dock0/arch/arch:20210126-562db74
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20210126-d9ce23a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
156,322f2fa61f1df1ab26cc3522e351f3a2d3cccf89,Fixed diacritical marks,"Fixed diacritical marks
","FROM debian:jessie
MAINTAINER madsonic (support@madsonic.org)

# Let the container know that there is no tty
ENV DEBIAN_FRONTEND noninteractive
ENV HOME /root

# Madsonic Package Information
ENV PKG_NAME madsonic
ENV PKG_VER 6.0
ENV PKG_BUILD 7960
ENV PKG_DATE 20160122

# Use init system
CMD [""/sbin/my_init""]

# Fix ids
RUN usermod -u 99 nobody
RUN usermod -g 100 nobody

# Add Oracle Java8 Repo
RUN echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" >> /etc/apt/sources.list.d/webupd8team-java.list \
  && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886 \
  && echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections

# Install apt packages
RUN apt-get update && apt-get install -y \
  ca-certificates \
  locales \
  oracle-java8-installer \
  oracle-java8-set-default \
  unzip \
  wget

# download madsonic
RUN mkdir -p /var/madsonic/transcode \
  && wget -O /var/madsonic/madsonic.zip http://www.madsonic.org/download/${PKG_VER}/${PKG_DATE}_${PKG_NAME}-${PKG_VER}.${PKG_BUILD}-standalone.zip \
  && wget -O /var/madsonic/transcode.zip http://www.madsonic.org/download/transcode/${PKG_DATE}_${PKG_NAME}-transcode-linux-x64.zip

# Install Madsonic
RUN mkdir -p /var/madsonic/transcode \
  && unzip /var/madsonic/madsonic.zip -d /var/madsonic \
  && unzip /var/madsonic/transcode.zip -d /var/madsonic \
  && chown -R nobody:users /var/madsonic \
  && chmod -R 755 /var/madsonic \
  && rm /var/madsonic/madsonic.zip \
  && rm /var/madsonic/transcode.zip

# Force Madsonic to run in foreground
RUN sed -i 's/-jar madsonic-booter.jar > \${LOG} 2>\&1 \&/-jar madsonic-booter.jar > \${LOG} 2>\&1/g' /var/madsonic/madsonic.sh

 # apt clean
RUN apt-get clean \
  && rm -rf /var/lib/apt/lists/* \
  && rm -rf /tmp/*

# Set Locale env
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV LANGUAGE en_US.UTF-8

# Set Locale
RUN locale-gen en_US en_US.UTF-8
RUN dpkg-reconfigure locales 

# default http https port
EXPOSE 4040 4050

# App configuration
VOLUME /config

# media directory
VOLUME /media

# Copy start.sh script
ADD ./start.sh /start.sh
RUN chmod +x /start.sh
RUN chown -R nobody:users /start.sh

# run App as user
USER nobody
ENTRYPOINT [""/start.sh""]
","FROM debian:jessie
MAINTAINER madsonic (support@madsonic.org)

# Let the container know that there is no tty
ENV DEBIAN_FRONTEND noninteractive
ENV HOME /root

# Madsonic Package Information
ENV PKG_NAME madsonic
ENV PKG_VER 6.0
ENV PKG_BUILD 7960
ENV PKG_DATE 20160122

# Use init system
CMD [""/sbin/my_init""]

# Fix ids
RUN usermod -u 99 nobody
RUN usermod -g 100 nobody

# Add Oracle Java8 Repo
RUN echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" >> /etc/apt/sources.list.d/webupd8team-java.list \
  && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886 \
  && echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections

# Install apt packages
RUN apt-get update && apt-get install -y \
  ca-certificates \
  locales \
  oracle-java8-installer \
  oracle-java8-set-default \
  unzip \
  wget

# download madsonic
RUN mkdir -p /var/madsonic/transcode \
  && wget -O /var/madsonic/madsonic.zip http://www.madsonic.org/download/${PKG_VER}/${PKG_DATE}_${PKG_NAME}-${PKG_VER}.${PKG_BUILD}-standalone.zip \
  && wget -O /var/madsonic/transcode.zip http://www.madsonic.org/download/transcode/${PKG_DATE}_${PKG_NAME}-transcode-linux-x64.zip

# Install Madsonic
RUN mkdir -p /var/madsonic/transcode \
  && unzip /var/madsonic/madsonic.zip -d /var/madsonic \
  && unzip /var/madsonic/transcode.zip -d /var/madsonic \
  && chown -R nobody:users /var/madsonic \
  && chmod -R 755 /var/madsonic \
  && rm /var/madsonic/madsonic.zip \
  && rm /var/madsonic/transcode.zip

# Force Madsonic to run in foreground
RUN sed -i 's/-jar madsonic-booter.jar > \${LOG} 2>\&1 \&/-jar madsonic-booter.jar > \${LOG} 2>\&1/g' /var/madsonic/madsonic.sh

 # apt clean
RUN apt-get clean \
  && rm -rf /var/lib/apt/lists/* \
  && rm -rf /tmp/*

# Set Locale env
ENV LANG C.UTF-8

# default http https port
EXPOSE 4040 4050

# App configuration
VOLUME /config

# media directory
VOLUME /media

# Copy start.sh script
ADD ./start.sh /start.sh
RUN chmod +x /start.sh
RUN chown -R nobody:users /start.sh

# run App as user
USER nobody
ENTRYPOINT [""/start.sh""]
"
117,2c7f289ada09a9ec5527d1f7710f29c7ad7ce854,Bumped source to 20201115-bc8e5e0,"Bumped source to 20201115-bc8e5e0
","FROM docker.pkg.github.com/dock0/service/service:20201115-16ac26c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20201115-bc8e5e0
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2093,b8bed1176b170d9480df32d96cca436bdffd7dd7,Update to Java 8u131 and JNA 4.4.0,"Update to Java 8u131 and JNA 4.4.0

Download unlimited JCE policy.
","# OpenWrt with a Java installation
#
# Many thanks to the original author:
#
# Jean Blanchard <jean@blanchard.io>
#
# cf. https://github.com/jeanblanchard/docker-busybox-java
#

FROM mcreations/openwrt-x64
MAINTAINER Kambiz Darabi <darabi@m-creations.net>

# Java Version
ENV JAVA_VERSION_MAJOR 8
ENV JAVA_VERSION_MINOR 60
ENV JAVA_VERSION_BUILD 27
ENV JAVA_PACKAGE       server-jre
ENV JNA_VERSION 4.1.0

# Runtime environment
ENV JAVA_HOME /opt/jre
ENV PATH ${PATH}:${JAVA_HOME}/bin

CMD [ ""java"", ""-version"" ]

# Download and unarchive Java
RUN opkg update && opkg install curl &&\
  curl -kLOH ""Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie""\
    http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz &&\
    mkdir /opt &&\
    tar -xzf ${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz -C /opt &&\
    cp -r /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR}/jre /opt/ &&\
    curl -kL -o /opt/jre/lib/ext/jna.jar https://github.com/twall/jna/raw/${JNA_VERSION}/dist/jna.jar &&\
    echo ""export PATH=\$PATH:${JAVA_HOME}/bin"" >> /etc/profile &&\
    opkg remove curl libcurl libpolarssl &&\
    rm -rf ${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz \
           /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR}/ \
           /opt/jre/lib/plugin.jar \
           /opt/jre/lib/ext/jfxrt.jar \
           /opt/jre/bin/javaws \
           /opt/jre/lib/javaws.jar \
           /opt/jre/lib/desktop \
           /opt/jre/plugin \
           /opt/jre/lib/deploy* \
           /opt/jre/lib/*javafx* \
           /opt/jre/lib/*jfx* \
           /opt/jre/lib/amd64/libdecora_sse.so \
           /opt/jre/lib/amd64/libprism_*.so \
           /opt/jre/lib/amd64/libfxplugins.so \
           /opt/jre/lib/amd64/libglass.so \
           /opt/jre/lib/amd64/libgstreamer-lite.so \
           /opt/jre/lib/amd64/libjavafx*.so \
           /opt/jre/lib/amd64/libjfx*.so

CMD [ ""java"", ""-version"" ]
",
273,1828c3cc14a2034b40e7b26b2ee2fbbdff65e0ca,add upgrade,add upgrade,"#
# Nginx & PHP-FPM Dockerfile
#
# https://github.com/umeice/nginx
#

# Pull base image.
FROM umeice/python

# Install Nginx.
RUN \
  add-apt-repository -y ppa:nginx/stable && \
  apt-get update && \
  apt-get install -y nginx && \
  chown -R www-data:www-data /var/lib/nginx

# Install php5-fpm, mysql-client.
RUN \
  apt-get install -y php5-fpm php5-mysql && \
  apt-get install -y php5-cli mysql-client-5.6

# php-fpm config
# http://www.tokumaru.org/d/20100927.html
# https://github.com/eugeneware/docker-wordpress-nginx/blob/master/Dockerfile
RUN \
  sed -i 's/^;\?\(max_execution_time =\).*$/\1 300/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(memory_limit =\).*$/\1 256M/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(post_max_size =\).*$/\1 32M/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(upload_max_filesize =\).*$/\1 32M/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(date.timezone =\).*$/\1 ""Asia\/Tokyo""/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(output_buffering =\).*$/\1 Off/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(default_charset =\).*$/\1 ""UTF-8""/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.language =\).*$/\1 Japanese/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.internal_encoding =\).*$/\1 UTF-8/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.http_input =\).*$/\1 UTF-8/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.http_output =\).*$/\1 pass/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.encoding_translation =\).*$/\1 On/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.substitute_character =\).*$/\1 ""?""/' /etc/php5/fpm/php.ini

# Add Supervisor conf.
ADD supervisord.conf /etc/supervisord.conf

# Define mountable directories.
VOLUME [""/data"", ""/etc/nginx/sites-enabled"", ""/var/log/nginx""]

# Define working directory.
WORKDIR /etc/nginx

# Define default command.
CMD [""supervisord""]

# Expose ports.
EXPOSE 80
EXPOSE 443
","#
# Nginx & PHP-FPM Dockerfile
#
# https://github.com/umeice/nginx
#

# Pull base image.
FROM umeice/python

# Install Nginx.
RUN \
  add-apt-repository -y ppa:nginx/stable && \
  apt-get update && \
  apt-get upgrade -y && \
  apt-get install -y nginx && \
  chown -R www-data:www-data /var/lib/nginx

# Install php5-fpm, mysql-client.
RUN \
  apt-get install -y php5-fpm php5-mysql && \
  apt-get install -y php5-cli mysql-client-5.6

# php-fpm config
# http://www.tokumaru.org/d/20100927.html
# https://github.com/eugeneware/docker-wordpress-nginx/blob/master/Dockerfile
RUN \
  sed -i 's/^;\?\(max_execution_time =\).*$/\1 300/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(memory_limit =\).*$/\1 256M/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(post_max_size =\).*$/\1 32M/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(upload_max_filesize =\).*$/\1 32M/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(date.timezone =\).*$/\1 ""Asia\/Tokyo""/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(output_buffering =\).*$/\1 Off/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(default_charset =\).*$/\1 ""UTF-8""/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.language =\).*$/\1 Japanese/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.internal_encoding =\).*$/\1 UTF-8/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.http_input =\).*$/\1 UTF-8/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.http_output =\).*$/\1 pass/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.encoding_translation =\).*$/\1 On/' /etc/php5/fpm/php.ini && \
  sed -i 's/^;\?\(mbstring.substitute_character =\).*$/\1 ""?""/' /etc/php5/fpm/php.ini

# Add Supervisor conf.
ADD supervisord.conf /etc/supervisord.conf

# Define mountable directories.
VOLUME [""/data"", ""/etc/nginx/sites-enabled"", ""/var/log/nginx""]

# Define working directory.
WORKDIR /etc/nginx

# Define default command.
CMD [""supervisord""]

# Expose ports.
EXPOSE 80
EXPOSE 443
"
2119,60bbd06897e532922ec4a34f66839638d7fc5532,fixed curl: not found,"fixed curl: not found
","#Inspiration 1: DotCloud
#Inspiration 2: https://github.com/justnidleguy/
#Inspiration 3: https://bitbucket.org/xcgd/ubuntu4b

FROM softapps/docker-ubuntubase
MAINTAINER Arun T K <arun.kalikeri@xxxxxxxx.com>

# generate locales
RUN locale-gen en_US.UTF-8 && update-locale
RUN echo 'LANG=""en_US.UTF-8""' > /etc/default/locale

# add some system packages
RUN  TERM=linux apt-get update &&  TERM=linux apt-get -y -q install \
        libterm-readline-perl-perl \
        dialog sudo \
        && rm -rf /var/lib/apt/lists/*

# Add the PostgreSQL PGP key to verify their Debian packages.
# It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

# Add PostgreSQL's repository. It contains the most recent stable release
#     of PostgreSQL, ``9.4``.
# install dependencies as distrib packages when system bindings are required
# some of them extend the basic odoo requirements for a better ""apps"" compatibility
# most dependencies are distributed as wheel packages at the next step
RUN echo ""deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main"" > /etc/apt/sources.list.d/pgdg.list && \
        TERM=linux apt-get update && \
        TERM=linux apt-get -yq install \
            adduser \
            ghostscript \
            postgresql-client-9.4 \
            python \
                python-pip \ 
python-support \
                python-imaging \
                python-pychart python-libxslt1 xfonts-base xfonts-75dpi \
                libxrender1 libxext6 fontconfig \
                python-zsi \
                python-lasso \
&& rm -rf /var/lib/apt/lists/*
ADD sources/pip-req.txt /opt/sources/pip-req.txt

# use wheels from our public wheelhouse for proper versions of listed packages
# as described in sourced pip-req.txt
# these are python dependencies for odoo and ""apps"" as precompiled wheel packages

RUN pip install --upgrade --use-wheel --no-index --pre \
        --find-links=https://googledrive.com/host/0Bz-lYS0FYZbIfklDSm90US16S0VjWmpDQUhVOW1GZlVOMUdXb1hENFFBc01BTGpNVE1vZGM \
        --requirement=/opt/sources/pip-req.txt

# install wkhtmltopdf based on QT5
ADD http://downloads.sourceforge.net/project/wkhtmltopdf/0.12.2.1/wkhtmltox-0.12.2.1_linux-trusty-amd64.deb /opt/sources/wkhtmltox.deb
RUN dpkg -i /opt/sources/wkhtmltox.deb

# Install some deps, lessc and less-plugin-clean-css
RUN curl https://deb.nodesource.com/node012/pool/main/n/nodejs/nodejs_0.12.0-1nodesource1~precise1_amd64.deb > node.deb \
&& dpkg -i node.deb \
&& rm node.deb
RUN npm install -g less less-plugin-clean-css \
&& npm cache clear
RUN ln -s /usr/bin/nodejs /usr/bin/node

# create the odoo user
RUN adduser --home=/opt/odoo --disabled-password --gecos """" --shell=/bin/bash odoo

# ADD sources for the oe components
# ADD an URI always gives 600 permission with UID:GID 0 => need to chmod accordingly
# /!\ carefully select the source archive depending on the version
ADD https://github.com/trabacus-softapps/odoo/archive/saas-6.tar.gz /opt/odoo/odoo.tar.gz
RUN chown odoo:odoo /opt/odoo/odoo.tar.gz


# changing user is required by openerp which won't start with root
# makes the container more unlikely to be unwillingly changed in interactive mode
USER odoo

RUN /bin/bash -c ""mkdir -p /opt/odoo/{bin,etc,sources/odoo/addons,additional_addons,data}"" && \
    cd /opt/odoo/sources/odoo && \
        tar -xvf /opt/odoo/odoo.tar.gz --strip 1 && \
        rm /opt/odoo/odoo.tar.gz

RUN /bin/bash -c ""mkdir -p /opt/odoo/var/{run,log,egg-cache,ftp}""


# Execution environment
USER 0
ADD sources/odoo.conf /opt/sources/odoo.conf
WORKDIR /app
VOLUME [""/opt/odoo/var"", ""/opt/odoo/etc"", ""/opt/odoo/additional_addons"", ""/opt/odoo/data""]
# Set the default entrypoint (non overridable) to run when starting the container
ENTRYPOINT [""/app/bin/boot""]
CMD [""help""]
# Expose the odoo ports (for linked containers)
EXPOSE 8069 8072
ADD bin /app/bin/
",
2086,10cada6230fe9d437f3b58337bb6695079e95b5c,Bumped source to 20200422-2d7110c,"Bumped source to 20200422-2d7110c
","FROM docker.pkg.github.com/dock0/arch/arch:20200422-9d8599d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
228,7244ca5103dbb78f044626d4e1f4ba54e34372b9,Changes base image to `ruby:alpine` to keep up with version changes,"Changes base image to `ruby:alpine` to keep up with version changes
","FROM ruby:2.3-alpine

MAINTAINER John Allen <john.allen@technekes.com>
MAINTAINER Jack Ross <jack.ross@technekes.com>

VOLUME /var/s3
ARG S3FS_VERSION=v1.79

RUN \
  cd /tmp && \

  apk --no-cache add wget ca-certificates && \

  wget ""s3.amazonaws.com/aws-cli/awscli-bundle.zip"" -O ""awscli-bundle.zip"" && \
    unzip awscli-bundle.zip && \
    apk --no-cache add groff less python && \
    ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws && \

  # install build related tools
  apk --no-cache add --virtual .build_deps \
    git \
    autoconf \
    automake \
    build-base \
    glib \
    glib-dev \
    libc-dev \
    libtool \
    linux-headers \
    openssl-dev \
    ruby-dev && \

  apk --no-cache add --virtual .s3fs_deps \
    fuse \
    alpine-sdk \
    automake \
    autoconf \
    libxml2-dev \
    fuse-dev \
    curl-dev \
    git \
    bash && \

  apk --no-cache add --virtual .gem_deps \
    postgresql-dev \
    sqlite-dev \
    libxml2-dev \
    libxslt-dev \
    tzdata && \

  # install s3fs
  cd /tmp && \
  git clone https://github.com/s3fs-fuse/s3fs-fuse.git && \
    cd s3fs-fuse && \
    git checkout tags/${S3FS_VERSION} && \
    ./autogen.sh && \
    ./configure --prefix=/usr && make && make install && \
    cd /tmp && \

  # install csvquote
  cd /tmp && \
  wget ""https://github.com/dbro/csvquote/archive/master.zip"" && \
    unzip master.zip && rm master.zip && \
    cd csvquote-master && \
    make && make install && \
    cd /tmp && \

  # install mdb-tools
  cd /tmp && \
  wget ""https://github.com/brianb/mdbtools/archive/0.7.1.zip"" && \
    unzip 0.7.1.zip && rm 0.7.1.zip && \
    cd mdbtools-0.7.1 && \
    autoreconf -i -f && \
    ./configure --disable-man && make && make install && \
    cd /tmp && \

  # install apk versions of tools
  apk --no-cache add \
    bash \
    zsh \
    coreutils \
    freetds \
    gawk \
    gzip \
    jq \
    postgresql-client \
    sed \
    gpgme && \

  # fix for gpg
  apk --no-cache add \
    gnupg1 && \

  rm /etc/freetds.conf && \

  # symlink gsed to sed
  ln -s /bin/sed /bin/gsed && \

  #clean up
  # apk del build-base libtool autoconf automake glib-dev openssl && \
  rm -rf /tmp/*

RUN sh -c ""`curl -fsSL https://raw.githubusercontent.com/skwp/dotfiles/master/install.sh`"" || true

WORKDIR /etc
COPY alpine/etc/ .

ENV HOME /root
WORKDIR $HOME
COPY alpine/root/ .

# override entry point from parent image
ENTRYPOINT [""/bin/zsh""]
","FROM ruby:alpine

MAINTAINER John Allen <john.allen@technekes.com>
MAINTAINER Jack Ross <jack.ross@technekes.com>

VOLUME /var/s3
ARG S3FS_VERSION=v1.79

RUN \
  cd /tmp && \

  apk --no-cache add wget ca-certificates && \

  wget ""s3.amazonaws.com/aws-cli/awscli-bundle.zip"" -O ""awscli-bundle.zip"" && \
    unzip awscli-bundle.zip && \
    apk --no-cache add groff less python && \
    ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws && \

  # install build related tools
  apk --no-cache add --virtual .build_deps \
    git \
    autoconf \
    automake \
    build-base \
    glib \
    glib-dev \
    libc-dev \
    libtool \
    linux-headers \
    openssl-dev \
    ruby-dev && \

  apk --no-cache add --virtual .s3fs_deps \
    fuse \
    alpine-sdk \
    automake \
    autoconf \
    libxml2-dev \
    fuse-dev \
    curl-dev \
    git \
    bash && \

  apk --no-cache add --virtual .gem_deps \
    postgresql-dev \
    sqlite-dev \
    libxml2-dev \
    libxslt-dev \
    tzdata && \

  # install s3fs
  cd /tmp && \
  git clone https://github.com/s3fs-fuse/s3fs-fuse.git && \
    cd s3fs-fuse && \
    git checkout tags/${S3FS_VERSION} && \
    ./autogen.sh && \
    ./configure --prefix=/usr && make && make install && \
    cd /tmp && \

  # install csvquote
  cd /tmp && \
  wget ""https://github.com/dbro/csvquote/archive/master.zip"" && \
    unzip master.zip && rm master.zip && \
    cd csvquote-master && \
    make && make install && \
    cd /tmp && \

  # install mdb-tools
  cd /tmp && \
  wget ""https://github.com/brianb/mdbtools/archive/0.7.1.zip"" && \
    unzip 0.7.1.zip && rm 0.7.1.zip && \
    cd mdbtools-0.7.1 && \
    autoreconf -i -f && \
    ./configure --disable-man && make && make install && \
    cd /tmp && \

  # install apk versions of tools
  apk --no-cache add \
    bash \
    zsh \
    coreutils \
    freetds \
    gawk \
    gzip \
    jq \
    postgresql-client \
    sed \
    gpgme && \

  # fix for gpg
  apk --no-cache add \
    gnupg1 && \

  rm /etc/freetds.conf && \

  # symlink gsed to sed
  ln -s /bin/sed /bin/gsed && \

  #clean up
  # apk del build-base libtool autoconf automake glib-dev openssl && \
  rm -rf /tmp/*

RUN sh -c ""`curl -fsSL https://raw.githubusercontent.com/skwp/dotfiles/master/install.sh`"" || true

WORKDIR /etc
COPY alpine/etc/ .

ENV HOME /root
WORKDIR $HOME
COPY alpine/root/ .

# override entry point from parent image
ENTRYPOINT [""/bin/zsh""]
"
2252,6d4039f04611a1c9893f2346210fd60f01d94420,Add JDK 11 to Asylo Dockerfile,"Add JDK 11 to Asylo Dockerfile

PiperOrigin-RevId: 288751173
Change-Id: Idf9d80d21e86091615e698c0452e3f1dcaafbdc4
","#
# Copyright 2018 Asylo authors
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Use fixed snapshot of Debian to create a deterministic environment.
# Snapshot tags can be found at https://hub.docker.com/r/debian/snapshot/tags
ARG debian_snapshot=buster-20191118

# Start with a temporary image just for building the toolchain.
FROM debian/snapshot:${debian_snapshot} as toolchain

# Add build dependencies from Debian.
RUN apt-get update && \
    apt-get install -y \
        bison \
        build-essential \
        flex \
        libisl-dev \
        libmpc-dev \
        libmpfr-dev \
        rsync \
        texinfo \
        wget \
        zlib1g-dev

COPY . /opt/asylo/distrib/toolchain/

# Build and install the toolchain.
RUN /opt/asylo/distrib/toolchain/install-toolchain \
    --system \
    --prefix /opt/asylo/toolchains/default

## Now, create the final image.
FROM debian/snapshot:${debian_snapshot}

# Use a fixed version of Bazel.
ARG bazel_version=1.2.1
ARG bazel_sha=4bbb2718d451db5922223fda3aed3810c4ca50f431481e86a7fec4c585f18b1f
ARG bazel_url=https://storage.googleapis.com/bazel-apt/pool/jdk1.8/b/bazel/bazel_${bazel_version}_amd64.deb

# Install development tools
RUN apt-get update && \
    apt-get install -y wget && \
    wget ""${bazel_url}"" -nv -o- -O bazel.deb && \
    echo ""${bazel_sha}  bazel.deb"" > bazel.sha256 && \
    sha256sum --check bazel.sha256 && \
    apt-get install -y \
        ./bazel.deb \
        bash-completion \
        build-essential \
        git \
        libfl2 \
        ocaml-nox \
        ocamlbuild \
        python-dev \
        python2.7-dev \
        python3-dev \
        vim \
        && \
    rm bazel.deb bazel.sha256 && \
    apt-get clean && \
    echo "". /etc/bash_completion"" >> /root/.bashrc

# Copy the built toolchain from the earlier image.
COPY --from=toolchain /opt/asylo/toolchains/ /opt/asylo/toolchains/
COPY --from=toolchain /usr/local/share/asylo/ /usr/local/share/asylo/

# Default command to run if not specified otherwise.
CMD [""/bin/bash""]
",
2301,ad28fb24adaa13e775ff0abdd418a9fdb671bd80,Bumped source to 20200811-6cc1b0a,"Bumped source to 20200811-6cc1b0a
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200811-e17ced9
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
49,2b720d3a1e78150a5920c0025994265e7e2d1290,Bumped source to 20201111-35f9132,"Bumped source to 20201111-35f9132
","FROM docker.pkg.github.com/dock0/arch/arch:20201111-2fbdfd7
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20201111-35f9132
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
18,bb71344786f24234012047a3b85865b21625b58a,Bumped source to 20200610-4d706a3,"Bumped source to 20200610-4d706a3
","FROM docker.pkg.github.com/dock0/arch/arch:20200610-195d543
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200610-4d706a3
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
379,8d0629b42cfe518605c7ca93acc6e6db6c60b43a,Remove meteor file version from docker compose file,"Remove meteor file version from docker compose file
","FROM centos:7

MAINTAINER mozdef@mozilla.com

#updated meteor version to avoid EXDEV: cross-device link not permitted errors
ENV NODE_VERSION 4.7.0
ENV METEOR_VERSION 1.4.4.2
ENV METEOR_FILE_VERSION 1.4.4-1

ENV MONGO_URL=mongodb://mongodb:3002/meteor
ENV ROOT_URL=http://localhost
ENV PORT=3000

RUN \
  useradd -ms /bin/bash -d /opt/mozdef -m mozdef && \
  mkdir -p /opt/mozdef/envs/mozdef && \
  cd /opt/mozdef && \
  curl -sL -o /opt/mozdef/nodesource.rpm https://rpm.nodesource.com/pub_4.x/el/7/x86_64/nodesource-release-el7-1.noarch.rpm && \
  rpm -i --nosignature --force /opt/mozdef/nodesource.rpm && \
  yum install -y \
                    wget \
                    make \
                    glibc-devel \
                    gcc \
                    gcc-c++ \
                    libstdc++ \
                    libffi-devel \
                    zlib-devel && \
  yum install -y nodejs-$NODE_VERSION && \
  npm install source-map-support@0.4.2 \
                 semver@5.3.0 \
                 fibers@1.0.13 \
                 amdefine@1.0.0 \
                 underscore@1.8.3 \
                 bcrypt && \
  mkdir /opt/mozdef/meteor && \
  curl -sL -o /opt/mozdef/meteor.tar.gz https://static-meteor.netdna-ssl.com/packages-bootstrap/$METEOR_VERSION/meteor-bootstrap-os.linux.x86_64.tar.gz && \
  tar -xzf /opt/mozdef/meteor.tar.gz -C /opt/mozdef/meteor && \
  mv /opt/mozdef/meteor/.meteor /opt/mozdef && \
  rm -r /opt/mozdef/meteor && \
  cp /opt/mozdef/.meteor/packages/meteor-tool/*/mt-os.linux.x86_64/scripts/admin/launch-meteor /usr/bin/meteor

#copy our source dir and set ownership
USER mozdef
COPY meteor /opt/mozdef/envs/mozdef/meteor
USER root
RUN chown -R mozdef:mozdef /opt/mozdef/envs/mozdef/meteor

#avoiding -R due to massive list of files from meteor
RUN chown  mozdef:mozdef /opt/mozdef/envs
USER mozdef
RUN \
  cd /opt/mozdef/envs/mozdef/meteor && \
  meteor npm install --save babel-runtime && \
  meteor add accounts-password && \
  meteor add npm-bcrypt && \
  mkdir -p /opt/mozdef/envs/meteor/mozdef

USER root
COPY docker/compose/mozdef_meteor/files/settings.js /opt/mozdef/envs/mozdef/meteor/app/lib/settings.js
RUN chown -R mozdef:mozdef /opt/mozdef/envs/mozdef/meteor/app/lib/settings.js

USER mozdef
RUN \
  cd /opt/mozdef/envs/mozdef/meteor && \
  meteor build --server localhost:3002 --directory /opt/mozdef/envs/meteor/mozdef/ --allow-incompatible-update

WORKDIR /opt/mozdef/envs/meteor/mozdef

EXPOSE 3000
","FROM centos:7

MAINTAINER mozdef@mozilla.com

#updated meteor version to avoid EXDEV: cross-device link not permitted errors
ENV NODE_VERSION 4.7.0
ENV METEOR_VERSION 1.4.4.2

ENV MONGO_URL=mongodb://mongodb:3002/meteor
ENV ROOT_URL=http://localhost
ENV PORT=3000

RUN \
  useradd -ms /bin/bash -d /opt/mozdef -m mozdef && \
  mkdir -p /opt/mozdef/envs/mozdef && \
  cd /opt/mozdef && \
  curl -sL -o /opt/mozdef/nodesource.rpm https://rpm.nodesource.com/pub_4.x/el/7/x86_64/nodesource-release-el7-1.noarch.rpm && \
  rpm -i --nosignature --force /opt/mozdef/nodesource.rpm && \
  yum install -y \
                    wget \
                    make \
                    glibc-devel \
                    gcc \
                    gcc-c++ \
                    libstdc++ \
                    libffi-devel \
                    zlib-devel && \
  yum install -y nodejs-$NODE_VERSION && \
  npm install source-map-support@0.4.2 \
                 semver@5.3.0 \
                 fibers@1.0.13 \
                 amdefine@1.0.0 \
                 underscore@1.8.3 \
                 bcrypt && \
  mkdir /opt/mozdef/meteor && \
  curl -sL -o /opt/mozdef/meteor.tar.gz https://static-meteor.netdna-ssl.com/packages-bootstrap/$METEOR_VERSION/meteor-bootstrap-os.linux.x86_64.tar.gz && \
  tar -xzf /opt/mozdef/meteor.tar.gz -C /opt/mozdef/meteor && \
  mv /opt/mozdef/meteor/.meteor /opt/mozdef && \
  rm -r /opt/mozdef/meteor && \
  cp /opt/mozdef/.meteor/packages/meteor-tool/*/mt-os.linux.x86_64/scripts/admin/launch-meteor /usr/bin/meteor

#copy our source dir and set ownership
USER mozdef
COPY meteor /opt/mozdef/envs/mozdef/meteor
USER root
RUN chown -R mozdef:mozdef /opt/mozdef/envs/mozdef/meteor

#avoiding -R due to massive list of files from meteor
RUN chown  mozdef:mozdef /opt/mozdef/envs
USER mozdef
RUN \
  cd /opt/mozdef/envs/mozdef/meteor && \
  meteor npm install --save babel-runtime && \
  meteor add accounts-password && \
  meteor add npm-bcrypt && \
  mkdir -p /opt/mozdef/envs/meteor/mozdef

USER root
COPY docker/compose/mozdef_meteor/files/settings.js /opt/mozdef/envs/mozdef/meteor/app/lib/settings.js
RUN chown -R mozdef:mozdef /opt/mozdef/envs/mozdef/meteor/app/lib/settings.js

USER mozdef
RUN \
  cd /opt/mozdef/envs/mozdef/meteor && \
  meteor build --server localhost:3002 --directory /opt/mozdef/envs/meteor/mozdef/ --allow-incompatible-update

WORKDIR /opt/mozdef/envs/meteor/mozdef

EXPOSE 3000
"
83,47e131104756cdd10b2d4c9a090feb539475dfa0,Bumped source to 20200726-6718f32,"Bumped source to 20200726-6718f32
","FROM docker.pkg.github.com/dock0/arch/arch:20200725-ca53f93
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20200726-6718f32
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2227,64bfbab8a5a127560dc46001ddb9fec1e8eafbfd,Bump Alpine Linux to v3.4,"Bump Alpine Linux to v3.4
","FROM alpine:3.3
MAINTAINER Akiyoshi Sakaguchi <a-sakaguchi@groovenauts.jp>

ENV NGINX_VERSION 1.10.0

RUN apk --update add pcre-dev openssl-dev \
  && apk add --virtual build-dependencies build-base curl \
  && curl -SLO http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \
  && tar xzvf nginx-${NGINX_VERSION}.tar.gz \
  && cd nginx-${NGINX_VERSION} \
  && ./configure \
       --with-http_ssl_module \
       --with-http_gzip_static_module \
       --prefix=/usr/share/nginx \
       --sbin-path=/usr/local/sbin/nginx \
       --conf-path=/etc/nginx/conf/nginx.conf \
       --pid-path=/var/run/nginx.pid \
       --http-log-path=/var/log/nginx/access.log \
       --error-log-path=/var/log/nginx/error.log \
  && make \
  && make install \
  && cd / \
  && apk del build-dependencies \
  && ln -sf /dev/stdout /var/log/nginx/access.log \
  && ln -sf /dev/stderr /var/log/nginx/error.log \
  && rm -rf \
       nginx-${NGINX_VERSION} \
       nginx-${NGINX_VERSION}.tar.gz \
       /var/cache/apk/*

VOLUME [""/var/cache/nginx""]

EXPOSE 80 443

CMD [""nginx"", ""-g"", ""daemon off;""]
",
2190,4522b37875f7fbcf5c66b47230996ec8a78276c2,version bump 2.10.0,"version bump 2.10.0
","FROM php:7.2-fpm

LABEL maintainer=""diego@passbolt.com""

ARG PASSBOLT_VERSION=""2.9.0""
ARG PASSBOLT_URL=""https://github.com/passbolt/passbolt_api/archive/v${PASSBOLT_VERSION}.tar.gz""
ARG PASSBOLT_CURL_HEADERS=""""

ARG PHP_EXTENSIONS=""gd \
      intl \
      pdo_mysql \
      opcache \
      xsl""

ARG PECL_PASSBOLT_EXTENSIONS=""gnupg \
      redis \
      mcrypt""

ARG PASSBOLT_DEV_PACKAGES=""libgpgme11-dev \
      libpng-dev \
      libjpeg62-turbo-dev \
      libicu-dev \
      libxslt1-dev \
      libmcrypt-dev \
      unzip""

ARG PASSBOLT_BASE_PACKAGES=""nginx \
         gnupg \
         libgpgme11 \
         libmcrypt4 \
         mysql-client \
         supervisor \
         cron""

ENV PECL_BASE_URL=""https://pecl.php.net/get""
ENV PHP_EXT_DIR=""/usr/src/php/ext""

WORKDIR /var/www/passbolt
RUN apt-get update \
    && apt-get -y install --no-install-recommends \
      $PASSBOLT_DEV_PACKAGES \
      $PASSBOLT_BASE_PACKAGES \
    && mkdir /home/www-data \
    && chown -R www-data:www-data /home/www-data \
    && usermod -d /home/www-data www-data \
    && docker-php-source extract \
    && for i in $PECL_PASSBOLT_EXTENSIONS; do \
         mkdir $PHP_EXT_DIR/$i; \
         curl -sSL $PECL_BASE_URL/$i | tar zxf - -C $PHP_EXT_DIR/$i --strip-components 1; \
       done \
    && docker-php-ext-configure gd --with-jpeg-dir=/usr/include/ \
    && docker-php-ext-install -j4 $PHP_EXTENSIONS $PECL_PASSBOLT_EXTENSIONS \
    && docker-php-ext-enable $PHP_EXTENSIONS $PECL_PASSBOLT_EXTENSIONS \
    && docker-php-source delete \
    && EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig) \
    && curl -o composer-setup.php https://getcomposer.org/installer \
    && ACTUAL_SIGNATURE=$(php -r ""echo hash_file('SHA384', 'composer-setup.php');"") \
    && if [ ""$EXPECTED_SIGNATURE"" != ""$ACTUAL_SIGNATURE"" ]; then \
         >&2 echo 'ERROR: Invalid installer signature'; \
         rm composer-setup.php; \
         exit 1; \
       fi \
    && php composer-setup.php \
    && mv composer.phar /usr/local/bin/composer \
    && rm composer-setup.php \
    && curl -sSL -H ""$PASSBOLT_CURL_HEADERS"" ""$PASSBOLT_URL"" | tar zxf - -C . --strip-components 1 \
    && composer install -n --no-dev --optimize-autoloader \
    && chown -R www-data:www-data . \
    && chmod 775 $(find /var/www/passbolt/tmp -type d) \
    && chmod 664 $(find /var/www/passbolt/tmp -type f) \
    && chmod 775 $(find /var/www/passbolt/webroot/img/public -type d) \
    && chmod 664 $(find /var/www/passbolt/webroot/img/public -type f) \
    && rm /etc/nginx/sites-enabled/default \
    && apt-get purge -y --auto-remove $PASSBOLT_DEV_PACKAGES \
    && rm -rf /var/lib/apt/lists/* \
    && rm /usr/local/bin/composer \
    && echo 'php_flag[expose_php] = off' > /usr/local/etc/php-fpm.d/expose.conf \
    && sed -i 's/# server_tokens/server_tokens/' /etc/nginx/nginx.conf \
    && mv ""$PHP_INI_DIR/php.ini-production"" ""$PHP_INI_DIR/php.ini""

COPY conf/passbolt.conf /etc/nginx/conf.d/default.conf
COPY conf/supervisor/*.conf /etc/supervisor/conf.d/
COPY bin/docker-entrypoint.sh /docker-entrypoint.sh
COPY scripts/wait-for.sh /usr/bin/wait-for.sh

EXPOSE 80 443

CMD [""/docker-entrypoint.sh""]
",
32,16cc6f8a0f95f12d735870050d0bc92cedb05cde,Bumped source to 20201005-0e0dca5,"Bumped source to 20201005-0e0dca5
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201004-69d0856
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201005-0e0dca5
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
93,daf1b8a394b5805fcf9754e1e03df9217bdaef41,Add a marked dependency volume folder,"Add a marked dependency volume folder
","# Use the base Python 3.6 image.  It is sufficient for accomplishing
# most of the stuff, and includes some handy build tools like gcc.
#
# NOTE This could be changed to something like `python:latest` if we
# find that there is no dependency on 3.6 itself.
FROM python:3.6

# Set the MAINTAINER flag of the docker image.
#
# NOTE Consider changing this or removing it; it is not necessary
# unless pushing to Docker Hub.
MAINTAINER Kristofer Rye <kristofer.rye@gmail.com>

# Add the entire project directory to the /cs251tk/ directory in the
# image.
ADD . /cs251tk/

# Create the SSH config directory on the root user account home directory.
RUN mkdir -p /root/.ssh/

# Build a smart SSH config (and prepare to use our id_rsa from the host)
RUN echo ""Host *.stolaf.edu\n\tUserKnownHostsFile /dev/null\n\tStrictHostKeyChecking no\n\tIdentityFile /root/.ssh/id_rsa"" >> /root/.ssh/config

# Lock down our SSH config
RUN chmod 600 /root/.ssh/config

# Change into our project directory.
WORKDIR /cs251tk

# Install the toolkit from the source directory.
RUN pip3 install .

# Update the package cache.
RUN apt-get update

# TODO Install any additional requirements.  Do we have any?
# RUN apt-get install -y cool-package

# Clean up to reduce our overall image size.
RUN apt-get clean

# Print out the versions of the installed tools.
RUN gcc --version \
    && g++ --version \
    && make --version \
    && git --version \
    && python --version

# Finally, set our default command to just ""cs251tk"".
CMD [""cs251tk""]
","# Use the base Python 3.6 image.  It is sufficient for accomplishing
# most of the stuff, and includes some handy build tools like gcc.
#
# NOTE This could be changed to something like `python:latest` if we
# find that there is no dependency on 3.6 itself.
FROM python:3.6

# Set the MAINTAINER flag of the docker image.
#
# NOTE Consider changing this or removing it; it is not necessary
# unless pushing to Docker Hub.
MAINTAINER Kristofer Rye <kristofer.rye@gmail.com>

# Add the entire project directory to the /cs251tk/ directory in the
# image.
ADD . /cs251tk/

# Create the SSH config directory on the root user account home directory.
RUN mkdir -p /root/.ssh/

# Build a smart SSH config (and prepare to use our id_rsa from the host)
RUN echo ""Host *.stolaf.edu\n\tUserKnownHostsFile /dev/null\n\tStrictHostKeyChecking no\n\tIdentityFile /root/.ssh/id_rsa"" >> /root/.ssh/config

# Lock down our SSH config
RUN chmod 600 /root/.ssh/config

# Add a marked dependency volume folder.
VOLUME /cs251tk_share/

# Change into our project directory.
WORKDIR /cs251tk

# Install the toolkit from the source directory.
RUN pip3 install .

# Update the package cache.
RUN apt-get update

# TODO Install any additional requirements.  Do we have any?
# RUN apt-get install -y cool-package

# Clean up to reduce our overall image size.
RUN apt-get clean

# Print out the versions of the installed tools.
RUN gcc --version \
    && g++ --version \
    && make --version \
    && git --version \
    && python --version

# Finally, set our default command to just ""cs251tk"".
CMD [""cs251tk""]
"
2183,8116154f96316229d8423e58b173d77305b5ec64,Add DFSET & PACKAGER ARGs to Exporter Dockerfile (#1827),"Add DFSET & PACKAGER ARGs to Exporter Dockerfile (#1827)

Adds the DFSET and PACKAGER ARG instructions to the
crunchy-postgres-exporter Dockerfile as needed to ensure the proper
detection of ""rhel"" or ""centos"" for the DFSET env var, and the use of
the proper package manager when installing the packages required by the
Crunchy PostgreSQL Exporter.","ARG BASEOS
ARG BASEVER
ARG PREFIX
FROM ${PREFIX}/pgo-base:${BASEOS}-${BASEVER}

ARG PGVERSION

LABEL name=""crunchy-postgres-exporter"" \
summary=""Metrics exporter for PostgreSQL"" \
description=""When run with the crunchy-postgres family of containers, crunchy-postgres-exporter reads the PostgreSQL data directory and has a SQL interface to a database to allow for metrics collection."" \
io.k8s.description=""Crunchy PostgreSQL Exporter"" \
io.k8s.display-name=""Crunchy PostgreSQL Exporter"" \
io.openshift.tags=""postgresql,postgres,monitoring,database,crunchy""

RUN if [ ""$DFSET"" = ""centos"" ] ; then \
${PACKAGER} -y install epel-release \
    && ${PACKAGER} install -y \
        --setopt=skip_missing_names_on_install=False \
        postgresql${PGVERSION} \
    && ${PACKAGER} -y clean all ; \
fi

RUN if [ ""$DFSET"" = ""rhel"" ] ; then \
${PACKAGER} install -y \
        --setopt=skip_missing_names_on_install=False \
        postgresql${PGVERSION} \
    && ${PACKAGER} -y clean all ; \
fi

RUN mkdir -p /opt/cpm/bin /opt/cpm/conf

ADD postgres_exporter.tar.gz /opt/cpm/bin
ADD tools/pgmonitor/exporter/postgres /opt/cpm/conf
ADD bin/crunchy-postgres-exporter /opt/cpm/bin
ADD bin/uid_daemon.sh /opt/cpm/bin

RUN chgrp -R 0 /opt/cpm/bin /opt/cpm/conf && \
chmod -R g=u /opt/cpm/bin/ opt/cpm/conf

# postgres_exporter
EXPOSE 9187

RUN chmod g=u /etc/passwd

# The VOLUME directive must appear after all RUN directives to ensure the proper
# volume permissions are applied when building the image
VOLUME [""/conf""]

ENTRYPOINT [""/opt/cpm/bin/uid_daemon.sh""]

USER 2

CMD [""/opt/cpm/bin/start.sh""]
",
2191,c901eecd337d83690eef054be3d9f8dd880ca983,Bumped source to 20200903-989688f,"Bumped source to 20200903-989688f
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200903-83219f3
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
302,3b247335e1ef00bb699d2ff11ea877a637fa1136,update dep,"update dep
","FROM centos:6.8
MAINTAINER lysu <sulifx@gmail.com>

RUN yum update
RUN yum install -y \
    man \
    cmake \
    git \
    clang \
    vim \
    emacs \
    unzip \
    valgrind \
    net-tools \
    doxygen \
    tmux \
    cscope \
    make \
    gcc \
    gcc-c++ \
    openssl-devel \
    gdb \
    zsh \
    ctags \
    xdg-utils \
    python-setuptools \
    rubygems \
    fontconfig \
    psmisc \
    tcpdump \
    autoconf \
    boost-devel \
    openmpi-devel \
    python-devel \
    libxml2-devel \
    glib2-devel \
    gsl-devel \
    curl-devel \
    python-pip \
    ack \
 && yum clean all

RUN cd /tmp \
  && curl https://www.samba.org/ftp/ccache/ccache-3.2.5.tar.xz | tar xJ \
  && cd ccache-3.2.5 \
  && ./configure \
  && make \
  && make install \
  && cd \
  && rm -r /tmp/ccache-3.2.5

ENV CCACHE_DIR=/ccache

RUN update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 999 \
 && update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 999

ENV CC=""ccache clang"" CXX=""ccache clang++""

RUN git clone git://github.com/amix/vimrc.git ~/.vim_runtime \
    && sh ~/.vim_runtime/install_awesome_vimrc.sh

RUN git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh \
    && cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc \
    && chsh -s /bin/zsh

RUN git clone https://github.com/Valloric/YouCompleteMe ~/.vim_runtime/sources_non_forked/YouCompleteMe

RUN cd ~/.vim_runtime/sources_non_forked/YouCompleteMe && git submodule update --init --recursive && ./install.sh --clang-completer

RUN git clone https://github.com/rhysd/vim-clang-format.git ~/.vim_runtime/sources_non_forked/vim-clang-format

ADD my_configs.vim /root/.vim_runtime/my_configs.vim
ADD ycm_extra_conf.py /root/.ycm_extra_conf.py
ADD tmux.conf /root/.tmux.conf
ENV TERM=xterm-256color
","FROM centos:6.8
MAINTAINER lysu <sulifx@gmail.com>

RUN yum update
"
56,5be8bf4c6cab72052901d322de5669a2fba8482b,Fix the ADD command,"Fix the ADD command

I not see the change. Take with corrected","# Run Warsaw in a container

# Base docker image
FROM ubuntu
LABEL maintainer ""Fabio Rodrigues Ribeiro <farribeiro@gmail.com>""

# Install Firefox
RUN apt-get update \
&& apt-get upgrade -y \
&& apt-get install -y \
language-pack-pt \
openssl \
libnss3-tools \
firefox \
firefox-locale-pt \
xauth \
--no-install-recommends \
&& apt-get purge --auto-remove -y \
&& rm -rf /var/lib/apt/lists/* \
&& rm -rf /src/*.deb


# ADD https://cloud.gastecnologia.com.br/cef/warsaw/install/GBPCEFwr64.deb /src/GBPCEFwr64.deb
COPY startup.sh /home/ff/startup.sh

# Add ff  user
RUN groupadd -g 1000 -r ff \
    && useradd -u 1000 -r -g ff -G audio,video ff \
    && mkdir -p /home/ff \
    && chmod 744 /home/ff/startup.sh \
    && chown -R ff:ff /home/ff \
    && passwd -d root


# Run firefox as non privileged user
USER ff

# Autorun chrome
CMD [ ""/home/ff/startup.sh"" ]
","# Run Warsaw in a container

# Base docker image
FROM ubuntu
LABEL maintainer ""Fabio Rodrigues Ribeiro <farribeiro@gmail.com>""

# Install Firefox
RUN apt-get update \
&& apt-get upgrade -y \
&& apt-get install -y \
language-pack-pt \
openssl \
libnss3-tools \
firefox \
firefox-locale-pt \
xauth \
--no-install-recommends \
&& apt-get purge --auto-remove -y \
&& rm -rf /var/lib/apt/lists/* \
&& rm -rf /src/*.deb


ADD https://cloud.gastecnologia.com.br/cef/warsaw/install/GBPCEFwr64.deb /src/GBPCEFwr64.deb
COPY startup.sh /home/ff/startup.sh

# Add ff  user
RUN groupadd -g 1000 -r ff \
    && useradd -u 1000 -r -g ff -G audio,video ff \
    && mkdir -p /home/ff \
    && chmod 744 /home/ff/startup.sh \
    && chown -R ff:ff /home/ff \
    && passwd -d root


# Run firefox as non privileged user
USER ff

# Autorun chrome
CMD [ ""/home/ff/startup.sh"" ]
"
2321,76a7f1e81d002dc40540b9aa431fd3640de4737f,Fixed awscli install command,"Fixed awscli install command
","# use latest Node LTS (Boron)
FROM node:boron

RUN export AWS_DEFAULT_OUTPUT=json
RUN pip install --upgrade --user awscli

RUN cd /opt && git clone https://github.com/14kw/docker-firebase-admin.git
RUN cd /opt/docker-firebase-admin && npm install",
2148,aafe4253f1929539eb473e560577e3d0e35d3c1d,Bumped version to 2016.05.20-1,"Bumped version to 2016.05.20-1
","FROM vladshub/python-virtualenv
MAINTAINER Vladislav Shub <vlad6il@gmail.com>

RUN apk add --no-cache --update libffi-dev py-imaging && rm -rf /var/cache/apk/*

EXPOSE 8081
COPY ./entrypoint.sh /

ENV SICKRAGE_VERSION 2016.05.09-2

RUN wget -q ""https://github.com/SickRage/SickRage/archive/${SICKRAGE_VERSION}.tar.gz"" \
  && tar xzf *.tar.gz && rm *.tar.gz \
  && mv SickRage-* /sickrage

RUN virtualenv /env

WORKDIR /sickrage

ENTRYPOINT [""/entrypoint.sh""]
",
2180,cee5b6fdaf666da3a82663fae8d63d8654429dcd,added permissions to run entrypoint.sh,"added permissions to run entrypoint.sh
","FROM nginx:1.13.5-alpine

MAINTAINER Alt Three <support@alt-three.com>

EXPOSE 8000
CMD [""/sbin/entrypoint.sh""]
ARG cachet_ver
ENV cachet_ver ${cachet_ver:-master}

ENV COMPOSER_VERSION 1.4.1

# Using repo packages instead of compiling from scratch
ADD https://php.codecasts.rocks/php-alpine.rsa.pub /etc/apk/keys/php-alpine.rsa.pub
RUN echo ""@php http://php.codecasts.rocks/v3.5/php-7.0"" >> /etc/apk/repositories
RUN apk add --no-cache --update \
    postgresql-client \
    postgresql \
    mysql-client \
    php7 \
    php7-redis@php \
    php7-apcu \
    php7-bcmath \
    php7-dom \
    php7-ctype \
    php7-curl \
    php7-fpm \
    php7-gd \
    php7-iconv \
    php7-intl \
    php7-json \
    php7-mbstring \
    php7-mcrypt \
    php7-mysqlnd \
    php7-opcache \
    php7-openssl \
    php7-pdo \
    php7-pdo_mysql \
    php7-pdo_pgsql \
    php7-pdo_sqlite \
    php7-phar \
    php7-posix \
    php7-session \
    php7-soap \
    php7-xml \
    php7-zip \
    php7-zlib \
    wget sqlite git sudo curl bash grep \
    supervisor

# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log && \
    ln -sf /dev/stdout /var/log/php7/error.log && \
    ln -sf /dev/stderr /var/log/php7/error.log

RUN addgroup -S www-data 
RUN adduser -S -s /bin/bash -G www-data www-data

RUN touch /var/run/nginx.pid /var/run/php5-fpm.pid && \
    chown -R www-data:www-data /var/run/nginx.pid /var/run/php5-fpm.pid

RUN echo 'www-data ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

RUN mkdir -p /var/www/html 
RUN mkdir -p /usr/share/nginx/cache 
RUN mkdir -p /var/cache/nginx && \
    mkdir -p /var/lib/nginx && \
    chown -R www-data:www-data /var/www /usr/share/nginx/cache /var/cache/nginx /var/lib/nginx/

RUN ln -s /usr/bin/php7 /usr/bin/php

# Install composer
RUN php -r ""copy('https://getcomposer.org/installer', '/tmp/composer-setup.php');"" && \
    php -r ""copy('https://composer.github.io/installer.sig', '/tmp/composer-setup.sig');"" && \
    php -r ""if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) !== trim(file_get_contents('/tmp/composer-setup.sig'))) { unlink('/tmp/composer-setup.php'); echo 'Invalid installer' . PHP_EOL; exit(1); }"" && \
    php /tmp/composer-setup.php --version=$COMPOSER_VERSION --install-dir=bin && \
    php -r ""unlink('/tmp/composer-setup.php');""

WORKDIR /var/www/html/
USER www-data

RUN wget https://github.com/cachethq/Cachet/archive/${cachet_ver}.tar.gz && \
    tar xzvf ${cachet_ver}.tar.gz --strip-components=1 && \
    chown -R www-data /var/www/html && \
    rm -r ${cachet_ver}.tar.gz && \
    php /bin/composer.phar global require ""hirak/prestissimo:^0.3"" && \
    php /bin/composer.phar install --no-dev -o && \
    rm -rf bootstrap/cache/*

COPY conf/php-fpm-pool.conf /etc/php7/php-fpm.d/www.conf
COPY conf/supervisord.conf /etc/supervisor/supervisord.conf
COPY conf/nginx.conf /etc/nginx/nginx.conf
COPY conf/nginx-site.conf /etc/nginx/conf.d/default.conf
COPY conf/.env.docker /var/www/html/.env
COPY entrypoint.sh /sbin/entrypoint.sh
",
392,f4b84d6ee0403a268dad4221e1305b97193f1ea6,add .sh,"add .sh
","FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04
MAINTAINER Moch. Ainun Najib <ec2ainun@gmail.com>

ARG TENSORFLOW_VERSION=1.2.0
ARG TENSORFLOW_ARCH=gpu

# Install dependencies
RUN apt-get update && apt-get install -y \
bc \
build-essential \
cmake \
curl \
g++ \
gfortran \
git \
nano \
pkg-config \
python-dev \
software-properties-common \
unzip \
vim \
wget \
yasm \
python3-dev \
python3-tk \
python3-numpy \
        python3-pip \
ant \
default-jdk \
doxygen \
ffmpeg \
qtbase5-dev \
qt5-default \
libssl-dev \
libffi-dev \
libfreetype6-dev \
libhdf5-dev \
liblcms2-dev \
libwebp-dev \
libzmq3-dev \
libopencv-dev \
libgtk-3-dev \ 
libdc1394-22 \
libdc1394-22-dev \
libjpeg-dev \
libopenjpeg5 \
libpng12-dev \
libpng-dev \
libtiff5-dev \
libjasper-dev \
libavcodec-dev \
libavformat-dev \
libswscale-dev \
libxine2-dev \
libgstreamer0.10-dev \
libgstreamer-plugins-base0.10-dev \
libv4l-dev \
libtbb-dev \
libeigen3-dev \
libfaac-dev \
libmp3lame-dev \
libopencore-amrnb-dev \
libopencore-amrwb-dev \
libtheora-dev \
libvorbis-dev \
libxvidcore-dev \
v4l-utils \
libvtk6-dev \
zlib1g-dev \
libx264-dev \
liblapacke-dev \
libopenblas-dev \
liblapack-dev \
libopenexr-dev \
libgdal-dev \
checkinstall \
&& \
apt-get clean && \
apt-get autoremove && \
rm -rf /var/lib/apt/lists/*

RUN pip3 install --upgrade pip

# Add SNI support to Python
RUN pip3 --no-cache-dir install \
pyopenssl \
ndg-httpsclient \
pyasn1 

# Install other useful Python packages using pip3
RUN pip3 --no-cache-dir install --upgrade ipython && \
pip3 --no-cache-dir install \
Cython \
ipykernel \
jupyter \
path.py \
Pillow \
h5py \
pygments \
six \
sphinx \
wheel \
zmq \
matplotlib \
        numpy \
        pandas \
scipy \
scikit-learn \
&& \
python3 -m ipykernel.kernelspec

RUN apt-get update && apt-get install -y \
python3-nose \
python3-skimage \
python3-sympy \
&& \
apt-get clean && \
apt-get autoremove && \
rm -rf /var/lib/apt/lists/*

# Install TensorFlow
RUN pip3 --no-cache-dir install \
https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_gpu-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl

# Install Opencv
RUN bash Opencv.sh

# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/
COPY jalankan.sh /root/
EXPOSE 6006 8888
ADD *.ipynb /notebooks/
WORKDIR /notebooks
RUN chmod +x /root/jalankan.sh

CMD [""/root/jalankan.sh""]","FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04
MAINTAINER Moch. Ainun Najib <ec2ainun@gmail.com>

ARG TENSORFLOW_VERSION=1.2.0
ARG TENSORFLOW_ARCH=gpu

# Install dependencies
RUN apt-get update && apt-get install -y \
bc \
build-essential \
cmake \
curl \
g++ \
gfortran \
git \
nano \
pkg-config \
python-dev \
software-properties-common \
unzip \
vim \
wget \
yasm \
python3-dev \
python3-tk \
python3-numpy \
        python3-pip \
ant \
default-jdk \
doxygen \
ffmpeg \
qtbase5-dev \
qt5-default \
libssl-dev \
libffi-dev \
libfreetype6-dev \
libhdf5-dev \
liblcms2-dev \
libwebp-dev \
libzmq3-dev \
libopencv-dev \
libgtk-3-dev \ 
libdc1394-22 \
libdc1394-22-dev \
libjpeg-dev \
libopenjpeg5 \
libpng12-dev \
libpng-dev \
libtiff5-dev \
libjasper-dev \
libavcodec-dev \
libavformat-dev \
libswscale-dev \
libxine2-dev \
libgstreamer0.10-dev \
libgstreamer-plugins-base0.10-dev \
libv4l-dev \
libtbb-dev \
libeigen3-dev \
libfaac-dev \
libmp3lame-dev \
libopencore-amrnb-dev \
libopencore-amrwb-dev \
libtheora-dev \
libvorbis-dev \
libxvidcore-dev \
v4l-utils \
libvtk6-dev \
zlib1g-dev \
libx264-dev \
liblapacke-dev \
libopenblas-dev \
liblapack-dev \
libopenexr-dev \
libgdal-dev \
checkinstall \
&& \
apt-get clean && \
apt-get autoremove && \
rm -rf /var/lib/apt/lists/*

RUN pip3 install --upgrade pip

# Add SNI support to Python
RUN pip3 --no-cache-dir install \
pyopenssl \
ndg-httpsclient \
pyasn1 

# Install other useful Python packages using pip3
RUN pip3 --no-cache-dir install --upgrade ipython && \
pip3 --no-cache-dir install \
Cython \
ipykernel \
jupyter \
path.py \
Pillow \
h5py \
pygments \
six \
sphinx \
wheel \
zmq \
matplotlib \
        numpy \
        pandas \
scipy \
scikit-learn \
&& \
python3 -m ipykernel.kernelspec

RUN apt-get update && apt-get install -y \
python3-nose \
python3-skimage \
python3-sympy \
&& \
apt-get clean && \
apt-get autoremove && \
rm -rf /var/lib/apt/lists/*

# Install TensorFlow
RUN pip3 --no-cache-dir install \
https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_gpu-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl

ADD *.sh
# Install Opencv
RUN bash Opencv.sh

# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/
COPY jalankan.sh /root/
EXPOSE 6006 8888
ADD *.ipynb /notebooks/
WORKDIR /notebooks
RUN chmod +x /root/jalankan.sh

CMD [""/root/jalankan.sh""]"
26,7cfcc7520b199f379d69491092cc52f66f5cb7ed,Bumped source to 20201204-2497f3f,"Bumped source to 20201204-2497f3f
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201204-dd2b38a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201204-2497f3f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
301,fbd2c7325e145de9b4a9de81a4b2303bc0453cb6,Add vesion of geminabox and unicorn in Dockerfile,"Add vesion of geminabox and unicorn in Dockerfile
","#
# Geminabox
#

# Pull base image.
FROM ashangit/base:latest
MAINTAINER Nicolas Fraison <nfraison@yahoo.fr>

# Deploy geminabox.
RUN yum install ruby ruby-devel gcc make -y && \
    gem install geminabox && \
    gem install unicorn

# Remove compiler package
RUN yum remove ruby-devel gcc make -y

# Create required folders
RUN mkdir -p /data/geminabox/conf && \
mkdir -p /data/geminabox/data

# Set working directory
WORKDIR /data/geminabox/conf

# Copy default config file
COPY conf/config.ru /data/geminabox/conf/config.ru
COPY conf/unicorn.rb /data/geminabox/conf/unicorn.rb

# Declare default env variables
ENV RUBYGEMS_PROXY true
ENV ALLOW_REMOTE_FAILURE true
ENV WORKER_PROCESSES 2
ENV TIMEOUT 60

# Expose geminabox port
EXPOSE 9292

# Default command
CMD unicorn -p 9292 -c /data/geminabox/conf/unicorn.rb","#
# Geminabox
#

# Pull base image.
FROM ashangit/base:latest
MAINTAINER Nicolas Fraison <nfraison@yahoo.fr>

ENV GEMINABOX_VERSION 0.12.4
ENV UNICORN_VERSION 4.9.0

# Deploy geminabox.
RUN yum install ruby ruby-devel gcc make -y && \
    gem install geminabox -v ${GEMINABOX_VERSION} && \
    gem install unicorn -v ${UNICORN_VERSION}

# Remove compiler package
RUN yum remove ruby-devel gcc make -y

# Create required folders
RUN mkdir -p /data/geminabox/conf && \
mkdir -p /data/geminabox/data

# Set working directory
WORKDIR /data/geminabox/conf

# Copy default config file
COPY conf/config.ru /data/geminabox/conf/config.ru
COPY conf/unicorn.rb /data/geminabox/conf/unicorn.rb

# Declare default env variables
ENV RUBYGEMS_PROXY true
ENV ALLOW_REMOTE_FAILURE true
ENV WORKER_PROCESSES 2
ENV TIMEOUT 60

# Expose geminabox port
EXPOSE 9292

# Default command
CMD unicorn -p 9292 -c /data/geminabox/conf/unicorn.rb"
2105,1ab5be572a2dff6420337cb6175a35fe88ee52f0,Upgrade Dockerfile to newer Ubuntu.,"Upgrade Dockerfile to newer Ubuntu.
","FROM ubuntu:trusty

ENV cwd /opt/pyhole

WORKDIR ${cwd}

RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential \
    ca-certificates \
    libffi-dev \
    libssl-dev \
    python-dev \
    python-setuptools \
 && rm -rf /var/lib/apt/lists/*

COPY . ${cwd}
RUN python setup.py install

EXPOSE 5000

CMD pyhole
",
2312,b93c9e72860eabf9bc2bd2e5b5d31e26e656cf11,Bumped source to 20210424-b00bb9f,"Bumped source to 20210424-b00bb9f
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210424-8798bab
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
80,aa9291f6bff30df64518bb03c896c3bf6aa625a8,Bumped source to 20210122-c775b49,"Bumped source to 20210122-c775b49
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210122-bc73317
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210122-c775b49
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
384,1905e167228c22824d838e8090268d31b8e518a3,added firmware manager submodule,"added firmware manager submodule
","FROM chriz2600/quartus-lite

RUN apt-get install -y curl
ADD files/51-usbblaster.rules /etc/udev/rules.d/51-usbblaster.rules
RUN mkdir -p /srv && cd /root && git clone https://github.com/chriz2600/DreamcastHDMI.git
ADD files/build /root/build
ADD files/build.projects /root/build.projects
ADD files/program /root/program
RUN mkdir -p /root/JIC/
ADD files/JIC.tgz /root/JIC/

","FROM chriz2600/quartus-lite

RUN apt-get install -y curl
ADD files/51-usbblaster.rules /etc/udev/rules.d/51-usbblaster.rules
RUN mkdir -p /srv && cd /root && git clone --recurse-submodules https://github.com/chriz2600/DreamcastHDMI.git
ADD files/build /root/build
ADD files/build.projects /root/build.projects
ADD files/program /root/program
RUN mkdir -p /root/JIC/
ADD files/JIC.tgz /root/JIC/

"
2228,e24a2d488fe72ba524ac3a4395e01b5a13b14b02,Add glibc,"Add glibc
","FROM rawmind/alpine-monit:0.5.20-4
MAINTAINER Sebastien LANGOUREAUX (linuxworkgroup@hotmail.com)

ENV SERVICE_NAME=minio \
    SERVICE_HOME=/opt/minio \
    SERVICE_VERSION=RELEASE.2017-01-25T03-14-52Z \
    SERVICE_CONF=/opt/minio/conf/minio-server.cfg \
    SERVICE_USER=minio \
    SERVICE_UID=10003 \
    SERVICE_GROUP=minio \
    SERVICE_GID=10003 \
    SERVICE_VOLUME=/opt/tools \
    PATH=/opt/minio/bin:${PATH}

# Install Glibc
ENV GLIBC_VERSION=""2.23-r1""
RUN \
    apk add --update -t deps wget ca-certificates \
    && cd /tmp \
    && wget https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk \
    && wget https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-bin-${GLIBC_VERSION}.apk \
    && apk add --allow-untrusted glibc-${GLIBC_VERSION}.apk glibc-bin-${GLIBC_VERSION}.apk \
    && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib/ \
    && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf \
    && apk del --purge deps \
    && rm /tmp/* /var/cache/apk/*

# Install service software
RUN apk update && apk add openrc &&\
    mkdir -p ${SERVICE_HOME}/logs ${SERVICE_HOME}/data ${SERVICE_HOME}/bin ${SERVICE_HOME}/conf && \
    addgroup -g ${SERVICE_GID} ${SERVICE_GROUP} && \
    adduser -g ""${SERVICE_NAME} user"" -D -h ${SERVICE_HOME} -G ${SERVICE_GROUP} -s /sbin/nologin -u ${SERVICE_UID} ${SERVICE_USER} &&\
    && apk del --purge deps \
    && rm /tmp/* /var/cache/apk/*

ADD https://dl.minio.io/server/minio/release/linux-amd64/archive/minio.${SERVICE_VERSION} ${SERVICE_HOME}/bin/minio

ADD root /
RUN chmod +x ${SERVICE_HOME}/bin/* \
  && chown -R ${SERVICE_USER}:${SERVICE_GROUP} ${SERVICE_HOME} /opt/monit

USER $SERVICE_USER
WORKDIR $SERVICE_HOME
VOLUME ${SERVICE_HOME}/data

EXPOSE 9000
",
2275,bdee3d84e6b166084896a840799150c04580dd87,fix(docker): remove default Docker command,"fix(docker): remove default Docker command

This was added in https://github.com/pelias/openstreetmap/pull/454 and
while it may be nice to have importer containers know how to start
themselves, it means that running `pelias compose up` (or
`docker-compose up`) in the pelias/docker repo would _always_ start all
the importers.

With that in mind, it's best to leave this off for now, and have the
`pelias` executable know to call `./bin/start` on each importer.
","# base image
FROM pelias/baseimage

# downloader apt dependencies
# note: this is done in one command in order to keep down the size of intermediate containers
RUN apt-get update && apt-get install -y bzip2 unzip && rm -rf /var/lib/apt/lists/*

# change working dir
ENV WORKDIR /code/pelias/openstreetmap
WORKDIR ${WORKDIR}

# copy package.json first to prevent npm install being rerun when only code changes
COPY ./package.json ${WORKDIR}
RUN npm install

# add local code
ADD . ${WORKDIR}

# run as the pelias user, starting with tests
USER pelias

# run tests
RUN npm test

CMD [ ""./bin/start"" ]
",
15,64052272ce2db83e222d4c1feb6fd7c9c9372619,Added a Dockerfile,"Added a Dockerfile
","# Pull base image.
FROM quay.io/verygoodsecurity/aws-cli-tools:latest 

MAINTAINER Gordon Young <gjyoung1974@gmail.com>

ENV NOKOGIRI_USE_SYSTEM_LIBRARIES=1

ADD gemrc /root/.gemrc

RUN apk update \
&& apk add ruby \
           ruby-bigdecimal \
           ruby-bundler \
           ruby-io-console \
           ruby-irb \
           ca-certificates \
           libressl \
   gnupg \
           tar \
   curl \
           bash \
   procps \
   sudo \
   graphviz \
   ttf-freefont \
&& apk add --virtual build-dependencies \
           build-base \
           ruby-dev \
           libressl-dev \
\
&& bundle config build.nokogiri --use-system-libraries \
&& bundle config git.allow_insecure irue \
&& gem install json --no-rdoc --no-ri \
\
&& gem cleanup \
&& apk del build-dependencies \
&& rm -rf /usr/lib/ruby/gems/*/cache/* \
          /var/cache/apk/* \
          /tmp/* \
          /var/tmp/*

# Add the sgviz user
RUN adduser -u 1000 -G wheel -D sgviz
RUN echo ""sgviz ALL=(ALL) NOPASSWD:ALL"" >> /etc/sudoers
WORKDIR /home/sgviz
RUN chown -R sgviz:users /home/sgviz
USER sgviz
RUN sudo cp -R /root/.aws . && sudo chown -R sgviz:users /home/sgviz/.aws
ADD gemrc /home/sgviz/.gemrc

# install RVM, Ruby, and Bundler
# Download and Build
RUN curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -
RUN curl -L -o stable.tar.gz https://github.com/rvm/rvm/archive/stable.tar.gz && tar -xvf stable.tar.gz 
RUN cd ./rvm-stable && ./scripts/install
RUN /bin/bash -l -c ""sudo gem install bundler --no-ri --no-rdoc""
RUN /bin/bash -l -c ""sudo gem install sgviz --no-ri --no-rdoc""

","# Pull base image.
FROM gjyoung1974/aws-cli-tools:latest 

MAINTAINER Gordon Young <gjyoung1974@gmail.com>

ENV NOKOGIRI_USE_SYSTEM_LIBRARIES=1

ADD gemrc /root/.gemrc

RUN apk update \
&& apk add ruby \
           ruby-bigdecimal \
           ruby-bundler \
           ruby-io-console \
           ruby-irb \
           ca-certificates \
           libressl \
   gnupg \
           tar \
   curl \
           bash \
   procps \
   sudo \
   graphviz \
   ttf-freefont \
&& apk add --virtual build-dependencies \
           build-base \
           ruby-dev \
           libressl-dev \
\
&& bundle config build.nokogiri --use-system-libraries \
&& bundle config git.allow_insecure irue \
&& gem install json --no-rdoc --no-ri \
\
&& gem cleanup \
&& apk del build-dependencies \
&& rm -rf /usr/lib/ruby/gems/*/cache/* \
          /var/cache/apk/* \
          /tmp/* \
          /var/tmp/*

# Add the sgviz user
RUN adduser -u 1000 -G wheel -D sgviz
RUN echo ""sgviz ALL=(ALL) NOPASSWD:ALL"" >> /etc/sudoers
WORKDIR /home/sgviz
RUN chown -R sgviz:users /home/sgviz
USER sgviz
RUN sudo cp -R /root/.aws . && sudo chown -R sgviz:users /home/sgviz/.aws
ADD gemrc /home/sgviz/.gemrc

# install RVM, Ruby, and Bundler
# Download and Build
RUN curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -
RUN curl -L -o stable.tar.gz https://github.com/rvm/rvm/archive/stable.tar.gz && tar -xvf stable.tar.gz 
RUN cd ./rvm-stable && ./scripts/install
RUN /bin/bash -l -c ""sudo gem install bundler --no-ri --no-rdoc""
RUN /bin/bash -l -c ""sudo gem install sgviz --no-ri --no-rdoc""

"
337,7872941a1b37726c90b7745ebd9ca5707a28d058,Bumped source to 20200413-57a1f30,"Bumped source to 20200413-57a1f30
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200413-215dd6b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200413-57a1f30
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
278,d7fe8e904e391c63d428e61926afef83c535ab35,Bumped source to 20200710-c2869e3,"Bumped source to 20200710-c2869e3
","FROM docker.pkg.github.com/dock0/service/service:20200710-dc4078e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200710-c2869e3
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2088,fb4a90fdac6b94d2a24801415036b952af7a77fa,Bumped source to 20210111-9bb3cef,"Bumped source to 20210111-9bb3cef
","FROM docker.pkg.github.com/dock0/arch/arch:20210111-961e33e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
2283,b7a323749e91c383d0b4f7a62fd7fd731822d40d,chore(craft): update version to 2.6.2994,"chore(craft): update version to 2.6.2994

+ add simplexml module
+ add zlib module
","FROM alpine:3.6

MAINTAINER Enrico Icardi ""enrico@welance.com""


# Set craft cms version
ENV CRAFT_VERSION=2.6 
ENV CRAFT_BUILD=2992
ENV CRAFT_ZIP=Craft-$CRAFT_VERSION.$CRAFT_BUILD.zip

# install php/apache2/sha256sum
RUN apk add --no-cache \
apache2 \
apache2-ssl \
php7 \
php7-apache2 \
php7-pdo \
php7-pdo_mysql \
php7-mcrypt \
php7-gd \
php7-openssl \
php7-mbstring \
php7-json \
php7-curl \
php7-phar \
php7-mysqli \
php7-session \
php7-iconv \
php7-ctype \
php7-zip \
php7-xml \
unzip \
tar \
coreutils \
wget; \
php -r ""copy('https://getcomposer.org/installer', 'composer-setup.php');""; \
php composer-setup.php --install-dir=/usr/local/bin --filename=composer; \
mkdir -p /data; mkdir -p /run/apache2; \
cd /data; \
composer require nerds-and-company/schematic:3.8.*


# create the folder if not exists or apache will not start


# Download the latest Craft (https://craftcms.com/support/download-previous-versions)
ADD https://download.buildwithcraft.com/craft/$CRAFT_VERSION/$CRAFT_VERSION.$CRAFT_BUILD/$CRAFT_ZIP /tmp/$CRAFT_ZIP

# Extract craft to webroot & remove default template files
RUN unzip -qo /tmp/$CRAFT_ZIP -d /data

# Add the environment variable settings to public/index.php
#RUN mv $WEBROOT/index.php $CRAFTROOT/index.php.original
#RUN awk '!found && /\$craftPath/ {print;print ""define(\""CRAFT_ENVIRONMENT\"", env(\""CRAFT_ENVIRONMENT\""));"";found=1;next} 1' $CRAFTROOT/index.php.original > $WEBROOT/index.php

# Cleanup
RUN rm /tmp/$CRAFT_ZIP 
#&& chown -Rf www-data:www-data $CRAFTROOT

ADD scripts /data/scripts
RUN chmod +x /data/scripts/*.sh
# this script will be used to orchestrate the startup of the containers
ADD scripts/poll-db.php /data/scripts/poll-db.php

EXPOSE 80
CMD [""/data/scripts/run-craft.sh""]

",
225,41afb5e038ab679d284d85d9653ade6c69abf673,Updated Atlassian JIRA Software master branch to latest version 9.1.1,"Updated Atlassian JIRA Software master branch to latest version 9.1.1
","FROM openjdk:8-alpine

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV JIRA_VERSION  9.2.0

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk add --no-cache curl xmlstarlet bash ttf-dejavu libc6-compat \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R daemon:daemon  ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-8.13.25.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-42.2.1.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-42.2.1.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/start-jira.sh"", ""-fg""]
","FROM openjdk:8-alpine

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV JIRA_VERSION  9.1.1

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk add --no-cache curl xmlstarlet bash ttf-dejavu libc6-compat \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R daemon:daemon  ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-8.13.26.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-42.2.1.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-42.2.1.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/start-jira.sh"", ""-fg""]
"
2185,0fbbddadfc3ebc2d9ddd3c8e3f0f5dd4fe567505,added comments,"added comments
","FROM ubuntu:latest

#ENV DEBIAN_FRONTEND=noninteractive

# Install packages
RUN apt-get update
RUN apt-get install -y \
  supervisor \
  curl \
  vim \
  wget \
  php-fpm \
  php-mysql \
  php-mcrypt \
  php-gd \
  php-memcached \
  php-curl \
  php-xdebug \
  php-dev \
  php-pear \
  php7.0-ldap \
  unzip \
  nginx \
  openssh-server \
  rsync



# installs add-apt-repository
RUN apt-get install software-properties-common -y
RUN apt-get update -y

# Create required directories
RUN mkdir -p /var/log/supervisor
RUN mkdir -p /etc/nginx
RUN mkdir -p /var/run/php


# Oracle instantclient
ADD oracle/instantclient-basic-linux.x64-12.1.0.2.0.zip /tmp/instantclient-basic-linux.x64-12.1.0.2.0.zip
ADD oracle/instantclient-sdk-linux.x64-12.1.0.2.0.zip /tmp/instantclient-sdk-linux.x64-12.1.0.2.0.zip
ADD oracle/instantclient-sqlplus-linux.x64-12.1.0.2.0.zip /tmp/instantclient-sqlplus-linux.x64-12.1.0.2.0.zip


RUN unzip /tmp/instantclient-basic-linux.x64-12.1.0.2.0.zip -d /usr/local/
RUN unzip /tmp/instantclient-sdk-linux.x64-12.1.0.2.0.zip -d /usr/local/
RUN unzip /tmp/instantclient-sqlplus-linux.x64-12.1.0.2.0.zip -d /usr/local/
RUN ln -s /usr/local/instantclient_12_1 /usr/local/instantclient
RUN ln -s /usr/local/instantclient/libclntsh.so.12.1 /usr/local/instantclient/libclntsh.so
RUN ln -s /usr/local/instantclient/sqlplus /usr/bin/sqlplus

RUN apt-get install libaio-dev -y
RUN echo 'instantclient,/usr/local/instantclient' | pecl install oci8
RUN apt-get clean -y

#Install Drush
RUN apt-get install drush -y

# Add configuration filess
ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf
ADD php.ini /etc/php/7.0/fpm/conf.d/40-custom.ini
ADD startup.sh /opt/startup.sh


RUN sed -i 's/;daemonize = yes/daemonize = no/g' /etc/php/7.0/fpm/php-fpm.conf
RUN cp -r /etc/php/7.0/fpm /tmp/fpm

# Expose volumes
VOLUME [""/etc/php/7.0/fpm"", ""/var/www"", ""/etc/nginx/sites-enabled""]


RUN service php7.0-fpm start

CMD [""/bin/bash"", ""/opt/startup.sh""]#,[""/usr/bin/supervisord""]
",
97,7a99e7c5dac4a2f73a7e4229d42fbc8bf7b4fe4f,dockerfile: upgrade to `quay.io/sameersbn/ubuntu:14.04.20151011`,"dockerfile: upgrade to `quay.io/sameersbn/ubuntu:14.04.20151011`
","FROM sameersbn/ubuntu:14.04.20150825
MAINTAINER sameer@damagehead.com

ENV WOWZA_VERSION=4.1.2 \
    WOWZA_DATA_DIR=/var/lib/wowza \
    WOWZA_LOG_DIR=/var/log/wowza

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y wget supervisor openjdk-7-jre \
 && rm -rf /var/lib/apt/lists/*

COPY install.sh /app/install.sh
RUN bash /app/install.sh

COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

EXPOSE 1935/tcp 8086/tcp 8087/tcp 8088/tcp
VOLUME [""${WOWZA_DATA_DIR}"", ""${WOWZA_LOG_DIR}""]
ENTRYPOINT [""/sbin/entrypoint.sh""]
","FROM quay.io/sameersbn/ubuntu:14.04.20151011
MAINTAINER sameer@damagehead.com

ENV WOWZA_VERSION=4.1.2 \
    WOWZA_DATA_DIR=/var/lib/wowza \
    WOWZA_LOG_DIR=/var/log/wowza

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y wget supervisor openjdk-7-jre \
 && rm -rf /var/lib/apt/lists/*

COPY install.sh /app/install.sh
RUN bash /app/install.sh

COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

EXPOSE 1935/tcp 8086/tcp 8087/tcp 8088/tcp
VOLUME [""${WOWZA_DATA_DIR}"", ""${WOWZA_LOG_DIR}""]
ENTRYPOINT [""/sbin/entrypoint.sh""]
"
2154,129501193d76ba1ede6659a555ed3570202c36e1,Avoid package version bug,"Avoid package version bug
","FROM ubuntu:trusty
MAINTAINER KIYOHIRO ADACHI <kiyoad@da2.so-net.ne.jp>

ENV REFRESHED_AT 2015-04-25

ENV DEBIAN_FRONTEND noninteractive

RUN \
  echo ""deb http://ftp.riken.jp/Linux/ubuntu/ trusty main multiverse"" >> /etc/apt/sources.list && \
  echo ""deb-src http://ftp.riken.jp/Linux/ubuntu/ trusty main multiverse"" >> /etc/apt/sources.list && \
  apt-get update && apt-get upgrade -y && \
  apt-get install -qy openssh-server xz-utils && \
  apt-get install -qy gcc make && \
  apt-get install -qy libtinfo-dev libx11-dev libxaw7-dev libgif-dev libjpeg-turbo8-dev libpng12-dev libtiff5-dev libxml2-dev librsvg2-dev libxft-dev libxpm-dev libgpm-dev libsm-dev libice-dev libxrandr-dev libxinerama-dev && \
  apt-get install -qy aspell wamerican && \
  apt-get install -qy fonts-takao fonts-takao-gothic fonts-takao-mincho fonts-takao-pgothic && \
  apt-get install -qy language-pack-ja-base language-pack-ja && \
  apt-get install -qy cmigemo libncurses5-dev exuberant-ctags && \
  apt-get install -qy sdic sdic-edict sdic-gene95 && \
  apt-get install -qy git libpython2.7-dev silversearcher-ag texinfo install-info && \
  rm -rf /var/lib/apt/lists/*

RUN \
  mkdir /var/run/sshd && \
  adduser --disabled-password --gecos ""Developer"" --uid 1000 developer && \
  mkdir /home/developer/.ssh
ADD id_rsa.pub /home/developer/.ssh/authorized_keys
RUN \
  echo ""lang en_US"" > /home/developer/.aspell.conf && \
  chown -R developer:developer /home/developer && \
  echo ""developer ALL=(ALL) NOPASSWD: ALL"" > /etc/sudoers.d/developer && \
  chmod 0440 /etc/sudoers.d/developer && \
  update-locale LANG=ja_JP.UTF-8 LANGUAGE=""ja_JP:ja"" && \
  cp -p /usr/share/zoneinfo/Asia/Tokyo /etc/localtime && \
  echo ""Asia/Tokyo"" > /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata
ENV LANG ja_jp.UTF-8

WORKDIR /home/developer
RUN \
  export emacs=emacs-24.5 && \
  wget -q -O - http://ftpmirror.gnu.org/emacs/${emacs}.tar.xz | tar xJf - && \
  mv ${emacs} .build_emacs && \
  (cd .build_emacs && ./configure && make install && make clean && cd ..)

RUN \
  export global=global-6.4 && \
  wget -q -O - http://ftpmirror.gnu.org/global/${global}.tar.gz | tar zxf - && \
  mv ${global} .build_global && \
  (cd .build_global && ./configure --with-exuberant-ctags=/usr/bin/ctags-exuberant && make install && make clean && cd ..) && \
  cp /usr/local/share/gtags/gtags.conf .globalrc && \
  export ecgtags_path=/usr/local/bin/ecgtags && \
  echo '#!/bin/bash' > ${ecgtags_path} && \
  echo 'gtags --gtagslabel=exuberant-ctags $*' >> ${ecgtags_path} && \
  chmod a+x ${ecgtags_path} && \
  export pygtags_path=/usr/local/bin/pygtags && \
  echo '#!/bin/bash' > ${pygtags_path} && \
  echo 'gtags --gtagslabel=pygments-parser $*' >> ${pygtags_path} && \
  chmod a+x ${pygtags_path}

RUN \
  mkdir .build_pip && \
  (cd .build_pip && wget -q https://bootstrap.pypa.io/get-pip.py && python get-pip.py && cd ..)

RUN \
  pip install grip virtualenv flake8 pygments && \
  export markdown_path=/usr/local/bin/markdown && \
  echo '#!/bin/bash' > ${markdown_path} && \
  echo 'set -eu' >> ${markdown_path} && \
  echo 'grip --gfm --export ${1} > /dev/null' >> ${markdown_path} && \
  echo 'cat ${1%.*}.html' >> ${markdown_path} && \
  chmod a+x ${markdown_path}

ENTRYPOINT [""/usr/sbin/sshd"", ""-D""]
EXPOSE 22
",
2166,27e72e326418609e25e8278e038df9c38b4f5f74,Container build throws 404 error on graphviz repo,"Container build throws 404 error on graphviz repo

- external graphviz repository URL is no longer valid
- drop the dependency on the external graphviz repository since
  a previous commit changed the container to use Fedora which
  provides a suitable version of graphviz

Signed-off-by: Robert Marshall <0465b3b4f3ae0103ad50d09ff86a3523700a2979@redhat.com>
","# 1. Automated build: 
# https://hub.docker.com/r/lao605/product-definition-center/builds/
# 
########################################### 
# Guide:
# 1. Use this to build a new image
# docker build -t <YOUR_NAME>/pdc <the directory your Dockerfile is located>
# 
# 2. Running the container
# 2.1 To display the log interactively (with a terminal)
# docker run -it -P -v $PWD:$PWD <YOUR_NAME>/pdc python $PWD/manage.py runserver 0.0.0.0:8000
# 
# 2.2 To run the container in daemon mode
# docker run -d -P -v $PWD:$PWD <YOUR_NAME>/pdc python $PWD/manage.py runserver 0.0.0.0:8000
# 
# 
# 3. Check the addresses
# 3.1 Check the address of the docker machine
# *For Mac OS or Windows Users*
# docker-machine env <the name of your docker machine> --> DOCKER_HOST
# 
# *For Linux Users*
# docker inspect <container_id> | grep IPAddress | cut -d '""' -f 4 --> DOCKER_HOST
# 
# 3.2 Check the mapped port of your running container
# docker ps -l --> PORTS
# 
# 4. Access it
# visit <DOCKER_HOST:PORTS> on your web browser
# 
# 5. Edit code and see changes
# save after editing code in your $PWD directory and see changes will happen in the container (changes need more time to take effect than in local env)

FROM fedora:26
MAINTAINER Zhikun Lao <zlao@redhat.com>

LABEL Description = ""product-definition-center""
LABEL Vendor = ""Red Hat""
LABEL Version = ""0.5""

# patternfly1
RUN curl -L https://copr.fedorainfracloud.org/coprs/patternfly/patternfly1/repo/fedora-26/patternfly-patternfly1-fedora-26.repo > /etc/yum.repos.d/patternfly-patternfly1-fedora-26.repo
RUN curl -L http://www.graphviz.org/graphviz-rhel.repo > /etc/yum.repos.d/graphviz-rhel.repo

# solve dependencies
RUN dnf -y upgrade && \
    dnf install -y \
        rpm-build \
        sudo \
        passwd \
        tar \
        git \
        make \
        gcc \
        libuuid-devel \
        python-devel \
        python-setuptools \
        python-pip \
        swig \
        openldap-devel \
        krb5-devel \
        koji \
        patternfly1 \
        vim-enhanced \
        'graphviz*' \
        libxml2 \
        libxslt \
        libxml2-devel \
        libxslt-devel \
        # openssh-server \
        net-tools && \
    dnf clean all

RUN echo ""123"" | passwd root --stdin

COPY requirements /tmp/requirements/
RUN pip install -r /tmp/requirements/devel.txt

# RUN echo ""Port 22"" >> /etc/ssh/sshd_config
# RUN echo ""ListenAddress 0.0.0.0"" >> /etc/ssh/sshd_config
# RUN ssh-keygen -A
# RUN systemctl enable sshd.service

# EXPOSE 8000 22
EXPOSE 8000

CMD [""/bin/bash""]
",
2224,9aefd0572273816a04db29b29185b407a2d945fb,Run docker/update.sh,"Run docker/update.sh
","FROM alpine:3.2

RUN apk add --update \
curl \
&& rm -rf /var/cache/apk/*

ENV DOCKER_VERSION 1.10.0-dev
ENV DOCKER_URL https://experimental.docker.com/builds/Linux/x86_64/docker-1.10.0-dev
ENV DOCKER_SHA256 1e92f0fb52969a2c88500ce282a4aa4f3753ff00a113dea324e9dbb976bcddc6

RUN curl -fSL ""${DOCKER_URL}"" -o /usr/local/bin/docker \
&& echo ""${DOCKER_SHA256}  /usr/local/bin/docker"" | sha256sum -c - \
&& chmod +x /usr/local/bin/docker

COPY docker-entrypoint.sh /usr/local/bin/

ENTRYPOINT [""docker-entrypoint.sh""]
CMD [""sh""]
",
89,5ec2d0249b136c35d5d65169d000c30c1c0114a6,Bumped source to 20210817-73272a1,"Bumped source to 20210817-73272a1
","FROM docker.pkg.github.com/dock0/arch/arch:20210817-964e6c8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210817-73272a1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
247,ffa308770c1538db4bab7ee390c5bd25ce6185b1,fixed,"fixed
","FROM ubuntu:16.04

MAINTAINER Michal Olejniczak <kaomanster@gmail.com>

# Run, run so far away!
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential cmake pkg-config  \
        libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev \
        libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
        libxvidcore-dev libx264-dev \
        libatlas-base-dev gfortran \
        unzip wget \
        python3.5-dev python3-pip python3-setuptools \
        && apt-get clean && rm -rf /var/lib/apt/lists/* \
        && wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.1.0.zip && unzip opencv.zip && rm opencv.zip \
        && wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.1.0.zip && unzip opencv_contrib.zip && rm opencv_contrib.zip
        && pip3 --no-cache-dir install matplotlib numpy scipy keras sklearn scikit-image imutils h5py \
        && http://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.1.0rc2-cp35-cp35m-linux_x86_64.wh \
        && cd opencv-3.1.0/ && mkdir build && cd build && cmake -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D INSTALL_C_EXAMPLES=OFF \
        -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib-3.1.0/modules \
        -D PYTHON_EXECUTABLE=/usr/bin/python3.5 .. \
        && make -j4 && make install && ldconfig && cd && rm -rf opencv*
        
CMD [""/bin/bash""]
","FROM ubuntu:16.04

MAINTAINER Michal Olejniczak <kaomanster@gmail.com>

# Run, run so far away!
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential cmake pkg-config  \
        libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev \
        libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
        libxvidcore-dev libx264-dev \
        libatlas-base-dev gfortran \
        unzip wget \
        python3.5-dev python3-pip python3-setuptools \
        && apt-get clean && rm -rf /var/lib/apt/lists/* \
        && wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.1.0.zip && unzip opencv.zip && rm opencv.zip \
        && wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.1.0.zip && unzip opencv_contrib.zip && rm opencv_contrib.zip \
        && pip3 --no-cache-dir install matplotlib numpy scipy keras sklearn scikit-image imutils h5py \
        && http://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.1.0rc2-cp35-cp35m-linux_x86_64.wh \
        && cd opencv-3.1.0/ && mkdir build && cd build && cmake -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D INSTALL_C_EXAMPLES=OFF \
        -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib-3.1.0/modules \
        -D PYTHON_EXECUTABLE=/usr/bin/python3.5 .. \
        && make -j4 && make install && ldconfig && cd / && rm -rf opencv*
        
CMD [""/bin/bash""]
"
149,abc9b30bdcc4bd942ab998cbcf1f1beef8860014,Bumped source to 20210420-1ec0a3a,"Bumped source to 20210420-1ec0a3a
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210420-4a55864
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210420-1ec0a3a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
220,7af6052b6c9166eced2b8d8fcc1a972b0ae41652,Bumped source to 20201110-83e2d64,"Bumped source to 20201110-83e2d64
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201110-bb2e701
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201110-83e2d64
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
359,527c8c7070224061db14d6956b2aa571d6e7bf23,added ruby gem scss_lint to dockerfile,"added ruby gem scss_lint to dockerfile
","FROM alpine:edge

RUN apk --no-cache add nodejs ruby git python make g++

#Copy over the default Package.json
COPY ./gulp/package.json /usr/src/app/

#Copy over the default Gulpfile
COPY ./gulp/Gulpfile.js /usr/src/app/

WORKDIR /usr/src/app/

RUN npm update && npm install && npm cache clean

#Copy over, and grant executable permission to the startup script
COPY ./entrypoint.sh /
RUN chmod +x /entrypoint.sh

#Run Startup script
ENTRYPOINT [ ""/entrypoint.sh"" ]
","FROM alpine:edge

RUN apk --no-cache add nodejs ruby git python make g++

#Copy over the default Package.json
COPY ./gulp/package.json /usr/src/app/

#Copy over the default Gulpfile
COPY ./gulp/Gulpfile.js /usr/src/app/

WORKDIR /usr/src/app/

RUN npm update \
&& npm install \
&& npm cache clean \
&& gem install scss_lint

#Copy over, and grant executable permission to the startup script
COPY ./entrypoint.sh /
RUN chmod +x /entrypoint.sh

#Run Startup script
ENTRYPOINT [ ""/entrypoint.sh"" ]
"
2251,c19e8b793e786f14de2d7ad8768872c87f917ba5,Fix order of update command during build,"Fix order of update command during build
","# Build environment for CyanogenMod
#
# VERSION               0.1

FROM ubuntu:12.04
MAINTAINER Michael Stucki <mundaun@gmx.ch>

# Newer images of ubuntu:12.04 already contain this entry, and if the line appears twice in the file, apt would throw a warning.
RUN grep -q ""universe"" /etc/apt/sources.list || echo ""deb http://archive.ubuntu.com/ubuntu precise universe"" >> /etc/apt/sources.list

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get -qq update
RUN apt-get install -y python-software-properties bsdmainutils curl file screen

RUN add-apt-repository ppa:nilarimogard/webupd8
RUN apt-get update
RUN apt-get install -y android-tools-adb android-tools-fastboot

RUN apt-get install -y bison build-essential curl flex git-core gnupg gperf libesd0-dev libncurses5-dev libsdl1.2-dev libwxgtk2.8-dev libxml2 libxml2-utils lzop openjdk-6-jdk openjdk-6-jre pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev
RUN apt-get install -y g++-multilib gcc-multilib lib32ncurses5-dev lib32readline-gplv2-dev lib32z1-dev
RUN apt-get install -y tig

RUN apt-get -qqy upgrade

# Workaround for apt-get upgrade issue described here: https://github.com/dotcloud/docker/issues/1724
# If you still have problems with upgrading this image, you most likely use an outdated base image
RUN dpkg-divert --local --rename /usr/bin/ischroot && ln -sf /bin/true /usr/bin/ischroot

RUN useradd --create-home cmbuild

RUN mkdir /home/cmbuild/bin
RUN curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > /home/cmbuild/bin/repo
RUN chmod a+x /home/cmbuild/bin/repo

RUN echo ""export PATH=${PATH}:/home/cmbuild/bin"" >> /etc/bash.bashrc
RUN echo ""export USE_CCACHE=1"" >> /etc/bash.bashrc

WORKDIR /home/cmbuild/android
VOLUME /home/cmbuild/android
",
4,1fa81ebdb8583c39f35de042669bf10f71ffbb83,Update Dockerfile to use LLVM 3.9 (#1368),"Update Dockerfile to use LLVM 3.9 (#1368)

The Dockerfile was using the apt package llvm-dev which installed llvm 3.8.0.
This change will Install the prebuilt binary of llvm 3.9.0 instead.","FROM ubuntu:16.04

RUN apt-get update \
 && apt-get install -y make g++ git \
                       zlib1g-dev libncurses5-dev libssl-dev \
                       llvm-dev libpcre2-dev \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /src/ponyc
COPY Makefile LICENSE VERSION /src/ponyc/
COPY src      /src/ponyc/src
COPY lib      /src/ponyc/lib
COPY test     /src/ponyc/test
COPY packages /src/ponyc/packages

RUN make config=release install \
 && rm -rf /src/ponyc/build

RUN mkdir /src/main
WORKDIR   /src/main

CMD ponyc
","FROM ubuntu:16.04

RUN apt-get update \
 && apt-get install -y make g++ git wget xz-utils \
                       zlib1g-dev libncurses5-dev libssl-dev \
                       libpcre2-dev \
 && rm -rf /var/lib/apt/lists/* \
 && wget http://llvm.org/releases/3.9.0/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz \
 && tar xf clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz \
 && cp -r clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04/* /usr/local \
 && rm -rf /clang*

WORKDIR /src/ponyc
COPY Makefile LICENSE VERSION /src/ponyc/
COPY src      /src/ponyc/src
COPY lib      /src/ponyc/lib
COPY test     /src/ponyc/test
COPY packages /src/ponyc/packages

RUN make \
 && make install \
 && rm -rf /src/ponyc/build

RUN mkdir /src/main
WORKDIR /src/main

CMD ponyc
"
161,67ee728371a402091946763782d525ee200ed9a0,Revert compatibility issue fix,"Revert compatibility issue fix
","# Dockerfile for EventStore
# http://geteventstore.com/

FROM debian:jessie

MAINTAINER Wadim Kruse <wadim.kruse@gmail.com>

# Install curl
RUN apt-get update && apt-get install -y curl

# Create user
RUN addgroup eventstore \
&& adduser --ingroup eventstore --disabled-password --gecos ""Database"" eventstore \
&& usermod -L eventstore

# Set environment variables
USER eventstore
ENV ES_VERSION 3.0.1
ENV ES_HOME /opt/EventStore-OSS-Linux-v$ES_VERSION
ENV EVENTSTORE_DB /data/db
ENV EVENTSTORE_LOG /data/logs

# Download and extract EventStore
USER root
RUN curl http://download.geteventstore.com/binaries/EventStore-OSS-Linux-v$ES_VERSION.tar.gz | tar xz --directory /opt \
&& chown -R eventstore:eventstore $ES_HOME

# Add volumes
RUN mkdir -p $EVENTSTORE_DB && mkdir -p $EVENTSTORE_LOG \
&& chown -R eventstore:eventstore $EVENTSTORE_DB $EVENTSTORE_LOG
VOLUME /data/db
VOLUME /data/logs

# Change working directory
WORKDIR $ES_HOME

# Fix ""exec format error""
RUN sed -i '1 c #!/bin/bash' run-node.sh

# Run
ENTRYPOINT [""./run-node.sh""]
CMD [""--help""]

# Expose the HTTP and TCP ports
EXPOSE 2113 1113

# Clean up.
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*","# Dockerfile for EventStore
# http://geteventstore.com/

FROM debian:jessie

MAINTAINER Wadim Kruse <wadim.kruse@gmail.com>

# Install curl
RUN apt-get update && apt-get install -y curl

# Create user
RUN addgroup eventstore \
&& adduser --ingroup eventstore --disabled-password --gecos ""Database"" eventstore \
&& usermod -L eventstore

# Set environment variables
USER eventstore
ENV ES_VERSION 3.0.1
ENV ES_HOME /opt/EventStore-OSS-Linux-v$ES_VERSION
ENV EVENTSTORE_DB /data/db
ENV EVENTSTORE_LOG /data/logs

# Download and extract EventStore
USER root
RUN curl http://download.geteventstore.com/binaries/EventStore-OSS-Linux-v$ES_VERSION.tar.gz | tar xz --directory /opt \
&& chown -R eventstore:eventstore $ES_HOME

# Add volumes
RUN mkdir -p $EVENTSTORE_DB && mkdir -p $EVENTSTORE_LOG \
&& chown -R eventstore:eventstore $EVENTSTORE_DB $EVENTSTORE_LOG
VOLUME $EVENTSTORE_DB
VOLUME $EVENTSTORE_LOG

# Change working directory
WORKDIR $ES_HOME

# Fix ""exec format error""
RUN sed -i '1 c #!/bin/bash' run-node.sh

# Run
ENTRYPOINT [""./run-node.sh""]
CMD [""--help""]

# Expose the HTTP and TCP ports
EXPOSE 2113 1113

# Clean up.
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*"
164,1882f56f349a0352ad97ee33fbedf6288b0a8e81,Update dockerfile,"Update dockerfile
","FROM ubuntu:14.04

# Time zone
ENV DEBIAN_FRONTEND noninteractive
RUN echo ""Europe/Oslo"" > /etc/timezone
RUN dpkg-reconfigure tzdata

# Install ca-certificates
RUN apt-get -y update
RUN apt-get -y install ca-certificates

# Add app
RUN mkdir /app
ADD bin/nrk-spotify /app/nrk-spotify
RUN chmod 0755 /app/nrk-spotify
ENTRYPOINT [""/app/nrk-spotify""]
","FROM ubuntu:14.04

# Time zone
ENV DEBIAN_FRONTEND noninteractive
RUN echo ""Europe/Oslo"" > /etc/timezone
RUN dpkg-reconfigure tzdata

# Install ca-certificates
RUN apt-get -y update
RUN apt-get -y install ca-certificates

# Add app
RUN mkdir /app
ADD nrk-spotify /app/nrk-spotify
RUN chmod 0755 /app/nrk-spotify
ENTRYPOINT [""/app/nrk-spotify""]
"
214,7bc11468cd9dbcbc17a504269cd437cd450d278d,bump dockerfile to 1.0,"bump dockerfile to 1.0
","FROM ubuntu:12.04

RUN echo deb http://packages.flapjack.io/deb precise main >> /etc/apt/sources.list
RUN apt-get update
RUN apt-get install -y --force-yes flapjack

CMD /etc/init.d/redis-flapjack start && /opt/flapjack/bin/flapjack start --no-daemonize

","FROM ubuntu:12.04

RUN echo deb http://packages.flapjack.io/deb/1.0 precise main >> /etc/apt/sources.list
RUN apt-get update
RUN apt-get install -y --force-yes flapjack

#CMD /etc/init.d/redis-flapjack start && /opt/flapjack/bin/flapjack start --no-daemonize

"
2175,aaef0d8307db8205c88dce6a9dfa7ffd2bda7d8d,fix version,"fix version
","ARG BASEIMAGES=3.15
FROM alpine:${BASEIMAGES} AS builder

LABEL maintainer=""chaiyd <chaiyd.cn@gmail.com>""

ARG YEARNING_VER=2.3.5

ARG YEARNING_URL=https://github.com/cookieY/Yearning/releases/download/${YEARNING_VER}/Yearning-${YEARNING_VER}-linux-amd64.zip
RUN wget -cO yearning.zip $YEARNING_URL && \
    unzip yearning.zip && \
    mv Yearning/* /opt


FROM alpine:${BASEIMAGES}

LABEL maintainer=""chaiyd <chaiyd.cn@gmail.com>""

RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories \
    && apk update  \
    && apk add --no-cache ca-certificates bash tree tzdata libc6-compat dumb-init \
    && cp -rf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    && echo ""Asia/Shanghai"" > /etc/timezone

COPY --from=builder /opt/Yearning /opt/Yearning
#COPY --from=builder /opt/Yearning-go/dist /opt/Yearning-go/dist
COPY --from=builder /opt/conf.toml /opt/conf.toml

WORKDIR /opt/

EXPOSE 8000

ENTRYPOINT [""/usr/bin/dumb-init"", ""--""]
CMD [""/opt/Yearning"", ""run""]
",
2229,1a6d08e527559342e60f3badf0681b7a6d08f47d,Update to 8.4.3,"Update to 8.4.3
","# Kibana 8.4.2

# This image re-bundles the Docker image from the upstream provider, Elastic.
FROM docker.elastic.co/kibana/kibana:8.4.2@sha256:7047f011c3806314f7151b3628d117edf909a2208a8fc65cc77c3d3bf5f48874
# Supported Bashbrew Architectures: amd64 arm64v8

# The upstream image was built by:
#   https://github.com/elastic/dockerfiles/tree/v8.4.2/kibana

# The build can be reproduced locally via:
#   docker build 'https://github.com/elastic/dockerfiles.git#v8.4.2:kibana'

# For a full list of supported images and tags visit https://www.docker.elastic.co

# For documentation visit https://www.elastic.co/guide/en/kibana/current/docker.html

# See https://github.com/docker-library/official-images/pull/4917 for more details.
",
2167,050f0205cfc1a50ffa603663ea2518de18933aba,Bumped source to 20201120-d60fc5f,"Bumped source to 20201120-d60fc5f
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20201120-dfaed75
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
61,66618494e5d528fead7d4194af9ab0e50d315a9e,Bump python version to 3.8,"Bump python version to 3.8

Everything else should be the same, but this version of python should 
support the newer numpy some dependencies need
","FROM python:3.7-buster

ENV RNA /rna

WORKDIR $RNA

RUN apt-get update
RUN apt-get upgrade -y

# Install all required packages
RUN apt-get install -y \
    bedtools \
    ca-certificates \
    curl \
    default-mysql-client \
    devscripts \
    freetds-dev \
    gawk \
    gcc \
    git \
    gzip \
    hmmer \
    jq \
    lftp \
    libsqlite3-dev \
    libssl1.1 \
    libxml2-utils \
    libzip-dev \
    moreutils \
    mysql-common \
    openssl \
    pandoc \
    patch \
    pgloader \
    postgresql-11 \
    postgresql-client-11 \
    procps \
    python3 \
    python3-dev \
    python3-pip \
    rsync \
    sbcl \
    tabix \
    tar \
    time \
    unzip \
    wget

# Install Infernal
RUN \
    cd $RNA/ && \
    curl -OL http://eddylab.org/infernal/infernal-1.1.2.tar.gz && \
    tar -xvzf infernal-1.1.2.tar.gz && \
    rm infernal-1.1.2.tar.gz && \
    cd infernal-1.1.2 && \
    ./configure --prefix=$RNA/infernal-1.1.2 && \
    make && \
    make install && \
    cd easel && \
    make install

# Install blat
RUN \
    wget https://users.soe.ucsc.edu/~kent/src/blatSrc35.zip && \
    unzip blatSrc35.zip && \
    rm blatSrc35.zip && \
    cd blatSrc && \
    mkdir bin && \
    make MACHTYPE=x86_64 BINDIR=$PWD/bin

# Install seqkit
RUN \
    mkdir seqkit && \
    cd seqkit && \
    wget https://github.com/shenwei356/seqkit/releases/download/v0.10.0/seqkit_linux_amd64.tar.gz && \
    tar xvf seqkit_linux_amd64.tar.gz && \
    rm seqkit_linux_amd64.tar.gz

# Install ribovore
RUN git clone https://github.com/nawrockie/epn-ofile.git && cd epn-ofile && git fetch && git fetch --tags && git checkout ribovore-0.40
RUN git clone https://github.com/nawrockie/epn-options.git && cd epn-options && git fetch && git fetch --tags && git checkout ribovore-0.40
RUN git clone https://github.com/nawrockie/epn-test.git && cd epn-test && git fetch && git fetch --tags && git checkout ribovore-0.40
RUN git clone https://github.com/nawrockie/ribovore.git && cd ribovore && git fetch && git fetch --tags && git checkout ribovore-0.40

# Install useful pip version
RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python get-pip.py

# Install python requirements
ENV RNACENTRAL_IMPORT_PIPELINE ""$RNA/rnacentral-import-pipeline""

ADD requirements.txt $RNACENTRAL_IMPORT_PIPELINE/requirements.txt
RUN pip3 install --upgrade pip
RUN pip3 install -r $RNACENTRAL_IMPORT_PIPELINE/requirements.txt

RUN python3 -m textblob.download_corpora

WORKDIR /

COPY openssl/openssl.cnf /etc/ssl/

WORKDIR $RNA

# Setup environmental variables
ENV PERL5LIB=""/usr/bin/env:$PERL5LIB""

ENV RIBOINFERNALDIR=""$RNA/infernal-1.1.2/bin""
ENV RIBODIR=""$RNA/ribovore""
ENV RIBOEASELDIR=""$RNA/infernal-1.1.2/bin""
ENV EPNOPTDIR=""$RNA/epn-options""
ENV EPNOFILEDIR=""$RNA/epn-ofile""
ENV EPNTESTDIR=""$RNA/epn-test""
ENV RIBOTIMEDIR=""/usr/bin""
ENV BIOEASELDIR=""$RNA/Bio-Easel/blib/lib:$RNA/Bio-Easel/blib/arch:$RNA/Bio-Easel:$RNA/Bio-Easel/lib""
ENV PERL5LIB=""$BIOEASELDIR:$RIBODIR:$EPNOPTDIR:$EPNOFILEDIR:$EPNTESTDIR:$PERL5LIB""

ENV PATH=""$RNA/infernal-1.1.2/bin:$PATH""
ENV PATH=""$RNA/blatSrc/bin:$PATH""
ENV PATH=""$RNA/seqkit:$PATH""
ENV PATH=""$RNACENTRAL_IMPORT_PIPELINE:$PATH""

ENTRYPOINT [""/bin/bash""]
","FROM python:3.8-buster

ENV RNA /rna

WORKDIR $RNA

RUN apt-get update
RUN apt-get upgrade -y

# Install all required packages
RUN apt-get install -y \
    bedtools \
    ca-certificates \
    curl \
    default-mysql-client \
    devscripts \
    freetds-dev \
    gawk \
    gcc \
    git \
    gzip \
    hmmer \
    jq \
    lftp \
    libsqlite3-dev \
    libssl1.1 \
    libxml2-utils \
    libzip-dev \
    moreutils \
    mysql-common \
    openssl \
    pandoc \
    patch \
    pgloader \
    postgresql-11 \
    postgresql-client-11 \
    procps \
    python3 \
    python3-dev \
    python3-pip \
    rsync \
    sbcl \
    tabix \
    tar \
    time \
    unzip \
    wget

# Install Infernal
RUN \
    cd $RNA/ && \
    curl -OL http://eddylab.org/infernal/infernal-1.1.2.tar.gz && \
    tar -xvzf infernal-1.1.2.tar.gz && \
    rm infernal-1.1.2.tar.gz && \
    cd infernal-1.1.2 && \
    ./configure --prefix=$RNA/infernal-1.1.2 && \
    make && \
    make install && \
    cd easel && \
    make install

# Install blat
RUN \
    wget https://users.soe.ucsc.edu/~kent/src/blatSrc35.zip && \
    unzip blatSrc35.zip && \
    rm blatSrc35.zip && \
    cd blatSrc && \
    mkdir bin && \
    make MACHTYPE=x86_64 BINDIR=$PWD/bin

# Install seqkit
RUN \
    mkdir seqkit && \
    cd seqkit && \
    wget https://github.com/shenwei356/seqkit/releases/download/v0.10.0/seqkit_linux_amd64.tar.gz && \
    tar xvf seqkit_linux_amd64.tar.gz && \
    rm seqkit_linux_amd64.tar.gz

# Install ribovore
RUN git clone https://github.com/nawrockie/epn-ofile.git && cd epn-ofile && git fetch && git fetch --tags && git checkout ribovore-0.40
RUN git clone https://github.com/nawrockie/epn-options.git && cd epn-options && git fetch && git fetch --tags && git checkout ribovore-0.40
RUN git clone https://github.com/nawrockie/epn-test.git && cd epn-test && git fetch && git fetch --tags && git checkout ribovore-0.40
RUN git clone https://github.com/nawrockie/ribovore.git && cd ribovore && git fetch && git fetch --tags && git checkout ribovore-0.40

# Install useful pip version
RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python get-pip.py

# Install python requirements
ENV RNACENTRAL_IMPORT_PIPELINE ""$RNA/rnacentral-import-pipeline""

ADD requirements.txt $RNACENTRAL_IMPORT_PIPELINE/requirements.txt
RUN pip3 install --upgrade pip
RUN pip3 install -r $RNACENTRAL_IMPORT_PIPELINE/requirements.txt

RUN python3 -m textblob.download_corpora

WORKDIR /

COPY openssl/openssl.cnf /etc/ssl/

WORKDIR $RNA

# Setup environmental variables
ENV PERL5LIB=""/usr/bin/env:$PERL5LIB""

ENV RIBOINFERNALDIR=""$RNA/infernal-1.1.2/bin""
ENV RIBODIR=""$RNA/ribovore""
ENV RIBOEASELDIR=""$RNA/infernal-1.1.2/bin""
ENV EPNOPTDIR=""$RNA/epn-options""
ENV EPNOFILEDIR=""$RNA/epn-ofile""
ENV EPNTESTDIR=""$RNA/epn-test""
ENV RIBOTIMEDIR=""/usr/bin""
ENV BIOEASELDIR=""$RNA/Bio-Easel/blib/lib:$RNA/Bio-Easel/blib/arch:$RNA/Bio-Easel:$RNA/Bio-Easel/lib""
ENV PERL5LIB=""$BIOEASELDIR:$RIBODIR:$EPNOPTDIR:$EPNOFILEDIR:$EPNTESTDIR:$PERL5LIB""

ENV PATH=""$RNA/infernal-1.1.2/bin:$PATH""
ENV PATH=""$RNA/blatSrc/bin:$PATH""
ENV PATH=""$RNA/seqkit:$PATH""
ENV PATH=""$RNACENTRAL_IMPORT_PIPELINE:$PATH""

ENTRYPOINT [""/bin/bash""]
"
2260,a87d48590185aa81acc5732a6133f37aeef34aae,Updated Dockerfile to cache node_modules,"Updated Dockerfile to cache node_modules
","FROM node:8.5.0

# Create app directory
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Bundle app source
COPY . /usr/src/app
RUN yarn install
RUN yarn build

ENV PORT=80

EXPOSE 5000
CMD [ ""yarn"", ""start"" ]
",
2138,687e9f7367510c03d97ecac5524cddc3af37bb93,update command on Dockerfile,update command on Dockerfile,"FROM scratch

EXPOSE 80

COPY rel/kanban_x86_64_linux /kanban

CMD [""/kanban""]
",
412,44c2d0dbf3781b6398b78c180a834deb7d96e092,fix Dockerfile,"fix Dockerfile
","FROM ubuntu:12.04
MAINTAINER Anton Romanovich <anthony.romanovich@gmail.com>

RUN echo ""deb http://archive.ubuntu.com/ubuntu precise universe"" > /etc/apt/sources.list.d/universe.list
RUN echo ""deb http://get.docker.io/ubuntu docker main"" > /etc/apt/sources.list.d/docker.list
RUN apt-get install -y curl
RUN curl -s https://get.docker.io/gpg | apt-key add -
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6E63A3B44CF61F28A8A477DE5563540C431533D8  # syslog
RUN echo ""deb http://ppa.launchpad.net/tmortensen/rsyslogv7/ubuntu precise main"" >> /etc/apt/sources.list
RUN apt-get update -qq
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y python-apt ca-certificates \
    python-pip python-dev libev4 libev-dev libssh-dev libpcre3-dev rsyslog \
    cron mysql-server redis-server git lxc-docker-0.10.0
RUN pip install supervisor
RUN useradd -m -d /home/kozmic -G docker -s /bin/bash kozmic
RUN git clone https://github.com/aromanovich/kozmic-ci.git /src/
RUN pip install -r /src/requirements/kozmic.txt
RUN pip install -r /src/requirements/tailer.txt

ADD ./files/rsyslog.conf /etc/rsyslog.d/50-default.conf
ADD ./files/rsyslog-logrotate /etc/logrotate.d/rsyslog
ADD ./files/supervisor.conf /etc/supervisor.conf
ADD ./files/kozmic-uwsgi.ini /etc/kozmic-uwsgi.ini
ADD ./files/tailer-uwsgi.ini /etc/tailer-uwsgi.ini
ADD ./files/wrapped-docker /bin/wrapped-docker
ADD ./files/crontab /etc/crontab
ADD ./files/config.py-docker /config.py-docker
ADD ./files/run.sh /run.sh
RUN chmod +x /bin/wrapped-docker /bin/docker /run.sh && \
    chown root /etc/crontab && \
    chmod 644 /etc/crontab

VOLUME /var/lib/docker
VOLUME /var/lib/mysql

ENTRYPOINT [""/run.sh""]
","FROM ubuntu:12.04
MAINTAINER Anton Romanovich <anthony.romanovich@gmail.com>

RUN echo ""deb http://archive.ubuntu.com/ubuntu precise universe"" > /etc/apt/sources.list.d/universe.list
RUN echo ""deb http://get.docker.io/ubuntu docker main"" > /etc/apt/sources.list.d/docker.list
RUN apt-get install -y curl
RUN curl -s https://get.docker.io/gpg | apt-key add -
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6E63A3B44CF61F28A8A477DE5563540C431533D8  # syslog
RUN echo ""deb http://ppa.launchpad.net/tmortensen/rsyslogv7/ubuntu precise main"" >> /etc/apt/sources.list
RUN apt-get update -qq
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y python-apt ca-certificates \
    python-pip python-dev libev4 libev-dev libssh-dev libpcre3-dev rsyslog \
    cron mysql-server redis-server git lxc-docker-0.10.0
RUN pip install supervisor
RUN useradd -m -d /home/kozmic -G docker -s /bin/bash kozmic
RUN git clone https://github.com/aromanovich/kozmic-ci.git /src/
RUN pip install -r /src/requirements/kozmic.txt
RUN pip install -r /src/requirements/tailer.txt

ADD ./files/rsyslog.conf /etc/rsyslog.d/50-default.conf
ADD ./files/rsyslog-logrotate /etc/logrotate.d/rsyslog
ADD ./files/supervisor.conf /etc/supervisor.conf
ADD ./files/kozmic-uwsgi.ini /etc/kozmic-uwsgi.ini
ADD ./files/tailer-uwsgi.ini /etc/tailer-uwsgi.ini
ADD ./files/wrapped-docker /bin/wrapped-docker
ADD ./files/crontab /etc/crontab
ADD ./files/config.py-docker /config.py-docker
ADD ./files/run.sh /run.sh
RUN chmod +x /bin/wrapped-docker /run.sh && \
    chown root /etc/crontab && \
    chmod 644 /etc/crontab

VOLUME /var/lib/docker
VOLUME /var/lib/mysql

ENTRYPOINT [""/run.sh""]
"
223,0330149f2b21567572eeefd8c51bd5cb08dd90d8,Fix wrong entrypoint in dockerfile,"Fix wrong entrypoint in dockerfile
","# Start by building the application.
FROM golang:1.13-buster as build
WORKDIR /opt
ADD . .
RUN make build

# Now copy it into our base image.
FROM gcr.io/distroless/base-debian10
COPY --from=build /opt/app /
COPY --from=busybox /bin/busybox /busybox/busybox
RUN [""/busybox/busybox"", ""--install"", ""/bin""]
ENV TZ=Asia/Chongqing
ENTRYPOINT [""/app"" ""/config.yaml""]
","# Start by building the application.
FROM golang:1.13-buster as build
WORKDIR /opt
ADD . .
RUN make build

# Now copy it into our base image.
FROM gcr.io/distroless/base-debian10
COPY --from=build /opt/app /
COPY --from=busybox /bin/busybox /busybox/busybox
RUN [""/busybox/busybox"", ""--install"", ""/bin""]
ENV TZ=Asia/Chongqing
ENTRYPOINT [""/app"", ""/config.yaml""]
"
398,76d429b63187092ec5fd453ce3c366527639098c,Update Dockerfile,"Update Dockerfile

added JAVA_HOME","FROM ubuntu

MAINTAINER Wurstmeister 

RUN echo ""deb http://archive.ubuntu.com/ubuntu precise universe"" >> /etc/apt/sources.list; apt-get update; apt-get install -y unzip  openjdk-6-jdk wget supervisor
RUN wget -q -N http://mirror.ox.ac.uk/sites/rsync.apache.org/incubator/storm/apache-storm-0.9.2-incubating/apache-storm-0.9.2-incubating.zip; unzip -o /apache-storm-0.9.2-incubating.zip -d /usr/share/; rm apache-storm-0.9.2-incubating.zip
ENV STORM_HOME /usr/share/apache-storm-0.9.2-incubating
RUN groupadd storm; useradd --gid storm --home-dir /home/storm --create-home --shell /bin/bash storm; chown -R storm:storm $STORM_HOME; mkdir /var/log/storm ; chown -R storm:storm /var/log/storm
RUN ln -s $STORM_HOME/bin/storm /usr/bin/storm  

ADD storm.yaml $STORM_HOME/conf/storm.yaml
ADD cluster.xml $STORM_HOME/logback/cluster.xml
ADD config-supervisord.sh /usr/bin/config-supervisord.sh
ADD start-supervisor.sh /usr/bin/start-supervisor.sh 

RUN echo [supervisord] | tee -a /etc/supervisor/supervisord.conf ; echo nodaemon=true | tee -a /etc/supervisor/supervisord.conf
","FROM ubuntu

MAINTAINER Wurstmeister 

RUN echo ""deb http://archive.ubuntu.com/ubuntu precise universe"" >> /etc/apt/sources.list; apt-get update; apt-get install -y unzip  openjdk-6-jdk wget supervisor
RUN wget -q -N http://mirror.ox.ac.uk/sites/rsync.apache.org/incubator/storm/apache-storm-0.9.2-incubating/apache-storm-0.9.2-incubating.zip; unzip -o /apache-storm-0.9.2-incubating.zip -d /usr/share/; rm apache-storm-0.9.2-incubating.zip
ENV STORM_HOME /usr/share/apache-storm-0.9.2-incubating
ENV JAVA_HOME /usr/lib/jvm/java-6-openjdk-amd64/
RUN groupadd storm; useradd --gid storm --home-dir /home/storm --create-home --shell /bin/bash storm; chown -R storm:storm $STORM_HOME; mkdir /var/log/storm ; chown -R storm:storm /var/log/storm
RUN ln -s $STORM_HOME/bin/storm /usr/bin/storm  

ADD storm.yaml $STORM_HOME/conf/storm.yaml
ADD cluster.xml $STORM_HOME/logback/cluster.xml
ADD config-supervisord.sh /usr/bin/config-supervisord.sh
ADD start-supervisor.sh /usr/bin/start-supervisor.sh 

RUN echo [supervisord] | tee -a /etc/supervisor/supervisord.conf ; echo nodaemon=true | tee -a /etc/supervisor/supervisord.conf
"
2181,10a5357b9ea6ab574c43153e85070566b21c1806,Dockerfile version bump,"Dockerfile version bump
","FROM debian:stretch
MAINTAINER David Personette <dperson@gmail.com>

# Install kibana
RUN export DEBIAN_FRONTEND='noninteractive' && \
    export url='https://artifacts.elastic.co/downloads/kibana' && \
    export version='5.6.2' && \
    export shasum='e9ef4f8dee16b1274d4b0399c0df938a5c99d450f8b8f8b1e56b341' && \
    groupadd -r kibana && \
    useradd -c 'Kibana' -d /opt/kibana -g kibana -r kibana && \
    apt-get update -qq && \
    apt-get install -qqy --no-install-recommends ca-certificates curl \
                procps libfontconfig libfreetype6 \
                $(apt-get -s dist-upgrade|awk '/^Inst.*ecurity/ {print $2}') &&\
    file=""kibana-${version}-linux-x86_64.tar.gz"" && \
    echo ""downloading $file ..."" && \
    curl -LOSs ${url}/$file && \
    sha512sum $file | grep -q ""$shasum"" || \
    { echo ""expected $shasum, got $(sha512sum $file)""; exit 13; } && \
    tar -xf $file -C /tmp && \
    mv /tmp/kibana-* /opt/kibana && \
    chown -Rh kibana. /opt/kibana && \
    apt-get purge -qqy ca-certificates curl && \
    apt-get autoremove -qqy && apt-get clean -qqy && \
    rm -rf /tmp/* /var/lib/apt/lists/* $file
COPY kibana.sh /usr/bin/

EXPOSE 5601

VOLUME [""/opt/kibana""]

ENTRYPOINT [""kibana.sh""]",
2297,a826f8fb929357c8604e236a11e6556baf7fac99,Update Liberty to latest version,"Update Liberty to latest version

Update liberty to the latest versions: 17.0.0_01","# (C) Copyright IBM Corporation 2015.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ibmjava:8-jre

MAINTAINER David Currie <david_currie@uk.ibm.com> (@davidcurrie)

RUN apt-get update \
    && apt-get install -y --no-install-recommends unzip \
    && rm -rf /var/lib/apt/lists/*

# Install WebSphere Liberty
ENV LIBERTY_VERSION 16.0.0_04
ARG LIBERTY_URL
ARG DOWNLOAD_OPTIONS=""""
RUN LIBERTY_URL=${LIBERTY_URL:-$(wget -q -O - https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/downloads/wlp/index.yml  | grep $LIBERTY_VERSION -A 6 | sed -n 's/\s*kernel:\s//p' | tr -d '\r' )}  \
    && wget $DOWNLOAD_OPTIONS $LIBERTY_URL -U UA-IBM-WebSphere-Liberty-Docker -O /tmp/wlp.zip \
    && unzip -q /tmp/wlp.zip -d /opt/ibm \
    && rm /tmp/wlp.zip
ENV PATH=/opt/ibm/wlp/bin:$PATH

# Set Path Shortcuts
ENV LOG_DIR=/logs \
    WLP_OUTPUT_DIR=/opt/ibm/wlp/output
RUN mkdir /logs \
    && ln -s $WLP_OUTPUT_DIR/defaultServer /output \
    && ln -s /opt/ibm/wlp/usr/servers/defaultServer /config

# Configure WebSphere Liberty
RUN /opt/ibm/wlp/bin/server create \
    && rm -rf $WLP_OUTPUT_DIR/.classCache /output/workarea
COPY docker-server /opt/ibm/docker/
EXPOSE 9080 9443

CMD [""/opt/ibm/docker/docker-server"", ""run"", ""defaultServer""]
",
76,6dcbb372d51cf5227f16c387c5658c6db3b73a28,Bump Dockerfile to 10.1.0-755-e9f0cde8,"Bump Dockerfile to 10.1.0-755-e9f0cde8
","FROM stellar/base:latest

MAINTAINER Mat Schaffer <mat@stellar.org>

ENV STELLAR_CORE_VERSION 10.1.0-754-e412f56f

EXPOSE 11625
EXPOSE 11626

VOLUME /data
VOLUME /postgresql-unix-sockets
VOLUME /heka

ADD install /
RUN /install

ADD heka /heka
ADD confd /etc/confd
ADD utils /utils
ADD start /

CMD [""/start""]
","FROM stellar/base:latest

MAINTAINER Mat Schaffer <mat@stellar.org>

ENV STELLAR_CORE_VERSION 10.1.0-755-e9f0cde8

EXPOSE 11625
EXPOSE 11626

VOLUME /data
VOLUME /postgresql-unix-sockets
VOLUME /heka

ADD install /
RUN /install

ADD heka /heka
ADD confd /etc/confd
ADD utils /utils
ADD start /

CMD [""/start""]
"
2130,8e07169967058da674579ff215453b76376f1e4f,Bumped source to 20200319-e4c1911,"Bumped source to 20200319-e4c1911
","FROM docker.pkg.github.com/dock0/service/service:20200319-be7623a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
172,6643296faf98e35dcfff755a4e99df0c646a6f8e,Update docker file to not kill existing,"Update docker file to not kill existing
","FROM phusion/baseimage:0.9.11
MAINTAINER Jack Lindamood <jack@signalfuse.com>

ENV DEBIAN_FRONTEND noninteractive

# Clean/refresh apt-get
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN apt-get update
RUN apt-get -y upgrade

# Install dependencies
RUN apt-get -y install golang git mercurial curl

RUN mkdir -p /opt/sfproxy

# Invalidate cache so ""go get"" gets the latest code
RUN mkdir -p /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/

ADD config /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/config
ADD core /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/core
ADD forwarder /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/forwarder
ADD listener /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/listener
ADD protocoltypes /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/protocoltypes

ADD signalfxproxy.go /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/
ADD signalfxproxy_test.go /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/

ADD travis_check.sh /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/

ADD lint_all.sh /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/
ADD vet_all.sh /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/
ADD format_all.sh /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/

ENV GOPATH /opt/sfproxy
RUN go get github.com/golang/lint/golint
RUN go get code.google.com/p/go.tools/cmd/vet
RUN go get github.com/stretchr/testify/mock
RUN go get code.google.com/p/go.tools/cmd/cover
RUN go env
RUN go get -u ./...

RUN export PATH=$GOPATH/bin:$PATH
RUN /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/travis_check.sh

# Add run command
VOLUME /var/log/sfproxy
VOLUME /var/config/sfproxy
USER root
CMD [""/opt/sfproxy/bin/signalfxproxy"", ""-configfile"", ""/var/config/sfproxy/sfdbproxy.conf"", ""-signalfxproxypid"", ""/var/config/sfproxy/sfproxy.pid"" ,""-log_dir"", ""/var/log/sfproxy""]
","FROM phusion/baseimage:0.9.11
MAINTAINER Jack Lindamood <jack@signalfuse.com>

ENV DEBIAN_FRONTEND noninteractive

# Clean/refresh apt-get
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN apt-get update
RUN apt-get -y upgrade

# Install dependencies
RUN apt-get -y install golang git mercurial curl

RUN mkdir -p /opt/sfproxy

# Invalidate cache so ""go get"" gets the latest code
RUN mkdir -p /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/

ADD config /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/config
ADD core /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/core
ADD forwarder /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/forwarder
ADD listener /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/listener
ADD protocoltypes /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/protocoltypes

ADD signalfxproxy.go /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/
ADD signalfxproxy_test.go /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/

ADD travis_check.sh /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/

ADD lint_all.sh /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/
ADD vet_all.sh /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/
ADD format_all.sh /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/

ENV GOPATH /opt/sfproxy
RUN go get github.com/golang/lint/golint
RUN go get code.google.com/p/go.tools/cmd/vet
RUN go get github.com/stretchr/testify/mock
RUN go get code.google.com/p/go.tools/cmd/cover
RUN go env
RUN go get ./...

RUN export PATH=$GOPATH/bin:$PATH
RUN /opt/sfproxy/src/github.com/signalfuse/signalfxproxy/travis_check.sh

# Add run command
VOLUME /var/log/sfproxy
VOLUME /var/config/sfproxy
USER root
CMD [""/opt/sfproxy/bin/signalfxproxy"", ""-configfile"", ""/var/config/sfproxy/sfdbproxy.conf"", ""-signalfxproxypid"", ""/var/config/sfproxy/sfproxy.pid"" ,""-log_dir"", ""/var/log/sfproxy""]
"
388,7447cefec7f34e7af27da38070875a5cec8827d3,Bumped source to 20210807-b064247,"Bumped source to 20210807-b064247
","FROM docker.pkg.github.com/dock0/arch/arch:20210807-3e34b9c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20210807-b064247
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
410,4d8831a8589a13d580792ec253665ca7b551cc9b,Bumped source to 20210310-d7a680d,"Bumped source to 20210310-d7a680d
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210309-426b957
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210310-d7a680d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
94,085c1654b1c63736384834b6084676ea7b5096be,Bumped source to 20200619-d7233b1,"Bumped source to 20200619-d7233b1
","FROM docker.pkg.github.com/dock0/service/service:20200618-8fb93f0
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200619-d7233b1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
51,f8e66b4e7e386a343fe96ef3336e874cab4dd53b,Update AWS CLI version to 1.14.22,"Update AWS CLI version to 1.14.22
","FROM python:3.6-slim
MAINTAINER Nikolay Rybak <mykola.rybak@gmail.com>

ARG BUILD_DATE
ARG VCS_REF

LABEL org.label-schema.schema-version=""1.0"" \
      org.label-schema.name=""AWS CLI"" \
      org.label-schema.url=""https://aws.amazon.com/cli/"" \
      org.label-schema.vcs-url=""https://github.com/GreyTeardrop/docker-awscli"" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.version=""1.14.21""

RUN \
    apt-get update && \
    apt-get install -y --no-install-recommends groff-base && \
    mkdir -p /aws && \
    pip install --upgrade awscli==1.14.21 && \
    rm -rf /root/.cache && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /aws
ENTRYPOINT [""aws""]
","FROM python:3.6-slim
MAINTAINER Nikolay Rybak <mykola.rybak@gmail.com>

ARG BUILD_DATE
ARG VCS_REF

LABEL org.label-schema.schema-version=""1.0"" \
      org.label-schema.name=""AWS CLI"" \
      org.label-schema.url=""https://aws.amazon.com/cli/"" \
      org.label-schema.vcs-url=""https://github.com/GreyTeardrop/docker-awscli"" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.version=""1.14.22""

RUN \
    apt-get update && \
    apt-get install -y --no-install-recommends groff-base && \
    mkdir -p /aws && \
    pip install --upgrade awscli==1.14.22 && \
    rm -rf /root/.cache && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /aws
ENTRYPOINT [""aws""]
"
2121,933d350409e3e7c04456b12988e9de3879d1b005,update the ppa to shogun-team nightly in shogun runtime env,"update the ppa to shogun-team nightly in shogun runtime env
","FROM ubuntu:14.04
MAINTAINER shogun@shogun-toolbox.org

RUN apt-get update && apt-get install -qq software-properties-common lsb-release
RUN add-apt-repository ""deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) multiverse""
RUN add-apt-repository ppa:shogun-daily/ppa
RUN apt-get update -qq
RUN apt-get upgrade -y

# install shogun
RUN apt-get install -qq --force-yes --no-install-recommends libshogun17
",
12,3122ec38c6f8aca32c1e1a64606f07e56224c3a8,Adapt env variable for postgres version,"Adapt env variable for postgres version

","# Adapted from mdillon/postgis:9.5
# and https://github.com/docker-library/postgres/blob/master/9.5/docker-entrypoint.sh
#FROM postgres:9.5
FROM tamboraorg/crepostgres:2011.0
MAINTAINER Michael Kahle <michael.kahle@yahoo.de>

ENV POSTGIS_MAJOR 2.5
#ENV POSTGIS_MAJOR 2.3
#ENV POSTGIS_VERSION 2.3.2+dfsg-1~exp2.pgdg80+1
#ENV POSTGIS_VERSION 2.3.2+dfsg-1~exp2.pgdg16.04+1
ENV POSTGIS_VERSION 2.5.1

USER root

#RUN add-apt-repository ""deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main universe restricted multiverse""
RUN add-apt-repository ppa:ubuntugis/ppa

RUN apt-get update 
RUN apt-get install -y --no-install-recommends \
           postgresql-$PG_VERSION-postgis-$POSTGIS_MAJOR 
RUN apt-get install -y --no-install-recommends \
           postgresql-$PG_VERSION-postgis-$POSTGIS_MAJOR-scripts 
RUN apt-get install -y --no-install-recommends \
           postgis 
RUN rm -rf /var/lib/apt/lists/*

USER postgres

COPY cre /cre
WORKDIR /cre/

#RUN mkdir -p /docker-entrypoint-initdb.d
#COPY ./initdb-postgis.sh /docker-entrypoint-initdb.d/postgis.sh
#COPY ./update-postgis.sh /usr/local/bin
","# Adapted from mdillon/postgis:9.5
# and https://github.com/docker-library/postgres/blob/master/9.5/docker-entrypoint.sh
#FROM postgres:9.5
FROM tamboraorg/crepostgres:2011.0
MAINTAINER Michael Kahle <michael.kahle@yahoo.de>

ENV POSTGIS_MAJOR 2.5
#ENV POSTGIS_MAJOR 2.3
#ENV POSTGIS_VERSION 2.3.2+dfsg-1~exp2.pgdg80+1
#ENV POSTGIS_VERSION 2.3.2+dfsg-1~exp2.pgdg16.04+1
ENV POSTGIS_VERSION 2.5.1

USER root

#RUN add-apt-repository ""deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main universe restricted multiverse""
RUN add-apt-repository ppa:ubuntugis/ppa

RUN apt-get update 
RUN apt-get install -y --no-install-recommends \
           postgresql-$POSTGRES_VERSION-postgis-$POSTGIS_MAJOR 
RUN apt-get install -y --no-install-recommends \
           postgresql-$POSTGRES_VERSION-postgis-$POSTGIS_MAJOR-scripts 
RUN apt-get install -y --no-install-recommends \
           postgis 
RUN rm -rf /var/lib/apt/lists/*

USER postgres

COPY cre /cre
WORKDIR /cre/

#RUN mkdir -p /docker-entrypoint-initdb.d
#COPY ./initdb-postgis.sh /docker-entrypoint-initdb.d/postgis.sh
#COPY ./update-postgis.sh /usr/local/bin
"
177,f4f8ed90bf1038074bf4c53bb11fec2e3ac9b121,Bumped source to 20200319-9a625c8,"Bumped source to 20200319-9a625c8
","FROM docker.pkg.github.com/dock0/arch/arch:20200319-7c88c8b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200319-9a625c8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
196,728a4c5b953cc62cc52b55f5f620b8b75d67bf2e,Bumped source to 20221117-034639b,"Bumped source to 20221117-034639b
","FROM ghcr.io/dock0/arch:20221117-beef06a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20221117-034639b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2193,6619f63c72e3d5c88c33fe408f61397499c4c761,using version 2.070.2,"using version 2.070.2
","FROM ubuntu:16.04

MAINTAINER Stefan Rohe <think@hotmail.de>

ENV \
  COMPILER=dmd \
  COMPILER_VERSION=2.070.1

RUN apt-get update && apt-get install -y curl build-essential \
 && curl -fsS -o /tmp/install.sh https://dlang.org/install.sh \
 && bash /tmp/install.sh -p /dlang install -s ""${COMPILER}-${COMPILER_VERSION}"" \
 && rm /tmp/install.sh \
 && apt-get auto-remove -y curl build-essential \
 && apt-get install -y gcc \
 && rm -rf /var/cache/apt \
 && rm -rf /dlang/${COMPILER}-*/linux/bin32 \
 && rm -rf /dlang/${COMPILER}-*/linux/lib32 \
 && rm -rf /dlang/${COMPILER}-*/html \
 && rm -rf /dlang/dub-1.0.0/dub.tar.gz

ENV \
  PATH=/dlang/${COMPILER}-${COMPILER_VERSION}/linux/bin64:${PATH} \
  LD_LIBRARY_PATH=/dlang/${COMPILER}-${COMPILER_VERSION}/linux/lib64 \
  LIBRARY_PATH=/dlang/${COMPILER}-${COMPILER_VERSION}/linux/lib64 \
  PS1=""(${COMPILER}-${COMPILER_VERSION}) \\u@\\h:\\w\$""

RUN cd /tmp \
 && echo 'void main() {import std.stdio; stdout.writeln(""it works""); }' > test.d \
 && dmd test.d \
 && ./test && rm test*

WORKDIR /src

ENV GOSU_VERSION 1.9
RUN apt-get update \
 && apt-get install -y --no-install-recommends ca-certificates wget \
 && wget -O /usr/local/bin/gosu \
        ""https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-$(dpkg --print-architecture)"" \
 && wget -O /usr/local/bin/gosu.asc \
        ""https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-$(dpkg --print-architecture).asc"" \
 && export GNUPGHOME=""$(mktemp -d)"" \
 && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
 && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
 && rm -r ""${GNUPGHOME}"" /usr/local/bin/gosu.asc \
 && chmod +x /usr/local/bin/gosu \
 && gosu nobody true \
 && apt-get auto-remove -y wget \
 && rm -rf /var/lib/apt/lists/* \
 && chmod 755 -R /dlang

COPY entrypoint.sh /
RUN chmod +x /entrypoint.sh

ENTRYPOINT [""/entrypoint.sh""]
CMD [""${COMPILER}""]
",
274,38846d6a9e7cb6b7a7fbfd3767db372b5469702b,Bumped source to 20201013-48ea5a5,"Bumped source to 20201013-48ea5a5
","FROM docker.pkg.github.com/dock0/arch/arch:20201013-5117106
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20201013-48ea5a5
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
73,d7b5ddc36d13d1fc3d7ad969b688887caad47643,Bumped source to 20200814-238b0da,"Bumped source to 20200814-238b0da
","FROM docker.pkg.github.com/dock0/arch/arch:20200814-ade2558
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200814-238b0da
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
363,7c284a3a83bfeeac91e7cc365a7f6baaf8cac7da,Updated Ubuntu and added a volume for /etc/sensu,"Updated Ubuntu and added a volume for /etc/sensu
","FROM ubuntu:trusty
MAINTAINER John Dilts <john.dilts@enstratius.com>

RUN apt-get update && apt-get install -y wget openssl

RUN useradd -d /home/sensu -m -s /bin/bash sensu
RUN echo sensu:sensu | chpasswd

ADD sensu_ca sensu_ca
ADD ssl_certs.sh /tmp/
RUN /tmp/ssl_certs.sh generate

ADD install-sensu.sh /tmp/
RUN /tmp/install-sensu.sh

ADD supervisor.conf /etc/supervisor/conf.d/sensu.conf
ADD sensu-run.sh /tmp/sensu-run.sh

VOLUME /var/log/sensu

EXPOSE 4567
EXPOSE 5672
EXPOSE 6379
EXPOSE 3000

CMD [""/tmp/sensu-run.sh""]
","FROM ubuntu:latest
MAINTAINER John Dilts <john.dilts@enstratius.com>

RUN apt-get update && apt-get install -y wget openssl

RUN useradd -d /home/sensu -m -s /bin/bash sensu
RUN echo sensu:sensu | chpasswd

ADD sensu_ca sensu_ca
ADD ssl_certs.sh /tmp/
RUN /tmp/ssl_certs.sh generate

ADD install-sensu.sh /tmp/
RUN /tmp/install-sensu.sh

ADD supervisor.conf /etc/supervisor/conf.d/sensu.conf
ADD sensu-run.sh /tmp/sensu-run.sh

VOLUME /var/log/sensu
VOLUME /etc/sensu

EXPOSE 4567
EXPOSE 5672
EXPOSE 6379
EXPOSE 3000

CMD [""/tmp/sensu-run.sh""]
"
2304,7e94189646592fad30f54e1c5eb74b4d7758eaa9,- fix exposed ports,"- fix exposed ports
","FROM mediawiki:stable

# ope-wsl - Offline version of Washington State Library resource wiki
# Build with docker build -t ope-wsl .

#INSTRUCTIONS
# Build the container and run it with the docker-compose command
# Sync offline copies of website content into volume


# To copy to offline server use the setup tool

MAINTAINER Ray Pulsipher <ray@cmagic.biz>
LABEL Description=""Washington State Library offline resource wiki - Image for Open Prison Education"" Vendor=""openprisoneducation.com"" Version=""0.1""


VOLUME [""/var/www/html/sites""]
EXPOSE 80
",
98,5c68019cf7fcc81ffc229c0a042f859ba8c54322,Bumped source to 20200417-f67c30b,"Bumped source to 20200417-f67c30b
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200417-4ab5ac2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200417-f67c30b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
358,64eb10aa3ec4bf566cf446277d1b0a5c530e4a9f,Bumped source to 20210717-656a897,"Bumped source to 20210717-656a897
","FROM docker.pkg.github.com/dock0/service/service:20210717-dcfe22d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20210717-656a897
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
298,bd89aebe29cfad5d234b1d8c15fec73f25037089,add hadoop-base dockerfile,"add hadoop-base dockerfile
","FROM lsw1991abc/sshd:0.1

LABEL maintainer=""lsw1991abc@gmail.com""

USER root

ARG DISTRO_NAME=hadoop-2.7.4

# COPY $DISTRO_NAME.tar.gz /opt/
RUN wget -o /opt/$DISTRO_NAME.tar.gz http://apache.fayea.com/hadoop/common/$DISTRO_NAME/$DISTRO_NAME.tar.gz
RUN tar -xzf /opt/$DISTRO_NAME.tar.gz -C /opt/ && rm /opt/$DISTRO_NAME.tar.gz && chown -R root:root /opt/$DISTRO_NAME

# 环境变量
ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-amd64 
ENV HADOOP_HOME /opt/$DISTRO_NAME 
ENV HADOOP_MAPRED_HOME $HADOOP_HOME 
ENV HADOOP_COMMON_HOME $HADOOP_HOME 
ENV HADOOP_HDFS_HOME $HADOOP_HOME 
ENV YARN_HOME $HADOOP_HOME 
ENV HADOOP_COMMON_LIB_NATIVE_DIR $HADOOP_HOME/lib/native 
ENV HADOOP_INSTALL $HADOOP_HOME

ENV PATH $PATH:$JAVA_HOME/bin:$HADOOP_HOME/sbin:$HADOOP_HOME/bin

# Hdfs ports
EXPOSE 50010 50020 50070 50075 50090 8020 9000
# Mapred ports
EXPOSE 10020 19888
#Yarn ports
EXPOSE 8030 8031 8032 8033 8040 8042 8088
#Other ports
EXPOSE 49707 2122

COPY docker-entrypoint.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]","FROM lsw1991abc/sshd:0.1

LABEL maintainer=""lsw1991abc@gmail.com""

USER root

ARG DISTRO_NAME=hadoop-2.7.4

# COPY $DISTRO_NAME.tar.gz /opt/
RUN wget -P /opt/ http://apache.fayea.com/hadoop/common/$DISTRO_NAME/$DISTRO_NAME.tar.gz
RUN tar -xzf /opt/$DISTRO_NAME.tar.gz -C /opt/ && rm /opt/$DISTRO_NAME.tar.gz && chown -R root:root /opt/$DISTRO_NAME

# 环境变量
ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-amd64 
ENV HADOOP_HOME /opt/$DISTRO_NAME 
ENV HADOOP_MAPRED_HOME $HADOOP_HOME 
ENV HADOOP_COMMON_HOME $HADOOP_HOME 
ENV HADOOP_HDFS_HOME $HADOOP_HOME 
ENV YARN_HOME $HADOOP_HOME 
ENV HADOOP_COMMON_LIB_NATIVE_DIR $HADOOP_HOME/lib/native 
ENV HADOOP_INSTALL $HADOOP_HOME

ENV PATH $PATH:$JAVA_HOME/bin:$HADOOP_HOME/sbin:$HADOOP_HOME/bin

# Hdfs ports
EXPOSE 50010 50020 50070 50075 50090 8020 9000
# Mapred ports
EXPOSE 10020 19888
#Yarn ports
EXPOSE 8030 8031 8032 8033 8040 8042 8088
#Other ports
EXPOSE 49707 2122

COPY docker-entrypoint.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]"
240,ba196ce7d271ef5d936156d5115617d037fa6034,Couldn't do a docker build so changed from 16:04 to latest then it worked. Also now running update and install together with && as suggested by docker best practice.,"Couldn't do a docker build so changed from 16:04 to latest then it worked. Also now running update and install together with && as suggested by docker best practice.
","############################################################
# Dockerfile to build 16S rRNA diversity analysis
# Based on Ubuntu 16.04
############################################################

# Set the base image to Ubuntu
FROM ubuntu:16.04

# File Author / Maintainer
MAINTAINER Long Yee ""long@sanbi.ac.za""

# Update the repository sources list
RUN apt-get update
RUN apt-get upgrade -y

WORKDIR /root

################## BEGIN INSTALLATION ######################
# Install Basic tools
RUN apt-get install -y wget unzip libfindbin-libs-perl

# Install Java 8
# Ref: https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04
RUN apt-get install -y default-jre

# Install FastQC
# Ref: http://www.bioinformatics.babraham.ac.uk/projects/fastqc/INSTALL.txt
RUN wget http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.5.zip
RUN unzip fastqc_v0.11.5.zip
RUN mv FastQC/ /opt/
RUN chmod +x /opt/FastQC/fastqc
RUN ln -s /opt/FastQC/fastqc /usr/local/bin/fastqc
##################### INSTALLATION END #####################

#ENTRYPOINT [""/usr/local/bin/fastqc""]

#CMD [""--help""]
","############################################################
# Dockerfile to build 16S rRNA diversity analysis
############################################################

# Set the base image to Ubuntu
FROM ubuntu:latest

# File Author / Maintainer
MAINTAINER Long Yee ""long@sanbi.ac.za""

WORKDIR /root

################## BEGIN INSTALLATION ######################
# Install Basic tools
RUN apt-get update && apt-get install -y wget unzip libfindbin-libs-perl

# Install Java 8
# Ref: https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04
RUN apt-get install -y default-jre

# Install FastQC
# Ref: http://www.bioinformatics.babraham.ac.uk/projects/fastqc/INSTALL.txt
RUN wget http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.5.zip
RUN unzip fastqc_v0.11.5.zip
RUN mv FastQC/ /opt/
RUN chmod +x /opt/FastQC/fastqc
RUN ln -s /opt/FastQC/fastqc /usr/local/bin/fastqc
##################### INSTALLATION END #####################

#ENTRYPOINT [""/usr/local/bin/fastqc""]

#CMD [""--help""]
"
2156,6b6745df3012cdd34794f859f921a01a16acced1,Add missing php modules,"Add missing php modules
","FROM ubuntu
MAINTAINER Samir L. Boulema <sboulema@gmail.com>

RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
  nginx supervisor php7.0-fpm php7.0-cli php7.0-curl php7.0-gd php7.0-json \
  php7.0-pgsql php7.0-mysql php7.0-mcrypt && apt-get clean && rm -rf /var/lib/apt/lists/* && mkdir -p /var/run/php

# enable the mcrypt module
RUN phpenmod -v 7.0 mcrypt

# add ttrss as the only nginx site
ADD ttrss.nginx.conf /etc/nginx/sites-available/ttrss
RUN ln -s /etc/nginx/sites-available/ttrss /etc/nginx/sites-enabled/ttrss
RUN rm /etc/nginx/sites-enabled/default

# install ttrss and patch configuration
WORKDIR /var/www
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl --no-install-recommends && rm -rf /var/lib/apt/lists/* \
    && curl -SL https://tt-rss.org/gitlab/fox/tt-rss/repository/archive.tar.gz?ref=master | tar xzC /var/www --strip-components 1 \
    && apt-get purge -y --auto-remove curl \
    && chown www-data:www-data -R /var/www
RUN cp config.php-dist config.php

# expose only nginx HTTP port
EXPOSE 80

# complete path to ttrss
ENV SELF_URL_PATH http://localhost

# expose default database credentials via ENV in order to ease overwriting
ENV DB_NAME ttrss
ENV DB_USER ttrss
ENV DB_PASS ttrss

# always re-configure database with current ENV when RUNning container, then monitor all services
ADD configure-db.php /configure-db.php
ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf
CMD php /configure-db.php && supervisord -c /etc/supervisor/conf.d/supervisord.conf",
2266,4f308b5c61886221ecdfae0eb072a216eca36512,Add PuDB to Dockerfile,"Add PuDB to Dockerfile
","FROM ubuntu:14.04
MAINTAINER HelloLily

RUN apt-get update

RUN apt-get install -y \
    python2.7-dev \
    python-pip \
    postgresql \
    postgresql-server-dev-9.3 \
    libxml2-dev \
    libxslt1-dev \
    libncurses5-dev \
    rsync

RUN useradd docker
RUN echo ""ALL ALL = (ALL) NOPASSWD: ALL"" >> /etc/sudoers
WORKDIR /home/docker
ENV HOME /home/docker

ADD requirements.txt $HOME/requirements.txt
RUN pip install -r $HOME/requirements.txt

# Workaround for IncompleteRead error while installing requirements-dev.txt.
# See: https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1306991
RUN rm -rf /usr/local/lib/python2.7/dist-packages/requests* && easy_install requests==2.3.0

ADD requirements-dev.txt $HOME/requirements-dev.txt
RUN pip install -r $HOME/requirements-dev.txt
RUN rm $HOME/requirements.txt $HOME/requirements-dev.txt

USER docker

ENV DEBUG 1
ENV SECRET_KEY abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmn
ENV DATABASE_URL postgres://hellolily:@db/hellolily
ENV REDISTOGO_URL redis://redis:6379
ENV MULTI_TENANT 1
ENV BROKER_HOST rabbit
ENV SEARCHBOX_SSL_URL http://es:9200

WORKDIR /home/docker/hellolily

CMD /bin/bash
",
103,1adf6734d4631d78f9cc59b83cfbca8c7a2079cf,update 0.13.6,"update 0.13.6
","FROM alpine:edge
MAINTAINER Sven Walter <sven@wltr.eu>

ARG SYNCTHING_VERSION=0.13.5

ENV SYNCTHING_DATA=/data
ENV SYNCTHING_HOME=/syncthing

ADD resources/syncthing.sh /syncthing/syncthing.sh

RUN set -x \
 && apk add --no-cache bash \
 && apk add --no-cache \
--repository http://dl-3.alpinelinux.org/alpine/edge/testing/ \
xmlstarlet \
 && apk add --no-cache --virtual .build-deps \
    curl \
        ca-certificates \
 && mkdir -p ${SYNCTHING_DATA} \
 && mkdir -p ${SYNCTHING_HOME} \
 && curl -L -o syncthing.tar.gz https://github.com/syncthing/syncthing/releases/download/v$SYNCTHING_VERSION/syncthing-linux-amd64-v$SYNCTHING_VERSION.tar.gz \
 && tar -xzvf syncthing.tar.gz \
 && rm -f syncthing.tar.gz \
 && mv syncthing-linux-amd64-v* $SYNCTHING_HOME/syncthing \
 && rm -rf $SYNCTHING_HOME/syncthing/etc \
 && rm -rf $SYNCTHING_HOME/syncthing/*.pdf \
 && chmod 770 /syncthing/syncthing.sh \
 && apk del .build-deps

WORKDIR $SYNCTHING_HOME
VOLUME [""$SYNCTHING_HOME""]
ENTRYPOINT [""/syncthing/syncthing.sh""]
","FROM alpine:edge
MAINTAINER Sven Walter <sven@wltr.eu>

ARG SYNCTHING_VERSION=0.13.6

ENV SYNCTHING_DATA=/data
ENV SYNCTHING_HOME=/syncthing

ADD resources/syncthing.sh /syncthing/syncthing.sh

RUN set -x \
 && apk add --no-cache bash \
 && apk add --no-cache \
--repository http://dl-3.alpinelinux.org/alpine/edge/testing/ \
xmlstarlet \
 && apk add --no-cache --virtual .build-deps \
    curl \
        ca-certificates \
 && mkdir -p ${SYNCTHING_DATA} \
 && mkdir -p ${SYNCTHING_HOME} \
 && curl -L -o syncthing.tar.gz https://github.com/syncthing/syncthing/releases/download/v$SYNCTHING_VERSION/syncthing-linux-amd64-v$SYNCTHING_VERSION.tar.gz \
 && tar -xzvf syncthing.tar.gz \
 && rm -f syncthing.tar.gz \
 && mv syncthing-linux-amd64-v* $SYNCTHING_HOME/syncthing \
 && rm -rf $SYNCTHING_HOME/syncthing/etc \
 && rm -rf $SYNCTHING_HOME/syncthing/*.pdf \
 && chmod 770 /syncthing/syncthing.sh \
 && apk del .build-deps

WORKDIR $SYNCTHING_HOME
VOLUME [""$SYNCTHING_HOME""]
ENTRYPOINT [""/syncthing/syncthing.sh""]
"
30,e13800e616dd398d8cf10cdbcd36a2a03693638a,Fix spruce link in dockerimage,"Fix spruce link in dockerimage

Signed-off-by: Alan Moran <c0e0381e40435974913b100e98533438ffac68dd@allstate.com>
","FROM ruby:2.3.0

ENV GEM_NAME ops_manager_cli
ENV GEM_VERSION 0.7.3
ENV OVFTOOL_VERSION 4.1.0-2459827
ENV OVFTOOL_INSTALLER VMware-ovftool-${OVFTOOL_VERSION}-lin.x86_64.bundle
ARG DOWNLOAD_URL

# ================== Installs OVF tools ==============
RUN echo $DOWNLOAD_URL
RUN wget -v ${DOWNLOAD_URL} \
  && sh ${OVFTOOL_INSTALLER} -p /usr/local --eulas-agreed --required \
  && rm -f ${OVFTOOL_INSTALLER}*

# ================== Installs Spruce ==============
RUN wget -v --no-check-certificate https://github.com/geofffranks/spruce/releases/download/v1.13.1/spruce-linux-amd64 \
    && chmod +x spruce-linux-amd64 \
    && ln -s spruce-linux-amd64 /usr/bin/.

# ================== Installs JQ ==============
RUN wget -v -O /usr/local/bin/jq --no-check-certificate https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
RUN chmod +x /usr/local/bin/jq

# ================== Installs ops_manager_cli gem ==============
COPY pkg/${GEM_NAME}-${GEM_VERSION}.gem /tmp/

RUN gem install /tmp/${GEM_NAME}-${GEM_VERSION}.gem

","FROM ruby:2.3.0

ENV GEM_NAME ops_manager_cli
ENV GEM_VERSION 0.7.3
ENV OVFTOOL_VERSION 4.1.0-2459827
ENV OVFTOOL_INSTALLER VMware-ovftool-${OVFTOOL_VERSION}-lin.x86_64.bundle
ARG DOWNLOAD_URL

# ================== Installs OVF tools ==============
RUN echo $DOWNLOAD_URL
RUN wget -v ${DOWNLOAD_URL} \
  && sh ${OVFTOOL_INSTALLER} -p /usr/local --eulas-agreed --required \
  && rm -f ${OVFTOOL_INSTALLER}*

# ================== Installs Spruce ==============
RUN wget -v --no-check-certificate https://github.com/geofffranks/spruce/releases/download/v1.13.1/spruce-linux-amd64 \
    && chmod +x spruce-linux-amd64 \
    && ln -s /spruce-linux-amd64 /usr/bin/spruce

# ================== Installs JQ ==============
RUN wget -v -O /usr/local/bin/jq --no-check-certificate https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
RUN chmod +x /usr/local/bin/jq

# ================== Installs ops_manager_cli gem ==============
COPY pkg/${GEM_NAME}-${GEM_VERSION}.gem /tmp/

RUN gem install /tmp/${GEM_NAME}-${GEM_VERSION}.gem

"
2270,b0b69e2e36af82ad5234dbb340f4f21e50a53d6a,Bumped source to 20201008-85330e8,"Bumped source to 20201008-85330e8
","FROM docker.pkg.github.com/dock0/arch/arch:20201008-e506932
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
350,2437e6c3f71f4e7751c83c6f1a4ecbd546b49146,Bumped source to 20200807-07fff0c,"Bumped source to 20200807-07fff0c
","FROM docker.pkg.github.com/dock0/service/service:20200807-3737d6c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200807-07fff0c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
265,cfae32db3d3499b39c92aeced2b18a3a22bfbf35,Update nodejs to 10.x for ubuntu18.04 ci/cd,"Update nodejs to 10.x for ubuntu18.04 ci/cd

Signed-off-by: Sergey Minaev <322af3f2df10918c6ef5280f56be0b711278b1ae@dsr-corporation.com>","FROM ubuntu:18.04

ARG uid=1000

RUN apt-get update && \
    apt-get install -y \
      pkg-config \
      libssl-dev \
      curl \
      libsqlite3-dev \
      cmake \
      python3-pip \
      debhelper \
      devscripts \
      libncursesw5-dev \
      libzmq3-dev \
      libsodium-dev

RUN pip3 install -U \
pip \
twine \
plumbum \
deb-pkg-tools

RUN apt-get update && apt-get install -y --no-install-recommends \
        ruby \
        ruby-dev \
        rubygems \
    && gem install --no-ri --no-rdoc rake fpm \
    && rm -rf /var/lib/apt/lists/*

# install java and maven
RUN apt-get update && apt-get install openjdk-8-jdk -y
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
RUN apt-get update && apt-get install -y maven

# install nodejs and npm
RUN curl -sL https://deb.nodesource.com/setup_8.x | bash -
RUN apt-get install -y nodejs

RUN useradd -ms /bin/bash -u $uid indy
USER indy

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.36.0
ENV PATH /home/indy/.cargo/bin:$PATH

WORKDIR /home/indy","FROM ubuntu:18.04

ARG uid=1000

RUN apt-get update && \
    apt-get install -y \
      pkg-config \
      libssl-dev \
      curl \
      libsqlite3-dev \
      cmake \
      python3-pip \
      debhelper \
      devscripts \
      libncursesw5-dev \
      libzmq3-dev \
      libsodium-dev

RUN pip3 install -U \
pip \
twine \
plumbum \
deb-pkg-tools

RUN apt-get update && apt-get install -y --no-install-recommends \
        ruby \
        ruby-dev \
        rubygems \
    && gem install --no-ri --no-rdoc rake fpm \
    && rm -rf /var/lib/apt/lists/*

# install java and maven
RUN apt-get update && apt-get install openjdk-8-jdk -y
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
RUN apt-get update && apt-get install -y maven

# install nodejs and npm
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash -
RUN apt-get install -y nodejs

RUN useradd -ms /bin/bash -u $uid indy
USER indy

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.36.0
ENV PATH /home/indy/.cargo/bin:$PATH

WORKDIR /home/indy
"
193,d1312bdddc4e770fda8a7a778c8b8bbb55bfa1b6,Update Dockerfile,Update Dockerfile,"# A docker file to run php-fpm server behind nginx or other frontend
FROM alpine:edge 
MAINTAINER Antoine GIRARD <antoine.girard@sapk.fr>

#UID et GID can be set at run time to change in relation with the host 
ENV BASEDIR=""/var/www"",UID=""33"",GID=""33""

#Install php and deps (+ add testing repo)
RUN  echo ""http://dl-cdn.alpinelinux.org/alpine/edge/testing"" >> /etc/apk/repositories \
 && apk -U  --no-cache --no-progress upgrade \
 && apk -U  --no-cache --force --no-progress add \
    ca-certificates php-fpm php-cli php-zip php-gd shadow \
    
#Configure
RUN addgroup -S www-data && adduser -S -H -h ${BASEDIR} -G www-data www-data \
 && mkdir ${BASEDIR} && chown www-data:www-data ${BASEDIR} \
 && sed --in-place s/user\ =\ nobody/user\ =\ www-data/g /etc/php/php-fpm.conf \
 && sed --in-place s/group\ =\ nobody/group\ =\ www-data/g /etc/php/php-fpm.conf \
 && sed --in-place s/listen\ =\ 127.0.0.1:9000/listen\ =\ 0.0.0.0:9000/g /etc/php/php-fpm.conf \

VOLUME ${BASEDIR} 
WORKDIR ${BASEDIR}
EXPOSE 9000

ENTRYPOINT /usr/sbin/groupmod -g $GID www-data && /usr/sbin/usermod -u $UID -g $GID www-data && /usr/bin/php-fpm -F -e -i
CMD []
","# A docker file to run php-fpm server behind nginx or other frontend
FROM alpine:edge 
MAINTAINER Antoine GIRARD <antoine.girard@sapk.fr>

#UID et GID can be set at run time to change in relation with the host 
ENV BASEDIR=""/var/www"",UID=""33"",GID=""33""

#Install php and deps (+ add testing repo)
RUN  echo ""http://dl-cdn.alpinelinux.org/alpine/edge/testing"" >> /etc/apk/repositories \
 && apk --no-progress upgrade --no-cache\
 && apk --no-progress add --no-cache ca-certificates \
    php-fpm php-cli php-zip php-gd shadow 
    
#Configure
RUN addgroup -S www-data && adduser -S -H -h ${BASEDIR} -G www-data www-data \
 && mkdir ${BASEDIR} && chown www-data:www-data ${BASEDIR} \
 && sed --in-place s/user\ =\ nobody/user\ =\ www-data/g /etc/php/php-fpm.conf \
 && sed --in-place s/group\ =\ nobody/group\ =\ www-data/g /etc/php/php-fpm.conf \
 && sed --in-place s/listen\ =\ 127.0.0.1:9000/listen\ =\ 0.0.0.0:9000/g /etc/php/php-fpm.conf \

VOLUME ${BASEDIR} 
WORKDIR ${BASEDIR}
EXPOSE 9000

ENTRYPOINT /usr/sbin/groupmod -g $GID www-data && /usr/sbin/usermod -u $UID -g $GID www-data && /usr/bin/php-fpm -F -e -i
CMD []
"
29,145e3df7ad60da248b9855786b9c579143639b48,Bumped source to 20200216-be2fa16,"Bumped source to 20200216-be2fa16
","FROM docker.pkg.github.com/dock0/arch/arch:20200216-f890194
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200216-be2fa16
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
269,aa76cf845b82d40a5e1622f2bfe74956263cba65,Added copying of artifacts folder with CRDs,"Added copying of artifacts folder with CRDs

This will allow us to remove redundant code in https://github.com/grafeas/kritis/blob/master/helm-hooks/preinstall/crd.go that redefines the CRDs.","# Copyright 2018 Google, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM golang:1.10
WORKDIR /go/src/github.com/grafeas/kritis
COPY . .
ARG stage
RUN make ${stage} 


FROM golang:1.10
RUN go get -u github.com/cloudflare/cfssl/cmd/...

ENV KUBECTL_VERSION v1.10.0
RUN curl -Lo /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl  && \
    chmod +x /usr/local/bin/kubectl

COPY --from=0 /go/src/github.com/grafeas/kritis/out/${stage}  /${stage} 
","# Copyright 2018 Google, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM golang:1.10
WORKDIR /go/src/github.com/grafeas/kritis
COPY . .
ARG stage
RUN make ${stage} 


FROM golang:1.10
RUN go get -u github.com/cloudflare/cfssl/cmd/...

ENV KUBECTL_VERSION v1.10.0
RUN curl -Lo /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl  && \
    chmod +x /usr/local/bin/kubectl

COPY --from=0 /go/src/github.com/grafeas/kritis/out/${stage}  /${stage}

# Copy artifacts to the image.
COPY --from=0 /go/src/github.com/grafeas/kritis/artifacts /${stage}/artifacts
"
216,3477297f1be0d05a99375e19562f11076d7b521e,Add php5-gd,"Add php5-gd
","FROM debian:jessie

MAINTAINER andre487 ""andrey.prokopyuk@gmail.com""

RUN apt-get update \
    && apt-get install -y apache2 libapache2-mod-php5 php5-mysql \
    && apt-get clean \
    && ls /etc/apache2/sites-enabled | xargs -I % rm /etc/apache2/sites-enabled/% \
    && ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load

COPY provision/apache2.conf /etc/apache2/apache2.conf
COPY provision/php.ini /etc/php5/apache2/php.ini
COPY provision/start.sh /etc/container/start.sh

CMD /etc/container/start.sh
","FROM debian:jessie

MAINTAINER andre487 ""andrey.prokopyuk@gmail.com""

RUN apt-get update \
    && apt-get install -y apache2 libapache2-mod-php5 php5-mysql php5-gd \
    && apt-get clean \
    && ls /etc/apache2/sites-enabled | xargs -I % rm /etc/apache2/sites-enabled/% \
    && ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load

COPY provision/apache2.conf /etc/apache2/apache2.conf
COPY provision/php.ini /etc/php5/apache2/php.ini
COPY provision/start.sh /etc/container/start.sh

CMD /etc/container/start.sh
"
327,8c03fd358e7778f53f2c1dbf799375d8f910648f,Bumped source to 20200825-f08d0e6,"Bumped source to 20200825-f08d0e6
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200825-abacbe0
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200825-f08d0e6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
2299,0f0733251e9fbd5f036fc9ad0fd44dcd0d1d5a00,Bumped source to 20201008-5d66ffe,"Bumped source to 20201008-5d66ffe
","FROM docker.pkg.github.com/dock0/service/service:20201008-308ecf2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
86,95713ddc77c8a343930418f86ec8f2c4a3b65474,update dockerfile,"update dockerfile
","FROM node:7.10
MAINTAINER brook.shi iwxiaot@gmail.com

RUN apt-get update

# code folder
RUN mkdir -p /usr/src
WORKDIR /usr/src
RUN git clone -b release https://github.com/brookshi/Hitchhiker.git
WORKDIR /usr/src/Hitchhiker

# npm install -g
RUN npm install -g pm2 yarn gulp-cli typescript@2.3.3 
RUN npm install gulp -D

# npm install
RUN npm install

RUN cd client && npm install

# gulp build
RUN gulp release --host localhost --port 8080

WORKDIR /usr/src/Hitchhiker/build
# start mail
EXPOSE 8080
CMD [""pm2-docker"", ""index.js""]
","FROM node:7.10
MAINTAINER brook.shi iwxiaot@gmail.com

RUN apt-get update

# code folder
RUN mkdir -p /usr/src
WORKDIR /usr/src
RUN git clone -b release https://github.com/brookshi/Hitchhiker.git
WORKDIR /usr/src/Hitchhiker

# npm install -g
RUN npm install -g pm2 yarn gulp-cli typescript@2.3.3 
RUN npm install gulp -D

# npm install
RUN npm install

RUN cd client && npm install

# gulp build
RUN gulp release --prod

WORKDIR /usr/src/Hitchhiker/build
# start mail
EXPOSE 8080
CMD [""pm2-docker"", ""index.js""]
"
2256,39de6e828d6aa195557a2f9f3f242c8065d3eaec,Bumped source to 20200805-7f8d536,"Bumped source to 20200805-7f8d536
","FROM docker.pkg.github.com/dock0/arch/arch:20200805-2a47823
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2084,ac4c11f18217213eed8ac502a7a57740ebda5a93,Bumped source to 20220926-e20f1bd,"Bumped source to 20220926-e20f1bd
","FROM ghcr.io/dock0/arch:20220926-87d3d9c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2091,06148bd09222645c2996f50094d76aeeb9ed4556,Update to 0.6.1,"Update to 0.6.1
","FROM debian:jessie

RUN apt-get update \
&& apt-get install -y --no-install-recommends \
ca-certificates \
curl \
&& rm -rf /var/lib/apt/lists/*

ENV JULIA_PATH /usr/local/julia

# https://julialang.org/juliareleases.asc
# Julia (Binary signing key) <buildbot@julialang.org>
ENV JULIA_GPG 3673DF529D9049477F76B37566E3C7DC03D6E495

# https://julialang.org/downloads/
ENV JULIA_VERSION 0.6.0

RUN set -ex; \
\
# https://julialang.org/downloads/#julia-command-line-version
# https://julialang-s3.julialang.org/bin/checksums/julia-0.6.0.sha256
# this ""case"" statement is generated via ""update.sh""
dpkgArch=""$(dpkg --print-architecture)""; \
case ""${dpkgArch##*-}"" in \
amd64) tarArch='x86_64'; dirArch='x64'; sha256='3a27ea78b06f46701dc4274820d9853789db205bce56afdc7147f7bd6fa83e41' ;; \
armhf) tarArch='arm'; dirArch='arm'; sha256='7515f5977b2aac0cea1333ef249b3983928dee76ea8eb3de9dd6a7cdfbd07d2d' ;; \
i386) tarArch='i686'; dirArch='x86'; sha256='bfebd2ef38c25ce72dd6661cdd8a6f509800492a4d250c2908f83e791c0a444a' ;; \
*) echo >&2 ""error: current architecture ($dpkgArch) does not have a corresponding Julia binary release""; exit 1 ;; \
esac; \
\
curl -fL -o julia.tar.gz     ""https://julialang-s3.julialang.org/bin/linux/${dirArch}/${JULIA_VERSION%[.-]*}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz""; \
curl -fL -o julia.tar.gz.asc ""https://julialang-s3.julialang.org/bin/linux/${dirArch}/${JULIA_VERSION%[.-]*}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz.asc""; \
\
echo ""${sha256} *julia.tar.gz"" | sha256sum -c -; \
\
export GNUPGHOME=""$(mktemp -d)""; \
gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$JULIA_GPG""; \
gpg --batch --verify julia.tar.gz.asc julia.tar.gz; \
rm -rf ""$GNUPGHOME"" julia.tar.gz.asc; \
\
mkdir ""$JULIA_PATH""; \
tar -xzf julia.tar.gz -C ""$JULIA_PATH"" --strip-components 1; \
rm julia.tar.gz


ENV PATH $JULIA_PATH/bin:$PATH

CMD [""julia""]
",
2316,960731d2310ae977774a63341511d364cffded44,Add webroot to the Docker image,"Add webroot to the Docker image
","FROM alpine
ADD ./sitemapper /
RUN apk update
RUN apk add ca-certificates
RUN rm -rf /var/cache/apk/*
ENTRYPOINT [""/sitemapper""]
",
112,d10ebf249255af19aa93272bb149d6f69ff21d24,Bumped source to 20210106-4b14d9b,"Bumped source to 20210106-4b14d9b
","FROM docker.pkg.github.com/dock0/arch/arch:20210106-4a182dc
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20210106-4b14d9b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
16,8450ae8697e2dff4f659c4859d2f01e05e9c07ef,fix(docker): remove hydrogen user,"fix(docker): remove hydrogen user
","# Lightweight (45MB) and Happy Home on debian.
# More tags: //hub.docker.com/_/debian/
FROM debian:stretch

# What am I? Who will I become?
ARG USERNAME=hydrogen
ENV HOME=/home/$USERNAME

# Invincibility Boost.
RUN echo 'APT::Get::Assume-Yes ""true"";' >> /etc/apt/apt.conf \
      && apt-get update \
      && apt-get install sudo \
      && useradd -m -s /bin/bash $USERNAME \
      && echo ""$USERNAME ALL=(ALL) NOPASSWD:ALL"" >> /etc/sudoers.d/$USERNAME \
      && chmod 0440 /etc/sudoers.d/$USERNAME

# Install the base system dependencies.
# (make language-specific envs later)
#
# NOTE: docker libraries are still required
#       even though the daemon must also be
#       hosted outside the container start
COPY . $HOME/.dots
RUN cd $HOME/.dots \
      && ./install/deb/base.sh \
      && ./setup.sh

# As root, need to change ownership of copied files.
RUN chown -R $USERNAME:$USERNAME $HOME
USER $USERNAME
ENV USER=$USERNAME
WORKDIR $HOME

# Install, and allow ourselves to run, docker
# NOTE: docker.sh fails to add us to the docker
#       group because $USER is `root` behind sudo
RUN sudo ./.dots/install/deb/docker.sh \
      && sudo usermod -aG docker $USERNAME

# Configure how to run the image in a container.
VOLUME [ $HOME ]
ENTRYPOINT [ ""/bin/bash"" ]
CMD [ ""--login"" ]

# Example execution to enable editing code on host:
#   docker run --rm -it \
#     -v $PWD:/home/$USERNAME:rw \
#     $IMAGE
","# Lightweight (45MB) and Happy Home on debian.
# More tags: //hub.docker.com/_/debian/
FROM debian:stretch

# The docker user seems like a good choice here
ARG USERNAME=docker
ENV HOME=/home/$USERNAME

# Invincibility Boost.
RUN echo 'APT::Get::Assume-Yes ""true"";' >> /etc/apt/apt.conf \
      && apt-get update \
      && apt-get install sudo \
      && useradd -m -s /bin/bash $USERNAME \
      && echo ""$USERNAME ALL=(ALL) NOPASSWD:ALL"" >> /etc/sudoers.d/$USERNAME \
      && chmod 0440 /etc/sudoers.d/$USERNAME

# Install the base system dependencies.
# (make language-specific envs later)
#
# NOTE: docker libraries are still required
#       even though the daemon must also be
#       hosted outside the container start
COPY . $HOME/.dots
RUN cd $HOME/.dots \
      && ./install/deb/base.sh \
      && ./setup.sh

# As root, need to change ownership of copied files.
RUN chown -R $USERNAME:$USERNAME $HOME
USER $USERNAME
ENV USER=$USERNAME
WORKDIR $HOME

# Install, and allow ourselves to run, docker
# NOTE: docker.sh fails to add us to the docker
#       group because $USER is `root` behind sudo
RUN sudo ./.dots/install/deb/docker.sh \
      && sudo usermod -aG docker $USERNAME

# Configure how to run the image in a container.
VOLUME [ $HOME ]
ENTRYPOINT [ ""/bin/bash"" ]
CMD [ ""--login"" ]

# Example execution to enable editing code on host:
#   docker run --rm -it \
#     -v $PWD:/home/$USERNAME:rw \
#     $IMAGE
"
22,0501ba0e69271e2da3043bfc146e71454c3c271b,Bumped source to 20200525-e38fbcf,"Bumped source to 20200525-e38fbcf
","FROM docker.pkg.github.com/dock0/service/service:20200525-d6f80e4
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200525-e38fbcf
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
413,6210e825a70b85ab48c07d699231cd995204b445,Upgrade the container to F23,"Upgrade the container to F23

- use dnf
- add missing package
","FROM fedora:22
MAINTAINER jberkus@redhat.com
WORKDIR /tmp
RUN yum install -y tar libcurl-devel zlib-devel patch rubygem-bundler ruby-devel git make gcc gcc-c++ && yum clean all

ADD config.rb /tmp/config.rb
#ADD data /tmp/data
ADD Gemfile  /tmp/Gemfile
ADD Gemfile.lock /tmp/Gemfile.lock
ADD lib /tmp/lib
#ADD source /tmp/source

RUN bundle install

EXPOSE 4567
ENTRYPOINT [ ""bundle"", ""exec"" ]
CMD [ ""middleman"", ""server"" ]
","FROM fedora:23
MAINTAINER jberkus@redhat.com
WORKDIR /tmp
RUN dnf install -y tar libcurl-devel zlib-devel patch rubygem-bundler ruby-devel git make gcc gcc-c++ redhat-rpm-config && dnf clean all

ADD config.rb /tmp/config.rb
#ADD data /tmp/data
ADD Gemfile  /tmp/Gemfile
ADD Gemfile.lock /tmp/Gemfile.lock
ADD lib /tmp/lib
#ADD source /tmp/source

RUN bundle install

EXPOSE 4567
ENTRYPOINT [ ""bundle"", ""exec"" ]
CMD [ ""middleman"", ""server"" ]
"
2302,bd803405dc09ef77e2a6ddd571c7d4ccaa8909ef,dockerhub debugging,"dockerhub debugging
","# Docker file inspired by 
## https://github.com/docker-library/buildpack-deps/blob/a0a59c61102e8b079d568db69368fb89421f75f2/sid/curl/Dockerfile
## https://github.com/jenkinsci/docker
## https://github.com/docker-library/java/blob/b4a3c296023e590e410f645ab83d3c11a30cf535/openjdk-8-jdk/Dockerfile
## https://github.com/zulu-openjdk/zulu-openjdk/blob/master/debian/8u45-8.7.0.5/Dockerfile
## https://github.com/zulu-openjdk/zulu-openjdk/blob/master/debian/8u66-8.11.0.1/Dockerfile

FROM debian:sid
MAINTAINER erik-dev@fjas.no

RUN echo ""export TERM=xtermc"" >> ~/.bashrc
# use norwegian debian mirror to speed up downloads
#RUN echo ""deb http://ftp.no.debian.org/debian/ sid main"" > /etc/apt/sources.list

RUN apt-get update && apt-get install -y --no-install-recommends \ 
ca-certificates curl wget zip unzip bzip2 vim less procps \
&& rm -rf /var/lib/apt/lists/*


RUN echo ""alias ll='ls -l --color=auto'"" >> /etc/bash.bashrc
RUN echo ""alias la='ls -la --color=auto'"" >> /etc/bash.bashrc

ENV LANG C.UTF-8

### Install JDK 
# see https://bugs.debian.org/775775
# and https://github.com/docker-library/java/issues/19#issuecomment-70546872
ENV CA_CERTIFICATES_JAVA_VERSION 20140324

# Pull Zulu OpenJDK binaries from official repository:
# Jenkins Docker image has a reference to /usr/lib/jvm/zulu-8-amd64/ in config.xml. Review if changing to different jdk.
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0x219BD9C9
RUN echo ""deb http://repos.azulsystems.com/debian stable main"" >> /etc/apt/sources.list.d/zulu.list
# RUN apt-get -qq update && apt-get -y install zulu-8=8.11.0.1 ca-certificates-java=""$CA_CERTIFICATES_JAVA_VERSION"" && rm -rf /var/lib/apt/lists/*
RUN apt-get -qq update 
RUN apt-get -y install zulu-8=8.13.0.5 
#ca-certificates-java=""$CA_CERTIFICATES_JAVA_VERSION"" 
RUN rm -rf /var/lib/apt/lists/*

# see CA_CERTIFICATES_JAVA_VERSION notes above
RUN /var/lib/dpkg/info/ca-certificates-java.postinst configure
",
2206,ddde3d570a242f9dacce38df1c2a456bd9b871d5,Fix build -- take 2,"Fix build -- take 2

","FROM delitescere/jdk:8

MAINTAINER Chris Phillipson <fastnsilver@gmail.com>

ENV MAVEN_VERSION=""3.3.9"" \
    M2_HOME=/usr/lib/mvn

RUN apk add --update wget && \
  cd /tmp && \
  wget ""http://ftp.unicamp.br/pub/apache/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz"" && \
  tar -zxvf ""apache-maven-$MAVEN_VERSION-bin.tar.gz"" && \
  mv ""apache-maven-$MAVEN_VERSION"" ""$M2_HOME"" && \
  ln -s ""$M2_HOME/bin/mvn"" /usr/bin/mvn && \
  apk del wget && \
  rm /tmp/* /var/cache/apk/*",
88,a59687b3c276eb7972fc3a71539770760894da10,x264: update to snapshot-20160114-2245-stable,"x264: update to snapshot-20160114-2245-stable
","FROM sameersbn/ubuntu:14.04.20160115
MAINTAINER sameer@damagehead.com

ENV FFMPEG_VERSION=2.8.3 \
    X264_VERSION=snapshot-20151212-2245-stable

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y bzip2 libgnutlsxx27 libogg0 libjpeg8 libpng12-0 \
      libvpx1 libtheora0 libxvidcore4 libmpeg2-4 \
      libvorbis0a libfaad2 libmp3lame0 libmpg123-0 libmad0 libopus0 libvo-aacenc0 \
 && rm -rf /var/lib/apt/lists/*

COPY install.sh /var/cache/ffmpeg/install.sh
RUN bash /var/cache/ffmpeg/install.sh

ENTRYPOINT [""/usr/bin/ffmpeg""]
CMD [""--help""]
","FROM sameersbn/ubuntu:14.04.20160115
MAINTAINER sameer@damagehead.com

ENV FFMPEG_VERSION=2.8.3 \
    X264_VERSION=snapshot-20160114-2245-stable

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y bzip2 libgnutlsxx27 libogg0 libjpeg8 libpng12-0 \
      libvpx1 libtheora0 libxvidcore4 libmpeg2-4 \
      libvorbis0a libfaad2 libmp3lame0 libmpg123-0 libmad0 libopus0 libvo-aacenc0 \
 && rm -rf /var/lib/apt/lists/*

COPY install.sh /var/cache/ffmpeg/install.sh
RUN bash /var/cache/ffmpeg/install.sh

ENTRYPOINT [""/usr/bin/ffmpeg""]
CMD [""--help""]
"
375,82def769619cac9870bb28f7b6d41449f9f7c4b6,Bumped source to 20210129-d252f6a,"Bumped source to 20210129-d252f6a
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210129-1bd3a7a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210129-d252f6a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
2205,81874bb6dfc045623caac4fef871395a2634e26e,add more deps,"add more deps

Signed-off-by: Jess Frazelle <e0d1a862d8f31af605ecef8c92857b8938ba622e@microsoft.com>
","FROM debian:buster
LABEL maintainer ""Jessie Frazelle <jess@linux.com>""

ENV DEBIAN_FRONTEND noninteractive
RUN dpkg --add-architecture i386 \
&& apt-get update && apt-get install -y \
automake \
bc \
binutils-dev \
bison \
bsdtar \
build-essential \
bzip2 \
ca-certificates \
cpio \
fakeroot \
flex \
gawk \
gcc \
git \
gzip \
hdparm \
iperf \
kmod \
libaudit-dev \
libc6-dev \
libc6-dev:i386 \
libdw-dev \
libiberty-dev \
libklibc-dev \
liblzma-dev \
libnuma-dev \
libtool \
libunwind-dev \
linux-libc-dev \
linux-libc-dev:i386 \
linux-perf \
make \
nfs-common \
openssl \
patch \
perl \
procps \
psmisc \
rsync \
rt-tests \
ruby \
ruby-dev \
sysstat \
time \
wget \
zlib1g-dev \
--no-install-recommends \
&& rm -rf /var/lib/apt/lists/* \
&& ln -snf /usr/bin/perf_4.9 /usr/bin/perf

ENV KERNEL_VERSION v4.13
ENV LKP_GIT_WORK_TREE /usr/src/linux
RUN git clone -b ""${KERNEL_VERSION}"" https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux.git ""${LKP_GIT_WORK_TREE}""

ENV LKP_SRC /usr/src/lkp-tests
RUNgit clone https://github.com/fengguang/lkp-tests.git ""${LKP_SRC}""

WORKDIR /usr/src/lkp-tests

RUN make install \
&& lkp install

# Create the lkp user and group
RUN groupadd --gid 1090 lkp
RUN useradd --uid 1090 --gid 1090 lkp

COPY runbench /usr/local/bin/runbench

CMD [ ""lkp"" ]
",
311,562c8c3d9a1dc8ddf4107a465771a6daf0451b7a,resolved merge conflict,"resolved merge conflict
","FROM kaggle/python3:latest

    # Scikit-Learn nightly build
RUN cd /usr/local/src && git clone https://github.com/scikit-learn/scikit-learn.git && \
    cd scikit-learn && python setup.py build && python setup.py install && \
    # HDF5 support
    conda install h5py && \
    # https://github.com/biopython/biopython
    pip install biopython && \
    # clean up
    rm -rf /usr/local/src/* && \
    conda clean -i -l -t -y && \
    rm -rf /root/.cache/pip/*

    ###########
    #
    #      NEW CONTRIBUTORS:
    # Please add new pip/apt installs in this block. Don't forget a ""&& \"" at the end
    # of all non-final lines. Thanks!
    #
    ###########
RUN pip install --upgrade mpld3 && \
    pip install mplleaflet && \
    pip install gpxpy && \
    pip install arrow && \
    pip install sexmachine  && \
    pip install Geohash && \
    pip install deap && \
    pip install tpot && \
    pip install haversine && \
    pip install toolz cytoolz && \
    pip install sacred && \
    pip install plotly && \
    pip install git+https://github.com/nicta/dora.git && \
    pip install git+https://github.com/hyperopt/hyperopt.git && \
    # tflean. Deep learning library featuring a higher-level API for TensorFlow. http://tflearn.org
    pip install git+https://github.com/tflearn/tflearn.git && \
    pip install fitter && \
    pip install langid && \
    # Delorean. Useful for dealing with datetime
    pip install delorean && \
    pip install trueskill && \
    pip install heamy && \
    pip install vida && \
    # clean up pip cache
    rm -rf /root/.cache/pip/*



","FROM kaggle/python3:latest

    # Scikit-Learn nightly build
RUN cd /usr/local/src && git clone https://github.com/scikit-learn/scikit-learn.git && \
    cd scikit-learn && python setup.py build && python setup.py install && \
    # HDF5 support
    conda install h5py && \
    # https://github.com/biopython/biopython
    pip install biopython && \
    # clean up
    rm -rf /usr/local/src/* && \
    conda clean -i -l -t -y && \
    rm -rf /root/.cache/pip/*

    ###########
    #
    #      NEW CONTRIBUTORS:
    # Please add new pip/apt installs in this block. Don't forget a ""&& \"" at the end
    # of all non-final lines. Thanks!
    #
    ###########
RUN pip install --upgrade mpld3 && \
    pip install mplleaflet && \
    pip install gpxpy && \
    pip install arrow && \
    pip install sexmachine  && \
    pip install Geohash && \
    pip install deap && \
    pip install tpot && \
    pip install haversine && \
    pip install toolz cytoolz && \
    pip install sacred && \
    pip install plotly && \
    pip install git+https://github.com/nicta/dora.git && \
    pip install git+https://github.com/hyperopt/hyperopt.git && \
    # tflean. Deep learning library featuring a higher-level API for TensorFlow. http://tflearn.org
    pip install git+https://github.com/tflearn/tflearn.git && \
    pip install fitter && \
    pip install langid && \
    # Delorean. Useful for dealing with datetime
    pip install delorean && \
    pip install trueskill && \
    pip install heamy && \
    pip install vida && \
    # Useful data exploration libraries (for missing data and generating reports)
    pip install missingno && \
    pip install pandas-profiling && \
    pip install s2sphere && \
    # clean up pip cache
    rm -rf /root/.cache/pip/*



"
45,f6dab76616eb035ed522e1157c38c1187c0917a9,tasks: Add python styling packages to test cockpit-project/bots,"tasks: Add python styling packages to test cockpit-project/bots

Closes #293","FROM fedora:30
LABEL maintainer='cockpit-devel@lists.fedorahosted.org'

RUN dnf -y update && \
    dnf -y install \
        'dnf-command(builddep)' \
        american-fuzzy-lop \
        chromium-headless \
        curl \
        expect \
        gcc \
        gcc-c++ \
        git \
        gnupg \
        jq \
        libappstream-glib \
        libvirt-daemon-kvm \
        libvirt-client \
        libvirt-python3 \
        make \
        nc \
        net-tools \
        npm \
        openssl \
        origin-clients \
        psmisc \
        procps-ng \
        python \
        python3 \
        python3-pika \
        rpm-build \
        rpmdevtools \
        sed \
        tar \
        virt-install \
        wget \
        zanata-client && \
    curl -s -o /tmp/cockpit.spec https://raw.githubusercontent.com/cockpit-project/cockpit/master/tools/cockpit.spec && \
    sed -i 's/%{npm-version:.*}/0/' /tmp/cockpit.spec && \
    dnf -y builddep /tmp/cockpit.spec && \
    dnf clean all

COPY cockpit-tasks install-service webhook github_handler.py /usr/local/bin/

RUN groupadd -g 1111 -r user && useradd -r -g user -u 1111 user && \
    mkdir -p /home/user/.ssh && mkdir -p /usr/local/bin && \
    mkdir -p /build /secrets /cache/images /cache/github /build/libvirt/qemu && \
    printf '[user]\n\t\nemail = cockpituous@cockpit-project.org\n\tname = Cockpituous\n' >/home/user/.gitconfig && \
    ln -s /cache/images /build/images && \
    ln -s /cache/images /build/virt-builder && \
    ln -s /cache/github /build/github && \
    ln -s /tmp /build/tmp && \
    mkdir -p /home/user/.config /home/user/.ssh /home/user/.rhel && \
    ln -snf /secrets/ssh-config /home/user/.ssh/config && \
    ln -snf /secrets/image-stores /home/user/.config/image-stores && \
    ln -snf /secrets/codecov-token /home/user/.config/codecov-token && \
    ln -snf /secrets/rhel-login /home/user/.rhel/login && \
    ln -snf /secrets/rhel-password /home/user/.rhel/pass && \
    ln -snf /secrets/zanata.ini /home/user/.config/zanata.ini && \
    ln -snf /secrets/lorax-test-env.sh /home/user/.config/lorax-test-env && \
    ln -snf /run/secrets/webhook/.config--github-token /home/user/.config/github-token && \
    chmod g=u /etc/passwd && \
    chmod -R ugo+w /build /secrets /cache /home/user

# Prevent us from screwing around with KVM settings in the container
RUN touch /etc/modprobe.d/kvm-amd.conf && touch /etc/modprobe.d/kvm-intel.conf

ENV LANG=C.UTF-8 \
    LIBGUESTFS_BACKEND=direct \
    XDG_CACHE_HOME=/build \
    HOME=/home/user \
    TMPDIR=/tmp \
    TEMPDIR=/tmp \
    TEST_DATA=/build \
    TEST_PUBLISH=

VOLUME /cache

USER user
WORKDIR /build
CMD [""/usr/local/bin/cockpit-tasks"", ""--publish"", ""$TEST_PUBLISH"", ""--verbose""]

# We execute the script in the host, but it doesn't exist on the host. So pipe it in
LABEL INSTALL /usr/bin/docker run -ti --rm --privileged --volume=/:/host:rw --user=root IMAGE /bin/bash -c \""/usr/sbin/chroot /host /bin/sh -s < /usr/local/bin/install-service\""

# Run a simple interactive instance of the tests container
LABEL RUN /usr/bin/docker run -ti --rm --privileged --uts=host --volume=/var/lib/cockpit-secrets/tasks:/secrets:ro --volume=/var/cache/cockpit-tests:/cache:rw IMAGE /bin/bash -i
","FROM fedora:30
LABEL maintainer='cockpit-devel@lists.fedorahosted.org'

RUN dnf -y update && \
    dnf -y install \
        'dnf-command(builddep)' \
        american-fuzzy-lop \
        chromium-headless \
        curl \
        expect \
        gcc \
        gcc-c++ \
        git \
        gnupg \
        jq \
        libappstream-glib \
        libvirt-daemon-kvm \
        libvirt-client \
        libvirt-python3 \
        make \
        nc \
        net-tools \
        npm \
        openssl \
        origin-clients \
        psmisc \
        procps-ng \
        python3-pyflakes \
        python \
        python3 \
        python3-pycodestyle \
        python3-pika \
        rpm-build \
        rpmdevtools \
        sed \
        tar \
        virt-install \
        wget \
        zanata-client && \
    curl -s -o /tmp/cockpit.spec https://raw.githubusercontent.com/cockpit-project/cockpit/master/tools/cockpit.spec && \
    sed -i 's/%{npm-version:.*}/0/' /tmp/cockpit.spec && \
    dnf -y builddep /tmp/cockpit.spec && \
    dnf clean all

COPY cockpit-tasks install-service webhook github_handler.py /usr/local/bin/

RUN groupadd -g 1111 -r user && useradd -r -g user -u 1111 user && \
    mkdir -p /home/user/.ssh && mkdir -p /usr/local/bin && \
    mkdir -p /build /secrets /cache/images /cache/github /build/libvirt/qemu && \
    printf '[user]\n\t\nemail = cockpituous@cockpit-project.org\n\tname = Cockpituous\n' >/home/user/.gitconfig && \
    ln -s /cache/images /build/images && \
    ln -s /cache/images /build/virt-builder && \
    ln -s /cache/github /build/github && \
    ln -s /tmp /build/tmp && \
    mkdir -p /home/user/.config /home/user/.ssh /home/user/.rhel && \
    ln -snf /secrets/ssh-config /home/user/.ssh/config && \
    ln -snf /secrets/image-stores /home/user/.config/image-stores && \
    ln -snf /secrets/codecov-token /home/user/.config/codecov-token && \
    ln -snf /secrets/rhel-login /home/user/.rhel/login && \
    ln -snf /secrets/rhel-password /home/user/.rhel/pass && \
    ln -snf /secrets/zanata.ini /home/user/.config/zanata.ini && \
    ln -snf /secrets/lorax-test-env.sh /home/user/.config/lorax-test-env && \
    ln -snf /run/secrets/webhook/.config--github-token /home/user/.config/github-token && \
    chmod g=u /etc/passwd && \
    chmod -R ugo+w /build /secrets /cache /home/user

# Prevent us from screwing around with KVM settings in the container
RUN touch /etc/modprobe.d/kvm-amd.conf && touch /etc/modprobe.d/kvm-intel.conf

ENV LANG=C.UTF-8 \
    LIBGUESTFS_BACKEND=direct \
    XDG_CACHE_HOME=/build \
    HOME=/home/user \
    TMPDIR=/tmp \
    TEMPDIR=/tmp \
    TEST_DATA=/build \
    TEST_PUBLISH=

VOLUME /cache

USER user
WORKDIR /build
CMD [""/usr/local/bin/cockpit-tasks"", ""--publish"", ""$TEST_PUBLISH"", ""--verbose""]

# We execute the script in the host, but it doesn't exist on the host. So pipe it in
LABEL INSTALL /usr/bin/docker run -ti --rm --privileged --volume=/:/host:rw --user=root IMAGE /bin/bash -c \""/usr/sbin/chroot /host /bin/sh -s < /usr/local/bin/install-service\""

# Run a simple interactive instance of the tests container
LABEL RUN /usr/bin/docker run -ti --rm --privileged --uts=host --volume=/var/lib/cockpit-secrets/tasks:/secrets:ro --volume=/var/cache/cockpit-tests:/cache:rw IMAGE /bin/bash -i
"
217,19ec9dd49b5c06b2fe82ace3a03fe4ab5a7e8860,version 1.64,"version 1.64
","FROM jarischaefer/baseimage-librenms:2.9

ENVLIBRENMS_VERSION=1.63 \
LIBRENMS_WEATHERMAP_VERSION=2b9e0f2e7df80b1e5eb75a1470bc657325cbb381 \
TZ=UTC \
RRDCACHED_LISTEN=unix:/var/run/rrdcached/rrdcached.sock \
RRDCACHED_CONNECT=unix:/var/run/rrdcached/rrdcached.sock \
SNMP_SCAN_CRON=""0 0 * * *"" \
WEATHERMAP_CRON=""*/5 * * * *"" \
POLLERS=8 \
POLLERS_CRON=""*/5 * * * *""
EXPOSE 80 443

RUNgit clone --branch ${LIBRENMS_VERSION} https://github.com/librenms/librenms.git /opt/librenms && \
composer global require hirak/prestissimo && \
composer --no-interaction install --working-dir=/opt/librenms --no-dev --prefer-dist && \
composer global remove hirak/prestissimo && \
composer clear-cache && \
curl -qsSL https://github.com/librenms-plugins/Weathermap/archive/${LIBRENMS_WEATHERMAP_VERSION}.tar.gz | tar -xz -C /opt/librenms/html/plugins && \
mv /opt/librenms/html/plugins/Weathermap-${LIBRENMS_WEATHERMAP_VERSION} /opt/librenms/html/plugins/Weathermap && \
cp /opt/librenms/.env.example /opt/librenms/.env && \
chown -R librenms:librenms /opt/librenms && \
find /opt/librenms -name '.gitignore' -type f -exec chmod -x ""{}"" + && \
mkdir -p /opt/helpers/default_files/logs /opt/helpers/default_files/rrd && \
cp /opt/librenms/logs/.gitignore /opt/helpers/default_files/logs && \
cp /opt/librenms/rrd/.gitignore /opt/helpers/default_files/rrd

ADD files /
RUNchmod -R +x /etc/my_init.d /etc/service /usr/local/bin && \
find /opt/librenms \( ! -user librenms -o ! -group librenms \) -exec chown librenms:librenms {} \; && \
chmod 644 /etc/cron.d/* /etc/librenms/cron/*

VOLUME [""/opt/librenms/logs"", ""/opt/librenms/rrd"", ""/opt/librenms/storage""]
VOLUME [""/opt/librenms/html/plugins/Weathermap/configs"", ""/opt/librenms/html/plugins/Weathermap/output""]
VOLUME [""/etc/nginx/ssl"", ""/var/log/nginx""]
","FROM jarischaefer/baseimage-librenms:2.9

ENVLIBRENMS_VERSION=1.64 \
LIBRENMS_WEATHERMAP_VERSION=2b9e0f2e7df80b1e5eb75a1470bc657325cbb381 \
TZ=UTC \
RRDCACHED_LISTEN=unix:/var/run/rrdcached/rrdcached.sock \
RRDCACHED_CONNECT=unix:/var/run/rrdcached/rrdcached.sock \
SNMP_SCAN_CRON=""0 0 * * *"" \
WEATHERMAP_CRON=""*/5 * * * *"" \
POLLERS=8 \
POLLERS_CRON=""*/5 * * * *""
EXPOSE 80 443

RUNgit clone --branch ${LIBRENMS_VERSION} https://github.com/librenms/librenms.git /opt/librenms && \
composer global require hirak/prestissimo && \
composer --no-interaction install --working-dir=/opt/librenms --no-dev --prefer-dist && \
composer global remove hirak/prestissimo && \
composer clear-cache && \
curl -qsSL https://github.com/librenms-plugins/Weathermap/archive/${LIBRENMS_WEATHERMAP_VERSION}.tar.gz | tar -xz -C /opt/librenms/html/plugins && \
mv /opt/librenms/html/plugins/Weathermap-${LIBRENMS_WEATHERMAP_VERSION} /opt/librenms/html/plugins/Weathermap && \
cp /opt/librenms/.env.example /opt/librenms/.env && \
chown -R librenms:librenms /opt/librenms && \
find /opt/librenms -name '.gitignore' -type f -exec chmod -x ""{}"" + && \
mkdir -p /opt/helpers/default_files/logs /opt/helpers/default_files/rrd && \
cp /opt/librenms/logs/.gitignore /opt/helpers/default_files/logs && \
cp /opt/librenms/rrd/.gitignore /opt/helpers/default_files/rrd

ADD files /
RUNchmod -R +x /etc/my_init.d /etc/service /usr/local/bin && \
find /opt/librenms \( ! -user librenms -o ! -group librenms \) -exec chown librenms:librenms {} \; && \
chmod 644 /etc/cron.d/* /etc/librenms/cron/*

VOLUME [""/opt/librenms/logs"", ""/opt/librenms/rrd"", ""/opt/librenms/storage""]
VOLUME [""/opt/librenms/html/plugins/Weathermap/configs"", ""/opt/librenms/html/plugins/Weathermap/output""]
VOLUME [""/etc/nginx/ssl"", ""/var/log/nginx""]
"
2250,c529594e6c3f5e7a8e75cc1552eeba17e81b4513,:arrow_up: Bump golang from 1.18.5 to 1.19.0,":arrow_up: Bump golang from 1.18.5 to 1.19.0

Bumps golang from 1.18.5 to 1.19.0.

---
updated-dependencies:
- dependency-name: golang
  dependency-type: direct:production
  update-type: version-update:semver-minor
...

Signed-off-by: dependabot[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@github.com>","FROM alpine:3.16.1 as alpinejq
ARG JETBRAINS_USERNAME
ARG JETBRAINS_PASSWORD
RUN apk add --no-cache jq

FROM alpinejq as startupTest
ARG JETBRAINS_USERNAME
ARG JETBRAINS_PASSWORD
ENV USER_HOME /home/jetbrains
ADD entrypoint.sh entrypoint_test.sh ${USER_HOME}/
ADD mock.sh ${USER_HOME}/license-server/bin/license-server.sh
ADD mock.sh ${USER_HOME}/register.sh
RUN chmod +x ${USER_HOME}/license-server/bin/license-server.sh \
  && chmod +x ${USER_HOME}/register.sh \
  && ${USER_HOME}/entrypoint_test.sh

FROM alpine:3.16.1 as registerTest
ARG JETBRAINS_USERNAME
ARG JETBRAINS_PASSWORD
ENV USER_HOME /home/jetbrains
ADD register.sh register_test.sh ${USER_HOME}/
ADD mock.sh ${USER_HOME}/register
RUN chmod +x ${USER_HOME}/register \
  && ${USER_HOME}/register_test.sh

FROM golang:1.18.5 as build
ARG JETBRAINS_USERNAME
ARG JETBRAINS_PASSWORD
WORKDIR /cf-jetbrains-license-server
ADD register.go register_test.go go.mod go.sum ./
ADD testdata/* ./testdata/
ENV GOOS=linux GOARCH=amd64 CGO_ENABLED=0
RUN go test -v \
 && go build register.go \
 && chmod +x register

FROM openjdk:19-alpine3.15 as runtime
ARG JETBRAINS_USERNAME
ARG JETBRAINS_PASSWORD
ENV USER_HOME /home/jetbrains
COPY --from=build /cf-jetbrains-license-server/register ${USER_HOME}/
ENV PATH=$PATH:/opt/jdk/bin
ADD entrypoint.sh register.sh ${USER_HOME}/
RUN apk update && apk upgrade && \
apk add --no-cache \
 ca-certificates \
 wget \
 openssl \
 jq \
 && adduser -S -D jetbrains \
 && wget -q https://download.jetbrains.com/lcsrv/license-server-installer.zip \
 && mkdir -p ${USER_HOME}/license-server \
 && unzip -q license-server-installer.zip -d ${USER_HOME}/license-server \
 && chown -R jetbrains ${USER_HOME}/license-server \
 && rm -f license-server-installer.zip
USER jetbrains
EXPOSE 8111
WORKDIR $USER_HOME
ENTRYPOINT [""/bin/sh"", ""/home/jetbrains/entrypoint.sh""]

FROM runtime as integrationTest
ARG JETBRAINS_USERNAME
ARG JETBRAINS_PASSWORD
ENV VCAP_APPLICATION '{""application_uris"":[""localhost""]}'
ENV SERVER_NAME 'License Server'
ADD integration_test.sh /
RUN /integration_test.sh

FROM runtime
",
243,f23460ee71380d44911228c038cd1bcef8b14d7f,Updates the Docker image with latest dependencies,"Updates the Docker image with latest dependencies
","################################################################################
#  Dockerfile to setup a CentOS / Fedora type docker image, suitable
#  for building ATS, perhaps as part of a Jenkins CI. Note that some
#  of the features in here are specific to the official ATS Jenkins
#  setup, see comment below.
#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

################################################################################
# These can (should?) be overridden from the command line with ----build-arg, e.g.
#    docker build --build-arg OS_VERSION=7 --build-arg OS_TYPE=centos
#
ARG OS_VERSION=28
ARG OS_TYPE=fedora

# This does currently not work, e.g. this I'd expect to make it conditional:
#
#    RUN if [ ""${ADD_JENKINS}"" = ""yes"" ]; then yum ...
#
ARG ADD_JENKINS=no

# Alright, lets pull in the base image from docker.io
FROM ${OS_TYPE}:${OS_VERSION}

################################################################################
# All the DNF / YUM packages necessary for building ATS. you do not need all
# these if you only intend to run ATS, see the .spec file for the required
#runtime packages.

# This runs all the yum installation, starting with a system level update
RUN yum -y update; \
    # Compilers
    yum -y install ccache make pkgconfig bison flex gcc-c++ clang \
    # Autoconf
    autoconf automake libtool \
    # Various other tools
    git rpm-build distcc-server file wget openssl hwloc; \
    # Devel packages that ATS needs
    yum -y install openssl-devel expat-devel pcre-devel libcap-devel hwloc-devel libunwind-devel \
    xz-devel libcurl-devel ncurses-devel jemalloc-devel GeoIP-devel kyotocabinet-devel luajit-devel \
    brotli-devel ImageMagick-devel ImageMagick-c++-devel \
    perl-ExtUtils-MakeMaker perl-Digest-SHA perl-URI; \
    # This is for autest stuff
    yum -y install python3 python3-virtualenv python-virtualenv httpd-tools procps-ng nmap-ncat; \
    # Optional: This is for the OpenSSH server, and Jenkins account + access (comment out if not needed)
    yum -y install java openssh-server && ssh-keygen -A; rm -f /run/nologin; \
    groupadd  -g 665 jenkins && \
    useradd -g jenkins -u 989 -s /bin/bash -M -d /home/jenkins -c ""Jenkins Continuous Build server"" jenkins && \
    mkdir -p /var/jenkins && chown jenkins.jenkins /var/jenkins

# Check if devtoolset-7 is required
RUN  if [ ! -z ""$(grep -i centos /etc/redhat-release)"" ]; then \
    yum -y install centos-release-scl; \
    yum -y install devtoolset-7 devtoolset-7-libasan-devel; \
    fi
","################################################################################
#  Dockerfile to setup a CentOS / Fedora type docker image, suitable
#  for building ATS, perhaps as part of a Jenkins CI. Note that some
#  of the features in here are specific to the official ATS Jenkins
#  setup, see comment below.
#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

################################################################################
# These can (should?) be overridden from the command line with ----build-arg, e.g.
#    docker build --build-arg OS_VERSION=7 --build-arg OS_TYPE=centos
#
ARG OS_VERSION=30
ARG OS_TYPE=fedora

# This does currently not work, e.g. this I'd expect to make it conditional:
#
#    RUN if [ ""${ADD_JENKINS}"" = ""yes"" ]; then yum ...
#
ARG ADD_JENKINS=no

# Alright, lets pull in the base image from docker.io
FROM ${OS_TYPE}:${OS_VERSION}

################################################################################
# All the DNF / YUM packages necessary for building ATS. you do not need all
# these if you only intend to run ATS, see the .spec file for the required
#runtime packages.

# This runs all the yum installation, starting with a system level update
RUN yum -y update; \
    # Compilers
    yum -y install ccache make pkgconfig bison flex gcc-c++ clang \
    # Autoconf
    autoconf automake libtool \
    # Various other tools
    git rpm-build distcc-server file wget openssl hwloc; \
    # Devel packages that ATS needs
    yum -y install openssl-devel expat-devel pcre-devel libcap-devel hwloc-devel libunwind-devel \
    xz-devel libcurl-devel ncurses-devel jemalloc-devel GeoIP-devel luajit-devel brotli-devel \
    ImageMagick-devel ImageMagick-c++-devel hiredis-devel \
    perl-ExtUtils-MakeMaker perl-Digest-SHA perl-URI; \
    # This is for autest stuff
    yum -y install python3 python3-virtualenv python-virtualenv httpd-tools procps-ng nmap-ncat; \
    # Optional: This is for the OpenSSH server, and Jenkins account + access (comment out if not needed)
    yum -y install java openssh-server && ssh-keygen -A; rm -f /run/nologin; \
    groupadd  -g 665 jenkins && \
    useradd -g jenkins -u 989 -s /bin/bash -M -d /home/jenkins -c ""Jenkins Continuous Build server"" jenkins && \
    mkdir -p /var/jenkins && chown jenkins.jenkins /var/jenkins

# Check if devtoolset-7 is required
RUN  if [ ! -z ""$(grep -i centos /etc/redhat-release)"" ]; then \
    yum -y install centos-release-scl; \
    yum -y install devtoolset-7 devtoolset-7-libasan-devel; \
    fi
"
136,5a21ec18aa6168444b49d0fb2f686a36c7e5a66e,Bumped source to 20200826-77c1c6d,"Bumped source to 20200826-77c1c6d
","FROM docker.pkg.github.com/dock0/arch/arch:20200826-6a7a1a2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200826-77c1c6d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
28,8f2a4a9f93a5d936dc0228b8a4030d0ec1f42799,Bumped source to 20200522-1035b1c,"Bumped source to 20200522-1035b1c
","FROM docker.pkg.github.com/dock0/service/service:20200522-cd8e717
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200522-1035b1c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2157,f7b49720318ba40e9a5e8c567c0dda7e918ace83,"Update base image to Python 2.7, Alpine 3.11.","Update base image to Python 2.7, Alpine 3.11.
","FROM python:3.6-alpine3.7 as build
# -----------------------------------------------------------------------------
# This stage builds the build container.
# -----------------------------------------------------------------------------

# Install compiler toolchain and libraries.
RUN apk add --no-cache build-base libffi-dev libressl-dev

# Install/upgrade pip
RUN python -m pip install --upgrade pip

# Paths
ENV IMS_SOURCE_DIR=""/src/ims""
ENV IMS_INSTALL_DIR=""/opt/ims""

# Copy the source code over
WORKDIR ""${IMS_SOURCE_DIR}""

COPY ./COPYRIGHT.rst  ./
COPY ./LICENSE.txt    ./
COPY ./pyproject.toml ./
COPY ./setup.py       ./
COPY ./src/           ./src/

# Install the application
WORKDIR /tmp
RUN install -o daemon -g daemon -d ""${IMS_INSTALL_DIR}""
USER daemon:daemon
RUN python -m venv ""${IMS_INSTALL_DIR}""
RUN ""${IMS_INSTALL_DIR}/bin/pip"" --no-cache-dir install ""${IMS_SOURCE_DIR}""


# -----------------------------------------------------------------------------
# This stage builds the application container.
# -----------------------------------------------------------------------------
FROM python:3.6-alpine3.7 as application

# Copy build result
ENV IMS_INSTALL_DIR=""/opt/ims""
COPY --from=build ""${IMS_INSTALL_DIR}"" ""${IMS_INSTALL_DIR}""

# Allow ims_server to bind to privileged port numbers
RUN apk add --no-cache libcap
RUN setcap ""cap_net_bind_service=+ep"" /usr/local/bin/python3.7

# Configuration
ENV IMS_HOSTNAME=""0.0.0.0""
ENV IMS_CONFIG_ROOT=""${IMS_INSTALL_DIR}/conf""
ENV IMS_SERVER_ROOT=""/srv/ims""
ENV IMS_DATA_STORE=""MySQL""

RUN install -o daemon -g daemon -d ""${IMS_SERVER_ROOT}""
WORKDIR ""${IMS_SERVER_ROOT}""
USER daemon:daemon

EXPOSE 80

CMD [ ""/opt/ims/bin/ims_server"", ""--log-file"", ""-"" ]
",
7,4dc7b0964c5e2b8ccd4aa39b9a53d568de7cded7,Build avogadro2 for format conversion,"Build avogadro2 for format conversion
","FROM girder/girder:latest-py3

# Enable proxy support
COPY ./devops/docker/girder/girder.local.conf /girder/girder/conf/girder.local.cfg

COPY . /materialsdatabank

RUN pip install -e /materialsdatabank

# Install materialdatabank plugin
RUN girder-install plugin /materialsdatabank/server/materialsdatabank

","FROM girder/girder:latest-py3

# Install cmake
RUN wget https://cmake.org/files/v3.10/cmake-3.10.0-rc2-Linux-x86_64.sh && \
  chmod u+x cmake-3.10.0-rc2-Linux-x86_64.sh && \
  mkdir /cmake && \
  ./cmake-3.10.0-rc2-Linux-x86_64.sh --skip-license --prefix=/cmake

# Build pybind11
RUN git clone https://github.com/pybind/pybind11.git /pybind11/source && \
  mkdir /pybind11/build && \
  mkdir /pybind11/install && \
  cd /pybind11/build && \
  /cmake/bin/cmake -DCMAKE_INSTALL_PREFIX:PATH=/pybind11/install -DPYBIND11_TEST:BOOL=NO ../source && \
  /cmake/bin/cmake --build . --target install && \
  rm -rf /pybind11/build && rm -rf /pybind11/source

# Install deps for avogadro
RUN apt-get update && apt-get -y install \
  libeigen3-dev \
  libpython3-dev

# Build avogadrolibs
RUN git clone https://github.com/openchemistry/avogadrolibs.git /avogadrolibs/source && \
  mkdir /avogadrolibs/build && \
  cd /avogadrolibs/build && \
  /cmake/bin/cmake -DCMAKE_BUILD_TYPE:STRING=Release -DUSE_PYTHON:BOOL=YES -DENABLE_TESTING:BOOL=NO \
    -Dpybind11_DIR:PATH=/pybind11/install/share/cmake/pybind11 -DUSE_LIBSPG:BOOL=NO \
    -DUSE_QT:BOOL=NO -DUSE_OPENGL:BOOL=NO ../source && \
  /cmake/bin/cmake --build . && \
  mkdir -p /usr/lib/python3.4/site-packages/ && \
  cp /avogadrolibs/build/lib/* /usr/local/lib/python3.4/dist-packages/ && \
  rm -rf /avogadrolibs/source

# Remove cmake
RUN rm -rf /cmake

# Enable proxy support
COPY ./devops/docker/girder/girder.local.conf /girder/girder/conf/girder.local.cfg

COPY . /materialsdatabank

RUN pip install -e /materialsdatabank

# Install materialdatabank plugin
RUN girder-install plugin /materialsdatabank/server/materialsdatabank

"
246,6c42df1a31b680572a4fa732706cd27e604b8865,fix bug,"fix bug
","FROM alpine:3.4

MAINTAINER takafumiotake<tikutaka.dev@gmail.com>

COPY runit_bootstrap /usr/sbin/runit_bootstrap

RUN RUNIT_VERSION=""2.1.2"" \
    && RUNIT_SHA1=""398f7bf995acd58797c1d4a7bcd75cc1fc83aa66"" \
    && apk add --no-cache --virtual .build-deps \
        curl \
        tar \
        make \
        gcc \
        musl-dev \
    && curl -fSL http://smarden.org/runit/runit-$RUNIT_VERSION.tar.gz -o runit.tar.gz \
    && echo ""$RUNIT_SHA1  runit.tar.gz"" | sha1sum -c \
    && mkdir -p /usr/src/runit \
    && tar -zxC /usr/src/runit -f runit.tar.gz --strip-component=2 \
    && rm -f runit.tar.gz \
    && cd /usr/src/runit/src \
    && make \
    && cat package/commands | xargs -I {} mv -f src/{} /sbin/ \
    && cd / \
    && rm -rf /usr/src/runit \
    && apk del .build-deps \
    && mkdir /service
    && chmod 755 /usr/sbin/runit_bootstrap

ENTRYPOINT [""/usr/sbin/runit_bootstrap""]
","FROM alpine:3.4

MAINTAINER takafumiotake<tikutaka.dev@gmail.com>

COPY runit_bootstrap /usr/sbin/runit_bootstrap

RUN RUNIT_VERSION=""2.1.2"" \
    && RUNIT_SHA1=""398f7bf995acd58797c1d4a7bcd75cc1fc83aa66"" \
    && apk add --no-cache --virtual .build-deps \
        curl \
        tar \
        make \
        gcc \
        musl-dev \
    && curl -fSL http://smarden.org/runit/runit-$RUNIT_VERSION.tar.gz -o runit.tar.gz \
    && echo ""$RUNIT_SHA1  runit.tar.gz"" | sha1sum -c \
    && mkdir -p /usr/src/runit \
    && tar -zxC /usr/src/runit -f runit.tar.gz --strip-component=2 \
    && rm -f runit.tar.gz \
    && cd /usr/src/runit/src \
    && make \
    && cd .. \
    && cat package/commands | xargs -I {} mv -f src/{} /sbin/ \
    && cd / \
    && rm -rf /usr/src/runit \
    && apk del .build-deps \
    && mkdir /service
    && chmod 755 /usr/sbin/runit_bootstrap

ENTRYPOINT [""/usr/sbin/runit_bootstrap""]
"
409,0f29520d072f713e014519c4694b39e4b646e9d7,Bumped source to 20200428-d2f18ec,"Bumped source to 20200428-d2f18ec
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200428-3e18547
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200428-d2f18ec
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
277,7660b16e606f959183e74db29605cfd080e23bac,added docker file,"added docker file
","FROM debian

MAINTAINER ahiknsr
#Adding kali sources
RUN apt-get install wget -y --force-yes
RUN wget --no-check-certificate https://gist.githubusercontent.com/Ahiknsr/701f2896b642930ce2e8/raw/868e1e465e3f3498420db89e6eca1679537e2f57/dockerinitialsetup -O aptsetup.sh 
RUN chmod +x aptsetup.sh; bash aptsetup.sh
#apt-get prompt will not prompt for yes or no and takes yes as default choice
RUN wget --no-check-certificate https://gist.githubusercontent.com/Ahiknsr/21b8f32d80b423aa31bd/raw/e1e5974f6baf941a8011481fee6d516eca69d54e/aptalwaysyes -O aptalwaysyes.sh
RUN chmod +x aptalwaysyes.sh; bash aptalwaysyes.sh
#install few tools in repo which are nessacary for owtf 
RUN wget --no-check-certificate https://gist.githubusercontent.com/Ahiknsr/c76417641a22c40c29ce/raw/5209cfa5f13da315a2f272e6fb5a79d492a2805d/nativetools -O nativetools.sh
RUN chmod +x nativetools.sh; bash nativetools.sh
RUN rm *.sh
#install necessary python modules 
RUN wget  https://raw.githubusercontent.com/owtf/owtf/master/install/owtf.pip -O owtf.pip
RUN pip install -r owtf.pip 
RUN pip install --upgrade six
RUN pip install simplejson
RUN pip install pyOpenSSL==0.12
RUN pip install --upgrade -r owtf.pip; rm owtf.pip
#download owtf 
RUN wget https://github.com/owtf/owtf/archive/v1.0.1.tar.gz
RUN tar xvf v1.0.1.tar.gz
RUN mv owtf-1.0.1 owtf
RUN mkdir owtf/tools/restricted
RUN rm v1.0.1.tar.gz

RUN wget https://gist.githubusercontent.com/Ahiknsr/797cb9ac52a249ad0d59/raw/e51f5a2fc8019ed02e3b001c5ed9ad901987f2a3/owtfdocker -O owtf/install/install.py
RUN python owtf/install/install.py
RUN wget  https://gist.githubusercontent.com/Ahiknsr/957d204e6d965db08b06/raw/a4ab25a9ab56da7536e02d9c8ffd9de8931c01ad/owtfdbinstall -O owtf/scripts/owtfinstall.sh 
RUN chmod +x owtf/scripts/owtfinstall.sh 
RUN bash owtf/scripts/owtfinstall.sh
RUN wget https://gist.githubusercontent.com/Ahiknsr/31ce4c694767d59ef35b/raw/61d1a0edcfc932b42e6306e23788e2b9b8ea25c2/dbmodify -O dbmodify.py
RUN python dbmodify.py
RUN wget https://gist.githubusercontent.com/Ahiknsr/e600b0e4e51865a6dfa0/raw/094d296e1cd5c0947064606b1cadffab7aa3c3f7/modifiedserver.py -O owtf/framework/interface/server.py

RUN apt-get install  theharvester tlssled nikto dnsrecon nmap whatweb skipfish w3af-console dirbuster wpscan wapiti waffit hydra 
RUN echo ""service postgresql start"" >> ~/.bashrc
RUN echo ""Installation of owtf is complete :) ""


","FROM debian

MAINTAINER ahiknsr
#Adding kali sources
RUN cat /etc/apt/sources.list
RUN apt-get install wget -y --force-yes
RUN wget --no-check-certificate https://gist.githubusercontent.com/Ahiknsr/701f2896b642930ce2e8/raw/868e1e465e3f3498420db89e6eca1679537e2f57/dockerinitialsetup -O aptsetup.sh 
RUN chmod +x aptsetup.sh; bash aptsetup.sh
#apt-get prompt will not prompt for yes or no and takes yes as default choice
RUN wget --no-check-certificate https://gist.githubusercontent.com/Ahiknsr/21b8f32d80b423aa31bd/raw/e1e5974f6baf941a8011481fee6d516eca69d54e/aptalwaysyes -O aptalwaysyes.sh
RUN chmod +x aptalwaysyes.sh; bash aptalwaysyes.sh
#install few tools in repo which are nessacary for owtf 
RUN wget --no-check-certificate https://gist.githubusercontent.com/Ahiknsr/c76417641a22c40c29ce/raw/5209cfa5f13da315a2f272e6fb5a79d492a2805d/nativetools -O nativetools.sh
RUN chmod +x nativetools.sh; bash nativetools.sh
RUN rm *.sh
#install necessary python modules 
RUN wget  https://raw.githubusercontent.com/owtf/owtf/master/install/owtf.pip -O owtf.pip
RUN pip install -r owtf.pip 
RUN pip install --upgrade six
RUN pip install simplejson
RUN pip install pyOpenSSL==0.12
RUN pip install --upgrade -r owtf.pip; rm owtf.pip
#download owtf 
RUN wget https://github.com/owtf/owtf/archive/v1.0.1.tar.gz
RUN tar xvf v1.0.1.tar.gz
RUN mv owtf-1.0.1 owtf
RUN mkdir owtf/tools/restricted
RUN rm v1.0.1.tar.gz

RUN wget https://gist.githubusercontent.com/Ahiknsr/797cb9ac52a249ad0d59/raw/e51f5a2fc8019ed02e3b001c5ed9ad901987f2a3/owtfdocker -O owtf/install/install.py
RUN python owtf/install/install.py
RUN wget  https://gist.githubusercontent.com/Ahiknsr/957d204e6d965db08b06/raw/a4ab25a9ab56da7536e02d9c8ffd9de8931c01ad/owtfdbinstall -O owtf/scripts/owtfinstall.sh 
RUN chmod +x owtf/scripts/owtfinstall.sh 
RUN bash owtf/scripts/owtfinstall.sh
RUN wget https://gist.githubusercontent.com/Ahiknsr/31ce4c694767d59ef35b/raw/61d1a0edcfc932b42e6306e23788e2b9b8ea25c2/dbmodify -O dbmodify.py
RUN python dbmodify.py
RUN wget https://gist.githubusercontent.com/Ahiknsr/e600b0e4e51865a6dfa0/raw/094d296e1cd5c0947064606b1cadffab7aa3c3f7/modifiedserver.py -O owtf/framework/interface/server.py

RUN apt-get install  theharvester tlssled nikto dnsrecon nmap whatweb skipfish w3af-console dirbuster wpscan wapiti waffit hydra 
RUN echo ""service postgresql start"" >> ~/.bashrc
RUN echo ""Installation of owtf is complete :) ""


"
2214,c6c5294a4d6451f0fa9be70d1873a696d76a23de,fix permission problem,"fix permission problem
","FROM ubuntu:trusty

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && apt-get install -y wget

RUN wget --no-check-certificate -O - https://swupdate.openvpn.net/repos/repo-public.gpg|apt-key add -
RUN echo ""deb http://swupdate.openvpn.net/apt trusty main"" > /etc/apt/sources.list.d/swupdate.openvpn.net.list

RUN apt-get update \
    && apt-get install -y openvpn ssmtp git-core vim iptables p7zip-full whois \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN git clone --depth 1 --branch v3.0.0 https://github.com/OpenVPN/easy-rsa.git /opt/easyrsa/ \
    && cp -R /opt/easyrsa/easyrsa3 /etc/openvpn/easy-rsa

RUN gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz > /etc/openvpn/server.conf

ADD start.sh /a/start.sh

CMD [""/a/start.sh""]",
2187,75fe704a4d9b9116de0351e902f7b86636eacad6,Update npm in dockerfile,"Update npm in dockerfile
","# Docker image for grasshopper-loader
# To build, run docker build --rm --tag=hmda/<image-name>:<tag-name> .
# To test, run ./docker-test.sh <image-name>:<tag-name> <cli args>
# To run, run ./docker-run <image-name>:<tag-name> <cli args>

FROM geodata/gdal:1.11.2
MAINTAINER Wyatt Pearsall <wyatt.pearsall@cfpb.gov>
USER root

RUN apt-get update && apt-get install -y curl git && \
    curl -sL https://deb.nodesource.com/setup_0.10 | sudo bash - && \
    apt-get install -y nodejs &&\
    mkdir -p /usr/src/app

WORKDIR /usr/src/app
COPY . /usr/src/app

RUN useradd notroot && chown -R notroot /usr/src/app && chmod u+rwx /usr/src/app
RUN npm install

USER notroot

CMD /bin/bash

",
77,21eea9f5b818b80c32d3f8e479a512b984660576,Bumped source to 20211210-cf565d4,"Bumped source to 20211210-cf565d4
","FROM docker.pkg.github.com/dock0/arch/arch:20211210-2747e13
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20211210-cf565d4
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2230,cb15ae41dff8097699c583d5fed11c36634c17b2,Update Dockerfile (apache-tomcat-7.0.72),Update Dockerfile (apache-tomcat-7.0.72),"FROM quay.io/lizhongwen/oracle-jdk:1.8

MAINTAINER github.com/Official-Registry/oracle-jdk, lizhongwen1989@gmail.com

ENV TOMCAT_VERSION=8.0.37
ENV TOMCAT_HOME=/opt/app/apache-tomcat-${TOMCAT_VERSION}
ENV JAVA_DEBUG=false
ENV JVM_MIN_MEM=256
ENV JVM_MAX_MEM=1024

RUN apt-get install -y unzip \
  && curl --fail --location --retry 3 \
    http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.0.37/bin/apache-tomcat-8.0.37.tar.gz \
    -o /tmp/tomcat.tar.gz \
  && mkdir -p /opt/app/ \
  && tar -zvxf /tmp/tomcat.tar.gz -C /opt/app/ \
  && rm -rf /tmp/tomcat.tar.gz ${TOMCAT_HOME}/webapps/*

ADD resources/entrypoint.sh ${TOMCAT_HOME}/bin/

RUN chmod +x ${TOMCAT_HOME}/bin/entrypoint.sh

EXPOSE 8080 8888

ENTRYPOINT [""/bin/sh"", ""-c"", ""${TOMCAT_HOME}/bin/entrypoint.sh""]
",
41,d5ea4a75b67674d9571943bbf19a4f6105c54ea4,fix(deps): update postgres docker tag to v13.4,"fix(deps): update postgres docker tag to v13.4
","FROM postgres:13.3

ENV POSTGRES_DB=hub
ENV POSTGRES_USER=stencila
","FROM postgres:13.4

ENV POSTGRES_DB=hub
ENV POSTGRES_USER=stencila
"
328,55283a685be3b1ac8caa13f5dba12ad55e5f3f9d,Upgrade dockerfile to 0.0.43,"Upgrade dockerfile to 0.0.43
","FROM flowdocker/play:0.0.37

ADD . /opt/play

WORKDIR /opt/play

RUN sbt clean stage
  
ENTRYPOINT [""java"", ""-jar"", ""/root/environment-provider.jar"", ""run"", ""play"", ""APP"", ""api/target/universal/stage/bin/APP-api""]
","FROM flowdocker/play:0.0.43

ADD . /opt/play

WORKDIR /opt/play

RUN sbt clean stage
  
ENTRYPOINT [""java"", ""-jar"", ""/root/environment-provider.jar"", ""run"", ""play"", ""APP"", ""api/target/universal/stage/bin/APP-api""]
"
102,a2ea1af4c0d1ea87529f0f2c8c1aeb90437e8be8,Update NPM for OS-Viewer,"Update NPM for OS-Viewer
","FROM gliderlabs/alpine:latest

RUN apk add --update python
RUN apk add --update --virtual=build-dependencies ca-certificates build-base
RUN apk add git
RUN apk add nodejs
RUN git clone http://github.com/openspending/os-viewer.git app
RUN cd app && npm install
RUN cd app && node node_modules/gulp/bin/gulp.js
RUN apk del build-dependencies
RUN rm -rf /var/cache/apk/*

ENV OS_VIEWER_BASE_PATH=viewer/

ADD settings.json /app/settings.json
ADD startup.sh /startup.sh

EXPOSE 8000

CMD echo working from $WORKDIR && cd $WORKDIR && API_URL=""${OS_EXTERNAL_ADDRESS}"" /startup.sh
","FROM gliderlabs/alpine:3.3

RUN apk add --update python
RUN apk add --update --virtual=build-dependencies ca-certificates build-base
RUN apk add git
RUN apk add nodejs
RUN git clone http://github.com/openspending/os-viewer.git app
RUN npm install npm -g
RUN npm --version
RUN cd app && npm install
RUN cd app && node node_modules/gulp/bin/gulp.js
RUN apk del build-dependencies
RUN rm -rf /var/cache/apk/*

ENV OS_VIEWER_BASE_PATH=viewer/

ADD settings.json /app/settings.json
ADD startup.sh /startup.sh

EXPOSE 8000

CMD echo working from $WORKDIR && cd $WORKDIR && API_URL=""${OS_EXTERNAL_ADDRESS}"" /startup.sh
"
