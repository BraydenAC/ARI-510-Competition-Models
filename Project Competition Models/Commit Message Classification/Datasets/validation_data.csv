id,Commit Hash,Subject,Message,Old Contents,New Contents
2261,c7e44b42f89e8f129d1157bbff3b29258595878c,Upgrade python,"Upgrade python

on-behalf-of: @par-tec <695c42277aebbb49ae58a85a7de81a095f3fce0c@par-tec.it>
","#
# Docker image for ipython notebook and various
#  python courses
#
FROM python:3.6
MAINTAINER roberto.polli@par-tec.it

RUN apt-get -y update && apt-get -y install gcc make python-dev python-pip 
RUN apt-get -y update && apt-get -y install build-essential libblas-dev liblapack-dev gfortran  libfreetype6-dev libpng-dev
RUN apt-get -y update && apt-get -y install tree sshpass openssl
RUN apt-get -y clean

RUN apt-get -y update && apt-get -y install curl apt-transport-https
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
RUN echo ""deb [arch=amd64] https://download.docker.com/linux/debian stretch stable"" >> /etc/apt/sources.list
RUN apt-get -y update && apt-get -y install docker-ce
RUN apt-get -y clean

RUN apt-get -y autoremove

RUN pip3 install -U pip

COPY requirements.txt /requirements.txt

# install requirements for both py2 and py3
RUN pip2 install -r /requirements.txt
RUN pip install -r /requirements.txt

# Use folding extension
RUN pip install jupyter_contrib_nbextensions
RUN jupyter contrib nbextension install --user
RUN jupyter nbextension enable codefolding/main
RUN jupyter nbextension enable rubberband/main
RUN jupyter nbextension enable exercise/main
RUN jupyter nbextension enable hide_input/main

RUN jupyter nbextension install rise --py --sys-prefix
RUN jupyter nbextension enable rise --py --sys-prefix

# Add API dependencies

COPY requirements-api.txt /requirements-api.txt
RUN pip3 install -r /requirements-api.txt

ENTRYPOINT /usr/local/bin/jupyter-notebook --ip 0.0.0.0
",
385,f64a8648f8ce8f63bd6cbbd93b94a1255975e2b1,fix: Dockerfile to reduce vulnerabilities,"fix: Dockerfile to reduce vulnerabilities

The following vulnerabilities are fixed with an upgrade:
- https://snyk.io/vuln/SNYK-DEBIAN9-GLIBC-356851
- https://snyk.io/vuln/SNYK-UPSTREAM-NODE-1055465
- https://snyk.io/vuln/SNYK-UPSTREAM-NODE-1078517
- https://snyk.io/vuln/SNYK-UPSTREAM-NODE-1243765
- https://snyk.io/vuln/SNYK-UPSTREAM-NODE-674659","FROM node:14.8.0-slim
WORKDIR /usr/src/app/
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 5000
CMD [""npm"",""start""]
","FROM node:14.16.0-slim
WORKDIR /usr/src/app/
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 5000
CMD [""npm"",""start""]
"
2089,c44d0144d7b8ee4632eda52aaa3eb37b9a3e66e5,Bumped source to 20200927-ba8fe83,"Bumped source to 20200927-ba8fe83
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200927-d1faa41
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
2271,e648c4252a17952a7e54cc6ffc324e8afddec854,FIX: Dockerfile,"FIX: Dockerfile
","FROM ubuntu:18.04

RUN apt-get install -y software-properties-common

RUN add-apt-repository ppa:lkoppel/robotics && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
       git g++ cmake python3 \
       libblas-dev \
       liblapack-dev \
       liblapacke-dev \
       libopenmpi-dev \
       openmpi-bin \
       libeigen3-dev \
    && rm -rf /var/lib/apt/lists/*",
360,06c7394f6b4b0f7acdffc9ddd77e5a6782012dd8,Update AWS CLI version to 1.11.86,"Update AWS CLI version to 1.11.86
","FROM python:3.6-slim
MAINTAINER Nikolay Rybak <mykola.rybak@gmail.com>

ARG BUILD_DATE
ARG VCS_REF

LABEL org.label-schema.schema-version=""1.0"" \
      org.label-schema.name=""AWS CLI"" \
      org.label-schema.url=""https://aws.amazon.com/cli/"" \
      org.label-schema.vcs-url=""https://github.com/GreyTeardrop/docker-awscli"" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.version=""1.11.85""

RUN \
    apt-get update && \
    apt-get install -y --no-install-recommends groff-base && \
    mkdir -p /aws && \
    pip install --upgrade awscli==1.11.85 && \
    rm -rf /root/.cache && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /aws
ENTRYPOINT [""aws""]
","FROM python:3.6-slim
MAINTAINER Nikolay Rybak <mykola.rybak@gmail.com>

ARG BUILD_DATE
ARG VCS_REF

LABEL org.label-schema.schema-version=""1.0"" \
      org.label-schema.name=""AWS CLI"" \
      org.label-schema.url=""https://aws.amazon.com/cli/"" \
      org.label-schema.vcs-url=""https://github.com/GreyTeardrop/docker-awscli"" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.version=""1.11.86""

RUN \
    apt-get update && \
    apt-get install -y --no-install-recommends groff-base && \
    mkdir -p /aws && \
    pip install --upgrade awscli==1.11.86 && \
    rm -rf /root/.cache && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /aws
ENTRYPOINT [""aws""]
"
2202,1063ffa61b0ce9f41fc99d3754e90aff81222b63,update autostew_back to new start behavior,"update autostew_back to new start behavior
","# This dockerfile is used to run the autostew webserver

FROM ubuntu:14.04
Maintainer Michael Wittig <witmic1@gmail.com>

ENV DEBIAN_FRONTEND noninteractive

COPY dependencies.sh dependencies.sh

# install all dependencies
RUN ./dependencies.sh

WORKDIR /autostew
VOLUME [""autostew/settings""]
VOLUME [""autostew_back/settings""]

ENV DJANGO_SETTINGS_MODULE=autostew.settings.prod
ENV SETTINGS_FILE=alpha

CMD /autostew/autostew_back.py -s $SETTINGS_FILE
",
166,ce72e7d82e136eab88de6384dd3efd9f19f009ea,Bumped source to 20220521-ced4788,"Bumped source to 20220521-ced4788
","FROM ghcr.io/dock0/arch:20220521-27b18d1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220521-ced4788
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2303,d2a3f380db03b8d735d5ed476f0801501a9d9d27,Update Dockerfile to have yarn installed,"Update Dockerfile to have yarn installed

This is needed to install jQuery for use in assets:precompile
","ARG base_image=ruby:2.7.5
FROM ${base_image}

RUN apt-get update -qq && apt-get upgrade -y
RUN apt-get install -y build-essential nodejs && apt-get clean

# This image is only intended to be able to run this app in a production RAILS_ENV
ENV RAILS_ENV production

ENV APP_HOME /app
ENV DATABASE_URL mysql2://root:root@mysql/signon
ENV GOVUK_APP_NAME signon
ENV PORT 3016
ENV TEST_DATABASE_URL mysql2://root:root@mysql/signon_test
ENV ASSETS_PREFIX /assets/signon

RUN mkdir $APP_HOME

WORKDIR $APP_HOME
ADD Gemfile* .ruby-version $APP_HOME/
RUN bundle config set deployment 'true'
RUN bundle config set without 'development test'
RUN bundle install --jobs 4

ADD . $APP_HOME

RUN GOVUK_APP_DOMAIN=www.gov.uk \
  DEVISE_PEPPER=`openssl rand -base64 40` \
  DEVISE_SECRET_KEY=`openssl rand -base64 40` \
  GOVUK_WEBSITE_ROOT=https://www.gov.uk \
  bundle exec rails assets:clean assets:precompile

HEALTHCHECK CMD curl --silent --fail localhost:$PORT || exit 1

CMD bundle exec puma
",
68,9e9bd153aedbdb50f1c2433d574a504f99007198,TIL: Add -p to preserve environment,"TIL: Add -p to preserve environment
","FROM debian:stretch

ENV BI_CONNECTOR_VERSION=2.10.0
WORKDIR /docker/

RUN apt-get update && apt-get install -y openssl libgssapi-krb5-2 rsyslog
RUN useradd -ms /bin/bash docker && chown -R docker:docker /docker

ADD https://info-mongodb-com.s3.amazonaws.com/mongodb-bi/v2/mongodb-bi-linux-x86_64-debian92-v$BI_CONNECTOR_VERSION.tgz /opt/
RUN tar xzvf /opt/mongodb-bi-linux-x86_64-debian92-v$BI_CONNECTOR_VERSION.tgz -C /opt
ADD bin /usr/local/bin
RUN chmod -R 755 /usr/local/bin
RUN chmod -R 755 /opt

EXPOSE 3307
CMD service rsyslog start && su -c run.sh docker
","FROM debian:stretch

ENV BI_CONNECTOR_VERSION=2.10.0
WORKDIR /docker/

RUN apt-get update && apt-get install -y openssl libgssapi-krb5-2 rsyslog
RUN useradd -ms /bin/bash docker && chown -R docker:docker /docker

ADD https://info-mongodb-com.s3.amazonaws.com/mongodb-bi/v2/mongodb-bi-linux-x86_64-debian92-v$BI_CONNECTOR_VERSION.tgz /opt/
RUN tar xzvf /opt/mongodb-bi-linux-x86_64-debian92-v$BI_CONNECTOR_VERSION.tgz -C /opt
ADD bin /usr/local/bin
RUN chmod -R 755 /usr/local/bin
RUN chmod -R 755 /opt

EXPOSE 3307
CMD service rsyslog start && su -p -c run.sh docker
"
2291,34217762d773784260dfebab6957d02a4b32753e,cirrus: add more dependencies to fedora image,"cirrus: add more dependencies to fedora image
","FROM fedora:31

RUN dnf install -y \
    cmake \
    diffutils \
    file \
    findutils \
    gcc-c++ \
    git \
    make \
    ninja-build \
    yaml-cpp-devel
",
2243,15388a77f4b9459c62921c35b482c56a592547c9,add env var user,"add env var user
","FROM ubuntu:14.04

MAINTAINER Ryan Dale <dalerr@niddk.nih.gov>

RUN apt-get update && apt-get install -y \
    build-essential \
    bzip2 \
    ca-certificates \
    git \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxtst6 \
    libxrender1 \
    mysql-client \
    wget \
    x11-apps \
    zlib1g-dev

RUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \
    wget --no-check-certificate --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    /bin/bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda && \
    rm Miniconda3-latest-Linux-x86_64.sh

ENV PATH /opt/conda/bin:$PATH
RUN mkdir /opt/lcdb
COPY requirements.txt /tmp/
RUN conda install -y -c bioconda -c r --file /tmp/requirements.txt
ENV DISPLAY :0
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8
WORKDIR /opt/lcdb
",
33,89d387b8e92950df5c703e2a64368a5c182ccd85,Update to match new jenkins docker path,Update to match new jenkins docker path,"FROM jenkinsci/jenkins

# Switch from jenkins user to root to install packages
USER root

# Install docker debian-way
RUN apt-get update && apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y --no-install-recommends && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - && \
    add-apt-repository ""deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"" && \
    apt-get update && apt-get install -y --no-install-recommends docker-ce

# Install additional packages
RUN apt-get update && apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        bzip2 \
        cloc \
        default-libmysqlclient-dev \
        file \
        g++ \
        gcc \
        imagemagick \
        libbz2-dev \
        libc6-dev \
        libcurl4-openssl-dev \
        libdb-dev \
        libevent-dev \
        libffi-dev \
        libgeoip-dev \
        libglib2.0-dev \
        libjpeg-dev \
        liblzma-dev \
        libmagickcore-dev \
        libmagickwand-dev \
        libncurses-dev \
        libpng-dev \
        libpq-dev \
        libreadline-dev \
        libsqlite3-dev \
        libssl-dev \
        libtool \
        libwebp-dev \
        libxml2-dev \
        libxslt-dev \
        libyaml-dev \
        make \
        patch \
        python-dev \
        python-pip \
        python-setuptools \
        xz-utils \
        zlib1g-dev && \
    rm -rf /var/lib/apt/lists/* && \
    pip install -U docker-compose virtualenv envtpl

# Allow jenkins to manage docker daemon
# WARNING: This is high security risk as all jobs creators have now root privilegues on HOST docker machine
RUN groupadd -f docker && \
    usermod -aG docker jenkins && \
    usermod -aG www-data jenkins

# Switch back to jenkins user
USER jenkins
","FROM jenkins/jenkins

# Switch from jenkins user to root to install packages
USER root

# Install docker debian-way
RUN apt-get update && apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y --no-install-recommends && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - && \
    add-apt-repository ""deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"" && \
    apt-get update && apt-get install -y --no-install-recommends docker-ce

# Install additional packages
RUN apt-get update && apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        bzip2 \
        cloc \
        default-libmysqlclient-dev \
        file \
        g++ \
        gcc \
        imagemagick \
        libbz2-dev \
        libc6-dev \
        libcurl4-openssl-dev \
        libdb-dev \
        libevent-dev \
        libffi-dev \
        libgeoip-dev \
        libglib2.0-dev \
        libjpeg-dev \
        liblzma-dev \
        libmagickcore-dev \
        libmagickwand-dev \
        libncurses-dev \
        libpng-dev \
        libpq-dev \
        libreadline-dev \
        libsqlite3-dev \
        libssl-dev \
        libtool \
        libwebp-dev \
        libxml2-dev \
        libxslt-dev \
        libyaml-dev \
        make \
        patch \
        python-dev \
        python-pip \
        python-setuptools \
        xz-utils \
        zlib1g-dev && \
    rm -rf /var/lib/apt/lists/* && \
    pip install -U docker-compose virtualenv envtpl

# Allow jenkins to manage docker daemon
# WARNING: This is high security risk as all jobs creators have now root privilegues on HOST docker machine
RUN groupadd -f docker && \
    usermod -aG docker jenkins && \
    usermod -aG www-data jenkins

# Switch back to jenkins user
USER jenkins
"
2118,55526b2ad8293ef34f16e328d9b48b9202467bbe,fix(deps): bump node from 15.8.0-alpine to 15.9.0-alpine in /share/docker,"fix(deps): bump node from 15.8.0-alpine to 15.9.0-alpine in /share/docker

Bumps node from 15.8.0-alpine to 15.9.0-alpine.

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <1c358da00a777d4e9898c1280ab801e2df165188@users.noreply.github.com>","FROM node:15.8.0-alpine AS node

# Install base utils
RUN set -x \
  && apk --no-cache add \
    su-exec \
    curl \
    netcat-openbsd

FROM node AS build
ARG NAME
ARG NPM_TOKEN
USER node

RUN mkdir /home/node/$NAME
WORKDIR /home/node/$NAME

# Install npm packages
COPY --chown=node:node package.json package-lock.json .snyk ./
RUN NODE_ENV= npm ci

# Build app
COPY --chown=node:node src src/
RUN set -x \
  && npm run build --if-present \
  && npm prune --production \
  && npm cache clean --force

FROM node
LABEL maintainer=""hugo@exec.sh""
ARG NAME
ARG VERSION
ARG VERSION_COMMIT
ARG VERSION_BUILD_DATE

RUN su-exec node mkdir /home/node/$NAME
WORKDIR /home/node/$NAME

# Copy app build
COPY --from=build --chown=node:node /home/node/$NAME /home/node/$NAME
COPY --chown=node:node share/docker/start.sh start.sh
COPY --chown=node:node share/docker/test.sh test.sh

# Set app runtime environment variables
ENV NAME $NAME
ENV VERSION $VERSION
ENV VERSION_COMMIT $VERSION_COMMIT
ENV VERSION_BUILD_DATE $VERSION_BUILD_DATE

EXPOSE 3000

ENTRYPOINT [ ""./start.sh"" ]

HEALTHCHECK --start-period=10s --interval=5m --timeout=3s \
  CMD nc -z localhost 3000 || exit 1
",
129,a2abd2706b974c056d4131c6150b10dd94252f3a,Bumped source to 20200603-288d4bd,"Bumped source to 20200603-288d4bd
","FROM docker.pkg.github.com/dock0/service/service:20200603-bed609c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200603-288d4bd
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
2114,06f25e3c29154f227456f49ffbde7541bb4f164a,add execution permission,"add execution permission
","FROM ubuntu:18.04
MAINTAINER TAKAMI Torao <koiroha@gmail.com>

RUN curl -sL https://deb.nodesource.com/setup_8.x | bash -

RUN apt-get update
RUN apt-get install -y unzip
RUN apt-get install -y curl

RUN apt-get install -y build-essential
RUN apt-get install -y openjdk-8-jdk
RUN apt-get install -y nodejs
RUN apt-get install -y python3-pip python3-dev \
      && cd /usr/local/bin \
      && ln -s /usr/bin/python3 python \
      && pip3 install --upgrade pip
RUN apt-get clean

RUN mkdir -p /opt/site
RUN mkdir -p /opt/webserver
COPY hazmat-webserver-1.1.1.zip /opt/webserver
RUN cd /opt/webserver && unzip hazmat-webserver-1.1.1.zip && mv hazmat-webserver-1.1.1/* . && rmdir hazmat-webserver-1.1.1 && rm hazmat-webserver-1.1.1.zip
COPY bootstrap.sh /opt/webserver/bin
WORKDIR /opt/webserver
ENTRYPOINT [""/opt/webserver/bin/bootstrap.sh""]
CMD [""/opt/site""]

ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
ENV PATH $JAVA_HOME/bin:$PATH
ENV LANG C.UTF-8

EXPOSE 8089
",
401,52758643fae3903270d40bce161cd55be64653d8,Use newer version of unrealircd to fix build,"Use newer version of unrealircd to fix build
",,
266,659be085beb272d868dd127ba96c3d4ed1cfdc95,[JENKINS] Automatic update to latest commit (f80eb16),"[JENKINS] Automatic update to latest commit (f80eb16)

Updated to f80eb1606012a15d04d760f3ca0a2be95c4b5b6e, `docker
build`-step verified to work.
","FROM python:3

# Install dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        sudo graphviz postgresql-client \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Clone and install netbox
ENV NETBOX_COMMIT 5aadfff1de2ba7a07faa327c519df4038bab6e7e
RUN mkdir -p /usr/src/netbox \
    && git clone https://github.com/digitalocean/netbox.git /usr/src/netbox \
    && (cd /usr/src/netbox && git checkout -q ""$NETBOX_COMMIT"") \
    && (cd /usr/src/netbox && pip install --no-cache-dir -r requirements.txt)

# Change workdir
WORKDIR /usr/src/netbox/netbox

# Create user
RUN groupadd -g 1000 netbox \
    && useradd -u 1000 -g 1000 -d /usr/src/netbox netbox \
    && chown -Rh netbox:netbox /usr/src/netbox

# Setup entrypoint
COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

# Expose ports
EXPOSE 8000/tcp

ENTRYPOINT [""/sbin/entrypoint.sh""]
CMD [""runserver"", ""--insecure"", ""0.0.0.0:8000""]
","FROM python:3

# Install dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        sudo graphviz postgresql-client \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Clone and install netbox
ENV NETBOX_COMMIT f80eb1606012a15d04d760f3ca0a2be95c4b5b6e
RUN mkdir -p /usr/src/netbox \
    && git clone https://github.com/digitalocean/netbox.git /usr/src/netbox \
    && (cd /usr/src/netbox && git checkout -q ""$NETBOX_COMMIT"") \
    && (cd /usr/src/netbox && pip install --no-cache-dir -r requirements.txt)

# Change workdir
WORKDIR /usr/src/netbox/netbox

# Create user
RUN groupadd -g 1000 netbox \
    && useradd -u 1000 -g 1000 -d /usr/src/netbox netbox \
    && chown -Rh netbox:netbox /usr/src/netbox

# Setup entrypoint
COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

# Expose ports
EXPOSE 8000/tcp

ENTRYPOINT [""/sbin/entrypoint.sh""]
CMD [""runserver"", ""--insecure"", ""0.0.0.0:8000""]
"
284,08cde83794a1ddac312557d4b6b7af5d11c31eea,Bumped source to 20201111-07afd59,"Bumped source to 20201111-07afd59
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201111-5419fe1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20201111-07afd59
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
313,530926704592916970fea8716002baabcfff4bc2,Updated Atlassian JIRA Service Desk master branch to latest version 4.3.3,"Updated Atlassian JIRA Service Desk master branch to latest version 4.3.3
","FROM openjdk:8-alpine

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV APP_VERSION   4.3.2

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk add --no-cache curl xmlstarlet bash ttf-dejavu libc6-compat \
    && addgroup -S jira \
    && adduser -S -g jira -u 1000 jira \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R jira:jira      ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-servicedesk-4.3.2.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-9.4.3.22.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-9.4.3.22.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R jira:jira      ""${JIRA_INSTALL}/conf"" \
    && chown -R jira:jira      ""${JIRA_INSTALL}/logs"" \
    && chown -R jira:jira      ""${JIRA_INSTALL}/temp"" \
    && chown -R jira:jira      ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Reference the UID for the jira user.
USER 1000

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/start-jira.sh"", ""-fg""]
","FROM openjdk:8-alpine

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV APP_VERSION   4.3.3

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apk add --no-cache curl xmlstarlet bash ttf-dejavu libc6-compat \
    && addgroup -S jira \
    && adduser -S -g jira -u 1000 jira \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R jira:jira      ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-servicedesk-4.3.3.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && rm -f                   ""${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar"" \
    && curl -Ls                ""https://jdbc.postgresql.org/download/postgresql-9.4.3.32.jar"" -o ""${JIRA_INSTALL}/lib/postgresql-9.4.3.32.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R jira:jira      ""${JIRA_INSTALL}/conf"" \
    && chown -R jira:jira      ""${JIRA_INSTALL}/logs"" \
    && chown -R jira:jira      ""${JIRA_INSTALL}/temp"" \
    && chown -R jira:jira      ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Reference the UID for the jira user.
USER 1000

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/start-jira.sh"", ""-fg""]
"
159,ebf57e63750552ab8e8754efecccf8becc10e86a,Fix typo,"Fix typo
","FROM ubuntu:16.04

# Install required packages
RUN apt-get update && apt-get --assume-yes install \
    apache2 \
    git \
    php \
    curl \
    php-dev \
    php-curl \
    libapache2-mod-php \
    zip \
    nodejs \
    npm \
    imagemagick \
    sqlite3 \
    php7.0-sqlite3

# Install composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Install bower
RUN ln -s /usr/bin/nodejs /usr/bin/node
RUN npm install -g bower
RUN npm install -g coffee-script

# Prepare apache
RUN rm -rf /var/www/html

# Make terminal functional by default
RUN echo ""export TERM=xterm"" >>/root/.bashrc

# Install biom via conda
RUN curl -sS http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh >miniconda.sh
RUN chmod +x miniconda.sh
RUN ./miniconda.sh -b -f -p /usr/local
RUN echo ""export LC_ALL=C.UTF-8"" >>/etc/apache2/envvars
RUN echo ""export LANG=C.UTF-8"" >>/etc/apache2/envvars

# Clone git repo
RUN git clone https://github.com/iimog/Phinch.git /var/www/html
RUN cd /var/www/html && composer install
RUN cd /var/www/html && bower install --allow-root
RUN cd /var/www/html && coffee -o scripts -c src
RUN cd /var/www/html/vendor/iimog/biom-conversion-server && conda install --yes --file explicit-conda-spec.txt
RUN cp /var/www/html/vendor/iimog/biom-conversion-server/convert.php /var/www/html
RUN cd /var/www/html/biomFiles/ && sqlite3 phinch.sqlite <../data/dbschema.sql
RUN chmod -R www-data:www-data /var/www/html/biomFiles
RUN cp /var/www/html/server/dbconfig-sqlite.php /var/www/html/server/dbconfig.php

# Add custom php ini
ADD php.ini /etc/php/7.0/apache2/php.ini

CMD service apache2 start; while true; do sleep 60; done
","FROM ubuntu:16.04

# Install required packages
RUN apt-get update && apt-get --assume-yes install \
    apache2 \
    git \
    php \
    curl \
    php-dev \
    php-curl \
    libapache2-mod-php \
    zip \
    nodejs \
    npm \
    imagemagick \
    sqlite3 \
    php7.0-sqlite3

# Install composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Install bower
RUN ln -s /usr/bin/nodejs /usr/bin/node
RUN npm install -g bower
RUN npm install -g coffee-script

# Prepare apache
RUN rm -rf /var/www/html

# Make terminal functional by default
RUN echo ""export TERM=xterm"" >>/root/.bashrc

# Install biom via conda
RUN curl -sS http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh >miniconda.sh
RUN chmod +x miniconda.sh
RUN ./miniconda.sh -b -f -p /usr/local
RUN echo ""export LC_ALL=C.UTF-8"" >>/etc/apache2/envvars
RUN echo ""export LANG=C.UTF-8"" >>/etc/apache2/envvars

# Clone git repo
RUN git clone https://github.com/iimog/Phinch.git /var/www/html
RUN cd /var/www/html && composer install
RUN cd /var/www/html && bower install --allow-root
RUN cd /var/www/html && coffee -o scripts -c src
RUN cd /var/www/html/vendor/iimog/biom-conversion-server && conda install --yes --file explicit-conda-spec.txt
RUN cp /var/www/html/vendor/iimog/biom-conversion-server/convert.php /var/www/html
RUN cd /var/www/html/biomFiles/ && sqlite3 phinch.sqlite <../data/dbschema.sql
RUN chown -R www-data:www-data /var/www/html/biomFiles
RUN cp /var/www/html/server/dbconfig-sqlite.php /var/www/html/server/dbconfig.php

# Add custom php ini
ADD php.ini /etc/php/7.0/apache2/php.ini

CMD service apache2 start; while true; do sleep 60; done
"
288,9e246a6e7cbd074dcec1c218d9b296cf98f0fcf1,Pin tested version (#10299),"Pin tested version (#10299)

* Test

* Update dockerfile to set version

* Undo","FROM bash:latest
RUN apk --no-cache add dumb-init gettext ca-certificates openssl curl \
    && curl -Lo /usr/local/bin/kubectl ""https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"" \
    && chmod +x /usr/local/bin/kubectl \
    && curl -sL https://run.linkerd.io/install | sh \
    && ln -s /root/.linkerd2/bin/linkerd /usr/local/bin/linkerd

WORKDIR /
COPY install-linkerd.sh /
RUN chmod +x install-linkerd.sh

ENTRYPOINT /usr/local/bin/bash /install-linkerd.sh","FROM bash:latest
ENV LINKERD2_VERSION=stable-2.10.2
RUN apk --no-cache add dumb-init gettext ca-certificates openssl curl \
    && curl -Lo /usr/local/bin/kubectl ""https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"" \
    && chmod +x /usr/local/bin/kubectl \
    && curl -sL https://run.linkerd.io/install | sh \
    && ln -s /root/.linkerd2/bin/linkerd /usr/local/bin/linkerd

WORKDIR /
COPY install-linkerd.sh /
RUN chmod +x install-linkerd.sh

ENTRYPOINT /usr/local/bin/bash /install-linkerd.sh
"
60,49306fbf6b50599d7a1f14d649848ba602f1c6b8,"Fixed missing ""\"" in Dockerfile (#44)","Fixed missing ""\"" in Dockerfile (#44)

","FROM ubuntu:18.04

LABEL maintainer=""Paul Steinlechner""

ENV TIMEZONE=Europe/Vienna \
    DEBIAN_FRONTEND=noninteractive \
    CONANEXILES_MASTERSERVER=1 \
    CONANEXILES_Game_RconPlugin_RconEnabled=1 \
    CONANEXILES_Game_RconPlugin_RconPassword=Password \
    CONANEXILES_Game_RconPlugin_RconPort=25575 \
    CONANEXILES_Game_RconPlugin_RconMaxKarma=60

RUN apt-get update \
    && apt-get install -y crudini python3-pip redis-tools software-properties-common supervisor unzip curl xvfb wget rsync net-tools \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN dpkg --add-architecture i386 \
    && curl https://dl.winehq.org/wine-builds/winehq.key | apt-key add - \
    && apt-add-repository 'https://dl.winehq.org/wine-builds/ubuntu/' \
    && apt-add-repository ppa:cybermax-dexter/sdl2-backport \
    && apt-get update \
    && apt-get install --install-recommends --assume-yes winehq-devel \
    && pip3 install python-valve \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install winetricks
ADD https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks /usr/bin/winetricks
RUN chmod +x /usr/bin/winetricks

RUN apt-get update \
    && apt-get install -y x11vnc strace cabextract
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY . ./

RUN ln -snf /usr/share/zoneinfo/$TIMEZONE /etc/localtime \
    && echo $TIMEZONE > /etc/timezone \
    && chmod +x /entrypoint.sh \
    && cd /usr/bin/ \
    && chmod +x conanexiles_controller rconcli steamcmd_setup

EXPOSE 7777/udp 25575 27015/udp 27016/udp 37015/udp 37016/udp 5900

VOLUME [""/conanexiles""]

ENTRYPOINT [""/entrypoint.sh""]
CMD [""supervisord""]
","FROM ubuntu:18.04

LABEL maintainer=""Paul Steinlechner""

ENV TIMEZONE=Europe/Vienna \
    DEBIAN_FRONTEND=noninteractive \
    CONANEXILES_MASTERSERVER=1 \
    CONANEXILES_Game_RconPlugin_RconEnabled=1 \
    CONANEXILES_Game_RconPlugin_RconPassword=Password \
    CONANEXILES_Game_RconPlugin_RconPort=25575 \
    CONANEXILES_Game_RconPlugin_RconMaxKarma=60

RUN apt-get update \
    && apt-get install -y crudini python3-pip redis-tools software-properties-common supervisor unzip curl xvfb wget rsync net-tools \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN dpkg --add-architecture i386 \
    && curl https://dl.winehq.org/wine-builds/winehq.key | apt-key add - \
    && apt-add-repository 'https://dl.winehq.org/wine-builds/ubuntu/' \
    && apt-add-repository ppa:cybermax-dexter/sdl2-backport \
    && apt-get update \
    && apt-get install --install-recommends --assume-yes winehq-devel \
    && pip3 install python-valve \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install winetricks
ADD https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks /usr/bin/winetricks
RUN chmod +x /usr/bin/winetricks

RUN apt-get update \
    && apt-get install -y x11vnc strace cabextract \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY . ./

RUN ln -snf /usr/share/zoneinfo/$TIMEZONE /etc/localtime \
    && echo $TIMEZONE > /etc/timezone \
    && chmod +x /entrypoint.sh \
    && cd /usr/bin/ \
    && chmod +x conanexiles_controller rconcli steamcmd_setup

EXPOSE 7777/udp 25575 27015/udp 27016/udp 37015/udp 37016/udp 5900

VOLUME [""/conanexiles""]

ENTRYPOINT [""/entrypoint.sh""]
CMD [""supervisord""]
"
2125,94adeada3256c7908c614e351650108f4c8f520c,Bumped source to 20200328-fa23b74,"Bumped source to 20200328-fa23b74
","FROM docker.pkg.github.com/dock0/service/service:20200328-95aa349
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
221,4a259ea43d01bbd36fc18b850b0a53a69fda3cb2,Update composer hash,Update composer hash,"FROM ubuntu:xenial

# Versioning
ENV PIP_INSTALL_VERSION 19.0.2
ENV PIP3_INSTALL_VERSION 8.1.1
ENV GO_LANG_VERSION 1.14.3
ENV MAVEN_VERSION 3.6.0
ENV SBT_VERSION 1.3.3
ENV GRADLE_VERSION 5.6.4
ENV RUBY_VERSION 2.7.1
ENV MIX_VERSION 1.0
ENV COMPOSER_ALLOW_SUPERUSER 1

# programs needed for building
RUN apt-get update && apt-get install -y \
  build-essential \
  curl \
  sudo \
  unzip \
  wget \
  gnupg2 \ 
  software-properties-common \
  bzr

RUN add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git

# nodejs seems to be required for the one of the gems
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash - && \
    apt-get -y install nodejs

# install yarn
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && \
  echo ""deb https://dl.yarnpkg.com/debian/ stable main"" | sudo tee /etc/apt/sources.list.d/yarn.list && \
  apt-get update && \
  apt-get install yarn

# install bower
RUN npm install -g bower && \
    echo '{ ""allow_root"": true }' > /root/.bowerrc

# install jdk 12
RUN curl -L -o openjdk12.tar.gz https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_linux-x64_bin.tar.gz && \
    tar xvf openjdk12.tar.gz && \
    rm openjdk12.tar.gz && \
    sudo mv jdk-12.0.2 /opt/ && \
    sudo rm /opt/jdk-12.0.2/lib/src.zip
ENV JAVA_HOME=/opt/jdk-12.0.2
ENV PATH=$PATH:$JAVA_HOME/bin
RUN java -version

# install python and rebar
RUN apt-get install -y python rebar

# install and update python-pip
RUN apt-get install -y python-pip python3-pip && \
    pip2 install --no-cache-dir --upgrade pip==$PIP_INSTALL_VERSION  && \
    pip3 install --no-cache-dir --upgrade pip==$PIP3_INSTALL_VERSION

# install maven
RUN curl -O https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz && \
    tar -xf apache-maven-$MAVEN_VERSION-bin.tar.gz; rm -rf apache-maven-$MAVEN_VERSION-bin.tar.gz && \
    mv apache-maven-$MAVEN_VERSION /usr/local/lib/maven && \
    ln -s /usr/local/lib/maven/bin/mvn /usr/local/bin/mvn

# install sbt
RUN mkdir -p /usr/local/share/sbt-launcher-packaging && \
    curl --progress \
    --retry 3 \
    --retry-delay 15 \
    --location ""https://github.com/sbt/sbt/releases/download/v${SBT_VERSION}/sbt-${SBT_VERSION}.tgz"" \
    --output ""/tmp/sbt-${SBT_VERSION}.tgz"" && \
    tar -xzf ""/tmp/sbt-${SBT_VERSION}.tgz"" -C /usr/local/share/sbt-launcher-packaging --strip-components=1 && \
    ln -s /usr/local/share/sbt-launcher-packaging/bin/sbt /usr/local/bin/sbt && \
    rm -f ""/tmp/sbt-${SBT_VERSION}.tgz""

# install gradle
WORKDIR /tmp
RUN curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip && \
    unzip -q gradle.zip && \
    rm gradle.zip && \
    mv gradle-$GRADLE_VERSION /root/gradle
ENV PATH=/root/gradle/bin:$PATH

#install go
WORKDIR /go
RUN wget https://storage.googleapis.com/golang/go$GO_LANG_VERSION.linux-amd64.tar.gz -O go.tar.gz && tar --strip-components=1 -xf go.tar.gz && rm -f go.tar.gz
ENV GOROOT /go
ENV PATH=$PATH:/go/bin

# godep is now required for license_finder to work for project that are still managed with GoDep
ENV GOROOT=/go
ENV GOPATH=/gopath
ENV PATH=$PATH:$GOPATH/bin
RUN mkdir /gopath && \
  go get github.com/tools/godep && \
  go get github.com/FiloSottile/gvt && \
  go get github.com/Masterminds/glide && \
  go get github.com/kardianos/govendor && \
  go get github.com/golang/dep/cmd/dep && \
  go get -u github.com/rancher/trash && \
  go clean -cache

# Fix the locale
RUN apt-get install -y locales
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

#install rvm
RUN apt-add-repository -y ppa:rael-gc/rvm && \
    apt update && apt install -y rvm && \
    /usr/share/rvm/bin/rvm install --default $RUBY_VERSION
ENV PATH=/usr/share/rvm/bin:$PATH

#install mix
RUN wget https://packages.erlang-solutions.com/erlang-solutions_${MIX_VERSION}_all.deb && \
    sudo dpkg -i erlang-solutions_${MIX_VERSION}_all.deb && \
    sudo rm -f erlang-solutions_${MIX_VERSION}_all.deb && \
    sudo apt-get update && \
    sudo apt-get install -y esl-erlang && \
    sudo apt-get install -y elixir

# install bundler
RUN bash -lc ""gem update --system && gem install bundler""

# install conan
RUN apt-get install -y python-dev && \
pip install --no-cache-dir --ignore-installed six --ignore-installed colorama \
    --ignore-installed requests --ignore-installed chardet \
    --ignore-installed urllib3 \
    --upgrade setuptools && \
    pip install --no-cache-dir -Iv conan==1.11.2

# install Cargo
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --profile minimal

# install NuGet (w. mono)
# https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#macoslinux
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF &&\
  echo ""deb https://download.mono-project.com/repo/ubuntu stable-xenial main"" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list &&\
  apt-get update &&\
  apt-get install -y mono-complete &&\
  curl -o ""/usr/local/bin/nuget.exe"" ""https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"" &&\
  curl -o ""/usr/local/bin/nugetv3.5.0.exe"" ""https://dist.nuget.org/win-x86-commandline/v3.5.0/nuget.exe""

# install dotnet core
WORKDIR /tmp
RUN wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb &&\
  sudo dpkg -i packages-microsoft-prod.deb &&\
  rm packages-microsoft-prod.deb &&\
  sudo apt-get update &&\
  sudo apt-get install -y dotnet-runtime-2.1 dotnet-sdk-2.1 dotnet-sdk-2.2 dotnet-sdk-3.0 dotnet-sdk-3.1

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 4F4EA0AAE5267A6C &&\
    echo ""deb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main"" | sudo tee /etc/apt/sources.list.d/php.list &&\
    apt-get update &&\
    apt-get install -y php7.4-cli &&\
    php -r ""copy('https://getcomposer.org/installer', 'composer-setup.php');"" &&\
    php -r ""if (hash_file('sha384', 'composer-setup.php') === 'e0012edf3e80b6978849f5eff0d4b4e4c79ff1609dd1e613307e16318854d24ae64f26d17af3ef0bf7cfb710ca74755a') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"" &&\
    php composer-setup.php &&\
    php -r ""unlink('composer-setup.php');"" &&\
    mv composer.phar /usr/bin/composer

# install license_finder
COPY . /LicenseFinder
RUN bash -lc ""cd /LicenseFinder && bundle config set no-cache 'true' && bundle install -j4 && rake install""

WORKDIR /

CMD cd /scan && /bin/bash -l
","FROM ubuntu:xenial

# Versioning
ENV PIP_INSTALL_VERSION 19.0.2
ENV PIP3_INSTALL_VERSION 8.1.1
ENV GO_LANG_VERSION 1.14.3
ENV MAVEN_VERSION 3.6.0
ENV SBT_VERSION 1.3.3
ENV GRADLE_VERSION 5.6.4
ENV RUBY_VERSION 2.7.1
ENV MIX_VERSION 1.0
ENV COMPOSER_ALLOW_SUPERUSER 1

# programs needed for building
RUN apt-get update && apt-get install -y \
  build-essential \
  curl \
  sudo \
  unzip \
  wget \
  gnupg2 \ 
  software-properties-common \
  bzr

RUN add-apt-repository ppa:git-core/ppa && apt-get update && apt-get install -y git

# nodejs seems to be required for the one of the gems
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash - && \
    apt-get -y install nodejs

# install yarn
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && \
  echo ""deb https://dl.yarnpkg.com/debian/ stable main"" | sudo tee /etc/apt/sources.list.d/yarn.list && \
  apt-get update && \
  apt-get install yarn

# install bower
RUN npm install -g bower && \
    echo '{ ""allow_root"": true }' > /root/.bowerrc

# install jdk 12
RUN curl -L -o openjdk12.tar.gz https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_linux-x64_bin.tar.gz && \
    tar xvf openjdk12.tar.gz && \
    rm openjdk12.tar.gz && \
    sudo mv jdk-12.0.2 /opt/ && \
    sudo rm /opt/jdk-12.0.2/lib/src.zip
ENV JAVA_HOME=/opt/jdk-12.0.2
ENV PATH=$PATH:$JAVA_HOME/bin
RUN java -version

# install python and rebar
RUN apt-get install -y python rebar

# install and update python-pip
RUN apt-get install -y python-pip python3-pip && \
    pip2 install --no-cache-dir --upgrade pip==$PIP_INSTALL_VERSION  && \
    pip3 install --no-cache-dir --upgrade pip==$PIP3_INSTALL_VERSION

# install maven
RUN curl -O https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz && \
    tar -xf apache-maven-$MAVEN_VERSION-bin.tar.gz; rm -rf apache-maven-$MAVEN_VERSION-bin.tar.gz && \
    mv apache-maven-$MAVEN_VERSION /usr/local/lib/maven && \
    ln -s /usr/local/lib/maven/bin/mvn /usr/local/bin/mvn

# install sbt
RUN mkdir -p /usr/local/share/sbt-launcher-packaging && \
    curl --progress \
    --retry 3 \
    --retry-delay 15 \
    --location ""https://github.com/sbt/sbt/releases/download/v${SBT_VERSION}/sbt-${SBT_VERSION}.tgz"" \
    --output ""/tmp/sbt-${SBT_VERSION}.tgz"" && \
    tar -xzf ""/tmp/sbt-${SBT_VERSION}.tgz"" -C /usr/local/share/sbt-launcher-packaging --strip-components=1 && \
    ln -s /usr/local/share/sbt-launcher-packaging/bin/sbt /usr/local/bin/sbt && \
    rm -f ""/tmp/sbt-${SBT_VERSION}.tgz""

# install gradle
WORKDIR /tmp
RUN curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip && \
    unzip -q gradle.zip && \
    rm gradle.zip && \
    mv gradle-$GRADLE_VERSION /root/gradle
ENV PATH=/root/gradle/bin:$PATH

#install go
WORKDIR /go
RUN wget https://storage.googleapis.com/golang/go$GO_LANG_VERSION.linux-amd64.tar.gz -O go.tar.gz && tar --strip-components=1 -xf go.tar.gz && rm -f go.tar.gz
ENV GOROOT /go
ENV PATH=$PATH:/go/bin

# godep is now required for license_finder to work for project that are still managed with GoDep
ENV GOROOT=/go
ENV GOPATH=/gopath
ENV PATH=$PATH:$GOPATH/bin
RUN mkdir /gopath && \
  go get github.com/tools/godep && \
  go get github.com/FiloSottile/gvt && \
  go get github.com/Masterminds/glide && \
  go get github.com/kardianos/govendor && \
  go get github.com/golang/dep/cmd/dep && \
  go get -u github.com/rancher/trash && \
  go clean -cache

# Fix the locale
RUN apt-get install -y locales
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

#install rvm
RUN apt-add-repository -y ppa:rael-gc/rvm && \
    apt update && apt install -y rvm && \
    /usr/share/rvm/bin/rvm install --default $RUBY_VERSION
ENV PATH=/usr/share/rvm/bin:$PATH

#install mix
RUN wget https://packages.erlang-solutions.com/erlang-solutions_${MIX_VERSION}_all.deb && \
    sudo dpkg -i erlang-solutions_${MIX_VERSION}_all.deb && \
    sudo rm -f erlang-solutions_${MIX_VERSION}_all.deb && \
    sudo apt-get update && \
    sudo apt-get install -y esl-erlang && \
    sudo apt-get install -y elixir

# install bundler
RUN bash -lc ""gem update --system && gem install bundler""

# install conan
RUN apt-get install -y python-dev && \
pip install --no-cache-dir --ignore-installed six --ignore-installed colorama \
    --ignore-installed requests --ignore-installed chardet \
    --ignore-installed urllib3 \
    --upgrade setuptools && \
    pip install --no-cache-dir -Iv conan==1.11.2

# install Cargo
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --profile minimal

# install NuGet (w. mono)
# https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#macoslinux
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF &&\
  echo ""deb https://download.mono-project.com/repo/ubuntu stable-xenial main"" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list &&\
  apt-get update &&\
  apt-get install -y mono-complete &&\
  curl -o ""/usr/local/bin/nuget.exe"" ""https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"" &&\
  curl -o ""/usr/local/bin/nugetv3.5.0.exe"" ""https://dist.nuget.org/win-x86-commandline/v3.5.0/nuget.exe""

# install dotnet core
WORKDIR /tmp
RUN wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb &&\
  sudo dpkg -i packages-microsoft-prod.deb &&\
  rm packages-microsoft-prod.deb &&\
  sudo apt-get update &&\
  sudo apt-get install -y dotnet-runtime-2.1 dotnet-sdk-2.1 dotnet-sdk-2.2 dotnet-sdk-3.0 dotnet-sdk-3.1

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 4F4EA0AAE5267A6C &&\
    echo ""deb http://ppa.launchpad.net/ondrej/php/ubuntu xenial main"" | sudo tee /etc/apt/sources.list.d/php.list &&\
    apt-get update &&\
    apt-get install -y php7.4-cli &&\
    php -r ""copy('https://getcomposer.org/installer', 'composer-setup.php');"" &&\
    php -r ""if (hash_file('sha384', 'composer-setup.php') === 'e5325b19b381bfd88ce90a5ddb7823406b2a38cff6bb704b0acc289a09c8128d4a8ce2bbafcd1fcbdc38666422fe2806') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"" &&\
    php composer-setup.php &&\
    php -r ""unlink('composer-setup.php');"" &&\
    mv composer.phar /usr/bin/composer

# install license_finder
COPY . /LicenseFinder
RUN bash -lc ""cd /LicenseFinder && bundle config set no-cache 'true' && bundle install -j4 && rake install""

WORKDIR /

CMD cd /scan && /bin/bash -l
"
241,aab9632ab69a50c4e4e6b9a4a74c141f8f1b34a6,windows-x86: Add --force-yes,"windows-x86: Add --force-yes

For

E: There are problems and -y was used without --force-yes

on CircleCI.
","FROM thewtex/cross-compiler-base
MAINTAINER Matt McCormick ""matt.mccormick@kitware.com""

# WINE is used as an emulator for try_run and tests with CMake.
# Other dependencies are from the listed MXE requirements:
#   http://mxe.cc/#requirements
# 'cmake' is omitted because it is installed from source in the base image
RUN apt-get update && apt-get -y install \
  autoconf \
  automake \
  autopoint \
  bash \
  bison \
  bzip2 \
  flex \
  gettext \
  git \
  g++ \
  g++-multilib \
  gperf \
  intltool \
  libffi-dev \
  libgdk-pixbuf2.0-dev \
  libtool-bin \
  libltdl-dev \
  libssl-dev \
  libxml-parser-perl \
  libc6-dev-i386 \
  make \
  openssl \
  p7zip-full \
  patch \
  perl \
  pkg-config \
  python \
  ruby \
  scons \
  sed \
  unzip \
  wget \
  wine \
  xz-utils
# Set up wine
RUN dpkg --add-architecture i386 && \
  apt-get update && \
  apt-get install -y wine32
ENV WINEARCH win32
RUN wine hostname

WORKDIR /usr/src
# mxe master 2016-04-09
RUN git clone https://github.com/mxe/mxe.git && \
  cd mxe && \
  git checkout 4accc990de7741f4d5aa37e368a732f3d47d803a
WORKDIR /usr/src/mxe
COPY settings.mk /usr/src/mxe/
RUN make -j$(nproc)

ENV PATH ${PATH}:/usr/src/mxe/usr/bin
ENV CROSS_TRIPLE i686-w64-mingw32.static
ENV AS=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-as \
    AR=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-ar \
    CC=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-gcc \
    CPP=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-cpp \
    CXX=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-g++ \
    LD=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-ld

ENV DEFAULT_DOCKCROSS_IMAGE thewtex/cross-compiler-windows-x86
WORKDIR /build

ENV CMAKE_TOOLCHAIN_FILE /usr/src/mxe/usr/i686-w64-mingw32.static/share/cmake/mxe-conf.cmake
RUN echo 'set(CMAKE_CROSSCOMPILING_EMULATOR ""/usr/bin/wine"")' >> ${CMAKE_TOOLCHAIN_FILE}
","FROM thewtex/cross-compiler-base
MAINTAINER Matt McCormick ""matt.mccormick@kitware.com""

# WINE is used as an emulator for try_run and tests with CMake.
# Other dependencies are from the listed MXE requirements:
#   http://mxe.cc/#requirements
# 'cmake' is omitted because it is installed from source in the base image
RUN apt-get update && apt-get -y --force-yes install \
  autoconf \
  automake \
  autopoint \
  bash \
  bison \
  bzip2 \
  flex \
  gettext \
  git \
  g++ \
  g++-multilib \
  gperf \
  intltool \
  libffi-dev \
  libgdk-pixbuf2.0-dev \
  libtool-bin \
  libltdl-dev \
  libssl-dev \
  libxml-parser-perl \
  libc6-dev-i386 \
  make \
  openssl \
  p7zip-full \
  patch \
  perl \
  pkg-config \
  python \
  ruby \
  scons \
  sed \
  unzip \
  wget \
  wine \
  xz-utils
# Set up wine
RUN dpkg --add-architecture i386 && \
  apt-get update && \
  apt-get install -y wine32
ENV WINEARCH win32
RUN wine hostname

WORKDIR /usr/src
# mxe master 2016-04-09
RUN git clone https://github.com/mxe/mxe.git && \
  cd mxe && \
  git checkout 4accc990de7741f4d5aa37e368a732f3d47d803a
WORKDIR /usr/src/mxe
COPY settings.mk /usr/src/mxe/
RUN make -j$(nproc)

ENV PATH ${PATH}:/usr/src/mxe/usr/bin
ENV CROSS_TRIPLE i686-w64-mingw32.static
ENV AS=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-as \
    AR=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-ar \
    CC=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-gcc \
    CPP=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-cpp \
    CXX=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-g++ \
    LD=/usr/src/mxe/usr/bin/${CROSS_TRIPLE}-ld

ENV DEFAULT_DOCKCROSS_IMAGE thewtex/cross-compiler-windows-x86
WORKDIR /build

ENV CMAKE_TOOLCHAIN_FILE /usr/src/mxe/usr/i686-w64-mingw32.static/share/cmake/mxe-conf.cmake
RUN echo 'set(CMAKE_CROSSCOMPILING_EMULATOR ""/usr/bin/wine"")' >> ${CMAKE_TOOLCHAIN_FILE}
"
203,dc3dcd0adafb6388081c2e83b1fbb37e2c2d20c9,Update app sha,"Update app sha
","FROM ubuntu:14.04
MAINTAINER Damon Oehlman <damon.oehlman@nicta.com.au>

# configure environment
ENV CHROME_DEB google-chrome-stable_current_amd64.deb
ENV CHROME_SANDBOX /opt/google/chrome/chrome-sandbox
ENV HOME /home/testbot

# configure ports that will be exposed
EXPOSE 3000:80

# use aarnet mirror for quicker building while developing
RUN sed -i 's/archive.ubuntu.com/mirror.aarnet.edu.au\/pub\/ubuntu\/archive/g' /etc/apt/sources.list

# create the testbot user
RUN mkdir -p /home/testbot
RUN useradd --password testbot --home /home/testbot testbot
RUN chown testbot:testbot /home/testbot
WORKDIR /home/testbot

# install wget and curl
RUN apt-get -y update
RUN apt-get install -y curl wget software-properties-common

# include the nodesource node install
RUN curl -sL https://deb.nodesource.com/setup | bash -

# include gstreamer
RUN add-apt-repository -y ppa:gstreamer-developers/ppa

# update sources
RUN apt-get -y update --fix-missing

# install packages
RUN apt-get install -y nodejs git xvfb build-essential git xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic

# TODO: configure video loopback
# RUN /tmp/setup-loopbackvideo.sh

# install chrome
RUN wget https://dl.google.com/linux/direct/$CHROME_DEB
RUN dpkg --install --force-overwrite --force-confdef $CHROME_DEB || sudo apt-get -y -f install
RUN apt-get install -y -q

# workaround chrome sandbox limitations in containers
RUN rm -f $CHROME_SANDBOX
RUN wget https://googledrive.com/host/0B5VlNZ_Rvdw6NTJoZDBSVy1ZdkE -O $CHROME_SANDBOX
RUN chmod 4755 $CHROME_SANDBOX

# set the app SHA
ENV APP_SHA b27e4287bd958f3dccd6a28acb91ec808fe3b10d

# run up testbot
RUN mkdir -p /srv/testbot
RUN chown testbot:testbot /srv/testbot
WORKDIR /srv/testbot

# run as testbot
USER testbot
RUN wget https://github.com/rtc-io/rtc-testbot/archive/$APP_SHA.tar.gz -O app.tar.gz
RUN tar xf app.tar.gz --strip-components=1
RUN rm app.tar.gz

CMD [""make"", ""server""]
","FROM ubuntu:14.04
MAINTAINER Damon Oehlman <damon.oehlman@nicta.com.au>

# configure environment
ENV CHROME_DEB google-chrome-stable_current_amd64.deb
ENV CHROME_SANDBOX /opt/google/chrome/chrome-sandbox
ENV HOME /home/testbot

# configure ports that will be exposed
EXPOSE 3000:80

# use aarnet mirror for quicker building while developing
RUN sed -i 's/archive.ubuntu.com/mirror.aarnet.edu.au\/pub\/ubuntu\/archive/g' /etc/apt/sources.list

# create the testbot user
RUN mkdir -p /home/testbot
RUN useradd --password testbot --home /home/testbot testbot
RUN chown testbot:testbot /home/testbot
WORKDIR /home/testbot

# install wget and curl
RUN apt-get -y update
RUN apt-get install -y curl wget software-properties-common

# include the nodesource node install
RUN curl -sL https://deb.nodesource.com/setup | bash -

# include gstreamer
RUN add-apt-repository -y ppa:gstreamer-developers/ppa

# update sources
RUN apt-get -y update --fix-missing

# install packages
RUN apt-get install -y nodejs git xvfb build-essential git xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic

# TODO: configure video loopback
# RUN /tmp/setup-loopbackvideo.sh

# install chrome
RUN wget https://dl.google.com/linux/direct/$CHROME_DEB
RUN dpkg --install --force-overwrite --force-confdef $CHROME_DEB || sudo apt-get -y -f install
RUN apt-get install -y -q

# workaround chrome sandbox limitations in containers
RUN rm -f $CHROME_SANDBOX
RUN wget https://googledrive.com/host/0B5VlNZ_Rvdw6NTJoZDBSVy1ZdkE -O $CHROME_SANDBOX
RUN chmod 4755 $CHROME_SANDBOX

# set the app SHA
ENV APP_SHA 0e9c469058b0a001bef95a04d98731cca964968d

# run up testbot
RUN mkdir -p /srv/testbot
RUN chown testbot:testbot /srv/testbot
WORKDIR /srv/testbot

# run as testbot
USER testbot
RUN wget https://github.com/rtc-io/rtc-testbot/archive/$APP_SHA.tar.gz -O app.tar.gz
RUN tar xf app.tar.gz --strip-components=1
RUN rm app.tar.gz

CMD [""make"", ""server""]
"
2225,d27b57abc70ba5d69dd63de815122b8635593701,Bumped source to 20211030-539a1cc,"Bumped source to 20211030-539a1cc
","FROM docker.pkg.github.com/dock0/arch/arch:20211030-f4d24a2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
",
253,3f025f69cff807731ece18d5db25d178784c319c,Add git to the apt-get install packages.,Add git to the apt-get install packages.,,
2090,c49cb723f5d8f5baab7d904fee0c57f750494095,Update Dockerfile (#30),"Update Dockerfile (#30)

","FROM golang:1.7

RUN apt-get update && apt-get install -y --no-install-recommends \
default-jdk \
coreutils \
upx \
&& rm -rf /var/lib/apt/lists/*

CMD ""docker/run_in_docker.sh""
",
395,8be059f7d30fc9397e28f815e504b0eea4de6fd2,Bumped source to 20210703-2d13685,"Bumped source to 20210703-2d13685
","FROM docker.pkg.github.com/dock0/arch/arch:20210703-a57e87d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20210703-2d13685
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
43,d1a7c5abf8acc140603e913d934f4c4555c59fbe,Bumped source to 20200730-eecdab6,"Bumped source to 20200730-eecdab6
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200730-2def513
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20200730-eecdab6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
340,e226b16723539a0a9c80479828c36480ad4eaa41,version 0.51,"version 0.51
","# Use Alpine Linux as our base image so that we minimize the overall size our final container, and minimize the surface area of packages that could be out of date.
FROM alpine:3.8@sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528

LABEL description=""Docker container for building static sites with the Hugo static site generator.""
LABEL maintainer=""Johannes Mitlmeier <dev.jojomi@yahoo.com>""

# config
ENV HUGO_VERSION=0.50
#ENV HUGO_TYPE=
ENV HUGO_TYPE=_extended

COPY ./run.sh /run.sh
ENV HUGO_ID=hugo${HUGO_TYPE}_${HUGO_VERSION}
ADD https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/${HUGO_ID}_Linux-64bit.tar.gz /tmp
RUN tar -xf /tmp/${HUGO_ID}_Linux-64bit.tar.gz -C /tmp \
    && mkdir -p /usr/local/sbin \
    && mv /tmp/hugo /usr/local/sbin/hugo \
    && rm -rf /tmp/${HUGO_ID}_linux_amd64 \
    && rm -rf /tmp/${HUGO_ID}_Linux-64bit.tar.gz \
    && rm -rf /tmp/LICENSE.md \
    && rm -rf /tmp/README.md

RUN apk add --update git asciidoctor libc6-compat libstdc++ \
    && apk upgrade \
    && apk add --no-cache ca-certificates \
    && chmod 0777 /run.sh

VOLUME /src
VOLUME /output

WORKDIR /src
CMD [""/run.sh""]

EXPOSE 1313
","# Use Alpine Linux as our base image so that we minimize the overall size our final container, and minimize the surface area of packages that could be out of date.
FROM alpine:3.8@sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528

LABEL description=""Docker container for building static sites with the Hugo static site generator.""
LABEL maintainer=""Johannes Mitlmeier <dev.jojomi@yahoo.com>""

# config
ENV HUGO_VERSION=0.51
#ENV HUGO_TYPE=
ENV HUGO_TYPE=_extended

COPY ./run.sh /run.sh
ENV HUGO_ID=hugo${HUGO_TYPE}_${HUGO_VERSION}
ADD https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/${HUGO_ID}_Linux-64bit.tar.gz /tmp
RUN tar -xf /tmp/${HUGO_ID}_Linux-64bit.tar.gz -C /tmp \
    && mkdir -p /usr/local/sbin \
    && mv /tmp/hugo /usr/local/sbin/hugo \
    && rm -rf /tmp/${HUGO_ID}_linux_amd64 \
    && rm -rf /tmp/${HUGO_ID}_Linux-64bit.tar.gz \
    && rm -rf /tmp/LICENSE.md \
    && rm -rf /tmp/README.md

RUN apk add --update git asciidoctor libc6-compat libstdc++ \
    && apk upgrade \
    && apk add --no-cache ca-certificates \
    && chmod 0777 /run.sh

VOLUME /src
VOLUME /output

WORKDIR /src
CMD [""/run.sh""]

EXPOSE 1313
"
250,d5e68aeafaeeeae1ec5492f90f8b158204056a40,updated CoreOS version to 633.1.0,"updated CoreOS version to 633.1.0
","FROM debian:jessie

ENV CLOUDCONFIG_INSTALL_DIR     /opt/cloudconfig
ENVDEBIAN_FRONTEND             noninteractive
ENV PATH                        ${CLOUDCONFIG_INSTALL_DIR}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

#Core OS image from where we extract the coreos-cloudinit tool (used to verify cloudinit files)
ENVCOREOS_CHANNEL_ID           alpha
ENVCOREOS_VERSION_ID           612.1.0
ENVCOREOS_IMAGE_URL            http://${COREOS_CHANNEL_ID}.release.core-os.net/amd64-usr/${COREOS_VERSION_ID}/coreos_production_pxe_image.cpio.gz

# install required packges
RUNapt-get update -qq && \
apt-get install -y cpio squashfs-tools curl apache2 php5 php5-curl bzip2 openssl git && \
apt-get clean autoclean && \
apt-get autoremove --yes && \
rm -rf /var/lib/{apt,dpkg,cache,log}/

# extract coreos-cloudinit from CoreOS Image file
WORKDIR/tmp
RUNcurl -L --silent ${COREOS_IMAGE_URL} | zcat | cpio -iv && \
unsquashfs usr.squashfs && \
cp squashfs-root/bin/coreos-cloudinit /usr/local/bin && \
    cp squashfs-root/bin/fleetctl /usr/local/bin && \
    rm -rf /tmp/*

# configure apache & prepare install dir
ADDconf/apache2/cloudconfig.conf /etc/apache2/sites-available/cloudconfig.conf
RUNa2dissite 000-default && \
a2ensite cloudconfig && \
a2enmod php5 && \
a2enmod rewrite && \
mkdir ${CLOUDCONFIG_INSTALL_DIR}


ADDcomposer.json composer.lock ${CLOUDCONFIG_INSTALL_DIR}/
ADDbin/ ${CLOUDCONFIG_INSTALL_DIR}/bin/
ADDconf/ ${CLOUDCONFIG_INSTALL_DIR}/conf/
ADDfeatures/ ${CLOUDCONFIG_INSTALL_DIR}/features/
ADDwww/ ${CLOUDCONFIG_INSTALL_DIR}/www/



WORKDIR     ${CLOUDCONFIG_INSTALL_DIR}
RUN         curl -sS https://getcomposer.org/installer | php && \
            php composer.phar install && \
            rm composer.*


WORKDIR     /root

COPY docker-entrypoint.sh /usr/local/sbin/docker-entrypoint.sh

ENTRYPOINT      [""/usr/local/sbin/docker-entrypoint.sh""]

EXPOSE 80

CMD [""/usr/sbin/apache2ctl"", ""-D"", ""FOREGROUND""]
","FROM debian:jessie

ENV CLOUDCONFIG_INSTALL_DIR     /opt/cloudconfig
ENVDEBIAN_FRONTEND             noninteractive
ENV PATH                        ${CLOUDCONFIG_INSTALL_DIR}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

#Core OS image from where we extract the coreos-cloudinit tool (used to verify cloudinit files)
ENVCOREOS_CHANNEL_ID           alpha
ENVCOREOS_VERSION_ID           633.1.0
ENVCOREOS_IMAGE_URL            http://${COREOS_CHANNEL_ID}.release.core-os.net/amd64-usr/${COREOS_VERSION_ID}/coreos_production_pxe_image.cpio.gz

# install required packges
RUNapt-get update -qq && \
apt-get install -y cpio squashfs-tools curl apache2 php5 php5-curl bzip2 openssl git && \
apt-get clean autoclean && \
apt-get autoremove --yes && \
rm -rf /var/lib/{apt,dpkg,cache,log}/

# extract coreos-cloudinit from CoreOS Image file
WORKDIR/tmp
RUNcurl -L --silent ${COREOS_IMAGE_URL} | zcat | cpio -iv && \
unsquashfs usr.squashfs && \
cp squashfs-root/bin/coreos-cloudinit /usr/local/bin && \
    cp squashfs-root/bin/fleetctl /usr/local/bin && \
    rm -rf /tmp/*

# configure apache & prepare install dir
ADDconf/apache2/cloudconfig.conf /etc/apache2/sites-available/cloudconfig.conf
RUNa2dissite 000-default && \
a2ensite cloudconfig && \
a2enmod php5 && \
a2enmod rewrite && \
mkdir ${CLOUDCONFIG_INSTALL_DIR}


ADDcomposer.json composer.lock ${CLOUDCONFIG_INSTALL_DIR}/
ADDbin/ ${CLOUDCONFIG_INSTALL_DIR}/bin/
ADDconf/ ${CLOUDCONFIG_INSTALL_DIR}/conf/
ADDfeatures/ ${CLOUDCONFIG_INSTALL_DIR}/features/
ADDwww/ ${CLOUDCONFIG_INSTALL_DIR}/www/



WORKDIR     ${CLOUDCONFIG_INSTALL_DIR}
RUN         curl -sS https://getcomposer.org/installer | php && \
            php composer.phar install && \
            rm composer.*


WORKDIR     /root

COPY docker-entrypoint.sh /usr/local/sbin/docker-entrypoint.sh

ENTRYPOINT      [""/usr/local/sbin/docker-entrypoint.sh""]

EXPOSE 80

CMD [""/usr/sbin/apache2ctl"", ""-D"", ""FOREGROUND""]
"
140,5f4fc08fdc9a299792664ac23166879079fc2220,Bumped source to 20210313-169faba,"Bumped source to 20210313-169faba
","FROM docker.pkg.github.com/dock0/arch/arch:20210313-e646dd2
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210313-169faba
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
376,3826d1497495e2cca9a5be29f7fd38684d9c9777,Fix Dockerfile,"Fix Dockerfile
","FROM golang:1.3.3-onbuild
ENTRYPOINT [""./mkr""]
","FROM golang:1.3.3-onbuild
ENTRYPOINT [""/go/bin/app""]
"
2186,8c460c200e26e5ba44cd99cb296a2041d6c667ab,security: bump Go to 1.17.10,"security: bump Go to 1.17.10
","# renovate: datasource=docker depName=alpine versioning=docker
ARG ALPINE_VERSION=3.15
# renovate: datasource=docker depName=golang versioning=docker
ARG GOLANG_VERSION=1.17.9-alpine

FROM golang:${GOLANG_VERSION}${ALPINE_VERSION} as builder
RUN apk add --no-cache make gcc musl-dev

COPY . /src
RUN make -C /src install PREFIX=/pkg GO_BUILDFLAGS='-mod vendor'

################################################################################

FROM alpine:${ALPINE_VERSION}
LABEL source_repository=""https://github.com/sapcc/limes""

RUN apk add --no-cache ca-certificates
COPY --from=builder /pkg/ /usr/
ENTRYPOINT [""/usr/bin/limes""]
",
2074,0e7d47a94968e1472ee6c81de0484f5969dad76f,Update Dockerfile,Update Dockerfile,"FROM armhfbuild/debian:wheezy
MAINTAINER Colinas Maoling ""colinas.maoling@t-online.de""
VOLUME /container
RUN /bin/bash -c ""apt-get update && apt-get upgrade -y && apt-get clean && apt-get autoremove""
RUN apt-get install -y libpython2.7 python-setuptools python-pip
RUN pip install pyinstaller
",
150,b9cb887b61b4e43c0d6913d4028fc8833e5b4821,Logstash 1.4.2. Bug fix for env variable.,"Logstash 1.4.2. Bug fix for env variable.
","# ################################################################
# NAME: Dockerfile
# DESC: Docker file to create Logstash container.
#
# LOG:
# yyyy/mm/dd [name] [version]: [notes]
# 2014/10/16 cgwong [v0.1.0]: Initial creation.
# 2014/11/10 cgwong v0.2.0: Included contrib plugins, switched to tar download as a result.
#                           Added new environment variable.
#                           Correct issue with contribs not installing.
# 2014/12/04 cgwong v0.2.1: Switched to version specific. Used more environment variables.
# ################################################################

FROM dockerfile/java:oracle-java7
MAINTAINER Stuart Wong <cgs.wong@gmail.com>

# Setup environment
##ENV LOGSTASH_VERSION 1.4
ENV LOGSTASH_FULL_VERSION 1.4.2
ENV LOGSTASH_BASE /opt
ENV LOGSTASH_HOME ${LOGSTASH_BASE}/logstash
ENV LOGSTASH_CFG_DIR ${LOGSTASH_HOME}/conf
ENV LOGSTASH_USER logstash
ENV LOGSTASH_GROUP logstash

# Install Logstash
##RUN wget -qO - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | sudo apt-key add -
##RUN echo ""deb http://packages.elasticsearch.org/logstash/${LOGSTASH_VERSION}/debian stable main"" >> /etc/apt/sources.list
##RUN apt-get -y update \
##  && DEBIAN_FRONTEND=noninteractive \
##  apt-get -y install wget \
##  logstash

WORKDIR ${LOGSTASH_BASE}
RUN wget https://download.elasticsearch.org/logstash/logstash/logstash-${LOGSTASH_VERSION}.tar.gz \
  && tar -zxf logstash-${LOGSTASH_VERSION}.tar.gz \
  && rm logstash-${LOGSTASH_VERSION}.tar.gz \
  && ln -s logstash-${LOGSTASH_VERSION} logstash

# Install contrib plugins
# Repo version has '-modified' attached to version so need below for contrib to install successfully.
##RUN sed -e ""s/${LOGSTASH_FULL_VERSION}-modified/${LOGSTASH_FULL_VERSION}/"" -i ${LOGSTASH_HOME}/lib/logstash/version.rb
RUN [""${LOGSTASH_HOME}/bin/plugin"", ""install"", ""contrib""]
##RUN sed -e ""s/${LOGSTASH_FULL_VERSION}/${LOGSTASH_FULL_VERSION}-modified/"" -i ${LOGSTASH_HOME}/lib/logstash/version.rb

# Configure environment
RUN groupadd -r ${LOGSTASH_GROUP} \
  && useradd -M -r -g ${LOGSTASH_GROUP} -d ${LOGSTASH_HOME} -s /sbin/nologin -c ""LogStash Service User"" ${LOGSTASH_USER} \
  && chown -R ${LOGSTASH_USER}:${LOGSTASH_GROUP} ${LOGSTASH_HOME}

# Listen for connections on HTTP port/interface: 5000
EXPOSE 5000

USER ${LOGSTASH_USER}

# Create configuration file location
# Copy in logstash.conf file
# Expose as volume
RUN mkdir -p ${LOGSTASH_CFG_DIR}
COPY conf/logstash.conf ${LOGSTASH_CFG_DIR}/logstash.conf
VOLUME [""${LOGSTASH_CFG_DIR}""]

# Copy in entry script and start 
COPY logstash.sh /usr/local/bin/logstash.sh
ENTRYPOINT [""/usr/local/bin/logstash.sh""]
","# ################################################################
# NAME: Dockerfile
# DESC: Docker file to create Logstash container.
#
# LOG:
# yyyy/mm/dd [name] [version]: [notes]
# 2014/10/16 cgwong [v0.1.0]: Initial creation.
# 2014/11/10 cgwong v0.2.0: Included contrib plugins, switched to tar download as a result.
#                           Added new environment variable.
#                           Correct issue with contribs not installing.
# 2014/12/04 cgwong v0.2.1: Switched to version specific. Used more environment variables.
# ################################################################

FROM dockerfile/java:oracle-java7
MAINTAINER Stuart Wong <cgs.wong@gmail.com>

# Setup environment
##ENV LOGSTASH_VERSION 1.4
ENV LOGSTASH_VERSION 1.4.2
ENV LOGSTASH_BASE /opt
ENV LOGSTASH_HOME ${LOGSTASH_BASE}/logstash
ENV LOGSTASH_CFG_DIR ${LOGSTASH_HOME}/conf
ENV LOGSTASH_USER logstash
ENV LOGSTASH_GROUP logstash

# Install Logstash
##RUN wget -qO - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | sudo apt-key add -
##RUN echo ""deb http://packages.elasticsearch.org/logstash/${LOGSTASH_VERSION}/debian stable main"" >> /etc/apt/sources.list
##RUN apt-get -y update \
##  && DEBIAN_FRONTEND=noninteractive \
##  apt-get -y install wget \
##  logstash

WORKDIR ${LOGSTASH_BASE}
RUN wget https://download.elasticsearch.org/logstash/logstash/logstash-${LOGSTASH_VERSION}.tar.gz \
  && tar -zxf logstash-${LOGSTASH_VERSION}.tar.gz \
  && rm logstash-${LOGSTASH_VERSION}.tar.gz \
  && ln -s logstash-${LOGSTASH_VERSION} logstash

# Install contrib plugins
# Repo version has '-modified' attached to version so need below for contrib to install successfully.
##RUN sed -e ""s/${LOGSTASH_VERSION}-modified/${LOGSTASH_VERSION}/"" -i ${LOGSTASH_HOME}/lib/logstash/version.rb
RUN [""${LOGSTASH_HOME}/bin/plugin"", ""install"", ""contrib""]
##RUN sed -e ""s/${LOGSTASH_VERSION}/${LOGSTASH_VERSION}-modified/"" -i ${LOGSTASH_HOME}/lib/logstash/version.rb

# Configure environment
RUN groupadd -r ${LOGSTASH_GROUP} \
  && useradd -M -r -g ${LOGSTASH_GROUP} -d ${LOGSTASH_HOME} -s /sbin/nologin -c ""LogStash Service User"" ${LOGSTASH_USER} \
  && chown -R ${LOGSTASH_USER}:${LOGSTASH_GROUP} ${LOGSTASH_HOME}

# Listen for connections on HTTP port/interface: 5000
EXPOSE 5000

USER ${LOGSTASH_USER}

# Create configuration file location
# Copy in logstash.conf file
# Expose as volume
RUN mkdir -p ${LOGSTASH_CFG_DIR}
COPY conf/logstash.conf ${LOGSTASH_CFG_DIR}/logstash.conf
VOLUME [""${LOGSTASH_CFG_DIR}""]

# Copy in entry script and start 
COPY logstash.sh /usr/local/bin/logstash.sh
ENTRYPOINT [""/usr/local/bin/logstash.sh""]
"
366,79a0bd260887df8850d50c01c72b25720843c64e,gosu check now matches as many digits as are present in the release number. Fixes 1.10 being detected as non-existent 1.1.,"gosu check now matches as many digits as are present in the release number. Fixes 1.10 being detected as non-existent 1.1.
","FROM debian:8

# less priviledge user, the id should map the user the downloaded files belongs to
RUN groupadd -r dummy && useradd -r -g dummy dummy -u 1000

# webui + aria2
RUN apt-get update \
&& apt-get install -y aria2 busybox curl \
&& rm -rf /var/lib/apt/lists/*

ADD . /webui-aria2

# gosu install latest
RUN GITHUB_REPO=""https://github.com/tianon/gosu"" \
  && LATEST=`curl -s  $GITHUB_REPO""/releases/latest"" | grep -Eo ""[0-9].[0-9]""` \
  && curl -L $GITHUB_REPO""/releases/download/""$LATEST""/gosu-amd64"" > /usr/local/bin/gosu \
  && chmod +x /usr/local/bin/gosu

# goreman supervisor install latest
RUN GITHUB_REPO=""https://github.com/mattn/goreman"" \
  && LATEST=`curl -s  $GITHUB_REPO""/releases/latest"" | grep -Eo ""v[0-9]*.[0-9]*.[0-9]*""` \
  && curl -L $GITHUB_REPO""/releases/download/""$LATEST""/goreman_linux_amd64.tar.gz"" > goreman.tar.gz \
  && tar -xvzf goreman.tar.gz && mv /goreman_linux_amd64/goreman /usr/local/bin/goreman && rm -R goreman*

# goreman setup
RUN echo -e ""web: gosu dummy /bin/busybox httpd -f -p 8080 -h /webui-aria2\nbackend: gosu dummy /usr/bin/aria2c --enable-rpc --rpc-listen-all --dir=/data"" > Procfile

EXPOSE 8080 6800
CMD [""goreman"", ""start""]
","FROM debian:8

# less priviledge user, the id should map the user the downloaded files belongs to
RUN groupadd -r dummy && useradd -r -g dummy dummy -u 1000

# webui + aria2
RUN apt-get update \
&& apt-get install -y aria2 busybox curl \
&& rm -rf /var/lib/apt/lists/*

ADD . /webui-aria2

# gosu install latest
RUN GITHUB_REPO=""https://github.com/tianon/gosu"" \
  && LATEST=`curl -s  $GITHUB_REPO""/releases/latest"" | grep -Eo ""[0-9].[0-9]*""` \
  && curl -L $GITHUB_REPO""/releases/download/""$LATEST""/gosu-amd64"" > /usr/local/bin/gosu \
  && chmod +x /usr/local/bin/gosu

# goreman supervisor install latest
RUN GITHUB_REPO=""https://github.com/mattn/goreman"" \
  && LATEST=`curl -s  $GITHUB_REPO""/releases/latest"" | grep -Eo ""v[0-9]*.[0-9]*.[0-9]*""` \
  && curl -L $GITHUB_REPO""/releases/download/""$LATEST""/goreman_linux_amd64.tar.gz"" > goreman.tar.gz \
  && tar -xvzf goreman.tar.gz && mv /goreman_linux_amd64/goreman /usr/local/bin/goreman && rm -R goreman*

# goreman setup
RUN echo -e ""web: gosu dummy /bin/busybox httpd -f -p 8080 -h /webui-aria2\nbackend: gosu dummy /usr/bin/aria2c --enable-rpc --rpc-listen-all --dir=/data"" > Procfile

EXPOSE 8080 6800
CMD [""goreman"", ""start""]
"
2137,906d128de04e6314bb2e03789665eb9dd18fb45f,Bumped source to 20201105-019000e,"Bumped source to 20201105-019000e
","FROM docker.pkg.github.com/dock0/service/service:20201105-0af09fa
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
",
115,7a68920feb5f11478045dae7b23a9e00aba4415b,fix comment,"fix comment
","# Galaxy - Stable
#
# VERSION       Galaxy-central

FROM toolshed/requirements

MAINTAINER Björn A. Grüning, bjoern.gruening@gmail.com

# * Make sure the package repository is up to date
# * Install all requirements that are recommend by the Galaxy project
# * Enable the @natefoo magic
# Web server infrastructure matching usegalaxy.org - supervisor, uwsgi, and nginx.

RUN apt-get -qq update && apt-get install --no-install-recommends -y apt-transport-https  software-properties-common && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9 && \
    sh -c ""echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list"" && \
    apt-get update -qq && apt-get upgrade -y && \
    apt-add-repository -y ppa:ansible/ansible && \
    apt-add-repository -y ppa:galaxyproject/nginx && \
    apt-get -qq update && \
    apt-get purge -y software-properties-common && \
    apt-get install --no-install-recommends -y mercurial python-psycopg2 postgresql-9.3 sudo samtools python-virtualenv wget \ 
    nginx-extras uwsgi uwsgi-plugin-python supervisor lxc-docker slurm-llnl slurm-llnl-torque libswitch-perl \
    slurm-drmaa-dev proftpd proftpd-mod-pgsql libyaml-dev nodejs-legacy npm aufs-tools ansible \
    nano nmap lynx vim curl python-pip && \
    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Download latest stable release of Galaxy.
ENV GALAXY_RELEASE default
ENV GALAXY_ROOT /galaxy-central
ENV GALAXY_CONFIG_DIR /etc/galaxy
ENV GALAXY_CONFIG_FILE $GALAXY_CONFIG_DIR/galaxy.ini
ENV GALAXY_CONFIG_JOB_CONFIG_FILE $GALAXY_CONFIG_DIR/job_conf.xml
ENV GALAXY_CONFIG_JOB_METRICS_CONFIG_FILE $GALAXY_CONFIG_DIR/job_metrics_conf.xml
ENV GALAXY_VIRTUALENV /home/galaxy/venv
ENV GALAXY_USER galaxy
ENV GALAXY_UID 1450
ENV GALAXY_GID 1450
ENV GALAXY_HOME /home/galaxy
ENV EXPORT_DIR /export

RUN groupadd -r $GALAXY_USER -g $GALAXY_GID && \
    useradd -u $GALAXY_UID -r -g $GALAXY_USER -d $GALAXY_HOME -c ""Galaxy user"" $GALAXY_USER && \
    mkdir $EXPORT_DIR $GALAXY_HOME && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_HOME $EXPORT_DIR && \
    gpasswd -a $GALAXY_USER docker

RUN mkdir $GALAXY_ROOT && wget -q -O - https://bitbucket.org/galaxy/galaxy-central/get/$GALAXY_RELEASE.tar.gz | tar xzf - --strip-components=1 -C $GALAXY_ROOT && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_ROOT

# TODO: ensure virtualenv as part of galaxy role
RUN su $GALAXY_USER -c ""virtualenv $GALAXY_VIRTUALENV""

# Setup Galaxy configuration files.
RUN mkdir -p $GALAXY_CONFIG_DIR && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_CONFIG_DIR

RUN su $GALAXY_USER -c ""cp $GALAXY_ROOT/config/galaxy.ini.sample $GALAXY_CONFIG_FILE && \
                        cp $GALAXY_ROOT/config/reports_wsgi.ini.sample $GALAXY_CONFIG_DIR/reports_wsgi.ini""
ADD ./servers.ini $GALAXY_CONFIG_DIR/servers.ini
RUN cat $GALAXY_CONFIG_DIR/servers.ini >> $GALAXY_CONFIG_FILE && rm $GALAXY_CONFIG_DIR/servers.ini
ADD roles/ /tmp/ansible/roles
ADD provision.yml /tmp/ansible/provision.yml
RUN ansible-playbook /tmp/ansible/provision.yml \
    --extra-vars galaxy_user_name=$GALAXY_USER \
    --extra-vars galaxy_config_file=$GALAXY_CONFIG_FILE \
    --extra-vars galaxy_config_dir=$GALAXY_CONFIG_DIR \
    --extra-vars galaxy_job_conf_path=$GALAXY_CONFIG_JOB_CONFIG_FILE \
    --extra-vars galaxy_job_metrics_conf_path=$GALAXY_CONFIG_JOB_METRICS_CONFIG_FILE \
    --tags=galaxyextras -c local && \
    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ADD roles/ /tmp/ansible/roles
ADD provision.yml /tmp/ansible/provision.yml

RUN mkdir /shed_tools && chown $GALAXY_USER:$GALAXY_USER /shed_tools

# The following commands will be executed as User galaxy
USER galaxy

WORKDIR /galaxy-central

# Configure Galaxy to use the Tool Shed
RUN mkdir $GALAXY_ROOT/tool_deps

# Fetching all Galaxy python dependencies
RUN . $GALAXY_VIRTUALENV/bin/activate && python scripts/fetch_eggs.py -c $GALAXY_CONFIG_FILE && python scripts/fetch_eggs.py -e drmaa -c $GALAXY_CONFIG_FILE

# Updating genome informations from UCSC
#RUN export GALAXY=/galaxy-central && sh ./cron/updateucsc.sh.sample

ENV GALAXY_CONFIG_DATABASE_CONNECTION postgresql://galaxy:galaxy@localhost:5432/galaxy
ENV GALAXY_CONFIG_TOOL_DEPENDENCY_DIR ./tool_deps
ENV GALAXY_CONFIG_ADMIN_USERS admin@galaxy.org
ENV GALAXY_CONFIG_MASTER_API_KEY HSNiugRFvgT574F43jZ7N9F3
ENV GALAXY_CONFIG_BRAND Galaxy Docker Build
ENV GALAXY_CONFIG_STATIC_ENABLED False
ENV GALAXY_CONFIG_JOB_WORKING_DIRECTORY /export/galaxy-central/database/job_working_directory
ENV GALAXY_CONFIG_FILE_PATH /export/galaxy-central/database/files
ENV GALAXY_CONFIG_NEW_FILE_PATH /export/galaxy-central/database/files
ENV GALAXY_CONFIG_TEMPLATE_CACHE_PATH /export/galaxy-central/database/compiled_templates
ENV GALAXY_CONFIG_CITATION_CACHE_DATA_DIR /export/galaxy-central/database/citations/data
ENV GALAXY_CONFIG_CLUSTER_FILES_DIRECTORY /export/galaxy-central/database/pbs
ENV GALAXY_CONFIG_FTP_UPLOAD_DIR /export/galaxy-central/database/ftp
ENV GALAXY_CONFIG_FTP_UPLOAD_SITE galaxy.docker.org
ENV GALAXY_CONFIG_USE_PBKDF2 False
ENV GALAXY_CONFIG_NGINX_X_ACCEL_REDIRECT_BASE /_x_accel_redirect
ENV GALAXY_CONFIG_NGINX_X_ARCHIVE_FILES_BASE /_x_accel_redirect
ENV GALAXY_CONFIG_NGINX_UPLOAD_STORE /tmp/nginx_upload_store
ENV GALAXY_CONFIG_NGINX_UPLOAD_PATH /_upload
ENV GALAXY_CONFIG_DYNAMIC_PROXY_MANAGE False
ENV GALAXY_CONFIG_VISUALIZATION_PLUGINS_DIRECTORY config/plugins/visualizations
ENV GALAXY_CONFIG_TRUST_IPYTHON_NOTEBOOK_CONVERSION True
ENV GALAXY_CONFIG_TOOLFORM_UPGRADE True
# Next line allow child docker container for viz to find this docker container.
ENV GALAXY_CONFIG_GALAXY_INFRASTRUCTURE_URL http://$HOST_IP/
ENV GALAXY_CONFIG_SANITIZE_ALL_HTML False
ENV GALAXY_CONFIG_TOOLFORM_UPGRADE True
ENV GALAXY_CONFIG_OVERRIDE_DEBUG False

# Define the default postgresql database path
ENV PG_DATA_DIR_DEFAULT /var/lib/postgresql/9.3/main/
ENV PG_DATA_DIR_HOST /export/postgresql/9.3/main/


# Install all required Node dependencies. This is required to get proxy support to work for Interactive Environments
RUN  cd /galaxy-central/lib/galaxy/web/proxy/js && npm install

# Container Style
ADD GalaxyDocker.png /galaxy-central/static/welcome/GalaxyDocker.png
ADD welcome.html /galaxy-central/static/welcome.html

# Switch back to User root
USER root

# Setting a standard encoding. This can get important for things like the unix sort tool.
ENV LC_ALL en_US.UTF-8
RUN locale-gen en_US.UTF-8 && dpkg-reconfigure locales

# Include all needed scripts from the host
ADD ./setup_postgresql.py /usr/local/bin/setup_postgresql.py
ADD ./export_user_files.py /usr/local/bin/export_user_files.py

# Configure PostgreSQL
# 1. Remove all old configuration
# 2. Create DB-user 'galaxy' with password 'galaxy' in database 'galaxy'
# 3. Create Galaxy Admin User 'admin@galaxy.org' with password 'admin' and API key 'admin'
RUN service postgresql stop
RUN rm $PG_DATA_DIR_DEFAULT -rf
RUN python /usr/local/bin/setup_postgresql.py --dbuser galaxy --dbpassword galaxy --db-name galaxy --dbpath $PG_DATA_DIR_DEFAULT
RUN service postgresql start && sh create_db.sh -c $GALAXY_CONFIG_FILE
ADD ./create_galaxy_user.py /usr/local/bin/create_galaxy_user.py
RUN service postgresql start && sleep 5 && python /usr/local/bin/create_galaxy_user.py --user admin@galaxy.org --password admin -c $GALAXY_CONFIG_FILE --key admin

ADD ./startup.sh /usr/bin/startup
# Script that enables easier downstream installation of tools (e.g. for different Galaxy Docker flavours)
ADD install_repo_wrapper.sh /usr/bin/install-repository
RUN chmod +x /usr/bin/install-repository /usr/bin/startup

# This needs to happen here and not above, otherwise the Galaxy start 
# (without running the startup.sh script) will crash because integrated_tool_panel.xml could not be found.
ENV GALAXY_CONFIG_INTEGRATED_TOOL_PANEL_CONFIG /export/galaxy-central/integrated_tool_panel.xml

ADD ./cgroupfs_mount.sh /root/cgroupfs_mount.sh

# Expose port 80 (webserver), 21 (FTP server), 8800 (Proxy), 9003 (Galaxy report app), 9002 (supvisord web app)
EXPOSE :80
EXPOSE :21
EXPOSE :8800
EXPOSE :9002
EXPOSE :9003

# We need to set $HOME for some Tool Shed tools (e.g Perl libs with $HOME/.cpan)
ENV HOME /home/galaxy

# Mark folders as imported from the host.
VOLUME [""/export/"", ""/data/"", ""/var/lib/docker""]

# Autostart script that is invoked during container start
CMD [""/usr/bin/startup""]
","# Galaxy - Stable
#
# VERSION       Galaxy-central

FROM toolshed/requirements

MAINTAINER Björn A. Grüning, bjoern.gruening@gmail.com

# * Make sure the package repository is up to date
# * Install all requirements that are recommend by the Galaxy project
# * Enable the @natefoo magic
# Web server infrastructure matching usegalaxy.org - supervisor, uwsgi, and nginx.

RUN apt-get -qq update && apt-get install --no-install-recommends -y apt-transport-https  software-properties-common && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9 && \
    sh -c ""echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list"" && \
    apt-get update -qq && apt-get upgrade -y && \
    apt-add-repository -y ppa:ansible/ansible && \
    apt-add-repository -y ppa:galaxyproject/nginx && \
    apt-get -qq update && \
    apt-get purge -y software-properties-common && \
    apt-get install --no-install-recommends -y mercurial python-psycopg2 postgresql-9.3 sudo samtools python-virtualenv wget \ 
    nginx-extras uwsgi uwsgi-plugin-python supervisor lxc-docker slurm-llnl slurm-llnl-torque libswitch-perl \
    slurm-drmaa-dev proftpd proftpd-mod-pgsql libyaml-dev nodejs-legacy npm aufs-tools ansible \
    nano nmap lynx vim curl python-pip && \
    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENV GALAXY_RELEASE default
ENV GALAXY_ROOT /galaxy-central
ENV GALAXY_CONFIG_DIR /etc/galaxy
ENV GALAXY_CONFIG_FILE $GALAXY_CONFIG_DIR/galaxy.ini
ENV GALAXY_CONFIG_JOB_CONFIG_FILE $GALAXY_CONFIG_DIR/job_conf.xml
ENV GALAXY_CONFIG_JOB_METRICS_CONFIG_FILE $GALAXY_CONFIG_DIR/job_metrics_conf.xml
ENV GALAXY_VIRTUALENV /home/galaxy/venv
ENV GALAXY_USER galaxy
ENV GALAXY_UID 1450
ENV GALAXY_GID 1450
ENV GALAXY_HOME /home/galaxy
ENV EXPORT_DIR /export

RUN groupadd -r $GALAXY_USER -g $GALAXY_GID && \
    useradd -u $GALAXY_UID -r -g $GALAXY_USER -d $GALAXY_HOME -c ""Galaxy user"" $GALAXY_USER && \
    mkdir $EXPORT_DIR $GALAXY_HOME && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_HOME $EXPORT_DIR && \
    gpasswd -a $GALAXY_USER docker

# Download latest stable release of Galaxy.
RUN mkdir $GALAXY_ROOT && wget -q -O - https://bitbucket.org/galaxy/galaxy-central/get/$GALAXY_RELEASE.tar.gz | tar xzf - --strip-components=1 -C $GALAXY_ROOT && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_ROOT

# TODO: ensure virtualenv as part of galaxy role
RUN su $GALAXY_USER -c ""virtualenv $GALAXY_VIRTUALENV""

# Setup Galaxy configuration files.
RUN mkdir -p $GALAXY_CONFIG_DIR && chown -R $GALAXY_USER:$GALAXY_USER $GALAXY_CONFIG_DIR

RUN su $GALAXY_USER -c ""cp $GALAXY_ROOT/config/galaxy.ini.sample $GALAXY_CONFIG_FILE && \
                        cp $GALAXY_ROOT/config/reports_wsgi.ini.sample $GALAXY_CONFIG_DIR/reports_wsgi.ini""
ADD ./servers.ini $GALAXY_CONFIG_DIR/servers.ini
RUN cat $GALAXY_CONFIG_DIR/servers.ini >> $GALAXY_CONFIG_FILE && rm $GALAXY_CONFIG_DIR/servers.ini
ADD roles/ /tmp/ansible/roles
ADD provision.yml /tmp/ansible/provision.yml
RUN ansible-playbook /tmp/ansible/provision.yml \
    --extra-vars galaxy_user_name=$GALAXY_USER \
    --extra-vars galaxy_config_file=$GALAXY_CONFIG_FILE \
    --extra-vars galaxy_config_dir=$GALAXY_CONFIG_DIR \
    --extra-vars galaxy_job_conf_path=$GALAXY_CONFIG_JOB_CONFIG_FILE \
    --extra-vars galaxy_job_metrics_conf_path=$GALAXY_CONFIG_JOB_METRICS_CONFIG_FILE \
    --tags=galaxyextras -c local && \
    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ADD roles/ /tmp/ansible/roles
ADD provision.yml /tmp/ansible/provision.yml

RUN mkdir /shed_tools && chown $GALAXY_USER:$GALAXY_USER /shed_tools

# The following commands will be executed as User galaxy
USER galaxy

WORKDIR /galaxy-central

# Configure Galaxy to use the Tool Shed
RUN mkdir $GALAXY_ROOT/tool_deps

# Fetching all Galaxy python dependencies
RUN . $GALAXY_VIRTUALENV/bin/activate && python scripts/fetch_eggs.py -c $GALAXY_CONFIG_FILE && python scripts/fetch_eggs.py -e drmaa -c $GALAXY_CONFIG_FILE

# Updating genome informations from UCSC
#RUN export GALAXY=/galaxy-central && sh ./cron/updateucsc.sh.sample

ENV GALAXY_CONFIG_DATABASE_CONNECTION postgresql://galaxy:galaxy@localhost:5432/galaxy
ENV GALAXY_CONFIG_TOOL_DEPENDENCY_DIR ./tool_deps
ENV GALAXY_CONFIG_ADMIN_USERS admin@galaxy.org
ENV GALAXY_CONFIG_MASTER_API_KEY HSNiugRFvgT574F43jZ7N9F3
ENV GALAXY_CONFIG_BRAND Galaxy Docker Build
ENV GALAXY_CONFIG_STATIC_ENABLED False
ENV GALAXY_CONFIG_JOB_WORKING_DIRECTORY /export/galaxy-central/database/job_working_directory
ENV GALAXY_CONFIG_FILE_PATH /export/galaxy-central/database/files
ENV GALAXY_CONFIG_NEW_FILE_PATH /export/galaxy-central/database/files
ENV GALAXY_CONFIG_TEMPLATE_CACHE_PATH /export/galaxy-central/database/compiled_templates
ENV GALAXY_CONFIG_CITATION_CACHE_DATA_DIR /export/galaxy-central/database/citations/data
ENV GALAXY_CONFIG_CLUSTER_FILES_DIRECTORY /export/galaxy-central/database/pbs
ENV GALAXY_CONFIG_FTP_UPLOAD_DIR /export/galaxy-central/database/ftp
ENV GALAXY_CONFIG_FTP_UPLOAD_SITE galaxy.docker.org
ENV GALAXY_CONFIG_USE_PBKDF2 False
ENV GALAXY_CONFIG_NGINX_X_ACCEL_REDIRECT_BASE /_x_accel_redirect
ENV GALAXY_CONFIG_NGINX_X_ARCHIVE_FILES_BASE /_x_accel_redirect
ENV GALAXY_CONFIG_NGINX_UPLOAD_STORE /tmp/nginx_upload_store
ENV GALAXY_CONFIG_NGINX_UPLOAD_PATH /_upload
ENV GALAXY_CONFIG_DYNAMIC_PROXY_MANAGE False
ENV GALAXY_CONFIG_VISUALIZATION_PLUGINS_DIRECTORY config/plugins/visualizations
ENV GALAXY_CONFIG_TRUST_IPYTHON_NOTEBOOK_CONVERSION True
ENV GALAXY_CONFIG_TOOLFORM_UPGRADE True
# Next line allow child docker container for viz to find this docker container.
ENV GALAXY_CONFIG_GALAXY_INFRASTRUCTURE_URL http://$HOST_IP/
ENV GALAXY_CONFIG_SANITIZE_ALL_HTML False
ENV GALAXY_CONFIG_TOOLFORM_UPGRADE True
ENV GALAXY_CONFIG_OVERRIDE_DEBUG False

# Define the default postgresql database path
ENV PG_DATA_DIR_DEFAULT /var/lib/postgresql/9.3/main/
ENV PG_DATA_DIR_HOST /export/postgresql/9.3/main/


# Install all required Node dependencies. This is required to get proxy support to work for Interactive Environments
RUN  cd /galaxy-central/lib/galaxy/web/proxy/js && npm install

# Container Style
ADD GalaxyDocker.png /galaxy-central/static/welcome/GalaxyDocker.png
ADD welcome.html /galaxy-central/static/welcome.html

# Switch back to User root
USER root

# Setting a standard encoding. This can get important for things like the unix sort tool.
ENV LC_ALL en_US.UTF-8
RUN locale-gen en_US.UTF-8 && dpkg-reconfigure locales

# Include all needed scripts from the host
ADD ./setup_postgresql.py /usr/local/bin/setup_postgresql.py
ADD ./export_user_files.py /usr/local/bin/export_user_files.py

# Configure PostgreSQL
# 1. Remove all old configuration
# 2. Create DB-user 'galaxy' with password 'galaxy' in database 'galaxy'
# 3. Create Galaxy Admin User 'admin@galaxy.org' with password 'admin' and API key 'admin'
RUN service postgresql stop
RUN rm $PG_DATA_DIR_DEFAULT -rf
RUN python /usr/local/bin/setup_postgresql.py --dbuser galaxy --dbpassword galaxy --db-name galaxy --dbpath $PG_DATA_DIR_DEFAULT
RUN service postgresql start && sh create_db.sh -c $GALAXY_CONFIG_FILE
ADD ./create_galaxy_user.py /usr/local/bin/create_galaxy_user.py
RUN service postgresql start && sleep 5 && python /usr/local/bin/create_galaxy_user.py --user admin@galaxy.org --password admin -c $GALAXY_CONFIG_FILE --key admin

ADD ./startup.sh /usr/bin/startup
# Script that enables easier downstream installation of tools (e.g. for different Galaxy Docker flavours)
ADD install_repo_wrapper.sh /usr/bin/install-repository
RUN chmod +x /usr/bin/install-repository /usr/bin/startup

# This needs to happen here and not above, otherwise the Galaxy start 
# (without running the startup.sh script) will crash because integrated_tool_panel.xml could not be found.
ENV GALAXY_CONFIG_INTEGRATED_TOOL_PANEL_CONFIG /export/galaxy-central/integrated_tool_panel.xml

ADD ./cgroupfs_mount.sh /root/cgroupfs_mount.sh

# Expose port 80 (webserver), 21 (FTP server), 8800 (Proxy), 9003 (Galaxy report app), 9002 (supvisord web app)
EXPOSE :80
EXPOSE :21
EXPOSE :8800
EXPOSE :9002
EXPOSE :9003

# We need to set $HOME for some Tool Shed tools (e.g Perl libs with $HOME/.cpan)
ENV HOME /home/galaxy

# Mark folders as imported from the host.
VOLUME [""/export/"", ""/data/"", ""/var/lib/docker""]

# Autostart script that is invoked during container start
CMD [""/usr/bin/startup""]
"
72,bfc92a6f2cbd61268f7aadc2aebfa83bc349de08,Run docker-master/update.sh,"Run docker-master/update.sh
","FROM alpine:3.5

RUN apk add --no-cache \
ca-certificates \
curl \
openssl

ENV DOCKER_VERSION 17.05.0-dev
ENV DOCKER_URL https://master.dockerproject.org/linux/amd64/docker-17.05.0-dev.tgz
ENV DOCKER_SHA256 91adf02c6270c5e4c2ddc0ea55331d24daca615129ce50f6c7faf66b542f6648

RUN set -x \
&& curl -fSL ""${DOCKER_URL}"" -o docker.tgz \
&& echo ""${DOCKER_SHA256} *docker.tgz"" | sha256sum -c - \
&& tar -xzvf docker.tgz \
&& mv docker/* /usr/local/bin/ \
&& rmdir docker \
&& rm docker.tgz \
&& docker -v

COPY docker-entrypoint.sh /usr/local/bin/

ENTRYPOINT [""docker-entrypoint.sh""]
CMD [""sh""]
","FROM alpine:3.5

RUN apk add --no-cache \
ca-certificates \
curl \
openssl

ENV DOCKER_VERSION 17.05.0-dev
ENV DOCKER_URL https://master.dockerproject.org/linux/amd64/docker-17.05.0-dev.tgz
ENV DOCKER_SHA256 0b342710097b09f4d290ccd5291f22dd9ea47e0126fed42f6cbfbdac7227b0a4

RUN set -x \
&& curl -fSL ""${DOCKER_URL}"" -o docker.tgz \
&& echo ""${DOCKER_SHA256} *docker.tgz"" | sha256sum -c - \
&& tar -xzvf docker.tgz \
&& mv docker/* /usr/local/bin/ \
&& rmdir docker \
&& rm docker.tgz \
&& docker -v

COPY docker-entrypoint.sh /usr/local/bin/

ENTRYPOINT [""docker-entrypoint.sh""]
CMD [""sh""]
"
416,ae6b23b2e0abf75a6a8d8025fd29bb8f4c881be6,Bumped source to 20220918-45cbaa4,"Bumped source to 20220918-45cbaa4
","FROM ghcr.io/dock0/arch:20220918-df7ac52
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220918-45cbaa4
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
194,e9cc59f21ce3da4566e0eeb5b4399eefb2a7c036,Bumped source to 20210709-21e262d,"Bumped source to 20210709-21e262d
","FROM docker.pkg.github.com/dock0/arch/arch:20210709-6b59728
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210709-21e262d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2238,2400cd152c34e0cf92abf8e5f4190269c8a15eb7,Update Dockerfile,Update Dockerfile,"# Set the base image to use to armhf
FROM resin/rpi-raspbian:jessie

RUN DEBIAN_FRONTEND=noninteractive apt-get update -y
RUN DEBIAN_FRONTEND=noninteractive apt-get full-update -y
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y vlc-nox python-gevent python-pip python-dev gcc 
RUN DEBIAN_FRONTEND=noninteractive apt-get autoremove 
RUN DEBIAN_FRONTEND=noninteractive apt-get clean 
RUN adduser --disabled-password --gecos """" aceproxy
EXPOSE 4212 8011
USER aceproxy
ENV VLC_PLUGIN_PATH /usr/lib/vlc/plugins/

ENTRYPOINT [""/usr/bin/vlc""]
",
248,7542ad1ae06b92052218bd489984009145f91374,Upgrade docker image to 6.2-alpine,"Upgrade docker image to 6.2-alpine
","FROM sonarqube:5.6.3-alpine

ADD https://repo1.maven.org/maven2/org/sonarsource/clover/sonar-clover-plugin/3.1/sonar-clover-plugin-3.1.jar /opt/sonarqube/extensions/plugins/sonar-clover-plugin-3.1.jar
COPY build/libs/* /opt/sonarqube/extensions/plugins/
","FROM sonarqube:6.2-alpine

ADD https://repo1.maven.org/maven2/org/sonarsource/clover/sonar-clover-plugin/3.1/sonar-clover-plugin-3.1.jar /opt/sonarqube/extensions/plugins/sonar-clover-plugin-3.1.jar
COPY build/libs/* /opt/sonarqube/extensions/plugins/
"
2288,319e4a95342e1c67e76129ff8ac82c5841a2cf65,Update Dockerfile,"Update Dockerfile

Refactoring, added version based on /etc/redhat-release.","FROM centos

MAINTAINER Robert de Bock <robert@meinit.nl>

LABEL Description=""Base CentOS OpenSSH server image"" Version=""1.0""

RUN yum -y install openssh openssh-server openssh-clients epel-release && yum -y clean all

CMD test -f /etc/ssh/ssh_host_ecdsa_key || /usr/bin/ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -C '' -N ''&&  \
    test -f /etc/ssh/ssh_host_rsa_key || /usr/bin/ssh-keygen -q -t rsa -f /etc/ssh/ssh_host_rsa_key -C '' -N ''&&  \
    test -f /etc/ssh/ssh_host_ed25519_key || /usr/bin/ssh-keygen -q -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -C '' -N ''&&  \
    test -f /root/.ssh/id_dsa || /usr/bin/ssh-keygen -t dsa -f /root/.ssh/id_dsa -N '' && \
    test -f /root/.ssh/id_dsa.pub || ssh-keygen -y -t dsa -f ~/.ssh/id_dsa > ~/.ssh/id_dsa.pub && \
    test -f /root/.ssh/authorized_keys || /usr/bin/cp /root/.ssh/id_dsa.pub /root/.ssh/authorized_keys && \
    /usr/bin/cat /root/.ssh/id_dsa && \
    /usr/bin/echo """" && \
    /usr/bin/echo ""Please save the printed private DSA key and login using:"" && \
    /usr/bin/echo ""\""ssh -i \${savedkey} root@\${ipaddress}\"""" && \
    /usr/sbin/sshd -D

EXPOSE 22
",
348,8e979fcf3a9277d313dae08e038980f12d6da59f,docker base update,"docker base update
","FROM node:12-alpine

MAINTAINER LD

ENV HOME_DIR=/opt/app

RUN mkdir -p /opt/docker-bin && mkdir -p $HOME_DIR

ADD docker-entrypoint.sh /opt/docker-bin/

RUN chmod +x /opt/docker-bin/docker-entrypoint.sh

RUN rm -rf /root/src /tmp/* /usr/share/man /var/cache/apk/* \
     /root/.npm /root/.node-gyp /usr/lib/node_modules/npm/man \
     /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html



ENTRYPOINT [""/opt/docker-bin/docker-entrypoint.sh""]
","FROM node:14-alpine

MAINTAINER LD

ENV HOME_DIR=/opt/app

RUN mkdir -p /opt/docker-bin && mkdir -p $HOME_DIR

ADD docker-entrypoint.sh /opt/docker-bin/

RUN chmod +x /opt/docker-bin/docker-entrypoint.sh

RUN rm -rf /root/src /tmp/* /usr/share/man /var/cache/apk/* \
     /root/.npm /root/.node-gyp /usr/lib/node_modules/npm/man \
     /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html

RUN npm install -g npm

ENTRYPOINT [""/opt/docker-bin/docker-entrypoint.sh""]
"
144,dff28d771858d19d49036110d0457f5433e28bfe,update: php-fpm Dockfile,"update: php-fpm Dockfile
","#
#--------------------------------------------------------------------------
# Image Setup
#--------------------------------------------------------------------------
#
# To edit the 'php-fpm' base Image, visit its repository on Github
#    https://github.com/Laradock/php-fpm
#
# To change its version, see the available Tags on the Docker Hub:
#    https://hub.docker.com/r/laradock/php-fpm/tags/
#
# Note: Base Image name format {image-tag}-{php-version}
#

ARG LARADOCK_PHP_VERSION
ARG BASE_IMAGE_TAG_PREFIX=latest
FROM laradock/php-fpm:${BASE_IMAGE_TAG_PREFIX}-${LARADOCK_PHP_VERSION}

LABEL maintainer=""Mahmoud Zalt <mahmoud@zalt.me>""

ARG LARADOCK_PHP_VERSION

# Set Environment Variables
ENV DEBIAN_FRONTEND noninteractive

# If you're in China, or you need to change sources, will be set CHANGE_SOURCE to true in .env.

ARG CHANGE_SOURCE=false
RUN if [ ${CHANGE_SOURCE} = true ]; then \
    # Change application source from deb.debian.org to aliyun source
    sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/' /etc/apt/sources.list && \
    sed -i 's/security.debian.org/mirrors.tuna.tsinghua.edu.cn/' /etc/apt/sources.list && \
    sed -i 's/security-cdn.debian.org/mirrors.tuna.tsinghua.edu.cn/' /etc/apt/sources.list \
;fi

# always run apt update when start and after add new source list, then clean up at end.
RUN set -xe; \
    apt-get update -yqq && \
    pecl channel-update pecl.php.net && \
    apt-get install -yqq \
      apt-utils \
      #
      #--------------------------------------------------------------------------
      # Mandatory Software's Installation
      #--------------------------------------------------------------------------
      #
      # Mandatory Software's such as (""mcrypt"", ""pdo_mysql"", ""libssl-dev"", ....)
      # are installed on the base image 'laradock/php-fpm' image. If you want
      # to add more Software's or remove existing one, you need to edit the
      # base image (https://github.com/Laradock/php-fpm).
      #
      # next lines are here becase there is no auto build on dockerhub see https://github.com/laradock/laradock/pull/1903#issuecomment-463142846
      libzip-dev zip unzip && \
      if [ ${LARADOCK_PHP_VERSION} = ""7.3"" ] || [ ${LARADOCK_PHP_VERSION} = ""7.4"" ]; then \
        docker-php-ext-configure zip; \
      else \
        docker-php-ext-configure zip --with-libzip; \
      fi && \
      # Install the zip extension
      docker-php-ext-install zip && \
      php -m | grep -q 'zip'

#
#--------------------------------------------------------------------------
# Optional Software's Installation
#--------------------------------------------------------------------------
#
# Optional Software's will only be installed if you set them to `true`
# in the `docker-compose.yml` before the build.
# Example:
#   - INSTALL_SOAP=true
#

###########################################################################
# BZ2:
###########################################################################

ARG INSTALL_BZ2=false
RUN if [ ${INSTALL_BZ2} = true ]; then \
  apt-get -y install libbz2-dev; \
  docker-php-ext-install bz2 \
;fi

###########################################################################
# GMP (GNU Multiple Precision):
###########################################################################

ARG INSTALL_GMP=false

RUN if [ ${INSTALL_GMP} = true ]; then \
    # Install the GMP extension
  apt-get install -y libgmp-dev && \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h \
    ;fi && \
    docker-php-ext-install gmp \
;fi

###########################################################################
# SSH2:
###########################################################################

ARG INSTALL_SSH2=false

RUN if [ ${INSTALL_SSH2} = true ]; then \
    # Install the ssh2 extension
    apt-get -y install libssh2-1-dev && \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
        pecl install -a ssh2-0.13; \
    else \
        pecl install -a ssh2-1.2; \
    fi && \
    docker-php-ext-enable ssh2 \
;fi

###########################################################################
# libfaketime:
###########################################################################

USER root

ARG INSTALL_FAKETIME=false

RUN if [ ${INSTALL_FAKETIME} = true ]; then \
    apt-get install -y libfaketime \
;fi

###########################################################################
# SOAP:
###########################################################################

ARG INSTALL_SOAP=false

RUN if [ ${INSTALL_SOAP} = true ]; then \
    # Install the soap extension
    rm /etc/apt/preferences.d/no-debian-php && \
    apt-get -y install libxml2-dev php-soap && \
    docker-php-ext-install soap \
;fi

###########################################################################
# XSL:
###########################################################################

ARG INSTALL_XSL=false

RUN if [ ${INSTALL_XSL} = true ]; then \
    # Install the xsl extension
    apt-get -y install libxslt-dev && \
    docker-php-ext-install xsl \
;fi

###########################################################################
# pgsql
###########################################################################

ARG INSTALL_PGSQL=false

RUN if [ ${INSTALL_PGSQL} = true ]; then \
    # Install the pgsql extension
    docker-php-ext-install pgsql \
;fi

###########################################################################
# pgsql client
###########################################################################

ARG INSTALL_PG_CLIENT=false
ARG INSTALL_POSTGIS=false

RUN if [ ${INSTALL_PG_CLIENT} = true ]; then \
    # Create folders if not exists (https://github.com/tianon/docker-brew-debian/issues/65)
    mkdir -p /usr/share/man/man1 && \
    mkdir -p /usr/share/man/man7 && \
    # Install the pgsql client
    apt-get install -y postgresql-client && \
    if [ ${INSTALL_POSTGIS} = true ]; then \
      apt-get install -y postgis; \
    fi \
;fi

###########################################################################
# xDebug:
###########################################################################

ARG INSTALL_XDEBUG=false

RUN if [ ${INSTALL_XDEBUG} = true ]; then \
  # Install the xdebug extension
  if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
    pecl install xdebug-2.5.5; \
  else \
    if [ $(php -r ""echo PHP_MINOR_VERSION;"") = ""0"" ]; then \
      pecl install xdebug-2.9.0; \
    else \
      pecl install xdebug; \
    fi \
  fi && \
  docker-php-ext-enable xdebug \
;fi

# Copy xdebug configuration for remote debugging
COPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini

RUN sed -i ""s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/"" /usr/local/etc/php/conf.d/xdebug.ini && \
    sed -i ""s/xdebug.remote_enable=0/xdebug.remote_enable=1/"" /usr/local/etc/php/conf.d/xdebug.ini && \
    sed -i ""s/xdebug.cli_color=0/xdebug.cli_color=1/"" /usr/local/etc/php/conf.d/xdebug.ini

###########################################################################
# pcov:
###########################################################################

USER root

ARG INSTALL_PCOV=false

RUN if [ ${INSTALL_PCOV} = true ]; then \
  if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""7"" ]; then \
    if [ $(php -r ""echo PHP_MINOR_VERSION;"") != ""0"" ]; then \
      pecl install pcov && \
      docker-php-ext-enable pcov \
    ;fi \
  ;fi \
;fi

###########################################################################
# Phpdbg:
###########################################################################

ARG INSTALL_PHPDBG=false

RUN if [ ${INSTALL_PHPDBG} = true ]; then \
    # Load the xdebug extension only with phpunit commands
    apt-get install -y --force-yes php${LARADOCK_PHP_VERSION}-phpdbg \
;fi

###########################################################################
# Blackfire:
###########################################################################

ARG INSTALL_BLACKFIRE=false

RUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \
    version=$(php -r ""echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;"") \
    && curl -A ""Docker"" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \
    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \
    && mv /tmp/blackfire-*.so $(php -r ""echo ini_get('extension_dir');"")/blackfire.so \
    && printf ""extension=blackfire.so\nblackfire.agent_socket=tcp://blackfire:8707\n"" > $PHP_INI_DIR/conf.d/blackfire.ini \
;fi

###########################################################################
# PHP REDIS EXTENSION
###########################################################################

ARG INSTALL_PHPREDIS=false

RUN if [ ${INSTALL_PHPREDIS} = true ]; then \
    # Install Php Redis Extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      pecl install -o -f redis-4.3.0; \
    else \
      pecl install -o -f redis; \
    fi \
    && rm -rf /tmp/pear \
    && docker-php-ext-enable redis \
;fi

###########################################################################
# Swoole EXTENSION
###########################################################################

ARG INSTALL_SWOOLE=false

RUN if [ ${INSTALL_SWOOLE} = true ]; then \
    # Install Php Swoole Extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      pecl install swoole-2.0.10; \
    else \
      if [ $(php -r ""echo PHP_MINOR_VERSION;"") = ""0"" ]; then \
        pecl install swoole-2.2.0; \
      else \
        pecl install swoole; \
      fi \
    fi && \
    docker-php-ext-enable swoole \
    && php -m | grep -q 'swoole' \
;fi

###########################################################################
# Taint EXTENSION
###########################################################################

ARG INSTALL_TAINT=false

RUN if [ ${INSTALL_TAINT} = true ]; then \
    # Install Php TAINT Extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""7"" ]; then \
      pecl install taint && \
      docker-php-ext-enable taint && \
      php -m | grep -q 'taint'; \
    fi \
;fi

###########################################################################
# MongoDB:
###########################################################################

ARG INSTALL_MONGO=false

RUN if [ ${INSTALL_MONGO} = true ]; then \
    # Install the mongodb extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      pecl install mongo && \
      docker-php-ext-enable mongo \
    ;fi && \
    pecl install mongodb && \
    docker-php-ext-enable mongodb \
;fi

###########################################################################
# Xhprof:
###########################################################################

ARG INSTALL_XHPROF=false

RUN if [ ${INSTALL_XHPROF} = true ]; then \
    # Install the php xhprof extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = 7 ]; then \
      curl -L -o /tmp/xhprof.tar.gz ""https://github.com/tideways/php-xhprof-extension/archive/v5.0.1.tar.gz""; \
    else \ 
      curl -L -o /tmp/xhprof.tar.gz ""https://codeload.github.com/phacility/xhprof/tar.gz/master""; \
    fi \
    && mkdir -p xhprof \
    && tar -C xhprof -zxvf /tmp/xhprof.tar.gz --strip 1 \
    && ( \
        cd xhprof \
        && phpize \
        && ./configure \
        && make \
        && make install \
    ) \
    && rm -r xhprof \
    && rm /tmp/xhprof.tar.gz \
;fi

COPY ./xhprof.ini /usr/local/etc/php/conf.d

RUN if [ ${INSTALL_XHPROF} = false ]; then \
    rm /usr/local/etc/php/conf.d/xhprof.ini \
;fi

###########################################################################
# AMQP:
###########################################################################

ARG INSTALL_AMQP=false

RUN if [ ${INSTALL_AMQP} = true ]; then \
    # download and install manually, to make sure it's compatible with ampq installed by pecl later
    # install cmake first
    apt-get -y install cmake && \
    curl -L -o /tmp/rabbitmq-c.tar.gz https://github.com/alanxz/rabbitmq-c/archive/master.tar.gz && \
    mkdir -p rabbitmq-c && \
    tar -C rabbitmq-c -zxvf /tmp/rabbitmq-c.tar.gz --strip 1 && \
    cd rabbitmq-c/ && \
    mkdir _build && cd _build/ && \
    cmake .. && \
    cmake --build . --target install && \
    # Install the amqp extension
    pecl install amqp && \
    docker-php-ext-enable amqp && \
    # Install the sockets extension
    docker-php-ext-install sockets \
;fi

###########################################################################
# GEARMAN:
###########################################################################

ARG INSTALL_GEARMAN=false

RUN if [ ${INSTALL_GEARMAN} = true ]; then \
    apt-get -y install libgearman-dev && \
    cd /tmp && \
    curl -L https://github.com/wcgallego/pecl-gearman/archive/gearman-2.0.5.zip -O && \
    unzip gearman-2.0.5.zip && \
    mv pecl-gearman-gearman-2.0.5 pecl-gearman && \
    cd /tmp/pecl-gearman && \
    phpize && \
    ./configure && \
    make -j$(nproc) && \
    make install && \
    cd / && \
    rm /tmp/gearman-2.0.5.zip && \
    rm -r /tmp/pecl-gearman && \
    docker-php-ext-enable gearman \
;fi

###########################################################################
# pcntl
###########################################################################

ARG INSTALL_PCNTL=false
RUN if [ ${INSTALL_PCNTL} = true ]; then \
    # Installs pcntl, helpful for running Horizon
    docker-php-ext-install pcntl \
;fi

###########################################################################
# bcmath:
###########################################################################

ARG INSTALL_BCMATH=false

RUN if [ ${INSTALL_BCMATH} = true ]; then \
    # Install the bcmath extension
    docker-php-ext-install bcmath \
;fi

###########################################################################
# PHP Memcached:
###########################################################################

ARG INSTALL_MEMCACHED=false

RUN if [ ${INSTALL_MEMCACHED} = true ]; then \
    # Install the php memcached extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      pecl install memcached-2.2.0; \
    else \
      pecl install memcached-3.1.3; \
    fi \
    && docker-php-ext-enable memcached \
;fi

###########################################################################
# Exif:
###########################################################################

ARG INSTALL_EXIF=false

RUN if [ ${INSTALL_EXIF} = true ]; then \
    # Enable Exif PHP extentions requirements
    docker-php-ext-install exif \
;fi

###########################################################################
# PHP Aerospike:
###########################################################################

USER root

ARG INSTALL_AEROSPIKE=false

RUN set -xe; \
    if [ ${INSTALL_AEROSPIKE} = true ]; then \
    # Fix dependencies for PHPUnit within aerospike extension
    apt-get -y install sudo wget && \
    # Install the php aerospike extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php5/archive/master.tar.gz; \
    else \
      curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz; \
    fi \
    && mkdir -p /tmp/aerospike-client-php \
    && tar -C /tmp/aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \
    && \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      ( \
          cd /tmp/aerospike-client-php/src/aerospike \
          && phpize \
          && ./build.sh \
          && make install \
      ) \
    else \
      ( \
          cd /tmp/aerospike-client-php/src \
          && phpize \
          && ./build.sh \
          && make install \
      ) \
    fi \
    && rm /tmp/aerospike-client-php.tar.gz \
    && docker-php-ext-enable aerospike \
;fi

###########################################################################
# PHP OCI8:
###########################################################################

ARG INSTALL_OCI8=false

ENV LD_LIBRARY_PATH=""/opt/oracle/instantclient_12_1""
ENV OCI_HOME=""/opt/oracle/instantclient_12_1""
ENV OCI_LIB_DIR=""/opt/oracle/instantclient_12_1""
ENV OCI_INCLUDE_DIR=""/opt/oracle/instantclient_12_1/sdk/include""
ENV OCI_VERSION=12

RUN if [ ${INSTALL_OCI8} = true ]; then \
    # Install wget
    apt-get update && apt-get install --no-install-recommends -y wget \
    # Install Oracle Instantclient
    && mkdir /opt/oracle \
        && cd /opt/oracle \
        && wget https://github.com/diogomascarenha/oracle-instantclient/raw/master/instantclient-basic-linux.x64-12.1.0.2.0.zip \
        && wget https://github.com/diogomascarenha/oracle-instantclient/raw/master/instantclient-sdk-linux.x64-12.1.0.2.0.zip \
        && unzip /opt/oracle/instantclient-basic-linux.x64-12.1.0.2.0.zip -d /opt/oracle \
        && unzip /opt/oracle/instantclient-sdk-linux.x64-12.1.0.2.0.zip -d /opt/oracle \
        && ln -s /opt/oracle/instantclient_12_1/libclntsh.so.12.1 /opt/oracle/instantclient_12_1/libclntsh.so \
        && ln -s /opt/oracle/instantclient_12_1/libclntshcore.so.12.1 /opt/oracle/instantclient_12_1/libclntshcore.so \
        && ln -s /opt/oracle/instantclient_12_1/libocci.so.12.1 /opt/oracle/instantclient_12_1/libocci.so \
        && rm -rf /opt/oracle/*.zip \
    # Install PHP extensions deps
    && apt-get update \
        && apt-get install --no-install-recommends -y \
            libaio-dev \
            freetds-dev && \
    # Install PHP extensions
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      echo 'instantclient,/opt/oracle/instantclient_12_1/' | pecl install oci8-2.0.10; \
    else \
      echo 'instantclient,/opt/oracle/instantclient_12_1/' | pecl install oci8; \
    fi \
        && docker-php-ext-configure pdo_oci --with-pdo-oci=instantclient,/opt/oracle/instantclient_12_1,12.1 \
        && docker-php-ext-configure pdo_dblib --with-libdir=/lib/x86_64-linux-gnu \
        && docker-php-ext-install \
                pdo_oci \
        && docker-php-ext-enable \
                oci8 \
  ;fi

###########################################################################
# IonCube Loader:
###########################################################################

ARG INSTALL_IONCUBE=false

RUN if [ ${INSTALL_IONCUBE} = true ]; then \
    # Install the php ioncube loader
    curl -L -o /tmp/ioncube_loaders_lin_x86-64.tar.gz https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz \
    && tar zxpf /tmp/ioncube_loaders_lin_x86-64.tar.gz -C /tmp \
    && mv /tmp/ioncube/ioncube_loader_lin_${LARADOCK_PHP_VERSION}.so $(php -r ""echo ini_get('extension_dir');"")/ioncube_loader.so \
    && printf ""zend_extension=ioncube_loader.so\n"" > $PHP_INI_DIR/conf.d/0ioncube.ini \
    && rm -rf /tmp/ioncube* \
;fi

###########################################################################
# Opcache:
###########################################################################

ARG INSTALL_OPCACHE=false

RUN if [ ${INSTALL_OPCACHE} = true ]; then \
    docker-php-ext-install opcache \
;fi

# Copy opcache configration
COPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini

###########################################################################
# Mysqli Modifications:
###########################################################################

ARG INSTALL_MYSQLI=false

RUN if [ ${INSTALL_MYSQLI} = true ]; then \
    docker-php-ext-install mysqli \
;fi


###########################################################################
# Human Language and Character Encoding Support:
###########################################################################

ARG INSTALL_INTL=false

RUN if [ ${INSTALL_INTL} = true ]; then \
    # Install intl and requirements
    apt-get install -y zlib1g-dev libicu-dev g++ && \
    docker-php-ext-configure intl && \
    docker-php-ext-install intl \
;fi

###########################################################################
# GHOSTSCRIPT:
###########################################################################

ARG INSTALL_GHOSTSCRIPT=false

RUN if [ ${INSTALL_GHOSTSCRIPT} = true ]; then \
    # Install the ghostscript extension
    # for PDF editing
    apt-get install -y \
    poppler-utils \
    ghostscript \
;fi

###########################################################################
# LDAP:
###########################################################################

ARG INSTALL_LDAP=false

RUN if [ ${INSTALL_LDAP} = true ]; then \
    apt-get install -y libldap2-dev && \
    docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ && \
    docker-php-ext-install ldap \
;fi

###########################################################################
# SQL SERVER:
###########################################################################

ARG INSTALL_MSSQL=false

RUN set -eux; \
  if [ ${INSTALL_MSSQL} = true ]; then \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      apt-get -y install freetds-dev libsybdb5 \
      && ln -s /usr/lib/x86_64-linux-gnu/libsybdb.so /usr/lib/libsybdb.so \
      && docker-php-ext-install mssql pdo_dblib \
      && php -m | grep -q 'mssql' \
      && php -m | grep -q 'pdo_dblib' \
    ;else \
      ###########################################################################
      # Ref from https://github.com/Microsoft/msphpsql/wiki/Dockerfile-for-adding-pdo_sqlsrv-and-sqlsrv-to-official-php-image
      ###########################################################################
      # Add Microsoft repo for Microsoft ODBC Driver 13 for Linux
      apt-get install -y apt-transport-https gnupg \
      && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
      && curl https://packages.microsoft.com/config/debian/9/prod.list > /etc/apt/sources.list.d/mssql-release.list \
      && apt-get update -yqq \
      # Install Dependencies
      && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql17 locales \
      && echo ""en_US.UTF-8 UTF-8"" > /etc/locale.gen \
      # link local aliases
      && ln -sfn /etc/locale.alias /usr/share/locale/locale.alias \
      && locale-gen \
      # Install pdo_sqlsrv and sqlsrv from PECL. Replace pdo_sqlsrv-4.1.8preview with preferred version.
      && if [ $(php -r ""echo PHP_MINOR_VERSION;"") = ""0"" ]; then \
        pecl install pdo_sqlsrv-5.3.0 sqlsrv-5.3.0 \
      ;else \
        pecl install pdo_sqlsrv sqlsrv \
      ;fi \
      && docker-php-ext-enable pdo_sqlsrv sqlsrv \
      && php -m | grep -q 'pdo_sqlsrv' \
      && php -m | grep -q 'sqlsrv' \
    ;fi \
  ;fi

###########################################################################
# Image optimizers:
###########################################################################

USER root

ARG INSTALL_IMAGE_OPTIMIZERS=false

RUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ]; then \
    apt-get install -y jpegoptim optipng pngquant gifsicle \
;fi

###########################################################################
# ImageMagick:
###########################################################################

USER root

ARG INSTALL_IMAGEMAGICK=false

RUN if [ ${INSTALL_IMAGEMAGICK} = true ]; then \
    apt-get install -y libmagickwand-dev imagemagick && \
    pecl install imagick && \
    docker-php-ext-enable imagick \
;fi

###########################################################################
# SMB:
###########################################################################

ARG INSTALL_SMB=false

RUN if [ ${INSTALL_SMB} = true ]; then \
    apt-get install -y smbclient php-smbclient coreutils \
;fi

###########################################################################
# IMAP:
###########################################################################

ARG INSTALL_IMAP=false

RUN if [ ${INSTALL_IMAP} = true ]; then \
    apt-get install -y libc-client-dev libkrb5-dev && \
    docker-php-ext-configure imap --with-kerberos --with-imap-ssl && \
    docker-php-ext-install imap \
;fi

###########################################################################
# Calendar:
###########################################################################

USER root

ARG INSTALL_CALENDAR=false

RUN if [ ${INSTALL_CALENDAR} = true ]; then \
    docker-php-ext-configure calendar && \
    docker-php-ext-install calendar \
;fi

###########################################################################
# Phalcon:
###########################################################################

ARG INSTALL_PHALCON=false
ARG LARADOCK_PHALCON_VERSION
ENV LARADOCK_PHALCON_VERSION ${LARADOCK_PHALCON_VERSION}

# Copy phalcon configration
COPY ./phalcon.ini /usr/local/etc/php/conf.d/phalcon.ini.disable

RUN if [ $INSTALL_PHALCON = true ]; then \
    apt-get update && apt-get install -y unzip libpcre3-dev gcc make re2c \
    && curl -L -o /tmp/cphalcon.zip https://github.com/phalcon/cphalcon/archive/v${LARADOCK_PHALCON_VERSION}.zip \
    && unzip -d /tmp/ /tmp/cphalcon.zip \
    && cd /tmp/cphalcon-${LARADOCK_PHALCON_VERSION}/build \
    && ./install \
    && mv /usr/local/etc/php/conf.d/phalcon.ini.disable /usr/local/etc/php/conf.d/phalcon.ini \
    && rm -rf /tmp/cphalcon* \
;fi

###########################################################################
# APCU:
###########################################################################

ARG INSTALL_APCU=false

RUN if [ ${INSTALL_APCU} = true ]; then \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
        pecl install -a apcu-4.0.11; \
    else \
        pecl install apcu; \
    fi && \
    docker-php-ext-enable apcu \
;fi

###########################################################################
# YAML:
###########################################################################

USER root

ARG INSTALL_YAML=false

RUN if [ ${INSTALL_YAML} = true ]; then \
    apt-get install libyaml-dev -y ; \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
        pecl install -a yaml-1.3.2; \
    else \
        pecl install yaml; \
    fi && \
    docker-php-ext-enable yaml \
;fi

###########################################################################
# RDKAFKA:
###########################################################################

ARG INSTALL_RDKAFKA=false

RUN if [ ${INSTALL_RDKAFKA} = true ]; then \
    apt-get install -y librdkafka-dev && \
    pecl install rdkafka && \
    docker-php-ext-enable rdkafka \
;fi

###########################################################################
# GETTEXT:
###########################################################################

ARG INSTALL_GETTEXT=false

RUN if [ ${INSTALL_GETTEXT} = true ]; then \
    apt-get install -y zlib1g-dev libicu-dev g++ libpq-dev libssl-dev gettext && \
    docker-php-ext-install gettext \
;fi

###########################################################################
# Install additional locales:
###########################################################################

ARG INSTALL_ADDITIONAL_LOCALES=false
ARG ADDITIONAL_LOCALES

RUN if [ ${INSTALL_ADDITIONAL_LOCALES} = true ]; then \
    apt-get install -y locales \
    && echo '' >> /usr/share/locale/locale.alias \
    && temp=""${ADDITIONAL_LOCALES%\""}"" \
    && temp=""${temp#\""}"" \
    && for i in ${temp}; do sed -i ""/$i/s/^#//g"" /etc/locale.gen; done \
    && locale-gen \
;fi

###########################################################################
# MySQL Client:
###########################################################################

USER root

ARG INSTALL_MYSQL_CLIENT=false

RUN if [ ${INSTALL_MYSQL_CLIENT} = true ]; then \
      apt-get -y install default-mysql-client \
;fi

###########################################################################
# ping:
###########################################################################

USER root

ARG INSTALL_PING=false

RUN if [ ${INSTALL_PING} = true ]; then \
    apt-get -y install inetutils-ping \
;fi

###########################################################################
# sshpass:
###########################################################################

USER root

ARG INSTALL_SSHPASS=false

RUN if [ ${INSTALL_SSHPASS} = true ]; then \
    apt-get -y install sshpass \
;fi

###########################################################################
# FFMPEG:
###########################################################################

USER root

ARG INSTALL_FFMPEG=false

RUN if [ ${INSTALL_FFMPEG} = true ]; then \
    apt-get -y install ffmpeg \
;fi

#####################################
# wkhtmltopdf:
#####################################

USER root

ARG INSTALL_WKHTMLTOPDF=false

RUN if [ ${INSTALL_WKHTMLTOPDF} = true ]; then \
    apt-get install -y \
    libxrender1 \
    libfontconfig1 \
    libx11-dev \
    libjpeg62 \
    libxtst6 \
    wget \
    && wget https://github.com/h4cc/wkhtmltopdf-amd64/blob/master/bin/wkhtmltopdf-amd64?raw=true -O /usr/local/bin/wkhtmltopdf \
    && chmod +x /usr/local/bin/wkhtmltopdf \
;fi

###########################################################################
# Mailparse extension:
###########################################################################

ARG INSTALL_MAILPARSE=false

RUN if [ ${INSTALL_MAILPARSE} = true ]; then \
    # Install mailparse extension
    printf ""\n"" | pecl install -o -f mailparse \
    &&  rm -rf /tmp/pear \
    &&  docker-php-ext-enable mailparse \
;fi

###########################################################################
# CacheTool:
###########################################################################

ARG INSTALL_CACHETOOL=false

RUN if [ ${INSTALL_CACHETOOL} = true ]; then \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""7"" ] && [ $(php -r ""echo PHP_MINOR_VERSION;"") -ge 1 ]; then \
            curl -sO http://gordalina.github.io/cachetool/downloads/cachetool.phar; \
    else \
        curl http://gordalina.github.io/cachetool/downloads/cachetool-3.2.1.phar -o cachetool.phar; \
    fi && \
    chmod +x cachetool.phar && \
    mv cachetool.phar /usr/local/bin/cachetool \
;fi

###########################################################################
# Check PHP version:
###########################################################################

RUN set -xe; php -v | head -n 1 | grep -q ""PHP ${LARADOCK_PHP_VERSION}.""

#
#--------------------------------------------------------------------------
# Final Touch
#--------------------------------------------------------------------------
#

COPY ./laravel.ini /usr/local/etc/php/conf.d
COPY ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/

USER root

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    rm /var/log/lastlog /var/log/faillog

# Configure non-root user.
ARG PUID=1000
ENV PUID ${PUID}
ARG PGID=1000
ENV PGID ${PGID}

RUN groupmod -o -g ${PGID} www-data && \
    usermod -o -u ${PUID} -g www-data www-data

# Adding the faketime library to the preload file needs to be done last
# otherwise it will preload it for all commands that follow in this file
RUN if [ ${INSTALL_FAKETIME} = true ]; then \
    echo ""/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1"" > /etc/ld.so.preload \
;fi

# Configure locale.
ARG LOCALE=POSIX
ENV LC_ALL ${LOCALE}

WORKDIR /var/www

CMD [""php-fpm""]

EXPOSE 9000
","#
#--------------------------------------------------------------------------
# Image Setup
#--------------------------------------------------------------------------
#
# To edit the 'php-fpm' base Image, visit its repository on Github
#    https://github.com/Laradock/php-fpm
#
# To change its version, see the available Tags on the Docker Hub:
#    https://hub.docker.com/r/laradock/php-fpm/tags/
#
# Note: Base Image name format {image-tag}-{php-version}
#

ARG LARADOCK_PHP_VERSION
ARG BASE_IMAGE_TAG_PREFIX=latest
FROM laradock/php-fpm:${BASE_IMAGE_TAG_PREFIX}-${LARADOCK_PHP_VERSION}

LABEL maintainer=""Mahmoud Zalt <mahmoud@zalt.me>""

ARG LARADOCK_PHP_VERSION

# Set Environment Variables
ENV DEBIAN_FRONTEND noninteractive

# If you're in China, or you need to change sources, will be set CHANGE_SOURCE to true in .env.

ARG CHANGE_SOURCE=false
RUN if [ ${CHANGE_SOURCE} = true ]; then \
    # Change application source from deb.debian.org to aliyun source
    sed -i 's/deb.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list && \
    sed -i 's/security.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list && \
    sed -i 's/security-cdn.debian.org/mirrors.aliyun.com/' /etc/apt/sources.list \
;fi

# always run apt update when start and after add new source list, then clean up at end.
RUN set -xe; \
    apt-get update -yqq && \
    pecl channel-update pecl.php.net && \
    apt-get install -yqq \
      apt-utils \
      #
      #--------------------------------------------------------------------------
      # Mandatory Software's Installation
      #--------------------------------------------------------------------------
      #
      # Mandatory Software's such as (""mcrypt"", ""pdo_mysql"", ""libssl-dev"", ....)
      # are installed on the base image 'laradock/php-fpm' image. If you want
      # to add more Software's or remove existing one, you need to edit the
      # base image (https://github.com/Laradock/php-fpm).
      #
      # next lines are here becase there is no auto build on dockerhub see https://github.com/laradock/laradock/pull/1903#issuecomment-463142846
      libzip-dev zip unzip && \
      if [ ${LARADOCK_PHP_VERSION} = ""7.3"" ] || [ ${LARADOCK_PHP_VERSION} = ""7.4"" ]; then \
        docker-php-ext-configure zip; \
      else \
        docker-php-ext-configure zip --with-libzip; \
      fi && \
      # Install the zip extension
      docker-php-ext-install zip && \
      php -m | grep -q 'zip'

#
#--------------------------------------------------------------------------
# Optional Software's Installation
#--------------------------------------------------------------------------
#
# Optional Software's will only be installed if you set them to `true`
# in the `docker-compose.yml` before the build.
# Example:
#   - INSTALL_SOAP=true
#

###########################################################################
# BZ2:
###########################################################################

ARG INSTALL_BZ2=false
RUN if [ ${INSTALL_BZ2} = true ]; then \
  apt-get -y install libbz2-dev; \
  docker-php-ext-install bz2 \
;fi

###########################################################################
# GMP (GNU Multiple Precision):
###########################################################################

ARG INSTALL_GMP=false

RUN if [ ${INSTALL_GMP} = true ]; then \
    # Install the GMP extension
  apt-get install -y libgmp-dev && \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h \
    ;fi && \
    docker-php-ext-install gmp \
;fi

###########################################################################
# SSH2:
###########################################################################

ARG INSTALL_SSH2=false

RUN if [ ${INSTALL_SSH2} = true ]; then \
    # Install the ssh2 extension
    apt-get -y install libssh2-1-dev && \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
        pecl install -a ssh2-0.13; \
    else \
        pecl install -a ssh2-1.2; \
    fi && \
    docker-php-ext-enable ssh2 \
;fi

###########################################################################
# libfaketime:
###########################################################################

USER root

ARG INSTALL_FAKETIME=false

RUN if [ ${INSTALL_FAKETIME} = true ]; then \
    apt-get install -y libfaketime \
;fi

###########################################################################
# SOAP:
###########################################################################

ARG INSTALL_SOAP=false

RUN if [ ${INSTALL_SOAP} = true ]; then \
    # Install the soap extension
    rm /etc/apt/preferences.d/no-debian-php && \
    apt-get -y install libxml2-dev php-soap && \
    docker-php-ext-install soap \
;fi

###########################################################################
# XSL:
###########################################################################

ARG INSTALL_XSL=false

RUN if [ ${INSTALL_XSL} = true ]; then \
    # Install the xsl extension
    apt-get -y install libxslt-dev && \
    docker-php-ext-install xsl \
;fi

###########################################################################
# pgsql
###########################################################################

ARG INSTALL_PGSQL=false

RUN if [ ${INSTALL_PGSQL} = true ]; then \
    # Install the pgsql extension
    docker-php-ext-install pgsql \
;fi

###########################################################################
# pgsql client
###########################################################################

ARG INSTALL_PG_CLIENT=false
ARG INSTALL_POSTGIS=false

RUN if [ ${INSTALL_PG_CLIENT} = true ]; then \
    # Create folders if not exists (https://github.com/tianon/docker-brew-debian/issues/65)
    mkdir -p /usr/share/man/man1 && \
    mkdir -p /usr/share/man/man7 && \
    # Install the pgsql client
    apt-get install -y postgresql-client && \
    if [ ${INSTALL_POSTGIS} = true ]; then \
      apt-get install -y postgis; \
    fi \
;fi

###########################################################################
# xDebug:
###########################################################################

ARG INSTALL_XDEBUG=false

RUN if [ ${INSTALL_XDEBUG} = true ]; then \
  # Install the xdebug extension
  if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
    pecl install xdebug-2.5.5; \
  else \
    if [ $(php -r ""echo PHP_MINOR_VERSION;"") = ""0"" ]; then \
      pecl install xdebug-2.9.0; \
    else \
      pecl install xdebug; \
    fi \
  fi && \
  docker-php-ext-enable xdebug \
;fi

# Copy xdebug configuration for remote debugging
COPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini

RUN sed -i ""s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/"" /usr/local/etc/php/conf.d/xdebug.ini && \
    sed -i ""s/xdebug.remote_enable=0/xdebug.remote_enable=1/"" /usr/local/etc/php/conf.d/xdebug.ini && \
    sed -i ""s/xdebug.cli_color=0/xdebug.cli_color=1/"" /usr/local/etc/php/conf.d/xdebug.ini

###########################################################################
# pcov:
###########################################################################

USER root

ARG INSTALL_PCOV=false

RUN if [ ${INSTALL_PCOV} = true ]; then \
  if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""7"" ]; then \
    if [ $(php -r ""echo PHP_MINOR_VERSION;"") != ""0"" ]; then \
      pecl install pcov && \
      docker-php-ext-enable pcov \
    ;fi \
  ;fi \
;fi

###########################################################################
# Phpdbg:
###########################################################################

ARG INSTALL_PHPDBG=false

RUN if [ ${INSTALL_PHPDBG} = true ]; then \
    # Load the xdebug extension only with phpunit commands
    apt-get install -y --force-yes php${LARADOCK_PHP_VERSION}-phpdbg \
;fi

###########################################################################
# Blackfire:
###########################################################################

ARG INSTALL_BLACKFIRE=false

RUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ]; then \
    version=$(php -r ""echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;"") \
    && curl -A ""Docker"" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \
    && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \
    && mv /tmp/blackfire-*.so $(php -r ""echo ini_get('extension_dir');"")/blackfire.so \
    && printf ""extension=blackfire.so\nblackfire.agent_socket=tcp://blackfire:8707\n"" > $PHP_INI_DIR/conf.d/blackfire.ini \
;fi

###########################################################################
# PHP REDIS EXTENSION
###########################################################################

ARG INSTALL_PHPREDIS=false

RUN if [ ${INSTALL_PHPREDIS} = true ]; then \
    # Install Php Redis Extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      pecl install -o -f redis-4.3.0; \
    else \
      pecl install -o -f redis; \
    fi \
    && rm -rf /tmp/pear \
    && docker-php-ext-enable redis \
;fi

###########################################################################
# Swoole EXTENSION
###########################################################################

ARG INSTALL_SWOOLE=false

RUN if [ ${INSTALL_SWOOLE} = true ]; then \
    # Install Php Swoole Extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      pecl install swoole-2.0.10; \
    else \
      if [ $(php -r ""echo PHP_MINOR_VERSION;"") = ""0"" ]; then \
        pecl install swoole-2.2.0; \
      else \
        pecl install swoole; \
      fi \
    fi && \
    docker-php-ext-enable swoole \
    && php -m | grep -q 'swoole' \
;fi

###########################################################################
# Taint EXTENSION
###########################################################################

ARG INSTALL_TAINT=false

RUN if [ ${INSTALL_TAINT} = true ]; then \
    # Install Php TAINT Extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""7"" ]; then \
      pecl install taint && \
      docker-php-ext-enable taint && \
      php -m | grep -q 'taint'; \
    fi \
;fi

###########################################################################
# MongoDB:
###########################################################################

ARG INSTALL_MONGO=false

RUN if [ ${INSTALL_MONGO} = true ]; then \
    # Install the mongodb extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      pecl install mongo && \
      docker-php-ext-enable mongo \
    ;fi && \
    pecl install mongodb && \
    docker-php-ext-enable mongodb \
;fi

###########################################################################
# Xhprof:
###########################################################################

ARG INSTALL_XHPROF=false

RUN if [ ${INSTALL_XHPROF} = true ]; then \
    # Install the php xhprof extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = 7 ]; then \
      curl -L -o /tmp/xhprof.tar.gz ""https://github.com/tideways/php-xhprof-extension/archive/v5.0.1.tar.gz""; \
    else \ 
      curl -L -o /tmp/xhprof.tar.gz ""https://codeload.github.com/phacility/xhprof/tar.gz/master""; \
    fi \
    && mkdir -p xhprof \
    && tar -C xhprof -zxvf /tmp/xhprof.tar.gz --strip 1 \
    && ( \
        cd xhprof \
        && phpize \
        && ./configure \
        && make \
        && make install \
    ) \
    && rm -r xhprof \
    && rm /tmp/xhprof.tar.gz \
;fi

COPY ./xhprof.ini /usr/local/etc/php/conf.d

RUN if [ ${INSTALL_XHPROF} = false ]; then \
    rm /usr/local/etc/php/conf.d/xhprof.ini \
;fi

###########################################################################
# AMQP:
###########################################################################

ARG INSTALL_AMQP=false

RUN if [ ${INSTALL_AMQP} = true ]; then \
    # download and install manually, to make sure it's compatible with ampq installed by pecl later
    # install cmake first
    apt-get -y install cmake && \
    curl -L -o /tmp/rabbitmq-c.tar.gz https://github.com/alanxz/rabbitmq-c/archive/master.tar.gz && \
    mkdir -p rabbitmq-c && \
    tar -C rabbitmq-c -zxvf /tmp/rabbitmq-c.tar.gz --strip 1 && \
    cd rabbitmq-c/ && \
    mkdir _build && cd _build/ && \
    cmake .. && \
    cmake --build . --target install && \
    # Install the amqp extension
    pecl install amqp && \
    docker-php-ext-enable amqp && \
    # Install the sockets extension
    docker-php-ext-install sockets \
;fi

###########################################################################
# GEARMAN:
###########################################################################

ARG INSTALL_GEARMAN=false

RUN if [ ${INSTALL_GEARMAN} = true ]; then \
    apt-get -y install libgearman-dev && \
    cd /tmp && \
    curl -L https://github.com/wcgallego/pecl-gearman/archive/gearman-2.0.5.zip -O && \
    unzip gearman-2.0.5.zip && \
    mv pecl-gearman-gearman-2.0.5 pecl-gearman && \
    cd /tmp/pecl-gearman && \
    phpize && \
    ./configure && \
    make -j$(nproc) && \
    make install && \
    cd / && \
    rm /tmp/gearman-2.0.5.zip && \
    rm -r /tmp/pecl-gearman && \
    docker-php-ext-enable gearman \
;fi

###########################################################################
# pcntl
###########################################################################

ARG INSTALL_PCNTL=false
RUN if [ ${INSTALL_PCNTL} = true ]; then \
    # Installs pcntl, helpful for running Horizon
    docker-php-ext-install pcntl \
;fi

###########################################################################
# bcmath:
###########################################################################

ARG INSTALL_BCMATH=false

RUN if [ ${INSTALL_BCMATH} = true ]; then \
    # Install the bcmath extension
    docker-php-ext-install bcmath \
;fi

###########################################################################
# PHP Memcached:
###########################################################################

ARG INSTALL_MEMCACHED=false

RUN if [ ${INSTALL_MEMCACHED} = true ]; then \
    # Install the php memcached extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      pecl install memcached-2.2.0; \
    else \
      pecl install memcached-3.1.3; \
    fi \
    && docker-php-ext-enable memcached \
;fi

###########################################################################
# Exif:
###########################################################################

ARG INSTALL_EXIF=false

RUN if [ ${INSTALL_EXIF} = true ]; then \
    # Enable Exif PHP extentions requirements
    docker-php-ext-install exif \
;fi

###########################################################################
# PHP Aerospike:
###########################################################################

USER root

ARG INSTALL_AEROSPIKE=false

RUN set -xe; \
    if [ ${INSTALL_AEROSPIKE} = true ]; then \
    # Fix dependencies for PHPUnit within aerospike extension
    apt-get -y install sudo wget && \
    # Install the php aerospike extension
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php5/archive/master.tar.gz; \
    else \
      curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz; \
    fi \
    && mkdir -p /tmp/aerospike-client-php \
    && tar -C /tmp/aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \
    && \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      ( \
          cd /tmp/aerospike-client-php/src/aerospike \
          && phpize \
          && ./build.sh \
          && make install \
      ) \
    else \
      ( \
          cd /tmp/aerospike-client-php/src \
          && phpize \
          && ./build.sh \
          && make install \
      ) \
    fi \
    && rm /tmp/aerospike-client-php.tar.gz \
    && docker-php-ext-enable aerospike \
;fi

###########################################################################
# PHP OCI8:
###########################################################################

ARG INSTALL_OCI8=false

ENV LD_LIBRARY_PATH=""/opt/oracle/instantclient_12_1""
ENV OCI_HOME=""/opt/oracle/instantclient_12_1""
ENV OCI_LIB_DIR=""/opt/oracle/instantclient_12_1""
ENV OCI_INCLUDE_DIR=""/opt/oracle/instantclient_12_1/sdk/include""
ENV OCI_VERSION=12

RUN if [ ${INSTALL_OCI8} = true ]; then \
    # Install wget
    apt-get update && apt-get install --no-install-recommends -y wget \
    # Install Oracle Instantclient
    && mkdir /opt/oracle \
        && cd /opt/oracle \
        && wget https://github.com/diogomascarenha/oracle-instantclient/raw/master/instantclient-basic-linux.x64-12.1.0.2.0.zip \
        && wget https://github.com/diogomascarenha/oracle-instantclient/raw/master/instantclient-sdk-linux.x64-12.1.0.2.0.zip \
        && unzip /opt/oracle/instantclient-basic-linux.x64-12.1.0.2.0.zip -d /opt/oracle \
        && unzip /opt/oracle/instantclient-sdk-linux.x64-12.1.0.2.0.zip -d /opt/oracle \
        && ln -s /opt/oracle/instantclient_12_1/libclntsh.so.12.1 /opt/oracle/instantclient_12_1/libclntsh.so \
        && ln -s /opt/oracle/instantclient_12_1/libclntshcore.so.12.1 /opt/oracle/instantclient_12_1/libclntshcore.so \
        && ln -s /opt/oracle/instantclient_12_1/libocci.so.12.1 /opt/oracle/instantclient_12_1/libocci.so \
        && rm -rf /opt/oracle/*.zip \
    # Install PHP extensions deps
    && apt-get update \
        && apt-get install --no-install-recommends -y \
            libaio-dev \
            freetds-dev && \
    # Install PHP extensions
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      echo 'instantclient,/opt/oracle/instantclient_12_1/' | pecl install oci8-2.0.10; \
    else \
      echo 'instantclient,/opt/oracle/instantclient_12_1/' | pecl install oci8; \
    fi \
        && docker-php-ext-configure pdo_oci --with-pdo-oci=instantclient,/opt/oracle/instantclient_12_1,12.1 \
        && docker-php-ext-configure pdo_dblib --with-libdir=/lib/x86_64-linux-gnu \
        && docker-php-ext-install \
                pdo_oci \
        && docker-php-ext-enable \
                oci8 \
  ;fi

###########################################################################
# IonCube Loader:
###########################################################################

ARG INSTALL_IONCUBE=false

RUN if [ ${INSTALL_IONCUBE} = true ]; then \
    # Install the php ioncube loader
    curl -L -o /tmp/ioncube_loaders_lin_x86-64.tar.gz https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz \
    && tar zxpf /tmp/ioncube_loaders_lin_x86-64.tar.gz -C /tmp \
    && mv /tmp/ioncube/ioncube_loader_lin_${LARADOCK_PHP_VERSION}.so $(php -r ""echo ini_get('extension_dir');"")/ioncube_loader.so \
    && printf ""zend_extension=ioncube_loader.so\n"" > $PHP_INI_DIR/conf.d/0ioncube.ini \
    && rm -rf /tmp/ioncube* \
;fi

###########################################################################
# Opcache:
###########################################################################

ARG INSTALL_OPCACHE=false

RUN if [ ${INSTALL_OPCACHE} = true ]; then \
    docker-php-ext-install opcache \
;fi

# Copy opcache configration
COPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini

###########################################################################
# Mysqli Modifications:
###########################################################################

ARG INSTALL_MYSQLI=false

RUN if [ ${INSTALL_MYSQLI} = true ]; then \
    docker-php-ext-install mysqli \
;fi


###########################################################################
# Human Language and Character Encoding Support:
###########################################################################

ARG INSTALL_INTL=false

RUN if [ ${INSTALL_INTL} = true ]; then \
    # Install intl and requirements
    apt-get install -y zlib1g-dev libicu-dev g++ && \
    docker-php-ext-configure intl && \
    docker-php-ext-install intl \
;fi

###########################################################################
# GHOSTSCRIPT:
###########################################################################

ARG INSTALL_GHOSTSCRIPT=false

RUN if [ ${INSTALL_GHOSTSCRIPT} = true ]; then \
    # Install the ghostscript extension
    # for PDF editing
    apt-get install -y \
    poppler-utils \
    ghostscript \
;fi

###########################################################################
# LDAP:
###########################################################################

ARG INSTALL_LDAP=false

RUN if [ ${INSTALL_LDAP} = true ]; then \
    apt-get install -y libldap2-dev && \
    docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ && \
    docker-php-ext-install ldap \
;fi

###########################################################################
# SQL SERVER:
###########################################################################

ARG INSTALL_MSSQL=false

RUN set -eux; \
  if [ ${INSTALL_MSSQL} = true ]; then \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
      apt-get -y install freetds-dev libsybdb5 \
      && ln -s /usr/lib/x86_64-linux-gnu/libsybdb.so /usr/lib/libsybdb.so \
      && docker-php-ext-install mssql pdo_dblib \
      && php -m | grep -q 'mssql' \
      && php -m | grep -q 'pdo_dblib' \
    ;else \
      ###########################################################################
      # Ref from https://github.com/Microsoft/msphpsql/wiki/Dockerfile-for-adding-pdo_sqlsrv-and-sqlsrv-to-official-php-image
      ###########################################################################
      # Add Microsoft repo for Microsoft ODBC Driver 13 for Linux
      apt-get install -y apt-transport-https gnupg \
      && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
      && curl https://packages.microsoft.com/config/debian/9/prod.list > /etc/apt/sources.list.d/mssql-release.list \
      && apt-get update -yqq \
      # Install Dependencies
      && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql17 locales \
      && echo ""en_US.UTF-8 UTF-8"" > /etc/locale.gen \
      # link local aliases
      && ln -sfn /etc/locale.alias /usr/share/locale/locale.alias \
      && locale-gen \
      # Install pdo_sqlsrv and sqlsrv from PECL. Replace pdo_sqlsrv-4.1.8preview with preferred version.
      && if [ $(php -r ""echo PHP_MINOR_VERSION;"") = ""0"" ]; then \
        pecl install pdo_sqlsrv-5.3.0 sqlsrv-5.3.0 \
      ;else \
        pecl install pdo_sqlsrv sqlsrv \
      ;fi \
      && docker-php-ext-enable pdo_sqlsrv sqlsrv \
      && php -m | grep -q 'pdo_sqlsrv' \
      && php -m | grep -q 'sqlsrv' \
    ;fi \
  ;fi

###########################################################################
# Image optimizers:
###########################################################################

USER root

ARG INSTALL_IMAGE_OPTIMIZERS=false

RUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ]; then \
    apt-get install -y jpegoptim optipng pngquant gifsicle \
;fi

###########################################################################
# ImageMagick:
###########################################################################

USER root

ARG INSTALL_IMAGEMAGICK=false

RUN if [ ${INSTALL_IMAGEMAGICK} = true ]; then \
    apt-get install -y libmagickwand-dev imagemagick && \
    pecl install imagick && \
    docker-php-ext-enable imagick \
;fi

###########################################################################
# SMB:
###########################################################################

ARG INSTALL_SMB=false

RUN if [ ${INSTALL_SMB} = true ]; then \
    apt-get install -y smbclient php-smbclient coreutils \
;fi

###########################################################################
# IMAP:
###########################################################################

ARG INSTALL_IMAP=false

RUN if [ ${INSTALL_IMAP} = true ]; then \
    apt-get install -y libc-client-dev libkrb5-dev && \
    docker-php-ext-configure imap --with-kerberos --with-imap-ssl && \
    docker-php-ext-install imap \
;fi

###########################################################################
# Calendar:
###########################################################################

USER root

ARG INSTALL_CALENDAR=false

RUN if [ ${INSTALL_CALENDAR} = true ]; then \
    docker-php-ext-configure calendar && \
    docker-php-ext-install calendar \
;fi

###########################################################################
# Phalcon:
###########################################################################

ARG INSTALL_PHALCON=false
ARG LARADOCK_PHALCON_VERSION
ENV LARADOCK_PHALCON_VERSION ${LARADOCK_PHALCON_VERSION}

# Copy phalcon configration
COPY ./phalcon.ini /usr/local/etc/php/conf.d/phalcon.ini.disable

RUN if [ $INSTALL_PHALCON = true ]; then \
    apt-get update && apt-get install -y unzip libpcre3-dev gcc make re2c \
    && curl -L -o /tmp/cphalcon.zip https://github.com/phalcon/cphalcon/archive/v${LARADOCK_PHALCON_VERSION}.zip \
    && unzip -d /tmp/ /tmp/cphalcon.zip \
    && cd /tmp/cphalcon-${LARADOCK_PHALCON_VERSION}/build \
    && ./install \
    && mv /usr/local/etc/php/conf.d/phalcon.ini.disable /usr/local/etc/php/conf.d/phalcon.ini \
    && rm -rf /tmp/cphalcon* \
;fi

###########################################################################
# APCU:
###########################################################################

ARG INSTALL_APCU=false

RUN if [ ${INSTALL_APCU} = true ]; then \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
        pecl install -a apcu-4.0.11; \
    else \
        pecl install apcu; \
    fi && \
    docker-php-ext-enable apcu \
;fi

###########################################################################
# YAML:
###########################################################################

USER root

ARG INSTALL_YAML=false

RUN if [ ${INSTALL_YAML} = true ]; then \
    apt-get install libyaml-dev -y ; \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""5"" ]; then \
        pecl install -a yaml-1.3.2; \
    else \
        pecl install yaml; \
    fi && \
    docker-php-ext-enable yaml \
;fi

###########################################################################
# RDKAFKA:
###########################################################################

ARG INSTALL_RDKAFKA=false

RUN if [ ${INSTALL_RDKAFKA} = true ]; then \
    apt-get install -y librdkafka-dev && \
    pecl install rdkafka && \
    docker-php-ext-enable rdkafka \
;fi

###########################################################################
# GETTEXT:
###########################################################################

ARG INSTALL_GETTEXT=false

RUN if [ ${INSTALL_GETTEXT} = true ]; then \
    apt-get install -y zlib1g-dev libicu-dev g++ libpq-dev libssl-dev gettext && \
    docker-php-ext-install gettext \
;fi

###########################################################################
# Install additional locales:
###########################################################################

ARG INSTALL_ADDITIONAL_LOCALES=false
ARG ADDITIONAL_LOCALES

RUN if [ ${INSTALL_ADDITIONAL_LOCALES} = true ]; then \
    apt-get install -y locales \
    && echo '' >> /usr/share/locale/locale.alias \
    && temp=""${ADDITIONAL_LOCALES%\""}"" \
    && temp=""${temp#\""}"" \
    && for i in ${temp}; do sed -i ""/$i/s/^#//g"" /etc/locale.gen; done \
    && locale-gen \
;fi

###########################################################################
# MySQL Client:
###########################################################################

USER root

ARG INSTALL_MYSQL_CLIENT=false

RUN if [ ${INSTALL_MYSQL_CLIENT} = true ]; then \
      apt-get -y install default-mysql-client \
;fi

###########################################################################
# ping:
###########################################################################

USER root

ARG INSTALL_PING=false

RUN if [ ${INSTALL_PING} = true ]; then \
    apt-get -y install inetutils-ping \
;fi

###########################################################################
# sshpass:
###########################################################################

USER root

ARG INSTALL_SSHPASS=false

RUN if [ ${INSTALL_SSHPASS} = true ]; then \
    apt-get -y install sshpass \
;fi

###########################################################################
# FFMPEG:
###########################################################################

USER root

ARG INSTALL_FFMPEG=false

RUN if [ ${INSTALL_FFMPEG} = true ]; then \
    apt-get -y install ffmpeg \
;fi

#####################################
# wkhtmltopdf:
#####################################

USER root

ARG INSTALL_WKHTMLTOPDF=false

RUN if [ ${INSTALL_WKHTMLTOPDF} = true ]; then \
    apt-get install -y \
    libxrender1 \
    libfontconfig1 \
    libx11-dev \
    libjpeg62 \
    libxtst6 \
    wget \
    && wget https://github.com/h4cc/wkhtmltopdf-amd64/blob/master/bin/wkhtmltopdf-amd64?raw=true -O /usr/local/bin/wkhtmltopdf \
    && chmod +x /usr/local/bin/wkhtmltopdf \
;fi

###########################################################################
# Mailparse extension:
###########################################################################

ARG INSTALL_MAILPARSE=false

RUN if [ ${INSTALL_MAILPARSE} = true ]; then \
    # Install mailparse extension
    printf ""\n"" | pecl install -o -f mailparse \
    &&  rm -rf /tmp/pear \
    &&  docker-php-ext-enable mailparse \
;fi

###########################################################################
# CacheTool:
###########################################################################

ARG INSTALL_CACHETOOL=false

RUN if [ ${INSTALL_CACHETOOL} = true ]; then \
    if [ $(php -r ""echo PHP_MAJOR_VERSION;"") = ""7"" ] && [ $(php -r ""echo PHP_MINOR_VERSION;"") -ge 1 ]; then \
            curl -sO http://gordalina.github.io/cachetool/downloads/cachetool.phar; \
    else \
        curl http://gordalina.github.io/cachetool/downloads/cachetool-3.2.1.phar -o cachetool.phar; \
    fi && \
    chmod +x cachetool.phar && \
    mv cachetool.phar /usr/local/bin/cachetool \
;fi

###########################################################################
# Check PHP version:
###########################################################################

RUN set -xe; php -v | head -n 1 | grep -q ""PHP ${LARADOCK_PHP_VERSION}.""

#
#--------------------------------------------------------------------------
# Final Touch
#--------------------------------------------------------------------------
#

COPY ./laravel.ini /usr/local/etc/php/conf.d
COPY ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/

USER root

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    rm /var/log/lastlog /var/log/faillog

# Configure non-root user.
ARG PUID=1000
ENV PUID ${PUID}
ARG PGID=1000
ENV PGID ${PGID}

RUN groupmod -o -g ${PGID} www-data && \
    usermod -o -u ${PUID} -g www-data www-data

# Adding the faketime library to the preload file needs to be done last
# otherwise it will preload it for all commands that follow in this file
RUN if [ ${INSTALL_FAKETIME} = true ]; then \
    echo ""/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1"" > /etc/ld.so.preload \
;fi

# Configure locale.
ARG LOCALE=POSIX
ENV LC_ALL ${LOCALE}

WORKDIR /var/www

CMD [""php-fpm""]

EXPOSE 9000
"
330,745eb157327e8ceed9b73ced8d83c91c144d25d0,add maven support,"add maven support
","## $ docker build -t larrycai/jenkins-slave-ubuntu .
FROM ubuntu:trusty

MAINTAINER Larry Cai <larry.caiyu@gmail.com>

ENV REFRESHED_AT 2014-08-18

# Make sure the package repository is up to date.
RUN apt-get update && apt-get install -y openssh-server \
    && apt-get install -y --no-install-recommends openjdk-7-jdk \
    && apt-get install -y curl

# install gcc/make design environment
RUN apt-get update && apt-get install -y unzip make gcc pkg-config libglib2.0-dev xz-utils
    
RUN mkdir -p /var/run/sshd

# Add user jenkins to the image
RUN adduser --quiet jenkins

# Set password for the jenkins user (you may want to alter this).
RUN echo ""jenkins:jenkins"" | chpasswd

ENV HOME /home/jenkins

# private key
RUN mkdir $HOME/.ssh
RUN chown -R jenkins:jenkins $HOME/.ssh

ADD id_rsa.pub $HOME/.ssh/authorized_keys
RUN chown -R jenkins:jenkins $HOME/.ssh
RUN chmod 0700 $HOME/.ssh
RUN chmod 0660 $HOME/.ssh/authorized_keys

RUN curl -sf -o /tmp/out2html.zip -L https://github.com/larrycai/out2html/archive/master.zip

RUN chown -R jenkins:jenkins $HOME

# Standard SSH port
EXPOSE 22

CMD [""/usr/sbin/sshd"", ""-D""]
","## $ docker build -t larrycai/jenkins-slave-ubuntu .
FROM ubuntu:trusty

MAINTAINER Larry Cai <larry.caiyu@gmail.com>

ENV REFRESHED_AT 2015-01-16

# Make sure the package repository is up to date.
RUN apt-get update && apt-get install -y openssh-server \
    && apt-get install -y --no-install-recommends openjdk-7-jdk \
    && apt-get install -y curl

# install gcc/make design environment
RUN apt-get update && apt-get install -y unzip make gcc pkg-config libglib2.0-dev xz-utils

ENV MAVEN_VERSION 3.2.5

RUN curl -sSL http://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar xzf - -C /usr/share \
  && mv /usr/share/apache-maven-$MAVEN_VERSION /usr/share/maven \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME /usr/share/maven    
RUN mkdir -p /var/run/sshd

# Add user jenkins to the image
RUN adduser --quiet jenkins

# Set password for the jenkins user (you may want to alter this).
RUN echo ""jenkins:jenkins"" | chpasswd

ENV HOME /home/jenkins

# private key
RUN mkdir $HOME/.ssh
RUN chown -R jenkins:jenkins $HOME/.ssh

ADD id_rsa.pub $HOME/.ssh/authorized_keys
RUN chown -R jenkins:jenkins $HOME/.ssh
RUN chmod 0700 $HOME/.ssh
RUN chmod 0660 $HOME/.ssh/authorized_keys

RUN curl -sf -o /tmp/out2html.zip -L https://github.com/larrycai/out2html/archive/master.zip

RUN chown -R jenkins:jenkins $HOME

# Standard SSH port
EXPOSE 22

CMD [""/usr/sbin/sshd"", ""-D""]
"
2195,1291d39708ab3ffc858e61fd0922260cae043716,ffmpeg: upgrade to 2.8.3,"ffmpeg: upgrade to 2.8.3
","FROM sameersbn/ubuntu:14.04.20151213
MAINTAINER sameer@damagehead.com

ENV FFMPEG_VERSION=2.8.2 \
    X264_VERSION=snapshot-20151212-2245-stable

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y bzip2 libgnutlsxx27 libogg0 libjpeg8 libpng12-0 \
      libvpx1 libtheora0 libxvidcore4 libmpeg2-4 \
      libvorbis0a libfaad2 libmp3lame0 libmpg123-0 libmad0 libopus0 libvo-aacenc0 \
 && rm -rf /var/lib/apt/lists/*

COPY install.sh /var/cache/ffmpeg/install.sh
RUN bash /var/cache/ffmpeg/install.sh

ENTRYPOINT [""/usr/bin/ffmpeg""]
CMD [""--help""]
",
2237,00b3b7fc5dea5c21834b5ff694995497f6ac29ec,Update kodi 18 rc2,"Update kodi 18 rc2
","# docker-kodi-server
#
# Setup: Clone repo then checkout appropriate version
#   For jarvis
#     $ git checkout jarvis
#   For Master (Lastest Kodi stable release)
#     $ git checkout master
#
# Create your own Build:
# $ docker build --rm=true -t $(whoami)/kodi-server .
#
# Run your build:
#  $ docker run -d --restart=""always"" --net=host -v /directory/with/kodidata:/opt/kodi-server/share/kodi/portable_data $(whoami)/kodi-server
#
#
# Greatly inspire by the work of wernerb,
# See https://github.com/wernerb/docker-xbmc-server

from base/archlinux
maintainer celedhrim ""celed+git@ielf.org""

# Add headless patch
ADD src/headless.patch /headless.patch

# Install dep , compile , clean

RUN cd /root && \
    pacman -Syu --noprogressbar --noconfirm && \
    pacman --noprogressbar --noconfirm -S git make autoconf automake pkg-config jre8-openjdk-headless swig gcc python2 mesa-libgl glu libmariadbclient libass tinyxml yajl libxslt taglib libmicrohttpd libxrandr libssh smbclient libnfs ffmpeg libx264 cmake gperf unzip zip libcdio gtk-update-icon-cache rsync grep sed gettext which patch ghostscript groff rapidjson sudo wget fakeroot && \
ln -s /usr/bin/python2 /usr/bin/python && \
ln -s /usr/bin/python2-config /usr/bin/python-config && \
    mkdir /build && \
    groupadd -g 1000 builder && \
    useradd -M -d /build -g 1000 -s /bin/bash -u 1000 builder && \
    chown builder:builder /build && \
    cd /build && \
    sudo -u builder wget https://aur.archlinux.org/cgit/aur.git/snapshot/fmt.tar.gz && \
    sudo -u builder tar -xzf fmt.tar.gz && \
    cd fmt && \
    sudo -u builder makepkg && \
    pacman -U --noconfirm --noprogressbar *.tar.xz && \
    cd /root && \
    rm -rf /build && \
    userdel builder && \
git clone https://github.com/xbmc/xbmc.git -b 18.0rc1-Leia --depth=1 && \
    cd /root/xbmc && \
mv /headless.patch . && \
git apply headless.patch && \
    cmake \
        -DCMAKE_INSTALL_PREFIX=/opt/kodi-server \
        -DENABLE_INTERNAL_FFMPEG=OFF \
        -DWITH_FFMPEG=ON \
        -DENABLE_AIRTUNES=OFF \
        -DENABLE_LIRC=OFF \
        -DENABLE_EVENTCLIENTS=OFF \
        -DENABLE_INTERNAL_CROSSGUID=ON \
        -DENABLE_INTERNAL_RapidJSON=OFF \
        -DENABLE_INTERNAL_FMT=OFF \
        -DENABLE_INTERNAL_FSTRCMP=ON \
        -DENABLE_INTERNAL_FLATBUFFERS=ON \
        -DENABLE_DVDCSS=OFF \
        -DENABLE_ALSA=OFF \
        -DENABLE_AVAHI=OFF \
        -DENABLE_VDPAU=OFF \
        -DENABLE_VAAPI=OFF \
        -DENABLE_UDEV=OFF \
        -DENABLE_PULSEAUDIO=OFF \
        -DENABLE_OPTICAL=OFF \
        -DENABLE_SNDIO=OFF \
        -DENABLE_LCMS2=OFF \
        -DENABLE_DBUS=OFF && \
    make && \
    make install && \
mkdir -p /opt/kodi-server/share/kodi/portable_data/ && \
cd /root && \
mkdir empty && \
rsync -a --delete empty/ xbmc/ && \
    pacman --noconfirm -Rnsc git make autoconf automake swig jre8-openjdk-headless gcc cmake gperf rsync gtk-update-icon-cache grep gettext which patch sudo wget fakeroot && \
    rm -rf /root/* /usr/lib/python2.7/test /usr/share/doc /usr/share/man /var/cache/pacman/pkg


#Eventserver and webserver respectively.
EXPOSE 9777/udp 8089/tcp
CMD [""/opt/kodi-server/lib64/kodi/kodi-x11"",""--no-test"",""--nolirc"",""-p""]
",
2076,96755edcae6e2acb70197ed7a2b35945a0e8dbdb,Bump ruby from 2.5 to 3.0.1 (#144),"Bump ruby from 2.5 to 3.0.1 (#144)

Bumps ruby from 2.5 to 3.0.1.

Signed-off-by: dependabot[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@github.com>

Co-authored-by: dependabot[bot] <1c358da00a777d4e9898c1280ab801e2df165188@users.noreply.github.com>","FROM ruby:2.5

LABEL maintainer=""shockwavenn@gmail.com""

COPY . /root/pocket-sinatra-interface
WORKDIR /root/pocket-sinatra-interface
RUN gem install bundler
RUN bundle config set --local without 'development test' && \
    bundle install
EXPOSE 80
CMD ruby app/server.rb -p 80 -o 0.0.0.0
",
349,f3ffd96c93751054f491468e59db7f8103c2d225,Bumped source to 20220515-20c28ca,"Bumped source to 20220515-20c28ca
","FROM ghcr.io/dock0/arch:20220515-45d9d92
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220515-20c28ca
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2306,5f8702f5984a862e80737c69869b73740b8aee0a,"Add nxvis, package for visualising networkx graphs","Add nxvis, package for visualising networkx graphs","FROM continuumio/anaconda3:latest

ADD cache_keras_weights.py /usr/local/src/cache_keras_weights.py

    # Use a fixed apt-get repo to stop intermittent failures due to flaky httpredir connections,
    # as described by Lionel Chan at http://stackoverflow.com/a/37426929/5881346
RUN sed -i ""s/httpredir.debian.org/debian.uchicago.edu/"" /etc/apt/sources.list && \
    apt-get update && apt-get install -y build-essential && \
    # Newer version of Pandas than comes with continuumio/anaconda3
    conda uninstall -y pandas && pip install pandas && \
    cd /usr/local/src && \
    pip install tensorflow && \
    # Vowpal Rabbit
    apt-get install -y libboost-program-options-dev zlib1g-dev libboost-python-dev && \
    cd /usr/lib/x86_64-linux-gnu/ && rm -f libboost_python.a && rm -f libboost_python.so && \
    ln -sf libboost_python-py34.so libboost_python.so && ln -sf libboost_python-py34.a libboost_python.a && \
    pip install vowpalwabbit && \
    pip install seaborn python-dateutil dask pytagcloud pyyaml ggplot joblib \
    husl geopy ml_metrics mne pyshp gensim && \
    #python -m spacy.en.download && \
    # The apt-get version of imagemagick is out of date and has compatibility issues, so we build from source
    apt-get -y install dbus fontconfig fontconfig-config fonts-dejavu-core fonts-droid ghostscript gsfonts hicolor-icon-theme \
  libavahi-client3 libavahi-common-data libavahi-common3 libcairo2 libcap-ng0 libcroco3 \
  libcups2 libcupsfilters1 libcupsimage2 libdatrie1 libdbus-1-3 libdjvulibre-text libdjvulibre21 libfftw3-double3 libfontconfig1 \
  libfreetype6 libgdk-pixbuf2.0-0 libgdk-pixbuf2.0-common libgomp1 libgraphite2-3 libgs9 libgs9-common libharfbuzz0b libijs-0.35 \
  libilmbase6 libjasper1 libjbig0 libjbig2dec0 libjpeg62-turbo liblcms2-2 liblqr-1-0 libltdl7 libmagickcore-6.q16-2 \
  libmagickcore-6.q16-2-extra libmagickwand-6.q16-2 libnetpbm10 libopenexr6 libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 \
  libpaper-utils libpaper1 libpixman-1-0 libpng12-0 librsvg2-2 librsvg2-common libthai-data libthai0 libtiff5 libwmf0.2-7 \
  libxcb-render0 libxcb-shm0 netpbm poppler-data p7zip-full && \
    cd /usr/local/src && \
    wget http://www.imagemagick.org/download/ImageMagick.tar.gz && \
    tar xzf ImageMagick.tar.gz && cd `ls -d ImageMagick-*` && pwd && ls -al && ./configure && \
    make -j $(nproc) && make install && \
    # clean up ImageMagick source files
    cd ../ && rm -rf ImageMagick* && \
    apt-get -y install libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev && \
    apt-get -y install libtbb2 libtbb-dev libjpeg-dev libtiff-dev libjasper-dev && \
    apt-get -y install cmake && \
    cd /usr/local/src && git clone --depth 1 https://github.com/Itseez/opencv.git && \
    cd opencv && \
    mkdir build && cd build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D WITH_FFMPEG=OFF -D WITH_V4L=ON -D WITH_QT=OFF -D WITH_OPENGL=ON -D PYTHON3_LIBRARY=/opt/conda/lib/libpython3.6m.so -D PYTHON3_INCLUDE_DIR=/opt/conda/include/python3.6m/ -D PYTHON_LIBRARY=/opt/conda/lib/libpython3.6m.so -D PYTHON_INCLUDE_DIR=/opt/conda/include/python3.6m/ -D BUILD_PNG=TRUE .. && \
    make -j $(nproc) && make install && \
    echo ""/usr/local/lib/python3.6/site-packages"" > /etc/ld.so.conf.d/opencv.conf && ldconfig && \
    cp /usr/local/lib/python3.6/site-packages/cv2.cpython-36m-x86_64-linux-gnu.so /opt/conda/lib/python3.6/site-packages/ && \
    # Clean up install cruft
    rm -rf /usr/local/src/opencv && \
    rm -rf /root/.cache/pip/* && \
    apt-get autoremove -y && apt-get clean

RUN apt-get install -y libfreetype6-dev && \
    apt-get install -y libglib2.0-0 libxext6 libsm6 libxrender1 libfontconfig1 --fix-missing && \
    # textblob
    pip install textblob && \
    #word cloud
    pip install git+git://github.com/amueller/word_cloud.git && \
    #igraph
    pip install python-igraph && \
    #xgboost
    cd /usr/local/src && mkdir xgboost && cd xgboost && \
    git clone --depth 1 --recursive https://github.com/dmlc/xgboost.git && cd xgboost && \
    make && cd python-package && python setup.py install && \
    #lasagne
    cd /usr/local/src && mkdir Lasagne && cd Lasagne && \
    git clone --depth 1 https://github.com/Lasagne/Lasagne.git && cd Lasagne && \
    pip install -r requirements.txt && python setup.py install && \
    #keras
    cd /usr/local/src && mkdir keras && cd keras && \
    git clone --depth 1 https://github.com/fchollet/keras.git && \
    cd keras && python setup.py install && \
    #keras-rl
    cd /usr/local/src && mkdir keras-rl && cd keras-rl && \
    git clone --depth 1 https://github.com/matthiasplappert/keras-rl.git && \
    cd keras-rl && python setup.py install && \
    #neon
    cd /usr/local/src && \
    git clone --depth 1 https://github.com/NervanaSystems/neon.git && \
    cd neon && pip install -e . && \
    #nolearn
    cd /usr/local/src && mkdir nolearn && cd nolearn && \
    git clone --depth 1 https://github.com/dnouri/nolearn.git && cd nolearn && \
    echo ""x"" > README.rst && echo ""x"" > CHANGES.rst && \
    python setup.py install && \
    # Dev branch of Theano
    pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps && \
    # put theano compiledir inside /tmp (it needs to be in writable dir)
    printf ""[global]\nbase_compiledir = /tmp/.theano\n"" > /.theanorc && \
    cd /usr/local/src &&  git clone --depth 1 https://github.com/pybrain/pybrain && \
    cd pybrain && python setup.py install && \
    # Base ATLAS plus tSNE
    apt-get install -y libatlas-base-dev && \
    # NOTE: we provide the tsne package, but sklearn.manifold.TSNE now does the same
    # job
    cd /usr/local/src && git clone --depth 1 https://github.com/danielfrg/tsne.git && \
    cd tsne && python setup.py install && \
    cd /usr/local/src && git clone --depth 1 https://github.com/ztane/python-Levenshtein && \
    cd python-Levenshtein && python setup.py install && \
    cd /usr/local/src && git clone --depth 1 https://github.com/arogozhnikov/hep_ml.git && \
    cd hep_ml && pip install .  && \
    # chainer
    pip install chainer && \
    # NLTK Project datasets
    mkdir -p /usr/share/nltk_data && \
    # NLTK Downloader no longer continues smoothly after an error, so we explicitly list
    # the corpuses that work
    python -m nltk.downloader -d /usr/share/nltk_data abc alpino averaged_perceptron_tagger \
    basque_grammars biocreative_ppi bllip_wsj_no_aux \
book_grammars brown brown_tei cess_cat cess_esp chat80 city_database cmudict \
comtrans conll2000 conll2002 conll2007 crubadan dependency_treebank \
europarl_raw floresta gazetteers genesis gutenberg hmm_treebank_pos_tagger \
ieer inaugural indian jeita kimmo knbc large_grammars lin_thesaurus mac_morpho machado \
masc_tagged maxent_ne_chunker maxent_treebank_pos_tagger moses_sample movie_reviews \
mte_teip5 names nps_chat omw opinion_lexicon paradigms \
pil pl196x porter_test ppattach problem_reports product_reviews_1 product_reviews_2 propbank \
pros_cons ptb punkt qc reuters rslp rte sample_grammars semcor senseval sentence_polarity \
sentiwordnet shakespeare sinica_treebank smultron snowball_data spanish_grammars \
state_union stopwords subjectivity swadesh switchboard tagsets timit toolbox treebank \
twitter_samples udhr2 udhr unicode_samples universal_tagset universal_treebanks_v20 \
vader_lexicon verbnet webtext word2vec_sample wordnet wordnet_ic words ycoe && \
    # Stop-words
    pip install stop-words && \
    cd /usr/local/src && python cache_keras_weights.py && \
    # clean up
    rm -rf /root/.cache/pip/* && \
    apt-get autoremove -y && apt-get clean && \
    rm -rf /usr/local/src/*

    # Install OpenCV-3 with Python support
RUN apt-get update && \
    # Anaconda's build of gcc is way out of date; monkey-patch some linking problems that affect
    # packages like xgboost and Shapely
    rm /opt/conda/lib/libstdc++* && rm /opt/conda/lib/libgomp.* && \
    ln -s /usr/lib/x86_64-linux-gnu/libgomp.so.1 /opt/conda/lib/libgomp.so.1 && \
    ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /opt/conda/lib/libstdc++.so.6 && \
    # Libgeos, for mapping libraries
    apt-get -y install libgeos-dev && \
    # pyshp and pyproj are now external dependencies of Basemap
    pip install pyshp pyproj && \
    cd /usr/local/src && git clone https://github.com/matplotlib/basemap.git && \
    export GEOS_DIR=/usr/local && \
    cd basemap && python setup.py install && \
    # Pillow (PIL)
    apt-get -y install zlib1g-dev liblcms2-dev libwebp-dev && \
    pip install Pillow && \
    cd /usr/local/src && git clone https://github.com/vitruvianscience/opendeep.git && \
    cd opendeep && python setup.py develop  && \
    # sasl is apparently an ibis dependency
    apt-get -y install libsasl2-dev && \
    # ...as is psycopg2
    apt-get install -y libpq-dev && \
    pip install ibis-framework && \
    # Cartopy plus dependencies
    yes | conda install proj4 && \
    pip install packaging && \
    cd /usr/local/src && git clone https://github.com/Toblerity/Shapely.git && \
    cd Shapely && python setup.py install && \
    cd /usr/local/src && git clone https://github.com/SciTools/cartopy.git && \
    cd cartopy && python setup.py install && \
    # MXNet
    cd /usr/local/src && git clone --recursive https://github.com/dmlc/mxnet && \
    cd /usr/local/src/mxnet && cp make/config.mk . && \
    sed -i 's/ADD_LDFLAGS =/ADD_LDFLAGS = -lstdc++/' config.mk && \
    make && cd python && python setup.py install && \
    # set backend for matplotlib to Agg
    matplotlibrc_path=$(python -c ""import site, os, fileinput; packages_dir = site.getsitepackages()[0]; print(os.path.join(packages_dir, 'matplotlib', 'mpl-data', 'matplotlibrc'))"") && \
    sed -i 's/^backend      : Qt5Agg/backend      : Agg/' $matplotlibrc_path  && \
    # Stop jupyter nbconvert trying to rewrite its folder hierarchy
    mkdir -p /root/.jupyter && touch /root/.jupyter/jupyter_nbconvert_config.py && touch /root/.jupyter/migrated && \
    mkdir -p /.jupyter && touch /.jupyter/jupyter_nbconvert_config.py && touch /.jupyter/migrated && \
    # Stop Matplotlib printing junk to the console on first load
    sed -i ""s/^.*Matplotlib is building the font cache using fc-list.*$/# Warning removed by Kaggle/g"" /opt/conda/lib/python3.6/site-packages/matplotlib/font_manager.py && \
    # Make matplotlib output in Jupyter notebooks display correctly
    mkdir -p /etc/ipython/ && echo ""c = get_config(); c.IPKernelApp.matplotlib = 'inline'"" > /etc/ipython/ipython_config.py && \
    # h2o
    # This requires python-software-properties and Java.
    apt-get install -y python-software-properties zip && \
    echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" | tee -a /etc/apt/sources.list &&     echo ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" | tee -a /etc/apt/sources.list &&     apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886 C857C906 2B90D010 && \
    apt-get update && \
    echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && \
    echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections && \
    apt-get install -y oracle-java8-installer && \
    cd /usr/local/src && mkdir h2o && cd h2o && \
    wget http://h2o-release.s3.amazonaws.com/h2o/latest_stable -O latest && \
    wget --no-check-certificate -i latest -O h2o.zip && rm latest && \
    unzip h2o.zip && rm h2o.zip && cp h2o-*/h2o.jar . && \
    pip install `find . -name ""*whl""` && \
    # Keras setup
    # Keras likes to add a config file in a custom directory when it's
    # first imported. This doesn't work with our read-only filesystem, so we
    # have it done now
    python -c ""from keras.models import Sequential""  && \
    # Switch to TF backend
    sed -i 's/theano/tensorflow/' /root/.keras/keras.json  && \
    # Re-run it to flush any more disk writes
    python -c ""from keras.models import Sequential; from keras import backend; print(backend._BACKEND)"" && \
    # Keras reverts to /tmp from ~ when it detects a read-only file system
    mkdir -p /tmp/.keras && cp /root/.keras/keras.json /tmp/.keras && \
    # Scikit-Learn nightly build
    cd /usr/local/src && git clone https://github.com/scikit-learn/scikit-learn.git && \
    cd scikit-learn && python setup.py build && python setup.py install && \
    # HDF5 support
    conda install h5py && \
    # https://github.com/biopython/biopython
    pip install biopython && \
    # Regularized Greedy Forests
    cd /usr/local/src && wget https://github.com/fukatani/rgf_python/releases/download/0.2.0/rgf1.2.zip && \
    unzip rgf1.2.zip && cd rgf1.2 && make && mv bin/rgf /usr/local/bin && \
    cd /usr/local/src && git clone https://github.com/fukatani/rgf_python.git && \
    cd rgf_python && sed -i 's/\/opt\/rgf1.2\/bin\/rgf/\/usr\/local\/bin\/rgf/' rgf/rgf.py && \
    python setup.py install && \
    # PUDB, for local debugging convenience
    pip install pudb && \
    # Imbalanced-learn
    cd /usr/local/src && git clone https://github.com/scikit-learn-contrib/imbalanced-learn.git && \
    cd imbalanced-learn && python setup.py install && \
    # Convex Optimization library
    # Latest version fails to install, see https://github.com/cvxopt/cvxopt/issues/77
    #    and https://github.com/cvxopt/cvxopt/issues/80
    # pip install cvxopt && \
    # Profiling and other utilities
    pip install line_profiler && \
    pip install orderedmultidict && \
    pip install smhasher && \
    conda install -y -c bokeh datashader && \
    # Boruta (python implementation)
    cd /usr/local/src && git clone https://github.com/danielhomola/boruta_py.git && \
    cd boruta_py && python setup.py install && \
    cd /usr/local/src && git clone --recursive --depth 1 https://github.com/Microsoft/LightGBM && \
    cd LightGBM && mkdir build && cd build && cmake .. && make -j $(nproc) && \
    cd /usr/local/src/LightGBM/python-package && python setup.py install && \
    cd /usr/local/src && git clone git://github.com/nicolashennetier/pyeconometrics.git && \
    cd pyeconometrics && python setup.py install && \
    apt-get install -y graphviz && pip install graphviz && \
    apt-get install -y libgdal1-dev && GDAL_CONFIG=/usr/bin/gdal-config pip install fiona && pip install geopandas && \
    cd /usr/local/src && git clone git://github.com/scikit-learn-contrib/py-earth.git && \
    cd py-earth && python setup.py install && \
    # ~~~~ CLEAN UP ~~~~
    rm -rf /root/.cache/pip/* && \
    apt-get autoremove -y && apt-get clean && \
    conda clean -i -l -t -y && \
    rm -rf /usr/local/src/*

    ###########
    #
    #      NEW CONTRIBUTORS:
    # Please add new pip/apt installs in this block. Don't forget a ""&& \"" at the end
    # of all non-final lines. Thanks!
    #
    ###########
RUN pip install --upgrade mpld3 && \
    pip install mplleaflet && \
    pip install gpxpy && \
    pip install arrow && \
    pip install sexmachine  && \
    pip install Geohash && \
    pip install deap && \
    pip install tpot && \
    pip install haversine && \
    pip install toolz cytoolz && \
    pip install sacred && \
    pip install plotly && \
    pip install git+https://github.com/nicta/dora.git && \
    pip install git+https://github.com/hyperopt/hyperopt.git && \
    # tflean. Deep learning library featuring a higher-level API for TensorFlow. http://tflearn.org
    pip install git+https://github.com/tflearn/tflearn.git && \
    pip install fitter && \
    pip install langid && \
    # Delorean. Useful for dealing with datetime
    pip install delorean && \
    pip install trueskill && \
    pip install heamy && \
    pip install vida && \
    # Useful data exploration libraries (for missing data and generating reports)
    pip install missingno && \
    pip install pandas-profiling && \
    pip install s2sphere && \
    pip install git+https://github.com/fmfn/BayesianOptimization.git && \
    pip install matplotlib-venn && \
    pip install pyldavis && \
    # Pattern not yet Py3 compatible...
    # pip install pattern && \
    pip install git+git://github.com/rasbt/mlxtend.git#egg=mlxtend && \
    pip install altair && \
    pip install pystan && \
    pip install ImageHash && \
    pip install git+https://github.com/hammerlab/fancyimpute.git && \
    pip install git+https://github.com/pymc-devs/pymc3 && \
    pip install tifffile && \
    pip install descartes && \
    pip install geojson && \
    pip install pysal && \
    #conda install -y gdal && \
    pip install pyflux && \
    pip install terminalplot && \
    pip install raccoon && \
    pip install pydicom && \
    pip install wavio && \
    #conda install --channel https://conda.anaconda.org/SimpleITK --quiet --yes 'SimpleITK=0.10.0' && \
    pip install hmmlearn && \
    pip install bayespy && \
    pip install gplearn && \
    pip install PyAstronomy && \
    conda install pytorch torchvision -c soumith && \
    pip install squarify && \
    pip install fuzzywuzzy && \
    pip install python-louvain && \
    pip install pyexcel-ods && \
    pip install sklearn-pandas && \
    pip install stemming && \
    pip install fbprophet && \
    conda install -y -c conda-forge -c ioam holoviews && \
    pip install git+https://github.com/ioam/geoviews.git && \
    pip install hypertools && \
    ##### ^^^^ Add new contributions above here
    # clean up pip cache
    rm -rf /root/.cache/pip/* && \
    # Required to display Altair charts in Jupyter notebook
    jupyter nbextension install --user --py vega
",
160,640fc31c7e0bfda8928fc6c4a93fd5d6a674bf7c,Fixing minor bugs,"Fixing minor bugs
","FROM ubuntu:14.04
MAINTAINER Alejandro Gomez <agommor@gmail.com>

#================================
# Build arguments
#================================

ARG FIREFOX_VERSION ""47.0.1""
ARG VNC_PASSWD 1234

#================================
# Env variables
#================================

ENV BUILD_TIMESTAMP 20160915_01
ENV FIREFOX_VERSION $FIREFOX_VERSION
ENV X11_RESOLUTION ""1280x1024x24""
ENV DISPLAY :1
ENV GIT_URI """"
ENV VNC_PASSWD ""$VNC_PASSWORD""

ADD assets/etc/apt/apt.conf.d/99norecommends /etc/apt/apt.conf.d/99norecommends
ADD assets/etc/apt/sources.list /etc/apt/sources.list

# Installing Firefox
RUN apt-get update -y --fix-missing -qq \
  && DEBIAN_FRONTEND=noninteractive DEBCONF_PRIORITY=critical apt-get install -y wget libgtk-3-0 openjdk-8-jdk maven openssh-client git vim xvfb x11vnc
  # Firefox installation
  && wget -q http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/$FIREFOX_VERSION/linux-x86_64/en-US/firefox-$FIREFOX_VERSION.tar.bz2 -O /tmp/firefox.tar.bz2 \
  && tar -C /usr/local -xjf /tmp/firefox.tar.bz2 \
  && ln -s /usr/local/firefox/firefox /usr/bin/firefox \
  && apt-get install -y libdbus-glib-1-2

# Install Chromium.
RUN  wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
  && echo ""deb http://dl.google.com/linux/chrome/deb/ stable main"" > /etc/apt/sources.list.d/google.list \
  && apt-get update \
  && apt-get install -y google-chrome-stable \
  && rm -rf /var/lib/apt/lists/*


# Adding the entrypoint
COPY ./assets/bin/entrypoint /
RUN chmod +x /entrypoint
ENTRYPOINT [""/entrypoint""]","FROM ubuntu:14.04
MAINTAINER Alejandro Gomez <agommor@gmail.com>

#================================
# Build arguments
#================================

ARG FIREFOX_VERSION=""47.0.1""
ARG VNC_PASSWD=1234

#================================
# Env variables
#================================

ENV BUILD_TIMESTAMP 20160915_01
ENV FIREFOX_VERSION ${FIREFOX_VERSION}
ENV X11_RESOLUTION ""1280x1024x24""
ENV DISPLAY :1
ENV GIT_URI """"
ENV VNC_PASSWD ${VNC_PASSWORD}

ADD assets/etc/apt/apt.conf.d/99norecommends /etc/apt/apt.conf.d/99norecommends
ADD assets/etc/apt/sources.list /etc/apt/sources.list

# Installing Firefox
RUN apt-get update -y --fix-missing -qq \
  && DEBIAN_FRONTEND=noninteractive DEBCONF_PRIORITY=critical apt-get install -y wget libgtk-3-0 openjdk-8-jdk maven openssh-client git vim xvfb x11vnc
  # Firefox installation
  && wget -q http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/$FIREFOX_VERSION/linux-x86_64/en-US/firefox-$FIREFOX_VERSION.tar.bz2 -O /tmp/firefox.tar.bz2 \
  && tar -C /usr/local -xjf /tmp/firefox.tar.bz2 \
  && ln -s /usr/local/firefox/firefox /usr/bin/firefox \
  && apt-get install -y libdbus-glib-1-2

# Install Chromium.
RUN  wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
  && echo ""deb http://dl.google.com/linux/chrome/deb/ stable main"" > /etc/apt/sources.list.d/google.list \
  && apt-get update \
  && apt-get install -y google-chrome-stable \
  && rm -rf /var/lib/apt/lists/*


# Adding the entrypoint
COPY ./assets/bin/entrypoint /
RUN chmod +x /entrypoint
ENTRYPOINT [""/entrypoint""]"
396,0418cfbddcb783a81a67a5c05443684bc758b4e7,rever mono version,"rever mono version
","FROM ubuntu:18.04

ARG RELEASE_DATE=""2016-06-21""
ARG RELEASE_DATE_SIGN=""""
ARG VERSION=""8.9.0.190""
ARG SOURCE_REPO_URL=""deb http://static.teamlab.com.s3.amazonaws.com/repo/debian squeeze main""
ARG DEBIAN_FRONTEND=noninteractive
ARG PACKAGE_SYSNAME=""onlyoffice""

LABEL ${PACKAGE_SYSNAME}.community.release-date=""${RELEASE_DATE}"" \
      ${PACKAGE_SYSNAME}.community.version=""${VERSION}"" \
      description=""Community Server is a free open-source collaborative system developed to manage documents, projects, customer relationship and emails, all in one place."" \
      maintainer=""Ascensio System SIA <support@${PACKAGE_SYSNAME}.com>"" \
      securitytxt=""https://www.${PACKAGE_SYSNAME}.com/.well-known/security.txt""

ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

RUN apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y dist-upgrade && \
    addgroup --system --gid 107 ${PACKAGE_SYSNAME} && \
    adduser -uid 104 --quiet --home /var/www/${PACKAGE_SYSNAME} --system --gid 107 ${PACKAGE_SYSNAME} && \
    addgroup --system --gid 104 elasticsearch && \
    adduser -uid 103 --quiet --home /nonexistent --system --gid 104 elasticsearch && \
    apt-get -yq install systemd \
                        systemd-sysv \
                        locales \
                        software-properties-common \
                        curl \
                        wget \
                        sudo && \
    cd /lib/systemd/system/sysinit.target.wants/ && ls | grep -v systemd-tmpfiles-setup | xargs rm -f $1 && \
    rm -f /lib/systemd/system/multi-user.target.wants/* \
    /etc/systemd/system/*.wants/* \
    /lib/systemd/system/local-fs.target.wants/* \
    /lib/systemd/system/sockets.target.wants/*udev* \
    /lib/systemd/system/sockets.target.wants/*initctl* \
    /lib/systemd/system/basic.target.wants/* \
    /lib/systemd/system/anaconda.target.wants/* \
    /lib/systemd/system/plymouth* \
    /lib/systemd/system/systemd-update-utmp* && \
    locale-gen en_US.UTF-8 && \
    echo ""#!/bin/sh\nexit 0"" > /usr/sbin/policy-rc.d && \
    echo ""${SOURCE_REPO_URL}"" >> /etc/apt/sources.list && \
    echo ""deb https://download.mono-project.com/repo/ubuntu stable-bionic/snapshots/6.10.0.104 main"" | tee /etc/apt/sources.list.d/mono-official.list && \
    echo ""deb https://d2nlctn12v279m.cloudfront.net/repo/mono/ubuntu bionic main"" | tee /etc/apt/sources.list.d/mono-extra.list && \    
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys CB2DE8E5 && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
    wget http://nginx.org/keys/nginx_signing.key && \
    apt-key add nginx_signing.key && \
    echo ""deb http://nginx.org/packages/ubuntu/ bionic nginx"" >> /etc/apt/sources.list.d/nginx.list && \
    wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add - && \
    echo ""deb https://artifacts.elastic.co/packages/7.x/apt stable main"" | tee -a /etc/apt/sources.list.d/elastic-7.x.list && \
    add-apt-repository -y ppa:certbot/certbot && \
    add-apt-repository -y ppa:chris-lea/redis-server && \
    curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - && \
    apt-get install -yq gnupg2 \
                        ca-certificates \
                        software-properties-common \
                        cron \
                        rsyslog \
ruby-dev \
ruby-god \
                        nodejs \
                        nginx \
                        gdb \
                        mono-complete \
                        ca-certificates-mono \
                        python-certbot-nginx \
                        htop \
                        nano \
                        dnsutils \
                        redis-server \
                        python3-pip \
                        multiarch-support \
                        iproute2 \
                        ffmpeg \
                        jq \
                        openjdk-8-jre-headless \
                        apt-transport-https \
                        elasticsearch=7.4.0 \
                        mono-webserver-hyperfastcgi=0.4-7 \
                        ${PACKAGE_SYSNAME}-communityserver \
                        ${PACKAGE_SYSNAME}-xmppserver && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY config /app/config/
COPY assets /app/assets/
COPY run-community-server.sh /app/run-community-server.sh

RUN chmod -R 755 /app/*.sh

VOLUME [""/sys/fs/cgroup"",""/var/log/${PACKAGE_SYSNAME}"", ""/var/www/${PACKAGE_SYSNAME}/Data"", ""/var/lib/mysql""]

EXPOSE 80 443 5222 3306 9865 9888 9866 9871 9882 5280

CMD [""/app/run-community-server.sh""];
","FROM ubuntu:18.04

ARG RELEASE_DATE=""2016-06-21""
ARG RELEASE_DATE_SIGN=""""
ARG VERSION=""8.9.0.190""
ARG SOURCE_REPO_URL=""deb http://static.teamlab.com.s3.amazonaws.com/repo/debian squeeze main""
ARG DEBIAN_FRONTEND=noninteractive
ARG PACKAGE_SYSNAME=""onlyoffice""

LABEL ${PACKAGE_SYSNAME}.community.release-date=""${RELEASE_DATE}"" \
      ${PACKAGE_SYSNAME}.community.version=""${VERSION}"" \
      description=""Community Server is a free open-source collaborative system developed to manage documents, projects, customer relationship and emails, all in one place."" \
      maintainer=""Ascensio System SIA <support@${PACKAGE_SYSNAME}.com>"" \
      securitytxt=""https://www.${PACKAGE_SYSNAME}.com/.well-known/security.txt""

ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

RUN apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y dist-upgrade && \
    addgroup --system --gid 107 ${PACKAGE_SYSNAME} && \
    adduser -uid 104 --quiet --home /var/www/${PACKAGE_SYSNAME} --system --gid 107 ${PACKAGE_SYSNAME} && \
    addgroup --system --gid 104 elasticsearch && \
    adduser -uid 103 --quiet --home /nonexistent --system --gid 104 elasticsearch && \
    apt-get -yq install systemd \
                        systemd-sysv \
                        locales \
                        software-properties-common \
                        curl \
                        wget \
                        sudo && \
    cd /lib/systemd/system/sysinit.target.wants/ && ls | grep -v systemd-tmpfiles-setup | xargs rm -f $1 && \
    rm -f /lib/systemd/system/multi-user.target.wants/* \
    /etc/systemd/system/*.wants/* \
    /lib/systemd/system/local-fs.target.wants/* \
    /lib/systemd/system/sockets.target.wants/*udev* \
    /lib/systemd/system/sockets.target.wants/*initctl* \
    /lib/systemd/system/basic.target.wants/* \
    /lib/systemd/system/anaconda.target.wants/* \
    /lib/systemd/system/plymouth* \
    /lib/systemd/system/systemd-update-utmp* && \
    locale-gen en_US.UTF-8 && \
    echo ""#!/bin/sh\nexit 0"" > /usr/sbin/policy-rc.d && \
    echo ""${SOURCE_REPO_URL}"" >> /etc/apt/sources.list && \
    echo ""deb https://download.mono-project.com/repo/ubuntu stable-bionic/snapshots/6.8.0.123 main"" | tee /etc/apt/sources.list.d/mono-official.list && \
    echo ""deb https://d2nlctn12v279m.cloudfront.net/repo/mono/ubuntu bionic main"" | tee /etc/apt/sources.list.d/mono-extra.list && \    
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys CB2DE8E5 && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
    wget http://nginx.org/keys/nginx_signing.key && \
    apt-key add nginx_signing.key && \
    echo ""deb http://nginx.org/packages/ubuntu/ bionic nginx"" >> /etc/apt/sources.list.d/nginx.list && \
    wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add - && \
    echo ""deb https://artifacts.elastic.co/packages/7.x/apt stable main"" | tee -a /etc/apt/sources.list.d/elastic-7.x.list && \
    add-apt-repository -y ppa:certbot/certbot && \
    add-apt-repository -y ppa:chris-lea/redis-server && \
    curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - && \
    apt-get install -yq gnupg2 \
                        ca-certificates \
                        software-properties-common \
                        cron \
                        rsyslog \
ruby-dev \
ruby-god \
                        nodejs \
                        nginx \
                        gdb \
                        mono-complete \
                        ca-certificates-mono \
                        python-certbot-nginx \
                        htop \
                        nano \
                        dnsutils \
                        redis-server \
                        python3-pip \
                        multiarch-support \
                        iproute2 \
                        ffmpeg \
                        jq \
                        openjdk-8-jre-headless \
                        apt-transport-https \
                        elasticsearch=7.4.0 \
                        mono-webserver-hyperfastcgi=0.4-7 \
                        ${PACKAGE_SYSNAME}-communityserver \
                        ${PACKAGE_SYSNAME}-xmppserver && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY config /app/config/
COPY assets /app/assets/
COPY run-community-server.sh /app/run-community-server.sh

RUN chmod -R 755 /app/*.sh

VOLUME [""/sys/fs/cgroup"",""/var/log/${PACKAGE_SYSNAME}"", ""/var/www/${PACKAGE_SYSNAME}/Data"", ""/var/lib/mysql""]

EXPOSE 80 443 5222 3306 9865 9888 9866 9871 9882 5280

CMD [""/app/run-community-server.sh""];
"
71,fb5df5ba2c9dd92e21f100a05230b1f93cf0368c,Update Slurm to 19.05.0,"Update Slurm to 19.05.0
","FROM centos:7

LABEL org.label-schema.vcs-url=""https://github.com/giovtorres/docker-centos7-slurm"" \
      org.label-schema.docker.cmd=""docker run -it -h ernie giovtorres/docker-centos7-slurm:latest"" \
      org.label-schema.name=""docker-centos7-slurm"" \
      org.label-schema.description=""Slurm All-in-one Docker container on CentOS 7"" \
      maintainer=""Giovanni Torres""

ARG SLURM_TAG=slurm-18-08-7-1
ARG PYTHON_VERSIONS=""2.6 2.7 3.4 3.5 3.6""
ENV PATH ""/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin""

RUN set -ex \
    && yum makecache fast \
    && yum -y update \
    && yum -y install epel-release \
    && yum -y install \
        autoconf \
        bash-completion \
        bzip2 \
        bzip2-devel \
        file \
        gcc \
        gcc-c++ \
        gdbm-devel \
        git \
        glibc-devel \
        gmp-devel \
        libffi-devel \
        libGL-devel \
        libX11-devel \
        make \
        mariadb-server \
        mariadb-devel \
        munge \
        munge-devel \
        ncurses-devel \
        openssl-devel \
        openssl-libs \
        perl \
        pkconfig \
        psmisc \
        python-devel \
        python-pip \
        python34 \
        python34-devel \
        python34-pip \
        readline-devel \
        sqlite-devel \
        tcl-devel \
        tix-devel \
        tk \
        tk-devel \
        supervisor \
        wget \
        vim-enhanced \
        zlib-devel \
    && yum -y install https://centos7.iuscommunity.org/ius-release.rpm \
    && yum -y install \
        python35u \
        python35u-devel \
        python35u-pip \
        python36u \
        python36u-devel \
        python36u-pip \
    && yum clean all \
    && rm -rf /var/cache/yum

RUN set -ex \
    && wget https://www.python.org/ftp/python/2.6.9/Python-2.6.9.tgz \
    && tar xzf Python-2.6.9.tgz \
    && pushd Python-2.6.9 \
    && export CFLAGS=""-D_GNU_SOURCE -fPIC -fwrapv"" \
    && export CXXFLAGS=""-D_GNU_SOURCE -fPIC -fwrapv"" \
    && export OPT=""-D_GNU_SOURCE -fPIC -fwrapv"" \
    && export LINKCC=""gcc"" \
    && export CC=""gcc"" \
    && ./configure --enable-ipv6 --enable-unicode=ucs4 --enable-shared --with-system-ffi \
    && make install \
    && unset CFLAGS CXXFLAGS OPT LINKCC CC \
    && popd \
    && rm -rf Python-2.6.9 \
    && echo ""/usr/local/lib"" >> /etc/ld.so.conf.d/python-2.6.conf \
    && chmod 0644 /etc/ld.so.conf.d/python-2.6.conf \
    && /sbin/ldconfig \
    && wget https://bootstrap.pypa.io/2.6/get-pip.py \
    && /usr/local/bin/python2.6 get-pip.py \
    && rm -f get-pip.py Python-2.6.9.tgz

RUN for version in $PYTHON_VERSIONS; do pip$version install Cython nose; done

RUN set -ex \
    && git clone https://github.com/SchedMD/slurm.git \
    && pushd slurm \
    && git checkout tags/$SLURM_TAG \
    && ./configure --enable-debug --enable-front-end --prefix=/usr \
       --sysconfdir=/etc/slurm --with-mysql_config=/usr/bin \
       --libdir=/usr/lib64 \
    && make install \
    && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
    && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
    && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
    && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
    && popd \
    && rm -rf slurm \
    && groupadd -r slurm  \
    && useradd -r -g slurm slurm \
    && mkdir /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/lib/slurmd \
        /var/log/slurm \
    && chown slurm:root /var/spool/slurmd \
        /var/run/slurmd \
        /var/lib/slurmd \
        /var/log/slurm \
    && /sbin/create-munge-key

RUN set -ex \
    && echo ""syntax on""           >> $HOME/.vimrc \
    && echo ""set tabstop=4""       >> $HOME/.vimrc \
    && echo ""set softtabstop=4""   >> $HOME/.vimrc \
    && echo ""set shiftwidth=4""    >> $HOME/.vimrc \
    && echo ""set expandtab""       >> $HOME/.vimrc \
    && echo ""set autoindent""      >> $HOME/.vimrc \
    && echo ""set fileformat=unix"" >> $HOME/.vimrc \
    && echo ""set encoding=utf-8""  >> $HOME/.vimrc \
    && git config --global color.ui auto \
    && git config --global push.default simple

COPY slurm.conf /etc/slurm/slurm.conf
COPY gres.conf /etc/slurm/gres.conf
COPY slurmdbd.conf /etc/slurm/slurmdbd.conf
COPY supervisord.conf /etc/

VOLUME [""/var/lib/mysql"", ""/var/lib/slurmd"", ""/var/spool/slurmd"", ""/var/log/slurm""]

COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT [""/usr/local/bin/docker-entrypoint.sh""]
CMD [""/bin/bash""]
","FROM centos:7

LABEL org.label-schema.vcs-url=""https://github.com/giovtorres/docker-centos7-slurm"" \
      org.label-schema.docker.cmd=""docker run -it -h ernie giovtorres/docker-centos7-slurm:latest"" \
      org.label-schema.name=""docker-centos7-slurm"" \
      org.label-schema.description=""Slurm All-in-one Docker container on CentOS 7"" \
      maintainer=""Giovanni Torres""

ARG SLURM_TAG=slurm-19-05-0-1
ARG PYTHON_VERSIONS=""2.6 2.7 3.4 3.5 3.6""
ENV PATH ""/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin""

RUN set -ex \
    && yum makecache fast \
    && yum -y update \
    && yum -y install epel-release \
    && yum -y install \
        autoconf \
        bash-completion \
        bzip2 \
        bzip2-devel \
        file \
        gcc \
        gcc-c++ \
        gdbm-devel \
        git \
        glibc-devel \
        gmp-devel \
        libffi-devel \
        libGL-devel \
        libX11-devel \
        make \
        mariadb-server \
        mariadb-devel \
        munge \
        munge-devel \
        ncurses-devel \
        openssl-devel \
        openssl-libs \
        perl \
        pkconfig \
        psmisc \
        python-devel \
        python-pip \
        python34 \
        python34-devel \
        python34-pip \
        readline-devel \
        sqlite-devel \
        tcl-devel \
        tix-devel \
        tk \
        tk-devel \
        supervisor \
        wget \
        vim-enhanced \
        zlib-devel \
    && yum -y install https://centos7.iuscommunity.org/ius-release.rpm \
    && yum -y install \
        python35u \
        python35u-devel \
        python35u-pip \
        python36u \
        python36u-devel \
        python36u-pip \
    && yum clean all \
    && rm -rf /var/cache/yum

RUN set -ex \
    && wget https://www.python.org/ftp/python/2.6.9/Python-2.6.9.tgz \
    && tar xzf Python-2.6.9.tgz \
    && pushd Python-2.6.9 \
    && export CFLAGS=""-D_GNU_SOURCE -fPIC -fwrapv"" \
    && export CXXFLAGS=""-D_GNU_SOURCE -fPIC -fwrapv"" \
    && export OPT=""-D_GNU_SOURCE -fPIC -fwrapv"" \
    && export LINKCC=""gcc"" \
    && export CC=""gcc"" \
    && ./configure --enable-ipv6 --enable-unicode=ucs4 --enable-shared --with-system-ffi \
    && make install \
    && unset CFLAGS CXXFLAGS OPT LINKCC CC \
    && popd \
    && rm -rf Python-2.6.9 \
    && echo ""/usr/local/lib"" >> /etc/ld.so.conf.d/python-2.6.conf \
    && chmod 0644 /etc/ld.so.conf.d/python-2.6.conf \
    && /sbin/ldconfig \
    && wget https://bootstrap.pypa.io/2.6/get-pip.py \
    && /usr/local/bin/python2.6 get-pip.py \
    && rm -f get-pip.py Python-2.6.9.tgz

RUN for version in $PYTHON_VERSIONS; do pip$version install Cython nose; done

RUN set -ex \
    && git clone https://github.com/SchedMD/slurm.git \
    && pushd slurm \
    && git checkout tags/$SLURM_TAG \
    && ./configure --enable-debug --enable-front-end --prefix=/usr \
       --sysconfdir=/etc/slurm --with-mysql_config=/usr/bin \
       --libdir=/usr/lib64 \
    && make install \
    && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
    && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
    && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
    && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
    && popd \
    && rm -rf slurm \
    && groupadd -r slurm  \
    && useradd -r -g slurm slurm \
    && mkdir /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/lib/slurmd \
        /var/log/slurm \
    && chown slurm:root /var/spool/slurmd \
        /var/run/slurmd \
        /var/lib/slurmd \
        /var/log/slurm \
    && /sbin/create-munge-key

RUN set -ex \
    && echo ""syntax on""           >> $HOME/.vimrc \
    && echo ""set tabstop=4""       >> $HOME/.vimrc \
    && echo ""set softtabstop=4""   >> $HOME/.vimrc \
    && echo ""set shiftwidth=4""    >> $HOME/.vimrc \
    && echo ""set expandtab""       >> $HOME/.vimrc \
    && echo ""set autoindent""      >> $HOME/.vimrc \
    && echo ""set fileformat=unix"" >> $HOME/.vimrc \
    && echo ""set encoding=utf-8""  >> $HOME/.vimrc \
    && git config --global color.ui auto \
    && git config --global push.default simple

COPY slurm.conf /etc/slurm/slurm.conf
COPY gres.conf /etc/slurm/gres.conf
COPY slurmdbd.conf /etc/slurm/slurmdbd.conf
COPY supervisord.conf /etc/

VOLUME [""/var/lib/mysql"", ""/var/lib/slurmd"", ""/var/spool/slurmd"", ""/var/log/slurm""]

COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT [""/usr/local/bin/docker-entrypoint.sh""]
CMD [""/bin/bash""]
"
403,1d6b1b9368c5eb7b91df77ca3f4cd47f4ea7da2b,chore(deps): update python docker tag to v3.8 (#4583),"chore(deps): update python docker tag to v3.8 (#4583)

","# Use the official lightweight Python image.
# https://hub.docker.com/_/python
FROM python:3.7-slim

# Copy local code to the container image.
ENV APP_HOME /app
WORKDIR $APP_HOME
COPY . ./
COPY requirements.txt /app/
RUN pip install Flask gunicorn
RUN pip install -r requirements.txt

CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 app:app
","# Use the official lightweight Python image.
# https://hub.docker.com/_/python
FROM python:3.8-slim

# Copy local code to the container image.
ENV APP_HOME /app
WORKDIR $APP_HOME
COPY . ./
COPY requirements.txt /app/
RUN pip install Flask gunicorn
RUN pip install -r requirements.txt

CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 app:app
"
2189,74fcf7a8085ac3079b97b5ac42050ae62fd25422,Updated dockerfile (#129),"Updated dockerfile (#129)

","FROM python:3.6-slim

RUN apt update \
    && apt install -y \
        binutils \
        libproj-dev \
        gdal-bin \
        libmagic-dev \
    && rm -rf /var/lib/apt/lists/*

COPY . .
RUN pip install -r requirements.txt

CMD [""gunicorn"", ""--pythonpath"", ""src"", ""--bind"", ""0.0.0.0:8000"", ""keadatabase.wsgi""]
",
229,69fdba89f3187a1649f2c900edb54c57130eaa67,added additional libs for php development,"added additional libs for php development
","#Download base image ubuntu 16.04
FROM ubuntu:16.04

MAINTAINER rodwin lising <rodwinlising@gmail.com>

# Update Ubuntu Software repository
RUN apt-get update

# Install nginx, php-fpm and supervisord from ubuntu repository
RUN apt-get install -y nginx php7.0-fpm supervisor nodejs nodejs-dev npm curl git

# Install gulp and bower with NPM
RUN npm install -g \
    gulp \
    bower

# Add a symbolic link for Node
RUN ln -s /usr/bin/nodejs /usr/bin/node

# Install Composer
RUN curl -s http://getcomposer.org/installer | php \
    && mv composer.phar /usr/local/bin/ \
    && echo ""alias composer='/usr/local/bin/composer.phar'"" >> ~/.bashrc

# Source the bash
RUN . ~/.bashrc

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#Define the ENV variable
ENV nginx_vhost /etc/nginx/sites-available/default
ENV php_conf /etc/php/7.0/fpm/php.ini
ENV nginx_conf /etc/nginx/nginx.conf
ENV supervisor_conf /etc/supervisor/supervisord.conf

# Enable php-fpm on nginx virtualhost configuration
COPY default ${nginx_vhost}
RUN sed -i -e 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' ${php_conf} && \
    echo ""\ndaemon off;"" >> ${nginx_conf}

#Copy supervisor configuration
COPY supervisord.conf ${supervisor_conf}

RUN mkdir -p /run/php && \
    chown -R www-data:www-data /var/www/html && \
    chown -R www-data:www-data /run/php

# Volume configuration
VOLUME [""/etc/nginx/sites-enabled"", ""/etc/nginx/certs"", ""/etc/nginx/conf.d"", ""/var/log/nginx"", ""/var/www/html""]

WORKDIR /var/www/html

# Configure Services and Port
COPY start.sh /start.sh
#CMD [""./start.sh""]
ENTRYPOINT [""/bin/bash"", ""/start.sh""] 
EXPOSE 80 443

","#Download base image ubuntu 16.04
FROM ubuntu:16.04

MAINTAINER rodwin lising <rodwinlising@gmail.com>

# Update Ubuntu Software repository
RUN apt-get update

# Install nginx, php-fpm and supervisord from ubuntu repository
RUN apt-get install -y \
nginx \
php7.0-fpm \
php7.0-cli \
    php7.0-common \
    php7.0-curl \
    php7.0-json \
    php7.0-xml \
    php7.0-mbstring \
    php7.0-mcrypt \
    php7.0-mysql \
    php7.0-pgsql \
    php7.0-sqlite \
    php7.0-sqlite3 \
    php7.0-zip \
    php7.0-memcached \
    php7.0-gd \
    pkg-config \
    php-dev \
    libcurl4-openssl-dev \
    libedit-dev \
    libssl-dev \
    libxml2-dev \
    xz-utils \
    libsqlite3-dev \
    sqlite3 \
supervisor \
nodejs \
nodejs-dev \
npm \
curl \
git \
postgresql-client

# Install gulp and bower with NPM
RUN npm install -g \
    gulp \
    bower

# Add a symbolic link for Node
RUN ln -s /usr/bin/nodejs /usr/bin/node

# Install Composer
RUN curl -s http://getcomposer.org/installer | php \
    && mv composer.phar /usr/local/bin/ \
    && echo ""alias composer='/usr/local/bin/composer.phar'"" >> ~/.bashrc

# Source the bash
RUN . ~/.bashrc

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#Define the ENV variable
ENV nginx_vhost /etc/nginx/sites-available/default
ENV php_conf /etc/php/7.0/fpm/php.ini
ENV nginx_conf /etc/nginx/nginx.conf
ENV supervisor_conf /etc/supervisor/supervisord.conf

# Enable php-fpm on nginx virtualhost configuration
COPY default ${nginx_vhost}
RUN sed -i -e 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' ${php_conf} && \
    echo ""\ndaemon off;"" >> ${nginx_conf}

#Copy supervisor configuration
COPY supervisord.conf ${supervisor_conf}

RUN mkdir -p /run/php && \
    chown -R www-data:www-data /var/www/html && \
    chown -R www-data:www-data /run/php

# Volume configuration
VOLUME [""/etc/nginx/sites-enabled"", ""/etc/nginx/certs"", ""/etc/nginx/conf.d"", ""/var/log/nginx"", ""/var/www/html""]

WORKDIR /var/www/html

# Configure Services and Port
COPY start.sh /start.sh
#CMD [""./start.sh""]
ENTRYPOINT [""/bin/bash"", ""/start.sh""] 
EXPOSE 80 443

"
124,3f3bfe330a10cf5fb526a77d757154e35d75bb9f,Fix sbt installation failure (#6782),"Fix sbt installation failure (#6782)

","FROM openjdk:11-jdk

RUN \
  echo ""deb https://repo.scala-sbt.org/scalasbt/debian all main"" | tee /etc/apt/sources.list.d/sbt.list && \
  echo ""deb https://repo.scala-sbt.org/scalasbt/debian /"" | tee /etc/apt/sources.list.d/sbt_old.list && \
  curl -sL ""https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823"" | apt-key add && \
  apt-get update && \
  apt-get install sbt

WORKDIR /zhttp
COPY src src
COPY project project
COPY build.sbt build.sbt
RUN sbt assembly

EXPOSE 8080
CMD java -Xms2G -Xmx2G -server -jar /zhttp/target/scala-2.13/zio-http-assembly-1.0.0.jar","FROM hseeberger/scala-sbt:11.0.12_1.5.5_2.13.6

WORKDIR /zhttp
COPY src src
COPY project project
COPY build.sbt build.sbt
RUN sbt assembly

EXPOSE 8080
CMD java -Xms2G -Xmx2G -server -jar /zhttp/target/scala-2.13/zio-http-assembly-1.0.0.jar"
2255,822c8d00c424d46976b2eda3b8b6d21aa048b35d,Bumped source to 20220923-174c2a7,"Bumped source to 20220923-174c2a7
","FROM ghcr.io/dock0/arch:20220923-cb5ad15
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
318,6a1f7268b6d041552ff3003ac9e2cc39f4c0d676,Bumped source to 20210626-763909c,"Bumped source to 20210626-763909c
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210626-e1eb5c6
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210626-763909c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
1,a68622db0d2584eec3ea75541f6a9b792f31b66b,Bumped source to 20210409-b5c5905,"Bumped source to 20210409-b5c5905
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210409-1dec76a
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210409-b5c5905
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
"
200,1f9789afaa76db3037cf635e69dc223e85e30bb9,Bump vault to 0.5.1,Bump vault to 0.5.1,"FROM alpine:latest

MAINTAINER Christopher 'Chief' Najewicz <chief@beefdisciple.com>

ENV version=0.4.1

ADD https://releases.hashicorp.com/vault/${version}/vault_${version}_linux_amd64.zip /tmp/vault.zip

RUN \
  cd /bin &&\
  unzip /tmp/vault.zip &&\
  chmod +x /bin/vault &&\
  rm /tmp/vault.zip &&\
  apk update &&\
  apk add ca-certificates

EXPOSE 8200

VOLUME /etc/vault.hcl

ENTRYPOINT [""/bin/vault"", ""server""]

CMD [""-config=/etc/vault.hcl""]
","FROM alpine:latest

MAINTAINER Christopher 'Chief' Najewicz <chief@beefdisciple.com>

ENV version=0.5.1

ADD https://releases.hashicorp.com/vault/${version}/vault_${version}_linux_amd64.zip /tmp/vault.zip

RUN \
  cd /bin &&\
  unzip /tmp/vault.zip &&\
  chmod +x /bin/vault &&\
  rm /tmp/vault.zip &&\
  apk update &&\
  apk add ca-certificates

EXPOSE 8200

VOLUME /etc/vault.hcl

ENTRYPOINT [""/bin/vault"", ""server""]

CMD [""-config=/etc/vault.hcl""]
"
2313,c64ed57cd5b9956027f1c899ebd42dde6d2ff920,Update AWS CLI version to 1.11.31,"Update AWS CLI version to 1.11.31
","FROM python:3.5-slim
MAINTAINER Nikolay Rybak <mykola.rybak@gmail.com>

RUN \
    mkdir -p /aws && \
    pip install --upgrade awscli==1.11.30 && \
    rm -rf /root/.cache && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /aws
ENTRYPOINT [""aws""]
",
2087,53623af54c1e575d68f910e8f90b083725edaab5,Bump composer from 1.10.15 to 2.0.3,"Bump composer from 1.10.15 to 2.0.3

Bumps composer from 1.10.15 to 2.0.3.

Signed-off-by: dependabot[bot] <5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb@github.com>","FROM composer:1.10.15 AS build-env

RUN composer global require humbug/box:^3.5 --prefer-dist --update-no-dev

COPY . /opt/msml/

WORKDIR /opt/msml

RUN composer install --prefer-dist --no-dev
RUN /tmp/vendor/bin/box build -v --no-interaction

FROM php:7.4.11-alpine

COPY --from=build-env /opt/msml/msml.phar /opt/msml/msml.phar

RUN apk add --no-cache tini=~0.19 mlmmj=~1.3

WORKDIR /workdir
VOLUME [""/workdir"", ""/var/spool/mlmmj""]

LABEL io.whalebrew.config.volumes '[""/var/spool/mlmmj:/var/spool/mlmmj""]'
LABEL io.whalebrew.config.working_dir '$PWD'

ENTRYPOINT [""/sbin/tini"", ""--"", ""php"", ""/opt/msml/msml.phar""]
",
2315,5965789263b6a9cc9bb41ee4da4353772d796f2f,Upgrade maven to 3.6.3,Upgrade maven to 3.6.3,"FROM maven:3.6.1-jdk-11

RUN addgroup --gid 1000 build && adduser --uid 1000 --gid 1000 --disabled-password --gecos """" build
RUN apt-get -y update && apt-get -y install gnupg2 && apt-get install git -y
",
2080,adb2be314071c784d1028b09a97d965693c2358f,Bumped source to 20200221-c1d6556,"Bumped source to 20200221-c1d6556
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200221-2328bbc
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
2062,380e4512187a974551870fae164002d7ed339b88,Bumped source to 20210308-1635a55,"Bumped source to 20210308-1635a55
","FROM docker.pkg.github.com/dock0/arch/arch:20210308-896964d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
402,833a904c3de259c5bfd46241b4b1c12cb4e32b7a,Bumped source to 20201214-57e8d30,"Bumped source to 20201214-57e8d30
","FROM docker.pkg.github.com/dock0/arch/arch:20201214-6af4810
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20201214-57e8d30
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
276,a809cdc67fd580d20974a6c3c3b780d86b8fd918,Bumped source to 20200312-da9343c,"Bumped source to 20200312-da9343c
","FROM docker.pkg.github.com/dock0/arch/arch:20200312-d293217
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200312-da9343c
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2094,5001ac0865c43808fa5b1c7686a6b150c7adaa94,Fix label,"Fix label
","FROM alpine:3.6
MAINTAINER Dmitry Prazdnichnov <dp@bambucha.org>

ARG VERSION=4.89-r5

LABEL org.label-schema.version=$VERSION \
      org.label-schema.vcs-url=https://github.com/bambocher/exim-relay \
      org.label-schema.license=MIT \
      org.label-schema.schema-version=1.0

ENV RELAY_FROM_HOSTS=10.0.0.0/8:172.16.0.0/12:192.168.0.0/16 \
    DKIM_KEY_SIZE=1024 \
    DKIM_SELECTOR=dkim \
    DKIM_SIGN_HEADERS=Date:From:To:Subject:Message-ID

RUN apk --no-cache add exim=$VERSION libcap openssl \
    && mkdir /dkim /var/log/exim /usr/lib/exim /var/spool/exim \
    && ln -s /dev/stdout /var/log/exim/main \
    && ln -s /dev/stderr /var/log/exim/panic \
    && ln -s /dev/stderr /var/log/exim/reject \
    && chown -R exim: /dkim /var/log/exim /usr/lib/exim /var/spool/exim \
    && chmod 0755 /usr/sbin/exim \
    && setcap cap_net_bind_service=+ep /usr/sbin/exim \
    && apk del libcap

COPY ./entrypoint.sh /
COPY ./exim.conf /etc/exim

USER exim
VOLUME [""/dkim""]
EXPOSE 25

ENTRYPOINT [""/entrypoint.sh""]
CMD [""-bdf"", ""-q15m""]
",
21,3c291e8524e480c9a93cd84e61b1b2d7f238deeb,fix for stfp-server download,"fix for stfp-server download

","FROM node:10-alpine

LABEL author=""Michael Parker"" maintainer=""parker@pterodactyl.io""

COPY . /srv/daemon

WORKDIR /srv/daemon

RUN apk add --no-cache openssl make gcc g++ python linux-headers paxctl gnupg tar zip unzip curl coreutils zlib supervisor \
 && npm install --production \
 && addgroup -S pterodactyl && adduser -S -D -H -G pterodactyl -s /bin/false pterodactyl \
 && apk del --no-cache make gcc g++ python linux-headers paxctl gnupg \
 && curl https://github.com/pterodactyl/sftp-server/releases/download/$(curl --silent ""https://api.github.com/repos/pterodactyl/sftp-server/releases/latest"" | grep '""tag_name"":' | sed -E 's/.*""([^""]+)"".*/\1/')/sftp-server -o /srv/daemon/sftp-server \
 && mkdir -p /var/log/supervisord /lib64 && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 \
 && chmod +x /srv/daemon/sftp-server \
 && chmod +x /srv/daemon/.docker/entrypoint.sh \
 && cp /srv/daemon/.docker/supervisord.conf /etc/supervisord.conf

EXPOSE 8080

ENTRYPOINT [ ""/bin/ash"", ""/srv/daemon/.docker/entrypoint.sh"" ]

CMD [ ""supervisord"", ""-n"", ""-c"", ""/etc/supervisord.conf"" ]","FROM node:10-alpine

LABEL author=""Michael Parker"" maintainer=""parker@pterodactyl.io""

COPY . /srv/daemon

WORKDIR /srv/daemon

RUN apk add --no-cache openssl make gcc g++ python linux-headers paxctl gnupg tar zip unzip curl coreutils zlib supervisor \
 && npm install --production \
 && addgroup -S pterodactyl && adduser -S -D -H -G pterodactyl -s /bin/false pterodactyl \
 && apk del --no-cache make gcc g++ python linux-headers paxctl gnupg \
 && curl -sSL https://github.com/pterodactyl/sftp-server/releases/download/$(curl --silent ""https://api.github.com/repos/pterodactyl/sftp-server/releases/latest"" | grep '""tag_name"":' | sed -E 's/.*""([^""]+)"".*/\1/')/sftp-server > /srv/daemon/sftp-server \
 && mkdir -p /var/log/supervisord /lib64 && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 \
 && chmod +x /srv/daemon/sftp-server \
 && chmod +x /srv/daemon/.docker/entrypoint.sh \
 && cp /srv/daemon/.docker/supervisord.conf /etc/supervisord.conf

EXPOSE 8080

ENTRYPOINT [ ""/bin/ash"", ""/srv/daemon/.docker/entrypoint.sh"" ]

CMD [ ""supervisord"", ""-n"", ""-c"", ""/etc/supervisord.conf"" ]"
2071,1a597db40ba644c75eba0ab9412a3dffeefe9fb7,Bumped source to 20210307-6f0b0c0,"Bumped source to 20210307-6f0b0c0
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210307-e654773
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
283,96567e733419ec77bdd45a655235b27e176bafe7,Bumped source to 20210829-eae33f4,"Bumped source to 20210829-eae33f4
","FROM docker.pkg.github.com/dock0/arch/arch:20210829-511bb9b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20210829-eae33f4
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
148,b7b519ab621c54cf1957c8c685d19056971d2a88,Replace PHP_VERSION in nginx.conf,Replace PHP_VERSION in nginx.conf,"FROM ubuntu
LABEL maintainer=""sboulema@gmail.com""

ARG PHP_VERSION=7.3

RUN useradd ttrss

# add PHP repository
RUN DEBIAN_FRONTEND=noninteractive && \
  apt-get update && \
  apt-get install -y software-properties-common && \
  add-apt-repository ppa:ondrej/php

# install PHP and extensions
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
  nginx supervisor php${PHP_VERSION}-fpm php${PHP_VERSION}-cli php${PHP_VERSION}-curl php${PHP_VERSION}-gd php${PHP_VERSION}-json \
  php${PHP_VERSION}-pgsql php${PHP_VERSION}-mysql php${PHP_VERSION}-mbstring php${PHP_VERSION}-xml \
  && apt-get clean && rm -rf /var/lib/apt/lists/* && mkdir -p /var/run/php

# enable mbstring modules
RUN phpenmod -v ${PHP_VERSION} mbstring && phpenmod -v ${PHP_VERSION} xml

# add ttrss as the only nginx site
ADD ttrss.nginx.conf /etc/nginx/sites-available/ttrss
RUN ln -s /etc/nginx/sites-available/ttrss /etc/nginx/sites-enabled/ttrss
RUN rm /etc/nginx/sites-enabled/default

# install ttrss and patch configuration
WORKDIR /var/www
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl --no-install-recommends && rm -rf /var/lib/apt/lists/* \
    && curl -SL https://git.tt-rss.org/git/tt-rss/archive/master.tar.gz | tar xzC /var/www --strip-components 1 \
    && apt-get purge -y --auto-remove curl \
    && chown www-data:www-data -R /var/www
RUN cp config.php-dist config.php

# expose only nginx HTTP port
EXPOSE 80

# complete path to ttrss
ENV SELF_URL_PATH http://localhost

# expose default database credentials via ENV in order to ease overwriting
ENV DB_NAME ttrss
ENV DB_USER ttrss
ENV DB_PASS ttrss

# set permissions on directories
RUN chmod -R 777 cache/images && \
    chmod -R 777 cache/upload && \
    chmod -R 777 cache/export && \
    chmod -R 777 feed-icons   && \
    chmod -R 777 lock

# always re-configure database with current ENV when RUNning container, then monitor all services
ADD configure-db.php /configure-db.php
ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf
RUN sed -i ""s/PHP_VERSION/${PHP_VERSION}/"" /etc/supervisor/conf.d/supervisord.conf
CMD php /configure-db.php && supervisord -c /etc/supervisor/conf.d/supervisord.conf","FROM ubuntu
LABEL maintainer=""sboulema@gmail.com""

ARG PHP_VERSION=7.3

RUN useradd ttrss

# add PHP repository
RUN DEBIAN_FRONTEND=noninteractive && \
  apt-get update && \
  apt-get install -y software-properties-common && \
  add-apt-repository ppa:ondrej/php

# install PHP and extensions
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
  nginx supervisor php${PHP_VERSION}-fpm php${PHP_VERSION}-cli php${PHP_VERSION}-curl php${PHP_VERSION}-gd php${PHP_VERSION}-json \
  php${PHP_VERSION}-pgsql php${PHP_VERSION}-mysql php${PHP_VERSION}-mbstring php${PHP_VERSION}-xml \
  && apt-get clean && rm -rf /var/lib/apt/lists/* && mkdir -p /var/run/php

# enable mbstring modules
RUN phpenmod -v ${PHP_VERSION} mbstring && phpenmod -v ${PHP_VERSION} xml

# add ttrss as the only nginx site
ADD ttrss.nginx.conf /etc/nginx/sites-available/ttrss
RUN sed -i ""s/PHP_VERSION/${PHP_VERSION}/"" /etc/nginx/sites-available/ttrss
RUN ln -s /etc/nginx/sites-available/ttrss /etc/nginx/sites-enabled/ttrss
RUN rm /etc/nginx/sites-enabled/default

# install ttrss and patch configuration
WORKDIR /var/www
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl --no-install-recommends && rm -rf /var/lib/apt/lists/* \
    && curl -SL https://git.tt-rss.org/git/tt-rss/archive/master.tar.gz | tar xzC /var/www --strip-components 1 \
    && apt-get purge -y --auto-remove curl \
    && chown www-data:www-data -R /var/www
RUN cp config.php-dist config.php

# expose only nginx HTTP port
EXPOSE 80

# complete path to ttrss
ENV SELF_URL_PATH http://localhost

# expose default database credentials via ENV in order to ease overwriting
ENV DB_NAME ttrss
ENV DB_USER ttrss
ENV DB_PASS ttrss

# set permissions on directories
RUN chmod -R 777 cache/images && \
    chmod -R 777 cache/upload && \
    chmod -R 777 cache/export && \
    chmod -R 777 feed-icons   && \
    chmod -R 777 lock

# always re-configure database with current ENV when RUNning container, then monitor all services
ADD configure-db.php /configure-db.php
ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf
RUN sed -i ""s/PHP_VERSION/${PHP_VERSION}/"" /etc/supervisor/conf.d/supervisord.conf
CMD php /configure-db.php && supervisord -c /etc/supervisor/conf.d/supervisord.conf
"
2070,215e9ea967943b897ea5cf2e7e92db78fecb4598,"Upgrade system packages, in case any are out of date in the base image.","Upgrade system packages, in case any are out of date in the base image.
","FROM buildpack-deps:jessie

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gettext \
        jq \
        nano \
        nginx \
        postgresql-client \
        python \
        python-dev \
        pv \
    && rm -rf /var/lib/apt/lists/*

ENV NODE_VERSION=4.4.2
RUN wget -nv -O - ""https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz"" | tar -Jx -C /opt/ -f -
RUN ln -s ""/opt/node-v${NODE_VERSION}-linux-x64/bin/node"" /usr/local/bin/
RUN ln -s ""/opt/node-v${NODE_VERSION}-linux-x64/bin/npm"" /usr/local/bin/

WORKDIR /opt/django-icekit/project_template/

COPY project_template/package.json /opt/django-icekit/project_template/
RUN npm install && rm -rf /root/.npm
RUN md5sum package.json > package.json.md5
ENV PATH=/opt/django-icekit/project_template/node_modules/.bin:$PATH

COPY project_template/bower.json /opt/django-icekit/project_template/
RUN bower install --allow-root && rm -rf /root/.cache/bower
RUN md5sum bower.json > bower.json.md5

WORKDIR /opt/django-icekit/

RUN wget -nv -O - https://bootstrap.pypa.io/get-pip.py | python

COPY requirements.txt setup.py /opt/django-icekit/
RUN pip install --no-cache-dir -r requirements.txt
RUN touch requirements-local.txt
RUN md5sum requirements.txt requirements-local.txt > requirements.md5

ENV DOCKERIZE_VERSION=0.2.0
RUN wget -nv -O - ""https://github.com/jwilder/dockerize/releases/download/v${DOCKERIZE_VERSION}/dockerize-linux-amd64-v${DOCKERIZE_VERSION}.tar.gz"" | tar -xz -C /usr/local/bin/ -f -

ENV TINI_VERSION=0.9.0
RUN wget -nv -O /usr/local/bin/tini ""https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static""
RUN chmod +x /usr/local/bin/tini

ENV DOCKER_COMMIT=0a214841ace30f8ff67cd1c3a9c2214b62eb4619
RUN cd /usr/local/bin \
    && wget -N -nv ""https://raw.githubusercontent.com/ixc/docker/${DOCKER_COMMIT}/bin/transfer.sh"" \
    && chmod +x *.sh

# See: https://github.com/codekitchen/dinghy/issues/17#issuecomment-209545602
# RUN echo ""int chown() { return 0; }"" > preload.c && gcc -shared -o /libpreload.so preload.c && rm preload.c
# ENV LD_PRELOAD=/libpreload.so

ENV CRONLOCK_HOST=redis
ENV DOCKER=1
ENV ICEKIT_DIR=/opt/django-icekit/icekit
ENV ICEKIT_PROJECT_DIR=/opt/django-icekit/project_template
ENV PATH=/opt/django-icekit/icekit/bin:$PATH
ENV PGHOST=postgres
ENV PGUSER=postgres
ENV REDIS_ADDRESS=redis:6379
ENV SUPERVISORD_CONFIG_INCLUDE=supervisord-django.conf
ENV WAITLOCK_ENABLE=1

VOLUME /root

ENTRYPOINT [""tini"", ""--"", ""entrypoint.sh""]

COPY . /opt/django-icekit/

RUN manage.py collectstatic --noinput --verbosity=0
RUN manage.py compress --verbosity=0
",
2268,2e1d77f9dda1e76c063115efeebcfae9b3f20960,Fixed typo,"Fixed typo
","#
# Copyright 2017 Frank Breedijk
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------
# This program creates users from the command line, usefull if you have not set
# up any users in the web gui, or if you are writing Seccubus and the GUI does
# not exist yet ;)
# ------------------------------------------------------------------------------
#
FROM centos:7

RUN yum install -y epel-release && \
yum update -y && \
yum install -y perl mariadb-server ""perl(Algorithm::Diff)"" ""perl(CGI)"" ""perl(CGI::Carp)"" \
""perl(DBI)"" ""perl(DBD::mysql)"" ""perl(Data::Dumper)"" ""perl(Date::Format)"" ""perl(HTML::Entities)"" \
""perl(JSON)"" ""perl(LWP::Simple)"" ""perl(LWP::Protocol::https)"" ""perl(LWP::UserAgent)"" \
""perl(Net::IP)"" ""perl(XML::Simple)"" httpd nmap which git java-1.7.0-openjdk make \
""perl(ExtUtils::MakeMaker)"" wgetn cronie

RUN mkdir -p /build/seccubus
COPY . /build/seccubus/

COPY docker-install.sh /tmp/install.sh
RUN bash -x /tmp/install.sh && rm /tmp/install.sh

COPY docker-files /
COPY README.md /

ENTRYPOINT [""/entrypoint.sh""]
VOLUME [ ""/opt/seccubus/data"" ]

EXPOSE 80
",
2172,2fe62381cecd109e806b931537f7eeac738e1983,Bumped source to 20200524-67066f8,"Bumped source to 20200524-67066f8
","FROM docker.pkg.github.com/dock0/arch/arch:20200524-7f4a64f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
",
2247,872f11ca02e12c356fa43591975e7638b13fc37e,Bumped source to 20210809-4fe8688,"Bumped source to 20210809-4fe8688
","FROM docker.pkg.github.com/dock0/ssh/ssh:20210809-ca0e3f1
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed cpio dnsutils htop lockfile-progs lsof mtr net-tools whois zsh neovim
RUN usermod --shell /usr/bin/zsh $ADMIN
RUN su - $ADMIN -c ""git clone git://github.com/akerl/....git /home/$ADMIN/...""
RUN su - $ADMIN -c '.../... conf https://raw.githubusercontent.com/akerl/dotfiles/master/.dotdotdot.conf'
RUN su - $ADMIN -c '.../... supi'
",
175,debbdb67193c8fd0743620c0ea2fa0bf51e0b01b,Update eventtask mq docker container location,"Update eventtask mq docker container location
","FROM mozdef_base:latest

COPY mq /opt/mozdef/envs/mozdef/mq
COPY docker/compose/mozdef_mq_worker/files/esworker_eventtask.conf /opt/mozdef/envs/mozdef/mq/esworker_eventtask.conf

RUN chown -R mozdef:mozdef /opt/mozdef/envs/mozdef/mq

WORKDIR /opt/mozdef/envs/mozdef/mq

USER mozdef
","FROM mozdef_base:latest

COPY mq /opt/mozdef/envs/mozdef/mq
COPY docker/compose/mozdef_mq_eventtask/files/esworker_eventtask.conf /opt/mozdef/envs/mozdef/mq/esworker_eventtask.conf

RUN chown -R mozdef:mozdef /opt/mozdef/envs/mozdef/mq

WORKDIR /opt/mozdef/envs/mozdef/mq

USER mozdef
"
2068,6de6d4e30f38007c6eb5f9fe33388a0f6d94e9bb,Bumped source to 20200406-9f83f83,"Bumped source to 20200406-9f83f83
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20200406-dc2dd73
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
",
42,7db29b727bd32f94bc93c23a1be22097505814e5,Bumped source to 20200324-affedd8,"Bumped source to 20200324-affedd8
","FROM docker.pkg.github.com/dock0/service/service:20200324-3cdf3ad
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200324-affedd8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
324,05f1c8520b99441e0c4355c50f281a18cf826d03,Bumped source to 20200709-ee22efe,"Bumped source to 20200709-ee22efe
","FROM docker.pkg.github.com/dock0/arch/arch:20200709-5b511ae
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
","FROM docker.pkg.github.com/dock0/arch/arch:20200709-ee22efe
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm \
    strace tcpdump openbsd-netcat socat htop \
    nmap dnsutils net-tools iputils openssh \
    screen tmux man-db lsof psmisc git tree \
    vim-minimal inetutils
"
2178,86f782a31e401dfd469b5b40791402925e2a241b,Removed unneeded command newline,"Removed unneeded command newline
","FROM ferrarimarco/pxe:dev-latest

LABEL maintainer ""ferrari.marco@gmail.com""

RUN apt-get update \
  && apt-get install p7zip-full

WORKDIR /var/lib/tftpboot
ENV UBUNTU_SERVER_MAJOR_MINOR_VERSION 16.04
ENV UBUNTU_SERVER_POINT_VERSION 2
ENV UBUNTU_SERVER_VERSION $UBUNTU_SERVER_MAJOR_MINOR_VERSION.$UBUNTU_SERVER_POINT_VERSION

RUN mkdir ubuntu \
  && wget http://releases.ubuntu.com/$UBUNTU_SERVER_MAJOR_MINOR_VERSION/ubuntu-$UBUNTU_SERVER_VERSION-server-amd64.iso

RUN 7z x ubuntu-$UBUNTU_SERVER_VERSION-server-amd64.iso \
RUN rm ubuntu-$UBUNTU_SERVER_VERSION-server-amd64.iso

RUN apt-get remove -y --purge p7zip-full
",
2146,838b5d6524a462d2976d0634f1263dc9c0082cfa,Dockerfile update,Dockerfile update,"FROM alpine

MAINTAINER Philipp Rescheneder <philipp.rescheneder@gmail.com>

ARG VERSION_ARG

# Install curl
RUN apk --update upgrade && \
    apk add git curl ca-certificates && \
    update-ca-certificates && \
    rm -rf /var/cache/apk/*

# Get most recent ngmlr version from github
RUN echo $VERSION_ARG
#RUN curl -L `curl -s https://api.github.com/repos/philres/ngmlr/releases | grep browser_download_url | head -n 1 | cut -d '""' -f 4` | tar xz && cp ./ngmlr-*/ngmlr /bin/ && rm -rf ngmlr-*
RUN git clone https://github.com/philres/ngmlr.git && cd ngmlr && git checkout $VERSION_ARG && mkdir -p build && cd build && cmake .. && make && cp ../bin/ngmlr-*/ngmlr /bin/ && cd .. && rm -rf ngmlr ",
2295,0deec4082f529a744869c0098d2e909fbb057efc,Add missing tidy extension on Docker,"Add missing tidy extension on Docker

It's required in the 2.4 version
","FROM php:7.2-fpm

# Default timezone. To change it, use the argument in the docker-compose.yml file
ARG timezone='Europe/Paris'

RUN apt-get update && apt-get install -y \
        libmcrypt-dev \
        libicu-dev \
        libpq-dev \
        libxml2-dev \
        libpng-dev \
        libjpeg-dev \
        libsqlite3-dev \
        imagemagick \
        libmagickwand-dev
RUN docker-php-ext-install \
        iconv \
        mbstring \
        intl \
        pdo \
        pdo_mysql \
        pdo_pgsql \
        pdo_sqlite

RUN printf ""\n"" | pecl install imagick && docker-php-ext-enable imagick

RUN echo ""date.timezone=""$timezone > /usr/local/etc/php/conf.d/date_timezone.ini

RUN usermod -u 1000 www-data

CMD [""php-fpm""]
",
2174,09656ba14c3b85c53b2e276a1329e351227c52ef,Bump cucoslib version,"Bump cucoslib version
","FROM registry.centos.org/centos/centos:7
MAINTAINER Fridolin Pokorny <fridolin@redhat.com>

ENV LANG=en_US.UTF-8 \
    MAVEN_INDEX_CHECKER_PATH='/opt/maven-index-checker' \
    CUCOSLIB_VERSION=d6111a6

RUN useradd coreapi

RUN yum install -y epel-release && \
    yum install -y python34-devel python34-pip postgresql-devel gcc git maven zip unzip && \
    yum clean all

# Install maven-index-checker
COPY hack/install_maven-index-checker.sh /tmp/install_deps/
RUN /tmp/install_deps/install_maven-index-checker.sh

COPY ./ /tmp/jobs_install/
RUN pushd /tmp/jobs_install &&\
  pip3 install . &&\
  pip3 install git+https://github.com/fabric8-analytics/fabric8-analytics-worker.git@${CUCOSLIB_VERSION} &&\
  popd &&\
  rm -rf /tmp/jobs_install

# A temporary hack to keep Selinon up2date
COPY hack/update_selinon.sh /tmp/
RUN sh /tmp/update_selinon.sh

COPY hack/run_jobs.sh /usr/bin/
COPY f8a-jobs.py /usr/bin/

USER coreapi
CMD [""/usr/bin/run_jobs.sh""]
",
91,3d01077cd85d701495b1c49c97fb1d9f7eda6a7e,update node version,"update node version
","FROM node:7.9-onbuild

# Set timezone
RUN echo Europe/Samara | tee /etc/timezone; \
    dpkg-reconfigure --frontend noninteractive tzdata
","FROM node:8.2-onbuild

# Set timezone
RUN echo Europe/Samara | tee /etc/timezone; \
    dpkg-reconfigure --frontend noninteractive tzdata
"
186,36f8fc5dcb8073338fb47db730e3306c04c09e40,[Dockerfile] update Dockerfile,"[Dockerfile] update Dockerfile
","
FROM ubuntu:17.04

MAINTAINER Dockerfiles<qiushimao@hotmail.com>

# Install required packages and remove the apt packages cache when done.

RUN apt-get install -y \
git \
python3 \
python3-dev \
python3-setuptools \
python3-pip \
nginx \
curl \
supervisor \
sqlite3 && \
pip3 install -U pip setuptools && \
   rm -rf /var/lib/apt/lists/*

# install uwsgi now because it takes a little while
RUN pip3 install uwsgi
RUN pip3 install django
RUN pip3 install django-cors-headers
# setup all the configfiles
RUN echo ""daemon off;"" >> /etc/nginx/nginx.conf

COPY nginx-app.conf /etc/nginx/sites-available/default
COPY supervisor-app.conf /etc/supervisor/conf.d/
COPY . /home/docker/jpsp/
RUN curl http://npmjs.org/install.sh | sh
RUN npm install -g cnpm --registry=https://registry.npm.taobao.org
RUN cd /home/docker/jpsp/jpsp/frontend
RUN cnpm install
RUN npm build
RUN python3 /home/docker/jpsp/jpsp/manage.py collectstatic
# COPY requirements.txt and RUN pip install BEFORE adding the rest of your code, this will cause Docker's caching mechanism
# to prevent re-installing (all your) dependencies when you made a change a line or two in your app.

# install django, normally you would remove this step because your project would already
# be installed in the code/app/ directory

EXPOSE 80
CMD [""supervisord"", ""-n""]","
FROM ubuntu:17.04

MAINTAINER Dockerfiles<qiushimao@hotmail.com>

# Install required packages and remove the apt packages cache when done.

RUN apt-get upgrade && \
    apt-get install -y \
git \
python3 \
python3-dev \
python3-setuptools \
python3-pip \
nginx \
curl \
supervisor \
sqlite3 && \
pip3 install -U pip setuptools && \
   rm -rf /var/lib/apt/lists/*

# install uwsgi now because it takes a little while
RUN pip3 install uwsgi
RUN pip3 install django
RUN pip3 install django-cors-headers
# setup all the configfiles
RUN echo ""daemon off;"" >> /etc/nginx/nginx.conf

COPY nginx-app.conf /etc/nginx/sites-available/default
COPY supervisor-app.conf /etc/supervisor/conf.d/
COPY . /home/docker/jpsp/
RUN curl http://npmjs.org/install.sh | sh
RUN npm install -g cnpm --registry=https://registry.npm.taobao.org
RUN cd /home/docker/jpsp/jpsp/frontend
RUN cnpm install
RUN npm build
RUN python3 /home/docker/jpsp/jpsp/manage.py collectstatic
# COPY requirements.txt and RUN pip install BEFORE adding the rest of your code, this will cause Docker's caching mechanism
# to prevent re-installing (all your) dependencies when you made a change a line or two in your app.

# install django, normally you would remove this step because your project would already
# be installed in the code/app/ directory

EXPOSE 80
CMD [""supervisord"", ""-n""]"
90,f2b03604c755961e0d43373c95de015b8b92c436,Bumped source to 20210707-b2e7a50,"Bumped source to 20210707-b2e7a50
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210707-5fb8f2e
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
","FROM docker.pkg.github.com/dock0/amylum_arch/amylum_arch:20210707-b2e7a50
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm s6 execline musl-amylum
ADD service /service
ADD init /init
CMD [""/init""]
"
57,d3c4bc4e73bc096d9ddf2fdf637509e4e2453622,Add data from previous containers to speed up sync,"Add data from previous containers to speed up sync
","FROM ubuntu:16.04

COPY config/redis.config /etc/redis/redis.config
COPY config/sasl_passwd_template /
COPY config/main.cf_template /
COPY config/ldapUserSync/* /ldapUserSync/
COPY start /start

ENV DEBIAN_FRONTEND=noninteractive \
    OV_PASSWORD=admin \
    PUBLIC_HOSTNAME=openvas

RUN apt-get update && \
    apt-get install software-properties-common --no-install-recommends -yq && \
    add-apt-repository ppa:mikesplain/openvas -y && \
    add-apt-repository ppa:mrazavi/openvas -y && \
    apt-get clean && \
    apt-get update && \
    apt-get install alien \
        autotools-dev \
        bind9-host \
        binutils \
        bsdmainutils \
        build-essential \
        bzip2 \
        ca-certificates \
        cpio \
        cpp \
        cpp-5 \
        curl \
        debhelper \
        debugedit \
        dh-python \
        dh-strip-nondeterminism \
        dirb \
        dirmngr \
        dnsutils \
        dpkg-dev \
        fakeroot \
        file \
        fontconfig \
        fontconfig-config \
        fonts-dejavu-core \
        fonts-lato \
        fonts-liberation \
        fonts-lmodern \
        fonts-texgyre \
        g++ \
        g++-5 \
        gcc \
        gcc-5 \
        geoip-database \
        gettext \
        gettext-base \
        ghostscript \
        gir1.2-glib-2.0:amd64 \
        gnupg-agent \
        gnupg2 \
        gnutls-bin \
        graphviz \
        groff-base \
        gsfonts \
        hicolor-icon-theme \
        ifupdown \
        intltool-debian \
        iproute2 \
        isc-dhcp-client \
        isc-dhcp-common \
        javascript-common \
        ldap-utils \
        libalgorithm-diff-perl \
        libalgorithm-diff-xs-perl \
        libalgorithm-merge-perl \
        libapr1:amd64 \
        libaprutil1:amd64 \
        libarchive-zip-perl \
        libarchive13:amd64 \
        libasan2:amd64 \
        libasn1-8-heimdal:amd64 \
        libasprintf-dev:amd64 \
        libasprintf0v5:amd64 \
        libassuan0:amd64 \
        libatk1.0-0:amd64 \
        libatk1.0-data \
        libatm1:amd64 \
        libatomic1:amd64 \
        libauthen-sasl-perl \
        libavahi-client3:amd64 \
        libavahi-common-data:amd64 \
        libavahi-common3:amd64 \
        libbind9-140:amd64 \
        libblas-common \
        libblas3 \
        libbsd0:amd64 \
        libc-dev-bin \
        libc6-dev:amd64 \
        libcairo2:amd64 \
        libcc1-0:amd64 \
        libcdt5 \
        libcgraph6 \
        libcilkrts5:amd64 \
        libcroco3:amd64 \
        libcups2:amd64 \
        libcupsfilters1:amd64 \
        libcupsimage2:amd64 \
        libcurl3:amd64 \
        libcurl3-gnutls:amd64 \
        libdatrie1:amd64 \
        libdbus-1-3:amd64 \
        libdns-export162 \
        libdns162:amd64 \
        libdpkg-perl \
        libdrm-amdgpu1:amd64 \
        libdrm-common \
        libdrm-intel1:amd64 \
        libdrm-nouveau2:amd64 \
        libdrm-radeon1:amd64 \
        libdrm2:amd64 \
        libedit2:amd64 \
        libelf1:amd64 \
        libencode-locale-perl \
        libexpat1:amd64 \
        libfakeroot:amd64 \
        libffi6:amd64 \
        libfile-basedir-perl \
        libfile-desktopentry-perl \
        libfile-fcntllock-perl \
        libfile-homedir-perl \
        libfile-listing-perl \
        libfile-mimeinfo-perl \
        libfile-stripnondeterminism-perl \
        libfile-which-perl \
        libfont-afm-perl \
        libfontconfig1:amd64 \
        libfontenc1:amd64 \
        libfreetype6:amd64 \
        libgcc-5-dev:amd64 \
        libgd3:amd64 \
        libgdbm3:amd64 \
        libgdk-pixbuf2.0-0:amd64 \
        libgdk-pixbuf2.0-common \
        libgeoip1:amd64 \
        libgettextpo-dev:amd64 \
        libgettextpo0:amd64 \
        libgirepository-1.0-1:amd64 \
        libgl1-mesa-dri:amd64 \
        libgl1-mesa-glx:amd64 \
        libglapi-mesa:amd64 \
        libglib2.0-0:amd64 \
        libgmp10:amd64 \
        libgnutls30:amd64 \
        libgomp1:amd64 \
        libgpgme11:amd64 \
        libgraphite2-3:amd64 \
        libgs9:amd64 \
        libgs9-common \
        libgssapi-krb5-2:amd64 \
        libgssapi3-heimdal:amd64 \
        libgtk2.0-0:amd64 \
        libgtk2.0-bin \
        libgtk2.0-common \
        libgtksourceview2.0-0 \
        libgtksourceview2.0-common \
        libgvc6 \
        libgvpr2 \
        libharfbuzz-icu0:amd64 \
        libharfbuzz0b:amd64 \
        libhcrypto4-heimdal:amd64 \
        libheimbase1-heimdal:amd64 \
        libheimntlm0-heimdal:amd64 \
        libhiredis0.13:amd64 \
        libhogweed4:amd64 \
        libhtml-form-perl \
        libhtml-format-perl \
        libhtml-parser-perl \
        libhtml-tagset-perl \
        libhtml-tree-perl \
        libhttp-cookies-perl \
        libhttp-daemon-perl \
        libhttp-date-perl \
        libhttp-message-perl \
        libhttp-negotiate-perl \
        libhx509-5-heimdal:amd64 \
        libice6:amd64 \
        libicu55:amd64 \
        libidn11:amd64 \
        libijs-0.35:amd64 \
        libio-html-perl \
        libio-socket-ssl-perl \
        libipc-system-simple-perl \
        libisc-export160 \
        libisc160:amd64 \
        libisccc140:amd64 \
        libisccfg140:amd64 \
        libisl15:amd64 \
        libitm1:amd64 \
        libjbig0:amd64 \
        libjbig2dec0 \
        libjemalloc1 \
        libjpeg-turbo8:amd64 \
        libjpeg8:amd64 \
        libjs-jquery \
        libk5crypto3:amd64 \
        libkeyutils1:amd64 \
        libkpathsea6:amd64 \
        libkrb5-26-heimdal:amd64 \
        libkrb5-3:amd64 \
        libkrb5support0:amd64 \
        libksba8:amd64 \
        liblcms2-2:amd64 \
        libldap-2.4-2:amd64 \
        libldb1:amd64 \
        liblinear3:amd64 \
        libllvm6.0:amd64 \
        liblsan0:amd64 \
        libltdl7:amd64 \
        liblua5.2-0:amd64 \
        liblwp-mediatypes-perl \
        liblwp-protocol-https-perl \
        liblwres141:amd64 \
        liblzo2-2:amd64 \
        libmagic1:amd64 \
        libmail-sendmail-perl \
        libmailtools-perl \
        libmicrohttpd10 \
        libmnl0:amd64 \
        libmpc3:amd64 \
        libmpdec2:amd64 \
        libmpfr4:amd64 \
        libmpx0:amd64 \
        libnet-dbus-perl \
        libnet-http-perl \
        libnet-smtp-ssl-perl \
        libnet-ssleay-perl \
        libnettle6:amd64 \
        libnpth0:amd64 \
        libnspr4:amd64 \
        libnss3:amd64 \
        libnss3-nssdb \
        libopenvas9 \
        libopenvas9-dev \
        libopts25:amd64 \
        libp11-kit0:amd64 \
        libpango-1.0-0:amd64 \
        libpangocairo-1.0-0:amd64 \
        libpangoft2-1.0-0:amd64 \
        libpaper-utils \
        libpaper1:amd64 \
        libpathplan4 \
        libpcap0.8:amd64 \
        libpci3:amd64 \
        libpciaccess0:amd64 \
        libperl5.22:amd64 \
        libpipeline1:amd64 \
        libpixman-1-0:amd64 \
        libpng12-0:amd64 \
        libpoppler58:amd64 \
        libpopt0:amd64 \
        libpotrace0 \
        libptexenc1:amd64 \
        libpython-stdlib:amd64 \
        libpython2.7:amd64 \
        libpython2.7-minimal:amd64 \
        libpython2.7-stdlib:amd64 \
        libpython3-stdlib:amd64 \
        libpython3.5-minimal:amd64 \
        libpython3.5-stdlib:amd64 \
        libquadmath0:amd64 \
        libroken18-heimdal:amd64 \
        librpm3 \
        librpmbuild3 \
        librpmio3 \
        librpmsign3 \
        librtmp1:amd64 \
        libruby2.3:amd64 \
        libsasl2-2:amd64 \
        libsasl2-modules:amd64 \
        libsasl2-modules-db:amd64 \
        libsensors4:amd64 \
        libserf-1-1:amd64 \
        libsm6:amd64 \
        libsmbclient:amd64 \
        libsnmp-base \
        libsnmp30:amd64 \
        libsqlite3-0:amd64 \
        libssh-4:amd64 \
        libssl1.0.0:amd64 \
        libstdc++-5-dev:amd64 \
        libsvn1:amd64 \
        libsynctex1:amd64 \
        libsys-hostname-long-perl \
        libtalloc2:amd64 \
        libtasn1-6:amd64 \
        libtcl8.6:amd64 \
        libtdb1:amd64 \
        libtevent0:amd64 \
        libtexlua52:amd64 \
        libtexluajit2:amd64 \
        libtext-iconv-perl \
        libthai-data \
        libthai0:amd64 \
        libtie-ixhash-perl \
        libtiff5:amd64 \
        libtimedate-perl \
        libtk8.6:amd64 \
        libtsan0:amd64 \
        libtxc-dxtn-s2tc0:amd64 \
        libubsan0:amd64 \
        libunistring0:amd64 \
        liburi-perl \
        libutempter0:amd64 \
        libvpx3:amd64 \
        libwbclient0:amd64 \
        libwhisker2-perl \
        libwind0-heimdal:amd64 \
        libwrap0:amd64 \
        libwww-perl \
        libwww-robotrules-perl \
        libx11-6:amd64 \
        libx11-data \
        libx11-protocol-perl \
        libx11-xcb1:amd64 \
        libxau6:amd64 \
        libxaw7:amd64 \
        libxcb-dri2-0:amd64 \
        libxcb-dri3-0:amd64 \
        libxcb-glx0:amd64 \
        libxcb-present0:amd64 \
        libxcb-render0:amd64 \
        libxcb-shape0:amd64 \
        libxcb-shm0:amd64 \
        libxcb-sync1:amd64 \
        libxcb1:amd64 \
        libxcomposite1:amd64 \
        libxcursor1:amd64 \
        libxdamage1:amd64 \
        libxdmcp6:amd64 \
        libxext6:amd64 \
        libxfixes3:amd64 \
        libxft2:amd64 \
        libxi6:amd64 \
        libxinerama1:amd64 \
        libxml-parser-perl \
        libxml-twig-perl \
        libxml-xpathengine-perl \
        libxml2:amd64 \
        libxmu6:amd64 \
        libxmuu1:amd64 \
        libxpm4:amd64 \
        libxrandr2:amd64 \
        libxrender1:amd64 \
        libxshmfence1:amd64 \
        libxslt1.1:amd64 \
        libxss1:amd64 \
        libxt6:amd64 \
        libxtables11:amd64 \
        libxtst6:amd64 \
        libxv1:amd64 \
        libxxf86dga1:amd64 \
        libxxf86vm1:amd64 \
        libyaml-0-2:amd64 \
        libyaml-tiny-perl \
        libzzip-0-13:amd64 \
        linux-libc-dev:amd64 \
        lmodern \
        lua-lpeg:amd64 \
        make \
        man-db \
        manpages \
        manpages-dev \
        mime-support \
        ndiff \
        net-tools \
        netbase \
        nikto \
        nmap \
        nsis \
        nsis-common \
        openssh-client \
        openssl \
        openvas9 \
        openvas9-cli \
        openvas9-gsa \
        openvas9-manager \
        openvas9-scanner \
        patch \
        perl \
        perl-modules-5.22 \
        pinentry-curses \
        po-debconf \
        poppler-data \
        postfix \
        preview-latex-style \
        prosper \
        ps2eps \
        python \
        python-beautifulsoup \
        python-bs4 \
        python-cairo \
        python-cffi-backend \
        python-chardet \
        python-crypto \
        python-cryptography \
        python-defusedxml \
        python-enum34 \
        python-gi \
        python-gobject \
        python-gobject-2 \
        python-gtk2 \
        python-gtksourceview2 \
        python-html5lib \
        python-idna \
        python-ipaddress \
        python-ldb \
        python-lxml \
        python-minimal \
        python-ndg-httpsclient \
        python-openssl \
        python-pkg-resources \
        python-pyasn1 \
        python-pypdf \
        python-pysqlite2 \
        python-requests \
        python-samba \
        python-scapy \
        python-simplejson \
        python-six \
        python-soappy \
        python-svn \
        python-talloc \
        python-tdb \
        python-urllib3 \
        python-wstools \
        python2.7 \
        python2.7-minimal \
        python3 \
        python3-minimal \
        python3.5 \
        python3.5-minimal \
        rake \
        redis-server \
        redis-tools \
        rename \
        rpm \
        rpm-common \
        rpm2cpio \
        rsync \
        ruby \
        ruby-did-you-mean \
        ruby-minitest \
        ruby-net-telnet \
        ruby-power-assert \
        ruby-test-unit \
        ruby2.3 \
        rubygems-integration \
        samba-common \
        samba-common-bin \
        samba-libs:amd64 \
        sgml-base \
        shared-mime-info \
        smbclient \
        socat \
        sqlite3 \
        sshpass \
        ssl-cert \
        t1utils \
        tcl \
        tcl8.6 \
        tcpd \
        tex-common \
        tex-gyre \
        texlive-base \
        texlive-binaries \
        texlive-extra-utils \
        texlive-font-utils \
        texlive-fonts-recommended \
        texlive-fonts-recommended-doc \
        texlive-generic-recommended \
        texlive-latex-base \
        texlive-latex-extra \
        texlive-latex-recommended \
        texlive-pictures \
        texlive-pstricks \
        tipa \
        tk \
        tk8.6 \
        tzdata \
        ucf \
        unzip \
        w3af \
        w3af-console \
        wapiti \
        wget \
        x11-common \
        x11-utils \
        x11-xserver-utils \
        xauth \
        xbitmaps \
        xdg-utils \
        xml-core \
        xsltproc \
        xterm \
        xz-utils \
        zip \
    -yq --no-install-recommends && \
    rm -rf /var/lib/apt/lists/*

RUN wget -q https://github.com/Arachni/arachni/releases/download/v1.5.1/arachni-1.5.1-0.5.12-linux-x86_64.tar.gz && \
    tar -zxf arachni-1.5.1-0.5.12-linux-x86_64.tar.gz && \
    mv arachni-1.5.1-0.5.12 /opt/arachni && \
    ln -s /opt/arachni/bin/* /usr/local/bin/ && \
    rm -rf arachni*

RUN mkdir -p /var/run/redis && \
    wget -q --no-check-certificate \
    https://svn.wald.intevation.org/svn/openvas/branches/tools-attic/openvas-check-setup \
      -O /openvas-check-setup && \
    chmod +x /openvas-check-setup && \
    sed -i 's/DAEMON_ARGS=""""/DAEMON_ARGS=""-a 0.0.0.0""/' /etc/init.d/openvas-manager && \
    sed -i 's/DAEMON_ARGS=""""/DAEMON_ARGS=""--mlisten 127.0.0.1 -m 9390 --gnutls-priorities=SECURE128:-AES-128-CBC:-CAMELLIA-128-CBC:-VERS-SSL3.0:-VERS-TLS1.0""/' /etc/init.d/openvas-gsa && \
    sed -i '/^\[ -n ""$HTTP_STS_MAX_AGE"" \]/a[ -n ""$PUBLIC_HOSTNAME"" ] && DAEMON_ARGS=""$DAEMON_ARGS --allow-header-host=$PUBLIC_HOSTNAME""' /etc/init.d/openvas-gsa && \
    sed -i 's/PORT_NUMBER=4000/PORT_NUMBER=443/' /etc/default/openvas-gsa && \
    greenbone-nvt-sync > /dev/null && \
    greenbone-scapdata-sync > /dev/null && \
    greenbone-certdata-sync > /dev/null && \
    BUILD=true /start && \
    service openvas-scanner stop && \
    service openvas-manager stop && \
    service openvas-gsa stop && \
    service redis-server stop


ENV BUILD=""""

CMD /start

EXPOSE 443 9390
","# Start by pulling down our existing container
# to sync 1.9 Gb of data from OpenVAS.
FROM mikesplain/openvas

FROM ubuntu:16.04

COPY --from=0 /var/lib/openvas /var/lib/openvas
COPY config/redis.config /etc/redis/redis.config
COPY config/sasl_passwd_template /
COPY config/main.cf_template /
COPY config/ldapUserSync/* /ldapUserSync/
COPY start /start

ENV DEBIAN_FRONTEND=noninteractive \
    OV_PASSWORD=admin \
    PUBLIC_HOSTNAME=openvas

RUN apt-get update && \
    apt-get install software-properties-common --no-install-recommends -yq && \
    add-apt-repository ppa:mikesplain/openvas -y && \
    add-apt-repository ppa:mrazavi/openvas -y && \
    apt-get clean && \
    apt-get update && \
    apt-get install alien \
        autotools-dev \
        bind9-host \
        binutils \
        bsdmainutils \
        build-essential \
        bzip2 \
        ca-certificates \
        cpio \
        cpp \
        cpp-5 \
        curl \
        debhelper \
        debugedit \
        dh-python \
        dh-strip-nondeterminism \
        dirb \
        dirmngr \
        dnsutils \
        dpkg-dev \
        fakeroot \
        file \
        fontconfig \
        fontconfig-config \
        fonts-dejavu-core \
        fonts-lato \
        fonts-liberation \
        fonts-lmodern \
        fonts-texgyre \
        g++ \
        g++-5 \
        gcc \
        gcc-5 \
        geoip-database \
        gettext \
        gettext-base \
        ghostscript \
        gir1.2-glib-2.0:amd64 \
        gnupg-agent \
        gnupg2 \
        gnutls-bin \
        graphviz \
        groff-base \
        gsfonts \
        hicolor-icon-theme \
        ifupdown \
        intltool-debian \
        iproute2 \
        isc-dhcp-client \
        isc-dhcp-common \
        javascript-common \
        ldap-utils \
        libalgorithm-diff-perl \
        libalgorithm-diff-xs-perl \
        libalgorithm-merge-perl \
        libapr1:amd64 \
        libaprutil1:amd64 \
        libarchive-zip-perl \
        libarchive13:amd64 \
        libasan2:amd64 \
        libasn1-8-heimdal:amd64 \
        libasprintf-dev:amd64 \
        libasprintf0v5:amd64 \
        libassuan0:amd64 \
        libatk1.0-0:amd64 \
        libatk1.0-data \
        libatm1:amd64 \
        libatomic1:amd64 \
        libauthen-sasl-perl \
        libavahi-client3:amd64 \
        libavahi-common-data:amd64 \
        libavahi-common3:amd64 \
        libbind9-140:amd64 \
        libblas-common \
        libblas3 \
        libbsd0:amd64 \
        libc-dev-bin \
        libc6-dev:amd64 \
        libcairo2:amd64 \
        libcc1-0:amd64 \
        libcdt5 \
        libcgraph6 \
        libcilkrts5:amd64 \
        libcroco3:amd64 \
        libcups2:amd64 \
        libcupsfilters1:amd64 \
        libcupsimage2:amd64 \
        libcurl3:amd64 \
        libcurl3-gnutls:amd64 \
        libdatrie1:amd64 \
        libdbus-1-3:amd64 \
        libdns-export162 \
        libdns162:amd64 \
        libdpkg-perl \
        libdrm-amdgpu1:amd64 \
        libdrm-common \
        libdrm-intel1:amd64 \
        libdrm-nouveau2:amd64 \
        libdrm-radeon1:amd64 \
        libdrm2:amd64 \
        libedit2:amd64 \
        libelf1:amd64 \
        libencode-locale-perl \
        libexpat1:amd64 \
        libfakeroot:amd64 \
        libffi6:amd64 \
        libfile-basedir-perl \
        libfile-desktopentry-perl \
        libfile-fcntllock-perl \
        libfile-homedir-perl \
        libfile-listing-perl \
        libfile-mimeinfo-perl \
        libfile-stripnondeterminism-perl \
        libfile-which-perl \
        libfont-afm-perl \
        libfontconfig1:amd64 \
        libfontenc1:amd64 \
        libfreetype6:amd64 \
        libgcc-5-dev:amd64 \
        libgd3:amd64 \
        libgdbm3:amd64 \
        libgdk-pixbuf2.0-0:amd64 \
        libgdk-pixbuf2.0-common \
        libgeoip1:amd64 \
        libgettextpo-dev:amd64 \
        libgettextpo0:amd64 \
        libgirepository-1.0-1:amd64 \
        libgl1-mesa-dri:amd64 \
        libgl1-mesa-glx:amd64 \
        libglapi-mesa:amd64 \
        libglib2.0-0:amd64 \
        libgmp10:amd64 \
        libgnutls30:amd64 \
        libgomp1:amd64 \
        libgpgme11:amd64 \
        libgraphite2-3:amd64 \
        libgs9:amd64 \
        libgs9-common \
        libgssapi-krb5-2:amd64 \
        libgssapi3-heimdal:amd64 \
        libgtk2.0-0:amd64 \
        libgtk2.0-bin \
        libgtk2.0-common \
        libgtksourceview2.0-0 \
        libgtksourceview2.0-common \
        libgvc6 \
        libgvpr2 \
        libharfbuzz-icu0:amd64 \
        libharfbuzz0b:amd64 \
        libhcrypto4-heimdal:amd64 \
        libheimbase1-heimdal:amd64 \
        libheimntlm0-heimdal:amd64 \
        libhiredis0.13:amd64 \
        libhogweed4:amd64 \
        libhtml-form-perl \
        libhtml-format-perl \
        libhtml-parser-perl \
        libhtml-tagset-perl \
        libhtml-tree-perl \
        libhttp-cookies-perl \
        libhttp-daemon-perl \
        libhttp-date-perl \
        libhttp-message-perl \
        libhttp-negotiate-perl \
        libhx509-5-heimdal:amd64 \
        libice6:amd64 \
        libicu55:amd64 \
        libidn11:amd64 \
        libijs-0.35:amd64 \
        libio-html-perl \
        libio-socket-ssl-perl \
        libipc-system-simple-perl \
        libisc-export160 \
        libisc160:amd64 \
        libisccc140:amd64 \
        libisccfg140:amd64 \
        libisl15:amd64 \
        libitm1:amd64 \
        libjbig0:amd64 \
        libjbig2dec0 \
        libjemalloc1 \
        libjpeg-turbo8:amd64 \
        libjpeg8:amd64 \
        libjs-jquery \
        libk5crypto3:amd64 \
        libkeyutils1:amd64 \
        libkpathsea6:amd64 \
        libkrb5-26-heimdal:amd64 \
        libkrb5-3:amd64 \
        libkrb5support0:amd64 \
        libksba8:amd64 \
        liblcms2-2:amd64 \
        libldap-2.4-2:amd64 \
        libldb1:amd64 \
        liblinear3:amd64 \
        libllvm6.0:amd64 \
        liblsan0:amd64 \
        libltdl7:amd64 \
        liblua5.2-0:amd64 \
        liblwp-mediatypes-perl \
        liblwp-protocol-https-perl \
        liblwres141:amd64 \
        liblzo2-2:amd64 \
        libmagic1:amd64 \
        libmail-sendmail-perl \
        libmailtools-perl \
        libmicrohttpd10 \
        libmnl0:amd64 \
        libmpc3:amd64 \
        libmpdec2:amd64 \
        libmpfr4:amd64 \
        libmpx0:amd64 \
        libnet-dbus-perl \
        libnet-http-perl \
        libnet-smtp-ssl-perl \
        libnet-ssleay-perl \
        libnettle6:amd64 \
        libnpth0:amd64 \
        libnspr4:amd64 \
        libnss3:amd64 \
        libnss3-nssdb \
        libopenvas9 \
        libopenvas9-dev \
        libopts25:amd64 \
        libp11-kit0:amd64 \
        libpango-1.0-0:amd64 \
        libpangocairo-1.0-0:amd64 \
        libpangoft2-1.0-0:amd64 \
        libpaper-utils \
        libpaper1:amd64 \
        libpathplan4 \
        libpcap0.8:amd64 \
        libpci3:amd64 \
        libpciaccess0:amd64 \
        libperl5.22:amd64 \
        libpipeline1:amd64 \
        libpixman-1-0:amd64 \
        libpng12-0:amd64 \
        libpoppler58:amd64 \
        libpopt0:amd64 \
        libpotrace0 \
        libptexenc1:amd64 \
        libpython-stdlib:amd64 \
        libpython2.7:amd64 \
        libpython2.7-minimal:amd64 \
        libpython2.7-stdlib:amd64 \
        libpython3-stdlib:amd64 \
        libpython3.5-minimal:amd64 \
        libpython3.5-stdlib:amd64 \
        libquadmath0:amd64 \
        libroken18-heimdal:amd64 \
        librpm3 \
        librpmbuild3 \
        librpmio3 \
        librpmsign3 \
        librtmp1:amd64 \
        libruby2.3:amd64 \
        libsasl2-2:amd64 \
        libsasl2-modules:amd64 \
        libsasl2-modules-db:amd64 \
        libsensors4:amd64 \
        libserf-1-1:amd64 \
        libsm6:amd64 \
        libsmbclient:amd64 \
        libsnmp-base \
        libsnmp30:amd64 \
        libsqlite3-0:amd64 \
        libssh-4:amd64 \
        libssl1.0.0:amd64 \
        libstdc++-5-dev:amd64 \
        libsvn1:amd64 \
        libsynctex1:amd64 \
        libsys-hostname-long-perl \
        libtalloc2:amd64 \
        libtasn1-6:amd64 \
        libtcl8.6:amd64 \
        libtdb1:amd64 \
        libtevent0:amd64 \
        libtexlua52:amd64 \
        libtexluajit2:amd64 \
        libtext-iconv-perl \
        libthai-data \
        libthai0:amd64 \
        libtie-ixhash-perl \
        libtiff5:amd64 \
        libtimedate-perl \
        libtk8.6:amd64 \
        libtsan0:amd64 \
        libtxc-dxtn-s2tc0:amd64 \
        libubsan0:amd64 \
        libunistring0:amd64 \
        liburi-perl \
        libutempter0:amd64 \
        libvpx3:amd64 \
        libwbclient0:amd64 \
        libwhisker2-perl \
        libwind0-heimdal:amd64 \
        libwrap0:amd64 \
        libwww-perl \
        libwww-robotrules-perl \
        libx11-6:amd64 \
        libx11-data \
        libx11-protocol-perl \
        libx11-xcb1:amd64 \
        libxau6:amd64 \
        libxaw7:amd64 \
        libxcb-dri2-0:amd64 \
        libxcb-dri3-0:amd64 \
        libxcb-glx0:amd64 \
        libxcb-present0:amd64 \
        libxcb-render0:amd64 \
        libxcb-shape0:amd64 \
        libxcb-shm0:amd64 \
        libxcb-sync1:amd64 \
        libxcb1:amd64 \
        libxcomposite1:amd64 \
        libxcursor1:amd64 \
        libxdamage1:amd64 \
        libxdmcp6:amd64 \
        libxext6:amd64 \
        libxfixes3:amd64 \
        libxft2:amd64 \
        libxi6:amd64 \
        libxinerama1:amd64 \
        libxml-parser-perl \
        libxml-twig-perl \
        libxml-xpathengine-perl \
        libxml2:amd64 \
        libxmu6:amd64 \
        libxmuu1:amd64 \
        libxpm4:amd64 \
        libxrandr2:amd64 \
        libxrender1:amd64 \
        libxshmfence1:amd64 \
        libxslt1.1:amd64 \
        libxss1:amd64 \
        libxt6:amd64 \
        libxtables11:amd64 \
        libxtst6:amd64 \
        libxv1:amd64 \
        libxxf86dga1:amd64 \
        libxxf86vm1:amd64 \
        libyaml-0-2:amd64 \
        libyaml-tiny-perl \
        libzzip-0-13:amd64 \
        linux-libc-dev:amd64 \
        lmodern \
        lua-lpeg:amd64 \
        make \
        man-db \
        manpages \
        manpages-dev \
        mime-support \
        ndiff \
        net-tools \
        netbase \
        nikto \
        nmap \
        nsis \
        nsis-common \
        openssh-client \
        openssl \
        openvas9 \
        openvas9-cli \
        openvas9-gsa \
        openvas9-manager \
        openvas9-scanner \
        patch \
        perl \
        perl-modules-5.22 \
        pinentry-curses \
        po-debconf \
        poppler-data \
        postfix \
        preview-latex-style \
        prosper \
        ps2eps \
        python \
        python-beautifulsoup \
        python-bs4 \
        python-cairo \
        python-cffi-backend \
        python-chardet \
        python-crypto \
        python-cryptography \
        python-defusedxml \
        python-enum34 \
        python-gi \
        python-gobject \
        python-gobject-2 \
        python-gtk2 \
        python-gtksourceview2 \
        python-html5lib \
        python-idna \
        python-ipaddress \
        python-ldb \
        python-lxml \
        python-minimal \
        python-ndg-httpsclient \
        python-openssl \
        python-pkg-resources \
        python-pyasn1 \
        python-pypdf \
        python-pysqlite2 \
        python-requests \
        python-samba \
        python-scapy \
        python-simplejson \
        python-six \
        python-soappy \
        python-svn \
        python-talloc \
        python-tdb \
        python-urllib3 \
        python-wstools \
        python2.7 \
        python2.7-minimal \
        python3 \
        python3-minimal \
        python3.5 \
        python3.5-minimal \
        rake \
        redis-server \
        redis-tools \
        rename \
        rpm \
        rpm-common \
        rpm2cpio \
        rsync \
        ruby \
        ruby-did-you-mean \
        ruby-minitest \
        ruby-net-telnet \
        ruby-power-assert \
        ruby-test-unit \
        ruby2.3 \
        rubygems-integration \
        samba-common \
        samba-common-bin \
        samba-libs:amd64 \
        sgml-base \
        shared-mime-info \
        smbclient \
        socat \
        sqlite3 \
        sshpass \
        ssl-cert \
        t1utils \
        tcl \
        tcl8.6 \
        tcpd \
        tex-common \
        tex-gyre \
        texlive-base \
        texlive-binaries \
        texlive-extra-utils \
        texlive-font-utils \
        texlive-fonts-recommended \
        texlive-fonts-recommended-doc \
        texlive-generic-recommended \
        texlive-latex-base \
        texlive-latex-extra \
        texlive-latex-recommended \
        texlive-pictures \
        texlive-pstricks \
        tipa \
        tk \
        tk8.6 \
        tzdata \
        ucf \
        unzip \
        w3af \
        w3af-console \
        wapiti \
        wget \
        x11-common \
        x11-utils \
        x11-xserver-utils \
        xauth \
        xbitmaps \
        xdg-utils \
        xml-core \
        xsltproc \
        xterm \
        xz-utils \
        zip \
    -yq --no-install-recommends && \
    rm -rf /var/lib/apt/lists/*

RUN wget -q https://github.com/Arachni/arachni/releases/download/v1.5.1/arachni-1.5.1-0.5.12-linux-x86_64.tar.gz && \
    tar -zxf arachni-1.5.1-0.5.12-linux-x86_64.tar.gz && \
    mv arachni-1.5.1-0.5.12 /opt/arachni && \
    ln -s /opt/arachni/bin/* /usr/local/bin/ && \
    rm -rf arachni*

RUN mkdir -p /var/run/redis && \
    wget -q --no-check-certificate \
    https://svn.wald.intevation.org/svn/openvas/branches/tools-attic/openvas-check-setup \
      -O /openvas-check-setup && \
    chmod +x /openvas-check-setup && \
    sed -i 's/DAEMON_ARGS=""""/DAEMON_ARGS=""-a 0.0.0.0""/' /etc/init.d/openvas-manager && \
    sed -i 's/DAEMON_ARGS=""""/DAEMON_ARGS=""--mlisten 127.0.0.1 -m 9390 --gnutls-priorities=SECURE128:-AES-128-CBC:-CAMELLIA-128-CBC:-VERS-SSL3.0:-VERS-TLS1.0""/' /etc/init.d/openvas-gsa && \
    sed -i '/^\[ -n ""$HTTP_STS_MAX_AGE"" \]/a[ -n ""$PUBLIC_HOSTNAME"" ] && DAEMON_ARGS=""$DAEMON_ARGS --allow-header-host=$PUBLIC_HOSTNAME""' /etc/init.d/openvas-gsa && \
    sed -i 's/PORT_NUMBER=4000/PORT_NUMBER=443/' /etc/default/openvas-gsa && \
    greenbone-nvt-sync > /dev/null && \
    greenbone-scapdata-sync > /dev/null && \
    greenbone-certdata-sync > /dev/null && \
    BUILD=true /start && \
    service openvas-scanner stop && \
    service openvas-manager stop && \
    service openvas-gsa stop && \
    service redis-server stop


ENV BUILD=""""

CMD /start

EXPOSE 443 9390
"
286,e56c2c6e5413bdfabe66445b0fba90e900dc390f,Bumped source to 20220628-543810d,"Bumped source to 20220628-543810d
","FROM ghcr.io/dock0/arch:20220628-9db612f
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM ghcr.io/dock0/arch:20220628-543810d
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel vim-minimal tree
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
2149,a1f1d86fae645c232a4db6cdd2a96673d5c9ff97,bp-node(deps): bump kyma-project/test-infra/bootstrap (#5345),"bp-node(deps): bump kyma-project/test-infra/bootstrap (#5345)

Bumps kyma-project/test-infra/bootstrap from v20220310-2b410ea6 to v20220427-9543160d.

---
updated-dependencies:
- dependency-name: kyma-project/test-infra/bootstrap
  dependency-type: direct:production
...

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <1c358da00a777d4e9898c1280ab801e2df165188@users.noreply.github.com>","# Basic node buildpack

FROM eu.gcr.io/kyma-project/test-infra/bootstrap:v20220310-2b410ea6

# Commit details

ARG commit
ENV IMAGE_COMMIT=$commit
LABEL io.kyma-project.test-infra.commit=$commit

SHELL [""/bin/bash"", ""-o"", ""pipefail"", ""-c""]
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
RUN echo ""deb https://dl.yarnpkg.com/debian/ stable main"" | tee /etc/apt/sources.list.d/yarn.list

RUN curl -sL https://deb.nodesource.com/setup_12.x | bash -
RUN apt-get update && apt-get install -y --no-install-recommends \
    libfontconfig1 \
    procps \
    nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN npm install -g eslint-config-react-app@^3.0.4 \
    babel-eslint@^9.0.0 \
    eslint@^5.6.1 \
    eslint-plugin-flowtype@^2.50.3 \
    eslint-plugin-import@^2.14.0 \
    eslint-plugin-jsx-a11y@^6.1.2 \
    eslint-plugin-react@^7.11.1 \
    tslint@^5.11.0 \
    tslint-angular@^1.1.2 \
    tslint-config-prettier@^1.15.0 \
    typescript@^3.1.3 \
    prettier@^1.14.3

COPY ./license-puller.sh /license-puller.sh
ENV LICENSE_PULLER_PATH=/license-puller.sh

# Prow Tools
# hadolint ignore=DL3022
COPY --from=eu.gcr.io/kyma-project/test-infra/prow-tools:v20210401-294e46e5 /prow-tools /prow-tools
# for better access to prow-tools
ENV PATH=$PATH:/prow-tools
",
309,92c63c28a1ec73cdee180827276b37716da4a969,Bumped source to 20210826-bf67c40,"Bumped source to 20210826-bf67c40
","FROM docker.pkg.github.com/dock0/arch/arch:20210826-6120aac
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
","FROM docker.pkg.github.com/dock0/arch/arch:20210826-bf67c40
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --needed --noconfirm base-devel musl vim-minimal tree openssh
ENV EDITOR vim
WORKDIR /opt/build
CMD [""make"", ""local""]
"
209,d0682a1889f1ef9c9cab82c099db663af030fe85,Bumped source to 20200224-3fe2701,"Bumped source to 20200224-3fe2701
","FROM docker.pkg.github.com/dock0/service/service:20200224-c3b0df9
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200224-3fe2701
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
87,f75252caa3585db15961f07d37f4613d0d8545ef,Bumped source to 20200914-83234c8,"Bumped source to 20200914-83234c8
","FROM docker.pkg.github.com/dock0/service/service:20200914-4a8a10b
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
","FROM docker.pkg.github.com/dock0/service/service:20200914-83234c8
MAINTAINER akerl <me@lesaker.org>
RUN pacman -S --noconfirm --needed openssh

ENV ADMIN akerl
ENV KEY_URL https://id-ed25519.pub/groups/default.txt

RUN useradd -d /var/lib/ssh -M ssh_key_sync
RUN mkdir -m=0700 /var/lib/ssh && chown ssh_key_sync /var/lib/ssh
RUN echo ""$KEY_URL"" > /var/lib/ssh/key_url
ADD sshd_config /etc/ssh/sshd_config
ADD run /service/sshd/run
ADD sync /var/lib/ssh/sync

RUN groupadd remote
RUN useradd -d ""/home/$ADMIN"" -G remote -m ""$ADMIN""
RUN passwd -d ""$ADMIN""
"
147,079764d507f6d3f5a8c25ecc557cb3d10d5a7d07,Dockerfile updated to include Getopt::Long,Dockerfile updated to include Getopt::Long,"FROM ubuntu:14.04

# install base packages
RUN apt-get update && apt-get install -y wget git g++ make zlib1g-dev bc

# Change workdir
WORKDIR /opt
RUN git clone https://github.com/raunaq-m/MLEHaplo.git

# Install multi-dsk
WORKDIR /opt/MLEHaplo/multi-dsk
RUN make k=64

# Install packages for perl scripts
RUN apt-get install -y curl
RUN curl -L https://cpanmin.us | perl - --sudo App::cpanminus
RUN cpanm Graph
RUN apt-get install -y libexpat1-dev
RUN cpanm XML::Parser
RUN cpanm Bio::SeqIO
# RUN cpanm --force Net::SSLeay
# RUN cpanm IO::Socket::SSL
# RUN cpanm LWP::Protocol::https
# RUN cpanm Bio::DB::GenBank
# RUN cpanm Bio::DB::GenPept
# RUN cpanm --force Bio::Perl


WORKDIR /opt/MLEHaplo

COPY Dockerfile /opt/
LABEL maintainer=""li.weiling.1112@gmail.com""
LABEL author=""raunaq.123@gmail.com""

","FROM ubuntu:14.04

# install base packages
RUN apt-get update && apt-get install -y wget git g++ make zlib1g-dev bc

# Change workdir
WORKDIR /opt
RUN git clone https://github.com/raunaq-m/MLEHaplo.git

# Install multi-dsk
WORKDIR /opt/MLEHaplo/multi-dsk
RUN make k=64

# Install packages for perl scripts
RUN apt-get install -y curl
RUN curl -L https://cpanmin.us | perl - --sudo App::cpanminus
RUN cpanm Graph
RUN apt-get install -y libexpat1-dev
RUN cpanm XML::Parser
RUN cpanm Bio::SeqIO
RUN cpanm Getopt::Long
# RUN cpanm --force Net::SSLeay
# RUN cpanm IO::Socket::SSL
# RUN cpanm LWP::Protocol::https
# RUN cpanm Bio::DB::GenBank
# RUN cpanm Bio::DB::GenPept
# RUN cpanm --force Bio::Perl


WORKDIR /opt/MLEHaplo

COPY Dockerfile /opt/
LABEL maintainer=""li.weiling.1112@gmail.com""
LABEL author=""raunaq.123@gmail.com""

"
208,02f51d7446531d8ae793bf264b5818dcd445e59d,update,"update
","FROM php:7.1.5-fpm-alpine

WORKDIR /var/www/html
RUN apk update --no-cache &&
    apk add --no-cache \
                nodejs \
                git \
                python

RUN docker-php-ext-install \
mcrypt \
zip \
gettext \
bz2 \
gd

COPY . /var/www/html
RUN npm install && gulp --production

CMD [""sh"",""/usr/bin/docker-start.sh""]","# FROM php:7.1.5-fpm-alpine
FROM keittirat/nds-php7:latest
WORKDIR /var/www/html
RUN apk update --no-cache && apk add --no-cache \
                nodejs \
                git \
                python2
# RUN apk update --no-cache && apk add --no-cache \
#                 nodejs \
#                 git \
#                 python

# RUN docker-php-ext-install \
# mcrypt \
# zip \
# gettext \
# bz2 \
# gd

COPY . /var/www/html
RUN npm install && gulp --production

CMD [""sh"",""/usr/bin/docker-start.sh""]"
114,03a3f531b158ccde1d0c7e996335714c115bf78f,Updated docker,"Updated docker
","# Start with a Python image.
FROM python:3-alpine

# Set default required environment variables
ENV PYTHONUNBUFFERED 1

ENV DBENGINE sqlite3
ENV DBNAME /code/dblocal.sqlite3
ENV DBHOST None
ENV DBPORT None
ENV DBUSER None
ENV DBPASSWORD None

ENV SUNAME super 
ENV SUEMAIL super@super.com
ENV SUPASS super

ENV MQHOST None
ENV MQUSER None
ENV MQPASSWORD None
ENV MQRESTSERVER '127.0.0.1'
ENV MQRESTPORT 8000

# Install some necessary things.
RUN apt-get update
RUN apt-get install -y swig libssl-dev dpkg-dev netcat libmysqlclient-dev

# Install dependencies not in requirements.txt
RUN pip install -U pip
RUN pip install uwsgi mysqlclient psycopg2

# Copy all our files into the image.
RUN git clone https://github.com/Semprini/cbe-retail.git /code
WORKDIR /code
RUN pip install -Ur requirements.txt

# Collect our static media
RUN python manage.py collectstatic --noinput

# Specify the command to run when the image is run.
RUN [""chmod"", ""+x"", ""/code/manage_run.sh""]
#RUN [""chmod"", ""+x"", ""/code/manage.py""]
CMD [""/code/manage_run.sh""]
","# Start with a Python image.
FROM python:3-alpine

# Set default required environment variables
ENV PYTHONUNBUFFERED 1

ENV DBENGINE sqlite3
ENV DBNAME /code/dblocal.sqlite3
ENV DBHOST None
ENV DBPORT None
ENV DBUSER None
ENV DBPASSWORD None

ENV SUNAME super 
ENV SUEMAIL super@super.com
ENV SUPASS super

ENV MQHOST None
ENV MQUSER None
ENV MQPASSWORD None
ENV MQRESTSERVER '127.0.0.1'
ENV MQRESTPORT 8000

# Install some necessary things.
RUN apk update
RUN apk add swig libssl-dev dpkg-dev netcat libmysqlclient-dev

# Install dependencies not in requirements.txt
RUN pip install -U pip
RUN pip install uwsgi mysqlclient psycopg2

# Copy all our files into the image.
RUN git clone https://github.com/Semprini/cbe-retail.git /code
WORKDIR /code
RUN pip install -Ur requirements.txt

# Collect our static media
RUN python manage.py collectstatic --noinput

# Specify the command to run when the image is run.
RUN [""chmod"", ""+x"", ""/code/manage_run.sh""]
#RUN [""chmod"", ""+x"", ""/code/manage.py""]
CMD [""/code/manage_run.sh""]
"
